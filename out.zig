pub const std = @import("std");
pub const id = *opaque {};
pub const SEL = *opaque {};
pub const Class = *opaque {};
pub const Protocol = opaque {};
pub const IMP = *opaque {};
pub const NSZone = opaque {};
pub extern fn objc_msgSend() void;
pub extern fn objc_lookUpClass(name: [*:0]const u8) Class;
pub extern fn objc_getClass(name: [*:0]const u8) id;
pub extern fn sel_registerName(str: [*:0]const u8) SEL;
pub extern fn objc_allocateClassPair(superclass: Class, name: [*:0]const u8, extra_bytes: usize) Class;
pub extern fn class_addMethod(class: Class, sel: SEL, imp: IMP, types: [*:0]const u8) bool;

pub const NSImage = opaque{};

pub const CachedClass = struct {
    name: [*:0]const u8,
    class: ?Class = null,

    pub fn init(name: [*:0]const u8) CachedClass {
        return .{ .name = name };
    }

    pub fn get(self: *CachedClass) Class {
        if (self.class == null) {
            self.class = objc_lookUpClass(self.name);
        }

        return self.class.?;
    }
};

pub const CachedSelector = struct {
    name: [*:0]const u8,
    sel: ?SEL = null,

    pub fn init(name: [*:0]const u8) CachedSelector {
        return .{ .name = name };
    }

    pub fn get(self: *CachedSelector) SEL {
        if (self.sel == null) {
            self.sel = sel_registerName(self.name);
        }

        return self.sel.?;
    }
};

 pub fn MTLClearColorMake(r: f64, g: f64, b: f64, a: f64) MTLClearColor {return .{.red = r, .green = g, .blue = b, .alpha = a };}

 pub const NSObject = opaque { 
      const Self = @This(); 
      pub usingnamespace NSObjectProtocolMixin(Self, "NSObject");  
      pub usingnamespace NSObjectInterfaceMixin(Self, "NSObject");  
 };
 //pub const NSPortMessage = opaque{};
pub fn NSURLSessionWebSocketDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_URLSession_webSocketTask_didOpenWithProtocol_ = CachedSelector.init("URLSession:webSocketTask:didOpenWithProtocol:");
      pub fn URLSessionwebSocketTaskdidOpenWithProtocol(self: *Self, __session:  * NSURLSession, __webSocketTask:  * NSURLSessionWebSocketTask, __protocol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionWebSocketTask,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_webSocketTask_didOpenWithProtocol_.get(), __session, __webSocketTask, __protocol, );
 }}
var sel_URLSession_webSocketTask_didCloseWithCode_reason_ = CachedSelector.init("URLSession:webSocketTask:didCloseWithCode:reason:");
      pub fn URLSessionwebSocketTaskdidCloseWithCodereason(self: *Self, __session:  * NSURLSession, __webSocketTask:  * NSURLSessionWebSocketTask, __closeCode: NSURLSessionWebSocketCloseCode, __reason:  ?* NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionWebSocketTask, NSURLSessionWebSocketCloseCode,  ?* NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_webSocketTask_didCloseWithCode_reason_.get(), __session, __webSocketTask, __closeCode, __reason, );
 }}
  };
}

pub const NSURLSessionWebSocketDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionWebSocketDelegateProtocolMixin(Self, "NSURLSessionWebSocketDelegate");
  pub usingnamespace NSURLSessionTaskDelegateProtocolMixin(Self, "NSURLSessionWebSocketDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionWebSocketDelegate");
};

pub fn NSItemProviderWritingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_itemProviderVisibilityForRepresentationWithTypeIdentifier_ = CachedSelector.init("itemProviderVisibilityForRepresentationWithTypeIdentifier:");
      pub fn itemProviderVisibilityForRepresentationWithTypeIdentifier(__typeIdentifier:  * NSString, ) NSItemProviderRepresentationVisibility {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) NSItemProviderRepresentationVisibility, @ptrCast(&objc_msgSend))(class.get(), sel_itemProviderVisibilityForRepresentationWithTypeIdentifier_.get(), __typeIdentifier, );
 }}
var sel_loadDataWithTypeIdentifier_forItemProviderCompletionHandler_ = CachedSelector.init("loadDataWithTypeIdentifier:forItemProviderCompletionHandler:");
      pub fn loadDataWithTypeIdentifierforItemProviderCompletionHandler(self: *Self, __typeIdentifier:  * NSString, __completionHandler: ?*u8, )  ?* NSProgress {{
           return @as(*const fn(*Self, SEL,  * NSString, ?*u8, ) callconv(.C)  ?* NSProgress, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadDataWithTypeIdentifier_forItemProviderCompletionHandler_.get(), __typeIdentifier, __completionHandler, );
 }}
var sel_writableTypeIdentifiersForItemProvider = CachedSelector.init("writableTypeIdentifiersForItemProvider");
      pub fn writableTypeIdentifiersForItemProvider()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_writableTypeIdentifiersForItemProvider.get(), );
 }}
  };
}

pub const NSItemProviderWriting = opaque {
  const Self = @This();
  pub usingnamespace NSItemProviderWritingProtocolMixin(Self, "NSItemProviderWriting");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSItemProviderWriting");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSItemProviderWriting");
};

pub fn NSURLConnectionDownloadDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_connection_didWriteData_totalBytesWritten_expectedTotalBytes_ = CachedSelector.init("connection:didWriteData:totalBytesWritten:expectedTotalBytes:");
      pub fn connectiondidWriteDatatotalBytesWrittenexpectedTotalBytes(self: *Self, __connection:  * NSURLConnection, __bytesWritten: c_longlong, __totalBytesWritten: c_longlong, __expectedTotalBytes: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection, c_longlong, c_longlong, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_didWriteData_totalBytesWritten_expectedTotalBytes_.get(), __connection, __bytesWritten, __totalBytesWritten, __expectedTotalBytes, );
 }}
var sel_connectionDidResumeDownloading_totalBytesWritten_expectedTotalBytes_ = CachedSelector.init("connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:");
      pub fn connectionDidResumeDownloadingtotalBytesWrittenexpectedTotalBytes(self: *Self, __connection:  * NSURLConnection, __totalBytesWritten: c_longlong, __expectedTotalBytes: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection, c_longlong, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connectionDidResumeDownloading_totalBytesWritten_expectedTotalBytes_.get(), __connection, __totalBytesWritten, __expectedTotalBytes, );
 }}
var sel_connectionDidFinishDownloading_destinationURL_ = CachedSelector.init("connectionDidFinishDownloading:destinationURL:");
      pub fn connectionDidFinishDownloadingdestinationURL(self: *Self, __connection:  * NSURLConnection, __destinationURL:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connectionDidFinishDownloading_destinationURL_.get(), __connection, __destinationURL, );
 }}
  };
}

pub const NSURLConnectionDownloadDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLConnectionDownloadDelegateProtocolMixin(Self, "NSURLConnectionDownloadDelegate");
  pub usingnamespace NSURLConnectionDelegateProtocolMixin(Self, "NSURLConnectionDownloadDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLConnectionDownloadDelegate");
};

pub fn NSXPCProxyCreatingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_remoteObjectProxy = CachedSelector.init("remoteObjectProxy");
      pub fn remoteObjectProxy(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remoteObjectProxy.get(), );
 }}
var sel_remoteObjectProxyWithErrorHandler_ = CachedSelector.init("remoteObjectProxyWithErrorHandler:");
      pub fn remoteObjectProxyWithErrorHandler(self: *Self, __handler: ?*u8, ) id {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remoteObjectProxyWithErrorHandler_.get(), __handler, );
 }}
var sel_synchronousRemoteObjectProxyWithErrorHandler_ = CachedSelector.init("synchronousRemoteObjectProxyWithErrorHandler:");
      pub fn synchronousRemoteObjectProxyWithErrorHandler(self: *Self, __handler: ?*u8, ) id {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_synchronousRemoteObjectProxyWithErrorHandler_.get(), __handler, );
 }}
  };
}

pub const NSXPCProxyCreating = opaque {
  const Self = @This();
  pub usingnamespace NSXPCProxyCreatingProtocolMixin(Self, "NSXPCProxyCreating");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXPCProxyCreating");
};

pub fn MTLFenceProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
  };
}

pub const MTLFence = opaque {
  const Self = @This();
  pub usingnamespace MTLFenceProtocolMixin(Self, "MTLFence");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFence");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFence");
};

pub fn MTLSamplerStateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_gpuResourceID = CachedSelector.init("gpuResourceID");
      pub fn gpuResourceID(self: *Self, ) MTLResourceID {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceID, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gpuResourceID.get(), );
 }}
  };
}

pub const MTLSamplerState = opaque {
  const Self = @This();
  pub usingnamespace MTLSamplerStateProtocolMixin(Self, "MTLSamplerState");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLSamplerState");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLSamplerState");
};

pub fn MTLDrawableProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_present = CachedSelector.init("present");
      pub fn present(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_present.get(), );
 }}
var sel_presentAtTime_ = CachedSelector.init("presentAtTime:");
      pub fn presentAtTime(self: *Self, __presentationTime: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentAtTime_.get(), __presentationTime, );
 }}
var sel_presentAfterMinimumDuration_ = CachedSelector.init("presentAfterMinimumDuration:");
      pub fn presentAfterMinimumDuration(self: *Self, __duration: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentAfterMinimumDuration_.get(), __duration, );
 }}
var sel_addPresentedHandler_ = CachedSelector.init("addPresentedHandler:");
      pub fn addPresentedHandler(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addPresentedHandler_.get(), __block, );
 }}
var sel_presentedTime = CachedSelector.init("presentedTime");
      pub fn presentedTime(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedTime.get(), );
 }}
var sel_drawableID = CachedSelector.init("drawableID");
      pub fn drawableID(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawableID.get(), );
 }}
  };
}

pub const MTLDrawable = opaque {
  const Self = @This();
  pub usingnamespace MTLDrawableProtocolMixin(Self, "MTLDrawable");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLDrawable");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLDrawable");
};

pub fn MTLIndirectRenderCommandProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setRenderPipelineState_ = CachedSelector.init("setRenderPipelineState:");
      pub fn setRenderPipelineState(self: *Self, __pipelineState:  * MTLRenderPipelineState, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPipelineState, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRenderPipelineState_.get(), __pipelineState, );
 }}
var sel_setVertexBuffer_offset_atIndex_ = CachedSelector.init("setVertexBuffer:offset:atIndex:");
      pub fn setVertexBufferoffsetatIndex(self: *Self, __buffer:  * MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setFragmentBuffer_offset_atIndex_ = CachedSelector.init("setFragmentBuffer:offset:atIndex:");
      pub fn setFragmentBufferoffsetatIndex(self: *Self, __buffer:  * MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setVertexBuffer_offset_attributeStride_atIndex_ = CachedSelector.init("setVertexBuffer:offset:attributeStride:atIndex:");
      pub fn setVertexBufferoffsetattributeStrideatIndex(self: *Self, __buffer:  * MTLBuffer, __offset: c_ulong, __stride: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBuffer_offset_attributeStride_atIndex_.get(), __buffer, __offset, __stride, __index, );
 }}
var sel_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_ = CachedSelector.init("drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:");
      pub fn drawPatchespatchStartpatchCountpatchIndexBufferpatchIndexBufferOffsetinstanceCountbaseInstancetessellationFactorBuffertessellationFactorBufferOffsettessellationFactorBufferInstanceStride(self: *Self, __numberOfPatchControlPoints: c_ulong, __patchStart: c_ulong, __patchCount: c_ulong, __patchIndexBuffer:  ?* MTLBuffer, __patchIndexBufferOffset: c_ulong, __instanceCount: c_ulong, __baseInstance: c_ulong, __buffer:  * MTLBuffer, __offset: c_ulong, __instanceStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, c_ulong,  ?* MTLBuffer, c_ulong, c_ulong, c_ulong,  * MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_.get(), __numberOfPatchControlPoints, __patchStart, __patchCount, __patchIndexBuffer, __patchIndexBufferOffset, __instanceCount, __baseInstance, __buffer, __offset, __instanceStride, );
 }}
var sel_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_ = CachedSelector.init("drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:");
      pub fn drawIndexedPatchespatchStartpatchCountpatchIndexBufferpatchIndexBufferOffsetcontrolPointIndexBuffercontrolPointIndexBufferOffsetinstanceCountbaseInstancetessellationFactorBuffertessellationFactorBufferOffsettessellationFactorBufferInstanceStride(self: *Self, __numberOfPatchControlPoints: c_ulong, __patchStart: c_ulong, __patchCount: c_ulong, __patchIndexBuffer:  ?* MTLBuffer, __patchIndexBufferOffset: c_ulong, __controlPointIndexBuffer:  * MTLBuffer, __controlPointIndexBufferOffset: c_ulong, __instanceCount: c_ulong, __baseInstance: c_ulong, __buffer:  * MTLBuffer, __offset: c_ulong, __instanceStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, c_ulong,  ?* MTLBuffer, c_ulong,  * MTLBuffer, c_ulong, c_ulong, c_ulong,  * MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_.get(), __numberOfPatchControlPoints, __patchStart, __patchCount, __patchIndexBuffer, __patchIndexBufferOffset, __controlPointIndexBuffer, __controlPointIndexBufferOffset, __instanceCount, __baseInstance, __buffer, __offset, __instanceStride, );
 }}
var sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_ = CachedSelector.init("drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:");
      pub fn drawPrimitivesvertexStartvertexCountinstanceCountbaseInstance(self: *Self, __primitiveType: MTLPrimitiveType, __vertexStart: c_ulong, __vertexCount: c_ulong, __instanceCount: c_ulong, __baseInstance: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType, c_ulong, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_.get(), __primitiveType, __vertexStart, __vertexCount, __instanceCount, __baseInstance, );
 }}
var sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_ = CachedSelector.init("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:");
      pub fn drawIndexedPrimitivesindexCountindexTypeindexBufferindexBufferOffsetinstanceCountbaseVertexbaseInstance(self: *Self, __primitiveType: MTLPrimitiveType, __indexCount: c_ulong, __indexType: MTLIndexType, __indexBuffer:  * MTLBuffer, __indexBufferOffset: c_ulong, __instanceCount: c_ulong, __baseVertex: c_long, __baseInstance: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType, c_ulong, MTLIndexType,  * MTLBuffer, c_ulong, c_ulong, c_long, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_.get(), __primitiveType, __indexCount, __indexType, __indexBuffer, __indexBufferOffset, __instanceCount, __baseVertex, __baseInstance, );
 }}
var sel_reset = CachedSelector.init("reset");
      pub fn reset(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reset.get(), );
 }}
  };
}

pub const MTLIndirectRenderCommand = opaque {
  const Self = @This();
  pub usingnamespace MTLIndirectRenderCommandProtocolMixin(Self, "MTLIndirectRenderCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIndirectRenderCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIndirectRenderCommand");
};

pub fn MTLRenderPipelineStateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_imageblockMemoryLengthForDimensions_ = CachedSelector.init("imageblockMemoryLengthForDimensions:");
      pub fn imageblockMemoryLengthForDimensions(self: *Self, __imageblockDimensions: MTLSize, ) c_ulong {{
           return @as(*const fn(*Self, SEL, MTLSize, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_imageblockMemoryLengthForDimensions_.get(), __imageblockDimensions, );
 }}
var sel_functionHandleWithFunction_stage_ = CachedSelector.init("functionHandleWithFunction:stage:");
      pub fn functionHandleWithFunctionstage(self: *Self, __function:  * MTLFunction, __stage: MTLRenderStages, )  ?* MTLFunctionHandle {{
           return @as(*const fn(*Self, SEL,  * MTLFunction, MTLRenderStages, ) callconv(.C)  ?* MTLFunctionHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionHandleWithFunction_stage_.get(), __function, __stage, );
 }}
var sel_newVisibleFunctionTableWithDescriptor_stage_ = CachedSelector.init("newVisibleFunctionTableWithDescriptor:stage:");
      pub fn newVisibleFunctionTableWithDescriptorstage(self: *Self, __descriptor:  * MTLVisibleFunctionTableDescriptor, __stage: MTLRenderStages, )  ?* MTLVisibleFunctionTable {{
           return @as(*const fn(*Self, SEL,  * MTLVisibleFunctionTableDescriptor, MTLRenderStages, ) callconv(.C)  ?* MTLVisibleFunctionTable, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newVisibleFunctionTableWithDescriptor_stage_.get(), __descriptor, __stage, );
 }}
var sel_newIntersectionFunctionTableWithDescriptor_stage_ = CachedSelector.init("newIntersectionFunctionTableWithDescriptor:stage:");
      pub fn newIntersectionFunctionTableWithDescriptorstage(self: *Self, __descriptor:  * MTLIntersectionFunctionTableDescriptor, __stage: MTLRenderStages, )  ?* MTLIntersectionFunctionTable {{
           return @as(*const fn(*Self, SEL,  * MTLIntersectionFunctionTableDescriptor, MTLRenderStages, ) callconv(.C)  ?* MTLIntersectionFunctionTable, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIntersectionFunctionTableWithDescriptor_stage_.get(), __descriptor, __stage, );
 }}
var sel_newRenderPipelineStateWithAdditionalBinaryFunctions_error_ = CachedSelector.init("newRenderPipelineStateWithAdditionalBinaryFunctions:error:");
      pub fn newRenderPipelineStateWithAdditionalBinaryFunctionserror(self: *Self, __additionalBinaryFunctions:  * MTLRenderPipelineFunctionsDescriptor, __an_error:  [*c]  ?* NSError, )  ?* MTLRenderPipelineState {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPipelineFunctionsDescriptor,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLRenderPipelineState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRenderPipelineStateWithAdditionalBinaryFunctions_error_.get(), __additionalBinaryFunctions, __an_error, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_maxTotalThreadsPerThreadgroup = CachedSelector.init("maxTotalThreadsPerThreadgroup");
      pub fn maxTotalThreadsPerThreadgroup(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadsPerThreadgroup.get(), );
 }}
var sel_threadgroupSizeMatchesTileSize = CachedSelector.init("threadgroupSizeMatchesTileSize");
      pub fn threadgroupSizeMatchesTileSize(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadgroupSizeMatchesTileSize.get(), );
 }}
var sel_imageblockSampleLength = CachedSelector.init("imageblockSampleLength");
      pub fn imageblockSampleLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_imageblockSampleLength.get(), );
 }}
var sel_supportIndirectCommandBuffers = CachedSelector.init("supportIndirectCommandBuffers");
      pub fn supportIndirectCommandBuffers(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportIndirectCommandBuffers.get(), );
 }}
var sel_maxTotalThreadsPerObjectThreadgroup = CachedSelector.init("maxTotalThreadsPerObjectThreadgroup");
      pub fn maxTotalThreadsPerObjectThreadgroup(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadsPerObjectThreadgroup.get(), );
 }}
var sel_maxTotalThreadsPerMeshThreadgroup = CachedSelector.init("maxTotalThreadsPerMeshThreadgroup");
      pub fn maxTotalThreadsPerMeshThreadgroup(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadsPerMeshThreadgroup.get(), );
 }}
var sel_objectThreadExecutionWidth = CachedSelector.init("objectThreadExecutionWidth");
      pub fn objectThreadExecutionWidth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectThreadExecutionWidth.get(), );
 }}
var sel_meshThreadExecutionWidth = CachedSelector.init("meshThreadExecutionWidth");
      pub fn meshThreadExecutionWidth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_meshThreadExecutionWidth.get(), );
 }}
var sel_maxTotalThreadgroupsPerMeshGrid = CachedSelector.init("maxTotalThreadgroupsPerMeshGrid");
      pub fn maxTotalThreadgroupsPerMeshGrid(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadgroupsPerMeshGrid.get(), );
 }}
var sel_gpuResourceID = CachedSelector.init("gpuResourceID");
      pub fn gpuResourceID(self: *Self, ) MTLResourceID {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceID, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gpuResourceID.get(), );
 }}
  };
}

pub const MTLRenderPipelineState = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPipelineStateProtocolMixin(Self, "MTLRenderPipelineState");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPipelineState");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPipelineState");
};

pub fn MTLIndirectComputeCommandProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setComputePipelineState_ = CachedSelector.init("setComputePipelineState:");
      pub fn setComputePipelineState(self: *Self, __pipelineState:  * MTLComputePipelineState, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLComputePipelineState, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setComputePipelineState_.get(), __pipelineState, );
 }}
var sel_setKernelBuffer_offset_atIndex_ = CachedSelector.init("setKernelBuffer:offset:atIndex:");
      pub fn setKernelBufferoffsetatIndex(self: *Self, __buffer:  * MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setKernelBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setKernelBuffer_offset_attributeStride_atIndex_ = CachedSelector.init("setKernelBuffer:offset:attributeStride:atIndex:");
      pub fn setKernelBufferoffsetattributeStrideatIndex(self: *Self, __buffer:  * MTLBuffer, __offset: c_ulong, __stride: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setKernelBuffer_offset_attributeStride_atIndex_.get(), __buffer, __offset, __stride, __index, );
 }}
var sel_concurrentDispatchThreadgroups_threadsPerThreadgroup_ = CachedSelector.init("concurrentDispatchThreadgroups:threadsPerThreadgroup:");
      pub fn concurrentDispatchThreadgroupsthreadsPerThreadgroup(self: *Self, __threadgroupsPerGrid: MTLSize, __threadsPerThreadgroup: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSize, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_concurrentDispatchThreadgroups_threadsPerThreadgroup_.get(), __threadgroupsPerGrid, __threadsPerThreadgroup, );
 }}
var sel_concurrentDispatchThreads_threadsPerThreadgroup_ = CachedSelector.init("concurrentDispatchThreads:threadsPerThreadgroup:");
      pub fn concurrentDispatchThreadsthreadsPerThreadgroup(self: *Self, __threadsPerGrid: MTLSize, __threadsPerThreadgroup: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSize, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_concurrentDispatchThreads_threadsPerThreadgroup_.get(), __threadsPerGrid, __threadsPerThreadgroup, );
 }}
var sel_setBarrier = CachedSelector.init("setBarrier");
      pub fn setBarrier(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBarrier.get(), );
 }}
var sel_clearBarrier = CachedSelector.init("clearBarrier");
      pub fn clearBarrier(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_clearBarrier.get(), );
 }}
var sel_setImageblockWidth_height_ = CachedSelector.init("setImageblockWidth:height:");
      pub fn setImageblockWidthheight(self: *Self, __width: c_ulong, __height: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setImageblockWidth_height_.get(), __width, __height, );
 }}
var sel_reset = CachedSelector.init("reset");
      pub fn reset(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reset.get(), );
 }}
var sel_setThreadgroupMemoryLength_atIndex_ = CachedSelector.init("setThreadgroupMemoryLength:atIndex:");
      pub fn setThreadgroupMemoryLengthatIndex(self: *Self, __length: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setThreadgroupMemoryLength_atIndex_.get(), __length, __index, );
 }}
var sel_setStageInRegion_ = CachedSelector.init("setStageInRegion:");
      pub fn setStageInRegion(self: *Self, __region: MTLRegion, ) void {{
           return @as(*const fn(*Self, SEL, MTLRegion, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStageInRegion_.get(), __region, );
 }}
  };
}

pub const MTLIndirectComputeCommand = opaque {
  const Self = @This();
  pub usingnamespace MTLIndirectComputeCommandProtocolMixin(Self, "MTLIndirectComputeCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIndirectComputeCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIndirectComputeCommand");
};

pub fn MTLFunctionStitchingNodeProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const MTLFunctionStitchingNode = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionStitchingNodeProtocolMixin(Self, "MTLFunctionStitchingNode");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionStitchingNode");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLFunctionStitchingNode");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionStitchingNode");
};

pub fn NSURLConnectionDataDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_connection_willSendRequest_redirectResponse_ = CachedSelector.init("connection:willSendRequest:redirectResponse:");
      pub fn connectionwillSendRequestredirectResponse(self: *Self, __connection:  * NSURLConnection, __request:  * NSURLRequest, __response:  ?* NSURLResponse, )  ?* NSURLRequest {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSURLRequest,  ?* NSURLResponse, ) callconv(.C)  ?* NSURLRequest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_willSendRequest_redirectResponse_.get(), __connection, __request, __response, );
 }}
var sel_connection_didReceiveResponse_ = CachedSelector.init("connection:didReceiveResponse:");
      pub fn connectiondidReceiveResponse(self: *Self, __connection:  * NSURLConnection, __response:  * NSURLResponse, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSURLResponse, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_didReceiveResponse_.get(), __connection, __response, );
 }}
var sel_connection_didReceiveData_ = CachedSelector.init("connection:didReceiveData:");
      pub fn connectiondidReceiveData(self: *Self, __connection:  * NSURLConnection, __data:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_didReceiveData_.get(), __connection, __data, );
 }}
var sel_connection_needNewBodyStream_ = CachedSelector.init("connection:needNewBodyStream:");
      pub fn connectionneedNewBodyStream(self: *Self, __connection:  * NSURLConnection, __request:  * NSURLRequest, )  ?* NSInputStream {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSURLRequest, ) callconv(.C)  ?* NSInputStream, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_needNewBodyStream_.get(), __connection, __request, );
 }}
var sel_connection_didSendBodyData_totalBytesWritten_totalBytesExpectedToWrite_ = CachedSelector.init("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:");
      pub fn connectiondidSendBodyDatatotalBytesWrittentotalBytesExpectedToWrite(self: *Self, __connection:  * NSURLConnection, __bytesWritten: c_long, __totalBytesWritten: c_long, __totalBytesExpectedToWrite: c_long, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection, c_long, c_long, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_didSendBodyData_totalBytesWritten_totalBytesExpectedToWrite_.get(), __connection, __bytesWritten, __totalBytesWritten, __totalBytesExpectedToWrite, );
 }}
var sel_connection_willCacheResponse_ = CachedSelector.init("connection:willCacheResponse:");
      pub fn connectionwillCacheResponse(self: *Self, __connection:  * NSURLConnection, __cachedResponse:  * NSCachedURLResponse, )  ?* NSCachedURLResponse {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSCachedURLResponse, ) callconv(.C)  ?* NSCachedURLResponse, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_willCacheResponse_.get(), __connection, __cachedResponse, );
 }}
var sel_connectionDidFinishLoading_ = CachedSelector.init("connectionDidFinishLoading:");
      pub fn connectionDidFinishLoading(self: *Self, __connection:  * NSURLConnection, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connectionDidFinishLoading_.get(), __connection, );
 }}
  };
}

pub const NSURLConnectionDataDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLConnectionDataDelegateProtocolMixin(Self, "NSURLConnectionDataDelegate");
  pub usingnamespace NSURLConnectionDelegateProtocolMixin(Self, "NSURLConnectionDataDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLConnectionDataDelegate");
};

pub fn MTLIOScratchBufferAllocatorProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_newScratchBufferWithMinimumSize_ = CachedSelector.init("newScratchBufferWithMinimumSize:");
      pub fn newScratchBufferWithMinimumSize(self: *Self, __minimumSize: c_ulong, )  ?* MTLIOScratchBuffer {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* MTLIOScratchBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newScratchBufferWithMinimumSize_.get(), __minimumSize, );
 }}
  };
}

pub const MTLIOScratchBufferAllocator = opaque {
  const Self = @This();
  pub usingnamespace MTLIOScratchBufferAllocatorProtocolMixin(Self, "MTLIOScratchBufferAllocator");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOScratchBufferAllocator");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOScratchBufferAllocator");
};

pub fn NSMetadataQueryDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_metadataQuery_replacementObjectForResultObject_ = CachedSelector.init("metadataQuery:replacementObjectForResultObject:");
      pub fn metadataQueryreplacementObjectForResultObject(self: *Self, __query:  * NSMetadataQuery, __result:  * NSMetadataItem, ) id {{
           return @as(*const fn(*Self, SEL,  * NSMetadataQuery,  * NSMetadataItem, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_metadataQuery_replacementObjectForResultObject_.get(), __query, __result, );
 }}
var sel_metadataQuery_replacementValueForAttribute_value_ = CachedSelector.init("metadataQuery:replacementValueForAttribute:value:");
      pub fn metadataQueryreplacementValueForAttributevalue(self: *Self, __query:  * NSMetadataQuery, __attrName:  * NSString, __attrValue: id, ) id {{
           return @as(*const fn(*Self, SEL,  * NSMetadataQuery,  * NSString, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_metadataQuery_replacementValueForAttribute_value_.get(), __query, __attrName, __attrValue, );
 }}
  };
}

pub const NSMetadataQueryDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSMetadataQueryDelegateProtocolMixin(Self, "NSMetadataQueryDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMetadataQueryDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMetadataQueryDelegate");
};

pub fn MTLObjectPayloadBindingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectPayloadAlignment = CachedSelector.init("objectPayloadAlignment");
      pub fn objectPayloadAlignment(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectPayloadAlignment.get(), );
 }}
var sel_objectPayloadDataSize = CachedSelector.init("objectPayloadDataSize");
      pub fn objectPayloadDataSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectPayloadDataSize.get(), );
 }}
  };
}

pub const MTLObjectPayloadBinding = opaque {
  const Self = @This();
  pub usingnamespace MTLObjectPayloadBindingProtocolMixin(Self, "MTLObjectPayloadBinding");
  pub usingnamespace MTLBindingProtocolMixin(Self, "MTLObjectPayloadBinding");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLObjectPayloadBinding");
};

pub fn NSURLAuthenticationChallengeSenderProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_useCredential_forAuthenticationChallenge_ = CachedSelector.init("useCredential:forAuthenticationChallenge:");
      pub fn useCredentialforAuthenticationChallenge(self: *Self, __credential:  * NSURLCredential, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLCredential,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useCredential_forAuthenticationChallenge_.get(), __credential, __challenge, );
 }}
var sel_continueWithoutCredentialForAuthenticationChallenge_ = CachedSelector.init("continueWithoutCredentialForAuthenticationChallenge:");
      pub fn continueWithoutCredentialForAuthenticationChallenge(self: *Self, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_continueWithoutCredentialForAuthenticationChallenge_.get(), __challenge, );
 }}
var sel_cancelAuthenticationChallenge_ = CachedSelector.init("cancelAuthenticationChallenge:");
      pub fn cancelAuthenticationChallenge(self: *Self, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancelAuthenticationChallenge_.get(), __challenge, );
 }}
var sel_performDefaultHandlingForAuthenticationChallenge_ = CachedSelector.init("performDefaultHandlingForAuthenticationChallenge:");
      pub fn performDefaultHandlingForAuthenticationChallenge(self: *Self, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performDefaultHandlingForAuthenticationChallenge_.get(), __challenge, );
 }}
var sel_rejectProtectionSpaceAndContinueWithChallenge_ = CachedSelector.init("rejectProtectionSpaceAndContinueWithChallenge:");
      pub fn rejectProtectionSpaceAndContinueWithChallenge(self: *Self, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rejectProtectionSpaceAndContinueWithChallenge_.get(), __challenge, );
 }}
  };
}

pub const NSURLAuthenticationChallengeSender = opaque {
  const Self = @This();
  pub usingnamespace NSURLAuthenticationChallengeSenderProtocolMixin(Self, "NSURLAuthenticationChallengeSender");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLAuthenticationChallengeSender");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLAuthenticationChallengeSender");
};

pub fn NSMachPortDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_handleMachMessage_ = CachedSelector.init("handleMachMessage:");
      pub fn handleMachMessage(self: *Self, __msg:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_handleMachMessage_.get(), __msg, );
 }}
  };
}

pub const NSMachPortDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSMachPortDelegateProtocolMixin(Self, "NSMachPortDelegate");
  pub usingnamespace NSPortDelegateProtocolMixin(Self, "NSMachPortDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMachPortDelegate");
};

pub fn MTLBufferProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_contents = CachedSelector.init("contents");
      pub fn contents(self: *Self, )  [*c] void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_contents.get(), );
 }}
var sel_didModifyRange_ = CachedSelector.init("didModifyRange:");
      pub fn didModifyRange(self: *Self, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_didModifyRange_.get(), __range, );
 }}
var sel_newTextureWithDescriptor_offset_bytesPerRow_ = CachedSelector.init("newTextureWithDescriptor:offset:bytesPerRow:");
      pub fn newTextureWithDescriptoroffsetbytesPerRow(self: *Self, __descriptor:  * MTLTextureDescriptor, __offset: c_ulong, __bytesPerRow: c_ulong, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL,  * MTLTextureDescriptor, c_ulong, c_ulong, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newTextureWithDescriptor_offset_bytesPerRow_.get(), __descriptor, __offset, __bytesPerRow, );
 }}
var sel_addDebugMarker_range_ = CachedSelector.init("addDebugMarker:range:");
      pub fn addDebugMarkerrange(self: *Self, __marker:  * NSString, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addDebugMarker_range_.get(), __marker, __range, );
 }}
var sel_removeAllDebugMarkers = CachedSelector.init("removeAllDebugMarkers");
      pub fn removeAllDebugMarkers(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllDebugMarkers.get(), );
 }}
var sel_newRemoteBufferViewForDevice_ = CachedSelector.init("newRemoteBufferViewForDevice:");
      pub fn newRemoteBufferViewForDevice(self: *Self, __device:  * MTLDevice, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL,  * MTLDevice, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRemoteBufferViewForDevice_.get(), __device, );
 }}
var sel_length = CachedSelector.init("length");
      pub fn length(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_length.get(), );
 }}
var sel_remoteStorageBuffer = CachedSelector.init("remoteStorageBuffer");
      pub fn remoteStorageBuffer(self: *Self, )  * MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remoteStorageBuffer.get(), );
 }}
var sel_gpuAddress = CachedSelector.init("gpuAddress");
      pub fn gpuAddress(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gpuAddress.get(), );
 }}
  };
}

pub const MTLBuffer = opaque {
  const Self = @This();
  pub usingnamespace MTLBufferProtocolMixin(Self, "MTLBuffer");
  pub usingnamespace MTLResourceProtocolMixin(Self, "MTLBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBuffer");
};

pub fn NSStreamDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stream_handleEvent_ = CachedSelector.init("stream:handleEvent:");
      pub fn streamhandleEvent(self: *Self, __aStream:  * NSStream, __eventCode: NSStreamEvent, ) void {{
           return @as(*const fn(*Self, SEL,  * NSStream, NSStreamEvent, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stream_handleEvent_.get(), __aStream, __eventCode, );
 }}
  };
}

pub const NSStreamDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSStreamDelegateProtocolMixin(Self, "NSStreamDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSStreamDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSStreamDelegate");
};

pub fn NSNetServiceDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_netServiceWillPublish_ = CachedSelector.init("netServiceWillPublish:");
      pub fn netServiceWillPublish(self: *Self, __sender:  * NSNetService, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceWillPublish_.get(), __sender, );
 }}
var sel_netServiceDidPublish_ = CachedSelector.init("netServiceDidPublish:");
      pub fn netServiceDidPublish(self: *Self, __sender:  * NSNetService, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceDidPublish_.get(), __sender, );
 }}
var sel_netService_didNotPublish_ = CachedSelector.init("netService:didNotPublish:");
      pub fn netServicedidNotPublish(self: *Self, __sender:  * NSNetService, __errorDict:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetService,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netService_didNotPublish_.get(), __sender, __errorDict, );
 }}
var sel_netServiceWillResolve_ = CachedSelector.init("netServiceWillResolve:");
      pub fn netServiceWillResolve(self: *Self, __sender:  * NSNetService, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceWillResolve_.get(), __sender, );
 }}
var sel_netServiceDidResolveAddress_ = CachedSelector.init("netServiceDidResolveAddress:");
      pub fn netServiceDidResolveAddress(self: *Self, __sender:  * NSNetService, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceDidResolveAddress_.get(), __sender, );
 }}
var sel_netService_didNotResolve_ = CachedSelector.init("netService:didNotResolve:");
      pub fn netServicedidNotResolve(self: *Self, __sender:  * NSNetService, __errorDict:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetService,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netService_didNotResolve_.get(), __sender, __errorDict, );
 }}
var sel_netServiceDidStop_ = CachedSelector.init("netServiceDidStop:");
      pub fn netServiceDidStop(self: *Self, __sender:  * NSNetService, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceDidStop_.get(), __sender, );
 }}
var sel_netService_didUpdateTXTRecordData_ = CachedSelector.init("netService:didUpdateTXTRecordData:");
      pub fn netServicedidUpdateTXTRecordData(self: *Self, __sender:  * NSNetService, __data:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetService,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netService_didUpdateTXTRecordData_.get(), __sender, __data, );
 }}
var sel_netService_didAcceptConnectionWithInputStream_outputStream_ = CachedSelector.init("netService:didAcceptConnectionWithInputStream:outputStream:");
      pub fn netServicedidAcceptConnectionWithInputStreamoutputStream(self: *Self, __sender:  * NSNetService, __inputStream:  * NSInputStream, __outputStream:  * NSOutputStream, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetService,  * NSInputStream,  * NSOutputStream, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netService_didAcceptConnectionWithInputStream_outputStream_.get(), __sender, __inputStream, __outputStream, );
 }}
  };
}

pub const NSNetServiceDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSNetServiceDelegateProtocolMixin(Self, "NSNetServiceDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNetServiceDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNetServiceDelegate");
};

pub fn MTLCounterSetProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_counters = CachedSelector.init("counters");
      pub fn counters(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_counters.get(), );
 }}
  };
}

pub const MTLCounterSet = opaque {
  const Self = @This();
  pub usingnamespace MTLCounterSetProtocolMixin(Self, "MTLCounterSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCounterSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCounterSet");
};

pub fn MTLFunctionLogProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, ) MTLFunctionLogType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLFunctionLogType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
var sel_encoderLabel = CachedSelector.init("encoderLabel");
      pub fn encoderLabel(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encoderLabel.get(), );
 }}
var sel_function = CachedSelector.init("function");
      pub fn function(self: *Self, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_function.get(), );
 }}
var sel_debugLocation = CachedSelector.init("debugLocation");
      pub fn debugLocation(self: *Self, )  ?* MTLFunctionLogDebugLocation {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunctionLogDebugLocation, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_debugLocation.get(), );
 }}
  };
}

pub const MTLFunctionLog = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionLogProtocolMixin(Self, "MTLFunctionLog");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionLog");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionLog");
};

pub fn MTLVisibleFunctionTableProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setFunction_atIndex_ = CachedSelector.init("setFunction:atIndex:");
      pub fn setFunctionatIndex(self: *Self, __function:  ?* MTLFunctionHandle, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunctionHandle, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunction_atIndex_.get(), __function, __index, );
 }}
var sel_setFunctions_withRange_ = CachedSelector.init("setFunctions:withRange:");
      pub fn setFunctionswithRange(self: *Self, __functions: [*c] ?* MTLFunctionHandle, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLFunctionHandle, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunctions_withRange_.get(), __functions, __range, );
 }}
var sel_gpuResourceID = CachedSelector.init("gpuResourceID");
      pub fn gpuResourceID(self: *Self, ) MTLResourceID {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceID, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gpuResourceID.get(), );
 }}
  };
}

pub const MTLVisibleFunctionTable = opaque {
  const Self = @This();
  pub usingnamespace MTLVisibleFunctionTableProtocolMixin(Self, "MTLVisibleFunctionTable");
  pub usingnamespace MTLResourceProtocolMixin(Self, "MTLVisibleFunctionTable");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLVisibleFunctionTable");
};

pub fn NSKeyedArchiverDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_archiver_willEncodeObject_ = CachedSelector.init("archiver:willEncodeObject:");
      pub fn archiverwillEncodeObject(self: *Self, __archiver:  * NSKeyedArchiver, __object: id, ) id {{
           return @as(*const fn(*Self, SEL,  * NSKeyedArchiver, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_archiver_willEncodeObject_.get(), __archiver, __object, );
 }}
var sel_archiver_didEncodeObject_ = CachedSelector.init("archiver:didEncodeObject:");
      pub fn archiverdidEncodeObject(self: *Self, __archiver:  * NSKeyedArchiver, __object: id, ) void {{
           return @as(*const fn(*Self, SEL,  * NSKeyedArchiver, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_archiver_didEncodeObject_.get(), __archiver, __object, );
 }}
var sel_archiver_willReplaceObject_withObject_ = CachedSelector.init("archiver:willReplaceObject:withObject:");
      pub fn archiverwillReplaceObjectwithObject(self: *Self, __archiver:  * NSKeyedArchiver, __object: id, __newObject: id, ) void {{
           return @as(*const fn(*Self, SEL,  * NSKeyedArchiver, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_archiver_willReplaceObject_withObject_.get(), __archiver, __object, __newObject, );
 }}
var sel_archiverWillFinish_ = CachedSelector.init("archiverWillFinish:");
      pub fn archiverWillFinish(self: *Self, __archiver:  * NSKeyedArchiver, ) void {{
           return @as(*const fn(*Self, SEL,  * NSKeyedArchiver, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_archiverWillFinish_.get(), __archiver, );
 }}
var sel_archiverDidFinish_ = CachedSelector.init("archiverDidFinish:");
      pub fn archiverDidFinish(self: *Self, __archiver:  * NSKeyedArchiver, ) void {{
           return @as(*const fn(*Self, SEL,  * NSKeyedArchiver, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_archiverDidFinish_.get(), __archiver, );
 }}
  };
}

pub const NSKeyedArchiverDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSKeyedArchiverDelegateProtocolMixin(Self, "NSKeyedArchiverDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSKeyedArchiverDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSKeyedArchiverDelegate");
};

pub fn NSFilePresenterProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_relinquishPresentedItemToReader_ = CachedSelector.init("relinquishPresentedItemToReader:");
      pub fn relinquishPresentedItemToReader(self: *Self, __reader: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_relinquishPresentedItemToReader_.get(), __reader, );
 }}
var sel_relinquishPresentedItemToWriter_ = CachedSelector.init("relinquishPresentedItemToWriter:");
      pub fn relinquishPresentedItemToWriter(self: *Self, __writer: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_relinquishPresentedItemToWriter_.get(), __writer, );
 }}
var sel_savePresentedItemChangesWithCompletionHandler_ = CachedSelector.init("savePresentedItemChangesWithCompletionHandler:");
      pub fn savePresentedItemChangesWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_savePresentedItemChangesWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_accommodatePresentedItemDeletionWithCompletionHandler_ = CachedSelector.init("accommodatePresentedItemDeletionWithCompletionHandler:");
      pub fn accommodatePresentedItemDeletionWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_accommodatePresentedItemDeletionWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_presentedItemDidMoveToURL_ = CachedSelector.init("presentedItemDidMoveToURL:");
      pub fn presentedItemDidMoveToURL(self: *Self, __newURL:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedItemDidMoveToURL_.get(), __newURL, );
 }}
var sel_presentedItemDidChange = CachedSelector.init("presentedItemDidChange");
      pub fn presentedItemDidChange(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedItemDidChange.get(), );
 }}
var sel_presentedItemDidChangeUbiquityAttributes_ = CachedSelector.init("presentedItemDidChangeUbiquityAttributes:");
      pub fn presentedItemDidChangeUbiquityAttributes(self: *Self, __attributes:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedItemDidChangeUbiquityAttributes_.get(), __attributes, );
 }}
var sel_presentedItemDidGainVersion_ = CachedSelector.init("presentedItemDidGainVersion:");
      pub fn presentedItemDidGainVersion(self: *Self, __version:  * NSFileVersion, ) void {{
           return @as(*const fn(*Self, SEL,  * NSFileVersion, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedItemDidGainVersion_.get(), __version, );
 }}
var sel_presentedItemDidLoseVersion_ = CachedSelector.init("presentedItemDidLoseVersion:");
      pub fn presentedItemDidLoseVersion(self: *Self, __version:  * NSFileVersion, ) void {{
           return @as(*const fn(*Self, SEL,  * NSFileVersion, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedItemDidLoseVersion_.get(), __version, );
 }}
var sel_presentedItemDidResolveConflictVersion_ = CachedSelector.init("presentedItemDidResolveConflictVersion:");
      pub fn presentedItemDidResolveConflictVersion(self: *Self, __version:  * NSFileVersion, ) void {{
           return @as(*const fn(*Self, SEL,  * NSFileVersion, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedItemDidResolveConflictVersion_.get(), __version, );
 }}
var sel_accommodatePresentedSubitemDeletionAtURL_completionHandler_ = CachedSelector.init("accommodatePresentedSubitemDeletionAtURL:completionHandler:");
      pub fn accommodatePresentedSubitemDeletionAtURLcompletionHandler(self: *Self, __url:  * NSURL, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_accommodatePresentedSubitemDeletionAtURL_completionHandler_.get(), __url, __completionHandler, );
 }}
var sel_presentedSubitemDidAppearAtURL_ = CachedSelector.init("presentedSubitemDidAppearAtURL:");
      pub fn presentedSubitemDidAppearAtURL(self: *Self, __url:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedSubitemDidAppearAtURL_.get(), __url, );
 }}
var sel_presentedSubitemAtURL_didMoveToURL_ = CachedSelector.init("presentedSubitemAtURL:didMoveToURL:");
      pub fn presentedSubitemAtURLdidMoveToURL(self: *Self, __oldURL:  * NSURL, __newURL:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedSubitemAtURL_didMoveToURL_.get(), __oldURL, __newURL, );
 }}
var sel_presentedSubitemDidChangeAtURL_ = CachedSelector.init("presentedSubitemDidChangeAtURL:");
      pub fn presentedSubitemDidChangeAtURL(self: *Self, __url:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedSubitemDidChangeAtURL_.get(), __url, );
 }}
var sel_presentedSubitemAtURL_didGainVersion_ = CachedSelector.init("presentedSubitemAtURL:didGainVersion:");
      pub fn presentedSubitemAtURLdidGainVersion(self: *Self, __url:  * NSURL, __version:  * NSFileVersion, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSFileVersion, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedSubitemAtURL_didGainVersion_.get(), __url, __version, );
 }}
var sel_presentedSubitemAtURL_didLoseVersion_ = CachedSelector.init("presentedSubitemAtURL:didLoseVersion:");
      pub fn presentedSubitemAtURLdidLoseVersion(self: *Self, __url:  * NSURL, __version:  * NSFileVersion, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSFileVersion, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedSubitemAtURL_didLoseVersion_.get(), __url, __version, );
 }}
var sel_presentedSubitemAtURL_didResolveConflictVersion_ = CachedSelector.init("presentedSubitemAtURL:didResolveConflictVersion:");
      pub fn presentedSubitemAtURLdidResolveConflictVersion(self: *Self, __url:  * NSURL, __version:  * NSFileVersion, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSFileVersion, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedSubitemAtURL_didResolveConflictVersion_.get(), __url, __version, );
 }}
var sel_presentedItemURL = CachedSelector.init("presentedItemURL");
      pub fn presentedItemURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedItemURL.get(), );
 }}
var sel_presentedItemOperationQueue = CachedSelector.init("presentedItemOperationQueue");
      pub fn presentedItemOperationQueue(self: *Self, )  * NSOperationQueue {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSOperationQueue, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentedItemOperationQueue.get(), );
 }}
var sel_primaryPresentedItemURL = CachedSelector.init("primaryPresentedItemURL");
      pub fn primaryPresentedItemURL(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_primaryPresentedItemURL.get(), );
 }}
var sel_observedPresentedItemUbiquityAttributes = CachedSelector.init("observedPresentedItemUbiquityAttributes");
      pub fn observedPresentedItemUbiquityAttributes(self: *Self, )  * NSSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_observedPresentedItemUbiquityAttributes.get(), );
 }}
  };
}

pub const NSFilePresenter = opaque {
  const Self = @This();
  pub usingnamespace NSFilePresenterProtocolMixin(Self, "NSFilePresenter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFilePresenter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFilePresenter");
};

pub fn NSURLSessionDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_URLSession_didBecomeInvalidWithError_ = CachedSelector.init("URLSession:didBecomeInvalidWithError:");
      pub fn URLSessiondidBecomeInvalidWithError(self: *Self, __session:  * NSURLSession, __an_error:  ?* NSError, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  ?* NSError, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_didBecomeInvalidWithError_.get(), __session, __an_error, );
 }}
var sel_URLSession_didReceiveChallenge_completionHandler_ = CachedSelector.init("URLSession:didReceiveChallenge:completionHandler:");
      pub fn URLSessiondidReceiveChallengecompletionHandler(self: *Self, __session:  * NSURLSession, __challenge:  * NSURLAuthenticationChallenge, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLAuthenticationChallenge, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_didReceiveChallenge_completionHandler_.get(), __session, __challenge, __completionHandler, );
 }}
var sel_URLSessionDidFinishEventsForBackgroundURLSession_ = CachedSelector.init("URLSessionDidFinishEventsForBackgroundURLSession:");
      pub fn URLSessionDidFinishEventsForBackgroundURLSession(self: *Self, __session:  * NSURLSession, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSessionDidFinishEventsForBackgroundURLSession_.get(), __session, );
 }}
  };
}

pub const NSURLSessionDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionDelegateProtocolMixin(Self, "NSURLSessionDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionDelegate");
};

pub fn NSURLSessionDataDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_URLSession_dataTask_didReceiveResponse_completionHandler_ = CachedSelector.init("URLSession:dataTask:didReceiveResponse:completionHandler:");
      pub fn URLSessiondataTaskdidReceiveResponsecompletionHandler(self: *Self, __session:  * NSURLSession, __dataTask:  * NSURLSessionDataTask, __response:  * NSURLResponse, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionDataTask,  * NSURLResponse, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_dataTask_didReceiveResponse_completionHandler_.get(), __session, __dataTask, __response, __completionHandler, );
 }}
var sel_URLSession_dataTask_didBecomeDownloadTask_ = CachedSelector.init("URLSession:dataTask:didBecomeDownloadTask:");
      pub fn URLSessiondataTaskdidBecomeDownloadTask(self: *Self, __session:  * NSURLSession, __dataTask:  * NSURLSessionDataTask, __downloadTask:  * NSURLSessionDownloadTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionDataTask,  * NSURLSessionDownloadTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_dataTask_didBecomeDownloadTask_.get(), __session, __dataTask, __downloadTask, );
 }}
var sel_URLSession_dataTask_didBecomeStreamTask_ = CachedSelector.init("URLSession:dataTask:didBecomeStreamTask:");
      pub fn URLSessiondataTaskdidBecomeStreamTask(self: *Self, __session:  * NSURLSession, __dataTask:  * NSURLSessionDataTask, __streamTask:  * NSURLSessionStreamTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionDataTask,  * NSURLSessionStreamTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_dataTask_didBecomeStreamTask_.get(), __session, __dataTask, __streamTask, );
 }}
var sel_URLSession_dataTask_didReceiveData_ = CachedSelector.init("URLSession:dataTask:didReceiveData:");
      pub fn URLSessiondataTaskdidReceiveData(self: *Self, __session:  * NSURLSession, __dataTask:  * NSURLSessionDataTask, __data:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionDataTask,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_dataTask_didReceiveData_.get(), __session, __dataTask, __data, );
 }}
var sel_URLSession_dataTask_willCacheResponse_completionHandler_ = CachedSelector.init("URLSession:dataTask:willCacheResponse:completionHandler:");
      pub fn URLSessiondataTaskwillCacheResponsecompletionHandler(self: *Self, __session:  * NSURLSession, __dataTask:  * NSURLSessionDataTask, __proposedResponse:  * NSCachedURLResponse, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionDataTask,  * NSCachedURLResponse, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_dataTask_willCacheResponse_completionHandler_.get(), __session, __dataTask, __proposedResponse, __completionHandler, );
 }}
  };
}

pub const NSURLSessionDataDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionDataDelegateProtocolMixin(Self, "NSURLSessionDataDelegate");
  pub usingnamespace NSURLSessionTaskDelegateProtocolMixin(Self, "NSURLSessionDataDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionDataDelegate");
};

pub fn MTLDeviceProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_newCommandQueue = CachedSelector.init("newCommandQueue");
      pub fn newCommandQueue(self: *Self, )  ?* MTLCommandQueue {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCommandQueue, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newCommandQueue.get(), );
 }}
var sel_newCommandQueueWithMaxCommandBufferCount_ = CachedSelector.init("newCommandQueueWithMaxCommandBufferCount:");
      pub fn newCommandQueueWithMaxCommandBufferCount(self: *Self, __maxCommandBufferCount: c_ulong, )  ?* MTLCommandQueue {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* MTLCommandQueue, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newCommandQueueWithMaxCommandBufferCount_.get(), __maxCommandBufferCount, );
 }}
var sel_heapTextureSizeAndAlignWithDescriptor_ = CachedSelector.init("heapTextureSizeAndAlignWithDescriptor:");
      pub fn heapTextureSizeAndAlignWithDescriptor(self: *Self, __desc:  * MTLTextureDescriptor, ) MTLSizeAndAlign {{
           return @as(*const fn(*Self, SEL,  * MTLTextureDescriptor, ) callconv(.C) MTLSizeAndAlign, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_heapTextureSizeAndAlignWithDescriptor_.get(), __desc, );
 }}
var sel_heapBufferSizeAndAlignWithLength_options_ = CachedSelector.init("heapBufferSizeAndAlignWithLength:options:");
      pub fn heapBufferSizeAndAlignWithLengthoptions(self: *Self, __length: c_ulong, __options: MTLResourceOptions, ) MTLSizeAndAlign {{
           return @as(*const fn(*Self, SEL, c_ulong, MTLResourceOptions, ) callconv(.C) MTLSizeAndAlign, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_heapBufferSizeAndAlignWithLength_options_.get(), __length, __options, );
 }}
var sel_newHeapWithDescriptor_ = CachedSelector.init("newHeapWithDescriptor:");
      pub fn newHeapWithDescriptor(self: *Self, __descriptor:  * MTLHeapDescriptor, )  ?* MTLHeap {{
           return @as(*const fn(*Self, SEL,  * MTLHeapDescriptor, ) callconv(.C)  ?* MTLHeap, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newHeapWithDescriptor_.get(), __descriptor, );
 }}
var sel_newBufferWithLength_options_ = CachedSelector.init("newBufferWithLength:options:");
      pub fn newBufferWithLengthoptions(self: *Self, __length: c_ulong, __options: MTLResourceOptions, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, c_ulong, MTLResourceOptions, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newBufferWithLength_options_.get(), __length, __options, );
 }}
var sel_newBufferWithBytes_length_options_ = CachedSelector.init("newBufferWithBytes:length:options:");
      pub fn newBufferWithByteslengthoptions(self: *Self, __pointer:  [*c]  const void, __length: c_ulong, __options: MTLResourceOptions, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, MTLResourceOptions, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newBufferWithBytes_length_options_.get(), __pointer, __length, __options, );
 }}
var sel_newBufferWithBytesNoCopy_length_options_deallocator_ = CachedSelector.init("newBufferWithBytesNoCopy:length:options:deallocator:");
      pub fn newBufferWithBytesNoCopylengthoptionsdeallocator(self: *Self, __pointer:  [*c] void, __length: c_ulong, __options: MTLResourceOptions, __deallocator: ?*u8, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, MTLResourceOptions, ?*u8, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newBufferWithBytesNoCopy_length_options_deallocator_.get(), __pointer, __length, __options, __deallocator, );
 }}
var sel_newDepthStencilStateWithDescriptor_ = CachedSelector.init("newDepthStencilStateWithDescriptor:");
      pub fn newDepthStencilStateWithDescriptor(self: *Self, __descriptor:  * MTLDepthStencilDescriptor, )  ?* MTLDepthStencilState {{
           return @as(*const fn(*Self, SEL,  * MTLDepthStencilDescriptor, ) callconv(.C)  ?* MTLDepthStencilState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newDepthStencilStateWithDescriptor_.get(), __descriptor, );
 }}
var sel_newTextureWithDescriptor_ = CachedSelector.init("newTextureWithDescriptor:");
      pub fn newTextureWithDescriptor(self: *Self, __descriptor:  * MTLTextureDescriptor, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL,  * MTLTextureDescriptor, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newTextureWithDescriptor_.get(), __descriptor, );
 }}
var sel_newTextureWithDescriptor_iosurface_plane_ = CachedSelector.init("newTextureWithDescriptor:iosurface:plane:");
      pub fn newTextureWithDescriptoriosurfaceplane(self: *Self, __descriptor:  * MTLTextureDescriptor, __iosurface:  [*c] __IOSurface, __plane: c_ulong, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL,  * MTLTextureDescriptor,  [*c] __IOSurface, c_ulong, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newTextureWithDescriptor_iosurface_plane_.get(), __descriptor, __iosurface, __plane, );
 }}
var sel_newSharedTextureWithDescriptor_ = CachedSelector.init("newSharedTextureWithDescriptor:");
      pub fn newSharedTextureWithDescriptor(self: *Self, __descriptor:  * MTLTextureDescriptor, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL,  * MTLTextureDescriptor, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newSharedTextureWithDescriptor_.get(), __descriptor, );
 }}
var sel_newSharedTextureWithHandle_ = CachedSelector.init("newSharedTextureWithHandle:");
      pub fn newSharedTextureWithHandle(self: *Self, __sharedHandle:  * MTLSharedTextureHandle, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL,  * MTLSharedTextureHandle, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newSharedTextureWithHandle_.get(), __sharedHandle, );
 }}
var sel_newSamplerStateWithDescriptor_ = CachedSelector.init("newSamplerStateWithDescriptor:");
      pub fn newSamplerStateWithDescriptor(self: *Self, __descriptor:  * MTLSamplerDescriptor, )  ?* MTLSamplerState {{
           return @as(*const fn(*Self, SEL,  * MTLSamplerDescriptor, ) callconv(.C)  ?* MTLSamplerState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newSamplerStateWithDescriptor_.get(), __descriptor, );
 }}
var sel_newDefaultLibrary = CachedSelector.init("newDefaultLibrary");
      pub fn newDefaultLibrary(self: *Self, )  ?* MTLLibrary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLLibrary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newDefaultLibrary.get(), );
 }}
var sel_newDefaultLibraryWithBundle_error_ = CachedSelector.init("newDefaultLibraryWithBundle:error:");
      pub fn newDefaultLibraryWithBundleerror(self: *Self, __bundle:  * NSBundle, __an_error:  [*c]  ?* NSError, )  ?* MTLLibrary {{
           return @as(*const fn(*Self, SEL,  * NSBundle,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLLibrary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newDefaultLibraryWithBundle_error_.get(), __bundle, __an_error, );
 }}
var sel_newLibraryWithFile_error_ = CachedSelector.init("newLibraryWithFile:error:");
      pub fn newLibraryWithFileerror(self: *Self, __filepath:  * NSString, __an_error:  [*c]  ?* NSError, )  ?* MTLLibrary {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLLibrary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newLibraryWithFile_error_.get(), __filepath, __an_error, );
 }}
var sel_newLibraryWithURL_error_ = CachedSelector.init("newLibraryWithURL:error:");
      pub fn newLibraryWithURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, )  ?* MTLLibrary {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLLibrary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newLibraryWithURL_error_.get(), __url, __an_error, );
 }}
var sel_newLibraryWithData_error_ = CachedSelector.init("newLibraryWithData:error:");
      pub fn newLibraryWithDataerror(self: *Self, __data:  * NSObject, __an_error:  [*c]  ?* NSError, )  ?* MTLLibrary {{
           return @as(*const fn(*Self, SEL,  * NSObject,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLLibrary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newLibraryWithData_error_.get(), __data, __an_error, );
 }}
var sel_newLibraryWithSource_options_error_ = CachedSelector.init("newLibraryWithSource:options:error:");
      pub fn newLibraryWithSourceoptionserror(self: *Self, __source:  * NSString, __options:  ?* MTLCompileOptions, __an_error:  [*c]  ?* NSError, )  ?* MTLLibrary {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* MTLCompileOptions,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLLibrary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newLibraryWithSource_options_error_.get(), __source, __options, __an_error, );
 }}
var sel_newLibraryWithSource_options_completionHandler_ = CachedSelector.init("newLibraryWithSource:options:completionHandler:");
      pub fn newLibraryWithSourceoptionscompletionHandler(self: *Self, __source:  * NSString, __options:  ?* MTLCompileOptions, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* MTLCompileOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newLibraryWithSource_options_completionHandler_.get(), __source, __options, __completionHandler, );
 }}
var sel_newLibraryWithStitchedDescriptor_error_ = CachedSelector.init("newLibraryWithStitchedDescriptor:error:");
      pub fn newLibraryWithStitchedDescriptorerror(self: *Self, __descriptor:  * MTLStitchedLibraryDescriptor, __an_error:  [*c]  ?* NSError, )  ?* MTLLibrary {{
           return @as(*const fn(*Self, SEL,  * MTLStitchedLibraryDescriptor,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLLibrary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newLibraryWithStitchedDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_newLibraryWithStitchedDescriptor_completionHandler_ = CachedSelector.init("newLibraryWithStitchedDescriptor:completionHandler:");
      pub fn newLibraryWithStitchedDescriptorcompletionHandler(self: *Self, __descriptor:  * MTLStitchedLibraryDescriptor, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLStitchedLibraryDescriptor, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newLibraryWithStitchedDescriptor_completionHandler_.get(), __descriptor, __completionHandler, );
 }}
var sel_newRenderPipelineStateWithDescriptor_error_ = CachedSelector.init("newRenderPipelineStateWithDescriptor:error:");
      pub fn newRenderPipelineStateWithDescriptorerror(self: *Self, __descriptor:  * MTLRenderPipelineDescriptor, __an_error:  [*c]  ?* NSError, )  ?* MTLRenderPipelineState {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPipelineDescriptor,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLRenderPipelineState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRenderPipelineStateWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_newRenderPipelineStateWithDescriptor_options_reflection_error_ = CachedSelector.init("newRenderPipelineStateWithDescriptor:options:reflection:error:");
      pub fn newRenderPipelineStateWithDescriptoroptionsreflectionerror(self: *Self, __descriptor:  * MTLRenderPipelineDescriptor, __options: MTLPipelineOption, __reflection:  [*c]  ?* MTLRenderPipelineReflection, __an_error:  [*c]  ?* NSError, )  ?* MTLRenderPipelineState {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPipelineDescriptor, MTLPipelineOption,  [*c]  ?* MTLRenderPipelineReflection,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLRenderPipelineState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRenderPipelineStateWithDescriptor_options_reflection_error_.get(), __descriptor, __options, __reflection, __an_error, );
 }}
var sel_newRenderPipelineStateWithDescriptor_completionHandler_ = CachedSelector.init("newRenderPipelineStateWithDescriptor:completionHandler:");
      pub fn newRenderPipelineStateWithDescriptorcompletionHandler(self: *Self, __descriptor:  * MTLRenderPipelineDescriptor, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPipelineDescriptor, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRenderPipelineStateWithDescriptor_completionHandler_.get(), __descriptor, __completionHandler, );
 }}
var sel_newRenderPipelineStateWithDescriptor_options_completionHandler_ = CachedSelector.init("newRenderPipelineStateWithDescriptor:options:completionHandler:");
      pub fn newRenderPipelineStateWithDescriptoroptionscompletionHandler(self: *Self, __descriptor:  * MTLRenderPipelineDescriptor, __options: MTLPipelineOption, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPipelineDescriptor, MTLPipelineOption, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRenderPipelineStateWithDescriptor_options_completionHandler_.get(), __descriptor, __options, __completionHandler, );
 }}
var sel_newComputePipelineStateWithFunction_error_ = CachedSelector.init("newComputePipelineStateWithFunction:error:");
      pub fn newComputePipelineStateWithFunctionerror(self: *Self, __computeFunction:  * MTLFunction, __an_error:  [*c]  ?* NSError, )  ?* MTLComputePipelineState {{
           return @as(*const fn(*Self, SEL,  * MTLFunction,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLComputePipelineState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newComputePipelineStateWithFunction_error_.get(), __computeFunction, __an_error, );
 }}
var sel_newComputePipelineStateWithFunction_options_reflection_error_ = CachedSelector.init("newComputePipelineStateWithFunction:options:reflection:error:");
      pub fn newComputePipelineStateWithFunctionoptionsreflectionerror(self: *Self, __computeFunction:  * MTLFunction, __options: MTLPipelineOption, __reflection:  [*c]  ?* MTLComputePipelineReflection, __an_error:  [*c]  ?* NSError, )  ?* MTLComputePipelineState {{
           return @as(*const fn(*Self, SEL,  * MTLFunction, MTLPipelineOption,  [*c]  ?* MTLComputePipelineReflection,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLComputePipelineState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newComputePipelineStateWithFunction_options_reflection_error_.get(), __computeFunction, __options, __reflection, __an_error, );
 }}
var sel_newComputePipelineStateWithFunction_completionHandler_ = CachedSelector.init("newComputePipelineStateWithFunction:completionHandler:");
      pub fn newComputePipelineStateWithFunctioncompletionHandler(self: *Self, __computeFunction:  * MTLFunction, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFunction, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newComputePipelineStateWithFunction_completionHandler_.get(), __computeFunction, __completionHandler, );
 }}
var sel_newComputePipelineStateWithFunction_options_completionHandler_ = CachedSelector.init("newComputePipelineStateWithFunction:options:completionHandler:");
      pub fn newComputePipelineStateWithFunctionoptionscompletionHandler(self: *Self, __computeFunction:  * MTLFunction, __options: MTLPipelineOption, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFunction, MTLPipelineOption, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newComputePipelineStateWithFunction_options_completionHandler_.get(), __computeFunction, __options, __completionHandler, );
 }}
var sel_newComputePipelineStateWithDescriptor_options_reflection_error_ = CachedSelector.init("newComputePipelineStateWithDescriptor:options:reflection:error:");
      pub fn newComputePipelineStateWithDescriptoroptionsreflectionerror(self: *Self, __descriptor:  * MTLComputePipelineDescriptor, __options: MTLPipelineOption, __reflection:  [*c]  ?* MTLComputePipelineReflection, __an_error:  [*c]  ?* NSError, )  ?* MTLComputePipelineState {{
           return @as(*const fn(*Self, SEL,  * MTLComputePipelineDescriptor, MTLPipelineOption,  [*c]  ?* MTLComputePipelineReflection,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLComputePipelineState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newComputePipelineStateWithDescriptor_options_reflection_error_.get(), __descriptor, __options, __reflection, __an_error, );
 }}
var sel_newComputePipelineStateWithDescriptor_options_completionHandler_ = CachedSelector.init("newComputePipelineStateWithDescriptor:options:completionHandler:");
      pub fn newComputePipelineStateWithDescriptoroptionscompletionHandler(self: *Self, __descriptor:  * MTLComputePipelineDescriptor, __options: MTLPipelineOption, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLComputePipelineDescriptor, MTLPipelineOption, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newComputePipelineStateWithDescriptor_options_completionHandler_.get(), __descriptor, __options, __completionHandler, );
 }}
var sel_newFence = CachedSelector.init("newFence");
      pub fn newFence(self: *Self, )  ?* MTLFence {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFence, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newFence.get(), );
 }}
var sel_supportsFeatureSet_ = CachedSelector.init("supportsFeatureSet:");
      pub fn supportsFeatureSet(self: *Self, __featureSet: MTLFeatureSet, ) c_int {{
           return @as(*const fn(*Self, SEL, MTLFeatureSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsFeatureSet_.get(), __featureSet, );
 }}
var sel_supportsFamily_ = CachedSelector.init("supportsFamily:");
      pub fn supportsFamily(self: *Self, __gpuFamily: MTLGPUFamily, ) c_int {{
           return @as(*const fn(*Self, SEL, MTLGPUFamily, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsFamily_.get(), __gpuFamily, );
 }}
var sel_supportsTextureSampleCount_ = CachedSelector.init("supportsTextureSampleCount:");
      pub fn supportsTextureSampleCount(self: *Self, __sampleCount: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsTextureSampleCount_.get(), __sampleCount, );
 }}
var sel_minimumLinearTextureAlignmentForPixelFormat_ = CachedSelector.init("minimumLinearTextureAlignmentForPixelFormat:");
      pub fn minimumLinearTextureAlignmentForPixelFormat(self: *Self, __format: MTLPixelFormat, ) c_ulong {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minimumLinearTextureAlignmentForPixelFormat_.get(), __format, );
 }}
var sel_minimumTextureBufferAlignmentForPixelFormat_ = CachedSelector.init("minimumTextureBufferAlignmentForPixelFormat:");
      pub fn minimumTextureBufferAlignmentForPixelFormat(self: *Self, __format: MTLPixelFormat, ) c_ulong {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minimumTextureBufferAlignmentForPixelFormat_.get(), __format, );
 }}
var sel_newRenderPipelineStateWithTileDescriptor_options_reflection_error_ = CachedSelector.init("newRenderPipelineStateWithTileDescriptor:options:reflection:error:");
      pub fn newRenderPipelineStateWithTileDescriptoroptionsreflectionerror(self: *Self, __descriptor:  * MTLTileRenderPipelineDescriptor, __options: MTLPipelineOption, __reflection:  [*c]  ?* MTLRenderPipelineReflection, __an_error:  [*c]  ?* NSError, )  ?* MTLRenderPipelineState {{
           return @as(*const fn(*Self, SEL,  * MTLTileRenderPipelineDescriptor, MTLPipelineOption,  [*c]  ?* MTLRenderPipelineReflection,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLRenderPipelineState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRenderPipelineStateWithTileDescriptor_options_reflection_error_.get(), __descriptor, __options, __reflection, __an_error, );
 }}
var sel_newRenderPipelineStateWithTileDescriptor_options_completionHandler_ = CachedSelector.init("newRenderPipelineStateWithTileDescriptor:options:completionHandler:");
      pub fn newRenderPipelineStateWithTileDescriptoroptionscompletionHandler(self: *Self, __descriptor:  * MTLTileRenderPipelineDescriptor, __options: MTLPipelineOption, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTileRenderPipelineDescriptor, MTLPipelineOption, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRenderPipelineStateWithTileDescriptor_options_completionHandler_.get(), __descriptor, __options, __completionHandler, );
 }}
var sel_newRenderPipelineStateWithMeshDescriptor_options_reflection_error_ = CachedSelector.init("newRenderPipelineStateWithMeshDescriptor:options:reflection:error:");
      pub fn newRenderPipelineStateWithMeshDescriptoroptionsreflectionerror(self: *Self, __descriptor:  * MTLMeshRenderPipelineDescriptor, __options: MTLPipelineOption, __reflection:  [*c]  ?* MTLRenderPipelineReflection, __an_error:  [*c]  ?* NSError, )  ?* MTLRenderPipelineState {{
           return @as(*const fn(*Self, SEL,  * MTLMeshRenderPipelineDescriptor, MTLPipelineOption,  [*c]  ?* MTLRenderPipelineReflection,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLRenderPipelineState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRenderPipelineStateWithMeshDescriptor_options_reflection_error_.get(), __descriptor, __options, __reflection, __an_error, );
 }}
var sel_newRenderPipelineStateWithMeshDescriptor_options_completionHandler_ = CachedSelector.init("newRenderPipelineStateWithMeshDescriptor:options:completionHandler:");
      pub fn newRenderPipelineStateWithMeshDescriptoroptionscompletionHandler(self: *Self, __descriptor:  * MTLMeshRenderPipelineDescriptor, __options: MTLPipelineOption, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLMeshRenderPipelineDescriptor, MTLPipelineOption, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRenderPipelineStateWithMeshDescriptor_options_completionHandler_.get(), __descriptor, __options, __completionHandler, );
 }}
var sel_getDefaultSamplePositions_count_ = CachedSelector.init("getDefaultSamplePositions:count:");
      pub fn getDefaultSamplePositionscount(self: *Self, __positions:  [*c] MTLSamplePosition, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] MTLSamplePosition, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getDefaultSamplePositions_count_.get(), __positions, __count, );
 }}
var sel_newArgumentEncoderWithArguments_ = CachedSelector.init("newArgumentEncoderWithArguments:");
      pub fn newArgumentEncoderWithArguments(self: *Self, __arguments:  * NSArray, )  ?* MTLArgumentEncoder {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  ?* MTLArgumentEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newArgumentEncoderWithArguments_.get(), __arguments, );
 }}
var sel_supportsRasterizationRateMapWithLayerCount_ = CachedSelector.init("supportsRasterizationRateMapWithLayerCount:");
      pub fn supportsRasterizationRateMapWithLayerCount(self: *Self, __layerCount: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsRasterizationRateMapWithLayerCount_.get(), __layerCount, );
 }}
var sel_newRasterizationRateMapWithDescriptor_ = CachedSelector.init("newRasterizationRateMapWithDescriptor:");
      pub fn newRasterizationRateMapWithDescriptor(self: *Self, __descriptor:  * MTLRasterizationRateMapDescriptor, )  ?* MTLRasterizationRateMap {{
           return @as(*const fn(*Self, SEL,  * MTLRasterizationRateMapDescriptor, ) callconv(.C)  ?* MTLRasterizationRateMap, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRasterizationRateMapWithDescriptor_.get(), __descriptor, );
 }}
var sel_newIndirectCommandBufferWithDescriptor_maxCommandCount_options_ = CachedSelector.init("newIndirectCommandBufferWithDescriptor:maxCommandCount:options:");
      pub fn newIndirectCommandBufferWithDescriptormaxCommandCountoptions(self: *Self, __descriptor:  * MTLIndirectCommandBufferDescriptor, __maxCount: c_ulong, __options: MTLResourceOptions, )  ?* MTLIndirectCommandBuffer {{
           return @as(*const fn(*Self, SEL,  * MTLIndirectCommandBufferDescriptor, c_ulong, MTLResourceOptions, ) callconv(.C)  ?* MTLIndirectCommandBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIndirectCommandBufferWithDescriptor_maxCommandCount_options_.get(), __descriptor, __maxCount, __options, );
 }}
var sel_newEvent = CachedSelector.init("newEvent");
      pub fn newEvent(self: *Self, )  ?* MTLEvent {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLEvent, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newEvent.get(), );
 }}
var sel_newSharedEvent = CachedSelector.init("newSharedEvent");
      pub fn newSharedEvent(self: *Self, )  ?* MTLSharedEvent {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLSharedEvent, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newSharedEvent.get(), );
 }}
var sel_newSharedEventWithHandle_ = CachedSelector.init("newSharedEventWithHandle:");
      pub fn newSharedEventWithHandle(self: *Self, __sharedEventHandle:  * MTLSharedEventHandle, )  ?* MTLSharedEvent {{
           return @as(*const fn(*Self, SEL,  * MTLSharedEventHandle, ) callconv(.C)  ?* MTLSharedEvent, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newSharedEventWithHandle_.get(), __sharedEventHandle, );
 }}
var sel_newIOHandleWithURL_error_ = CachedSelector.init("newIOHandleWithURL:error:");
      pub fn newIOHandleWithURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, )  ?* MTLIOFileHandle {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLIOFileHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIOHandleWithURL_error_.get(), __url, __an_error, );
 }}
var sel_newIOCommandQueueWithDescriptor_error_ = CachedSelector.init("newIOCommandQueueWithDescriptor:error:");
      pub fn newIOCommandQueueWithDescriptorerror(self: *Self, __descriptor:  * MTLIOCommandQueueDescriptor, __an_error:  [*c]  ?* NSError, )  ?* MTLIOCommandQueue {{
           return @as(*const fn(*Self, SEL,  * MTLIOCommandQueueDescriptor,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLIOCommandQueue, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIOCommandQueueWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_newIOHandleWithURL_compressionMethod_error_ = CachedSelector.init("newIOHandleWithURL:compressionMethod:error:");
      pub fn newIOHandleWithURLcompressionMethoderror(self: *Self, __url:  * NSURL, __compressionMethod: MTLIOCompressionMethod, __an_error:  [*c]  ?* NSError, )  ?* MTLIOFileHandle {{
           return @as(*const fn(*Self, SEL,  * NSURL, MTLIOCompressionMethod,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLIOFileHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIOHandleWithURL_compressionMethod_error_.get(), __url, __compressionMethod, __an_error, );
 }}
var sel_newIOFileHandleWithURL_error_ = CachedSelector.init("newIOFileHandleWithURL:error:");
      pub fn newIOFileHandleWithURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, )  ?* MTLIOFileHandle {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLIOFileHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIOFileHandleWithURL_error_.get(), __url, __an_error, );
 }}
var sel_newIOFileHandleWithURL_compressionMethod_error_ = CachedSelector.init("newIOFileHandleWithURL:compressionMethod:error:");
      pub fn newIOFileHandleWithURLcompressionMethoderror(self: *Self, __url:  * NSURL, __compressionMethod: MTLIOCompressionMethod, __an_error:  [*c]  ?* NSError, )  ?* MTLIOFileHandle {{
           return @as(*const fn(*Self, SEL,  * NSURL, MTLIOCompressionMethod,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLIOFileHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIOFileHandleWithURL_compressionMethod_error_.get(), __url, __compressionMethod, __an_error, );
 }}
var sel_sparseTileSizeWithTextureType_pixelFormat_sampleCount_ = CachedSelector.init("sparseTileSizeWithTextureType:pixelFormat:sampleCount:");
      pub fn sparseTileSizeWithTextureTypepixelFormatsampleCount(self: *Self, __textureType: MTLTextureType, __pixelFormat: MTLPixelFormat, __sampleCount: c_ulong, ) MTLSize {{
           return @as(*const fn(*Self, SEL, MTLTextureType, MTLPixelFormat, c_ulong, ) callconv(.C) MTLSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sparseTileSizeWithTextureType_pixelFormat_sampleCount_.get(), __textureType, __pixelFormat, __sampleCount, );
 }}
var sel_convertSparsePixelRegions_toTileRegions_withTileSize_alignmentMode_numRegions_ = CachedSelector.init("convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:");
      pub fn convertSparsePixelRegionstoTileRegionswithTileSizealignmentModenumRegions(self: *Self, __pixelRegions: [*c]MTLRegion, __tileRegions: [*c]MTLRegion, __tileSize: MTLSize, __mode: MTLSparseTextureRegionAlignmentMode, __numRegions: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c]MTLRegion, [*c]MTLRegion, MTLSize, MTLSparseTextureRegionAlignmentMode, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_convertSparsePixelRegions_toTileRegions_withTileSize_alignmentMode_numRegions_.get(), __pixelRegions, __tileRegions, __tileSize, __mode, __numRegions, );
 }}
var sel_convertSparseTileRegions_toPixelRegions_withTileSize_numRegions_ = CachedSelector.init("convertSparseTileRegions:toPixelRegions:withTileSize:numRegions:");
      pub fn convertSparseTileRegionstoPixelRegionswithTileSizenumRegions(self: *Self, __tileRegions: [*c]MTLRegion, __pixelRegions: [*c]MTLRegion, __tileSize: MTLSize, __numRegions: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c]MTLRegion, [*c]MTLRegion, MTLSize, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_convertSparseTileRegions_toPixelRegions_withTileSize_numRegions_.get(), __tileRegions, __pixelRegions, __tileSize, __numRegions, );
 }}
var sel_sparseTileSizeInBytesForSparsePageSize_ = CachedSelector.init("sparseTileSizeInBytesForSparsePageSize:");
      pub fn sparseTileSizeInBytesForSparsePageSize(self: *Self, __sparsePageSize: MTLSparsePageSize, ) c_ulong {{
           return @as(*const fn(*Self, SEL, MTLSparsePageSize, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sparseTileSizeInBytesForSparsePageSize_.get(), __sparsePageSize, );
 }}
var sel_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize_ = CachedSelector.init("sparseTileSizeWithTextureType:pixelFormat:sampleCount:sparsePageSize:");
      pub fn sparseTileSizeWithTextureTypepixelFormatsampleCountsparsePageSize(self: *Self, __textureType: MTLTextureType, __pixelFormat: MTLPixelFormat, __sampleCount: c_ulong, __sparsePageSize: MTLSparsePageSize, ) MTLSize {{
           return @as(*const fn(*Self, SEL, MTLTextureType, MTLPixelFormat, c_ulong, MTLSparsePageSize, ) callconv(.C) MTLSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize_.get(), __textureType, __pixelFormat, __sampleCount, __sparsePageSize, );
 }}
var sel_newCounterSampleBufferWithDescriptor_error_ = CachedSelector.init("newCounterSampleBufferWithDescriptor:error:");
      pub fn newCounterSampleBufferWithDescriptorerror(self: *Self, __descriptor:  * MTLCounterSampleBufferDescriptor, __an_error:  [*c]  ?* NSError, )  ?* MTLCounterSampleBuffer {{
           return @as(*const fn(*Self, SEL,  * MTLCounterSampleBufferDescriptor,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLCounterSampleBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newCounterSampleBufferWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_sampleTimestamps_gpuTimestamp_ = CachedSelector.init("sampleTimestamps:gpuTimestamp:");
      pub fn sampleTimestampsgpuTimestamp(self: *Self, __cpuTimestamp:  [*c] c_ulonglong, __gpuTimestamp:  [*c] c_ulonglong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulonglong,  [*c] c_ulonglong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleTimestamps_gpuTimestamp_.get(), __cpuTimestamp, __gpuTimestamp, );
 }}
var sel_newArgumentEncoderWithBufferBinding_ = CachedSelector.init("newArgumentEncoderWithBufferBinding:");
      pub fn newArgumentEncoderWithBufferBinding(self: *Self, __bufferBinding:  * MTLBufferBinding, )  * MTLArgumentEncoder {{
           return @as(*const fn(*Self, SEL,  * MTLBufferBinding, ) callconv(.C)  * MTLArgumentEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newArgumentEncoderWithBufferBinding_.get(), __bufferBinding, );
 }}
var sel_supportsCounterSampling_ = CachedSelector.init("supportsCounterSampling:");
      pub fn supportsCounterSampling(self: *Self, __samplingPoint: MTLCounterSamplingPoint, ) c_int {{
           return @as(*const fn(*Self, SEL, MTLCounterSamplingPoint, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsCounterSampling_.get(), __samplingPoint, );
 }}
var sel_supportsVertexAmplificationCount_ = CachedSelector.init("supportsVertexAmplificationCount:");
      pub fn supportsVertexAmplificationCount(self: *Self, __count: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsVertexAmplificationCount_.get(), __count, );
 }}
var sel_newDynamicLibrary_error_ = CachedSelector.init("newDynamicLibrary:error:");
      pub fn newDynamicLibraryerror(self: *Self, __library:  * MTLLibrary, __an_error:  [*c]  ?* NSError, )  ?* MTLDynamicLibrary {{
           return @as(*const fn(*Self, SEL,  * MTLLibrary,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLDynamicLibrary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newDynamicLibrary_error_.get(), __library, __an_error, );
 }}
var sel_newDynamicLibraryWithURL_error_ = CachedSelector.init("newDynamicLibraryWithURL:error:");
      pub fn newDynamicLibraryWithURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, )  ?* MTLDynamicLibrary {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLDynamicLibrary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newDynamicLibraryWithURL_error_.get(), __url, __an_error, );
 }}
var sel_newBinaryArchiveWithDescriptor_error_ = CachedSelector.init("newBinaryArchiveWithDescriptor:error:");
      pub fn newBinaryArchiveWithDescriptorerror(self: *Self, __descriptor:  * MTLBinaryArchiveDescriptor, __an_error:  [*c]  ?* NSError, )  ?* MTLBinaryArchive {{
           return @as(*const fn(*Self, SEL,  * MTLBinaryArchiveDescriptor,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLBinaryArchive, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newBinaryArchiveWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_accelerationStructureSizesWithDescriptor_ = CachedSelector.init("accelerationStructureSizesWithDescriptor:");
      pub fn accelerationStructureSizesWithDescriptor(self: *Self, __descriptor:  * MTLAccelerationStructureDescriptor, ) MTLAccelerationStructureSizes {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructureDescriptor, ) callconv(.C) MTLAccelerationStructureSizes, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_accelerationStructureSizesWithDescriptor_.get(), __descriptor, );
 }}
var sel_newAccelerationStructureWithSize_ = CachedSelector.init("newAccelerationStructureWithSize:");
      pub fn newAccelerationStructureWithSize(self: *Self, __size: c_ulong, )  ?* MTLAccelerationStructure {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* MTLAccelerationStructure, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newAccelerationStructureWithSize_.get(), __size, );
 }}
var sel_newAccelerationStructureWithDescriptor_ = CachedSelector.init("newAccelerationStructureWithDescriptor:");
      pub fn newAccelerationStructureWithDescriptor(self: *Self, __descriptor:  * MTLAccelerationStructureDescriptor, )  ?* MTLAccelerationStructure {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructureDescriptor, ) callconv(.C)  ?* MTLAccelerationStructure, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newAccelerationStructureWithDescriptor_.get(), __descriptor, );
 }}
var sel_heapAccelerationStructureSizeAndAlignWithSize_ = CachedSelector.init("heapAccelerationStructureSizeAndAlignWithSize:");
      pub fn heapAccelerationStructureSizeAndAlignWithSize(self: *Self, __size: c_ulong, ) MTLSizeAndAlign {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) MTLSizeAndAlign, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_heapAccelerationStructureSizeAndAlignWithSize_.get(), __size, );
 }}
var sel_heapAccelerationStructureSizeAndAlignWithDescriptor_ = CachedSelector.init("heapAccelerationStructureSizeAndAlignWithDescriptor:");
      pub fn heapAccelerationStructureSizeAndAlignWithDescriptor(self: *Self, __descriptor:  * MTLAccelerationStructureDescriptor, ) MTLSizeAndAlign {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructureDescriptor, ) callconv(.C) MTLSizeAndAlign, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_heapAccelerationStructureSizeAndAlignWithDescriptor_.get(), __descriptor, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_registryID = CachedSelector.init("registryID");
      pub fn registryID(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registryID.get(), );
 }}
var sel_architecture = CachedSelector.init("architecture");
      pub fn architecture(self: *Self, )  * MTLArchitecture {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLArchitecture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_architecture.get(), );
 }}
var sel_maxThreadsPerThreadgroup = CachedSelector.init("maxThreadsPerThreadgroup");
      pub fn maxThreadsPerThreadgroup(self: *Self, ) MTLSize {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxThreadsPerThreadgroup.get(), );
 }}
var sel_isLowPower = CachedSelector.init("isLowPower");
      pub fn isLowPower(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLowPower.get(), );
 }}
var sel_isHeadless = CachedSelector.init("isHeadless");
      pub fn isHeadless(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isHeadless.get(), );
 }}
var sel_isRemovable = CachedSelector.init("isRemovable");
      pub fn isRemovable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isRemovable.get(), );
 }}
var sel_hasUnifiedMemory = CachedSelector.init("hasUnifiedMemory");
      pub fn hasUnifiedMemory(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasUnifiedMemory.get(), );
 }}
var sel_recommendedMaxWorkingSetSize = CachedSelector.init("recommendedMaxWorkingSetSize");
      pub fn recommendedMaxWorkingSetSize(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_recommendedMaxWorkingSetSize.get(), );
 }}
var sel_location = CachedSelector.init("location");
      pub fn location(self: *Self, ) MTLDeviceLocation {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDeviceLocation, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_location.get(), );
 }}
var sel_locationNumber = CachedSelector.init("locationNumber");
      pub fn locationNumber(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locationNumber.get(), );
 }}
var sel_maxTransferRate = CachedSelector.init("maxTransferRate");
      pub fn maxTransferRate(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTransferRate.get(), );
 }}
var sel_isDepth24Stencil8PixelFormatSupported = CachedSelector.init("isDepth24Stencil8PixelFormatSupported");
      pub fn isDepth24Stencil8PixelFormatSupported(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDepth24Stencil8PixelFormatSupported.get(), );
 }}
var sel_readWriteTextureSupport = CachedSelector.init("readWriteTextureSupport");
      pub fn readWriteTextureSupport(self: *Self, ) MTLReadWriteTextureTier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLReadWriteTextureTier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readWriteTextureSupport.get(), );
 }}
var sel_argumentBuffersSupport = CachedSelector.init("argumentBuffersSupport");
      pub fn argumentBuffersSupport(self: *Self, ) MTLArgumentBuffersTier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLArgumentBuffersTier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_argumentBuffersSupport.get(), );
 }}
var sel_areRasterOrderGroupsSupported = CachedSelector.init("areRasterOrderGroupsSupported");
      pub fn areRasterOrderGroupsSupported(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_areRasterOrderGroupsSupported.get(), );
 }}
var sel_supports32BitFloatFiltering = CachedSelector.init("supports32BitFloatFiltering");
      pub fn supports32BitFloatFiltering(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supports32BitFloatFiltering.get(), );
 }}
var sel_supports32BitMSAA = CachedSelector.init("supports32BitMSAA");
      pub fn supports32BitMSAA(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supports32BitMSAA.get(), );
 }}
var sel_supportsQueryTextureLOD = CachedSelector.init("supportsQueryTextureLOD");
      pub fn supportsQueryTextureLOD(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsQueryTextureLOD.get(), );
 }}
var sel_supportsBCTextureCompression = CachedSelector.init("supportsBCTextureCompression");
      pub fn supportsBCTextureCompression(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsBCTextureCompression.get(), );
 }}
var sel_supportsPullModelInterpolation = CachedSelector.init("supportsPullModelInterpolation");
      pub fn supportsPullModelInterpolation(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsPullModelInterpolation.get(), );
 }}
var sel_areBarycentricCoordsSupported = CachedSelector.init("areBarycentricCoordsSupported");
      pub fn areBarycentricCoordsSupported(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_areBarycentricCoordsSupported.get(), );
 }}
var sel_supportsShaderBarycentricCoordinates = CachedSelector.init("supportsShaderBarycentricCoordinates");
      pub fn supportsShaderBarycentricCoordinates(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsShaderBarycentricCoordinates.get(), );
 }}
var sel_currentAllocatedSize = CachedSelector.init("currentAllocatedSize");
      pub fn currentAllocatedSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentAllocatedSize.get(), );
 }}
var sel_maxThreadgroupMemoryLength = CachedSelector.init("maxThreadgroupMemoryLength");
      pub fn maxThreadgroupMemoryLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxThreadgroupMemoryLength.get(), );
 }}
var sel_maxArgumentBufferSamplerCount = CachedSelector.init("maxArgumentBufferSamplerCount");
      pub fn maxArgumentBufferSamplerCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxArgumentBufferSamplerCount.get(), );
 }}
var sel_areProgrammableSamplePositionsSupported = CachedSelector.init("areProgrammableSamplePositionsSupported");
      pub fn areProgrammableSamplePositionsSupported(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_areProgrammableSamplePositionsSupported.get(), );
 }}
var sel_peerGroupID = CachedSelector.init("peerGroupID");
      pub fn peerGroupID(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_peerGroupID.get(), );
 }}
var sel_peerIndex = CachedSelector.init("peerIndex");
      pub fn peerIndex(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_peerIndex.get(), );
 }}
var sel_peerCount = CachedSelector.init("peerCount");
      pub fn peerCount(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_peerCount.get(), );
 }}
var sel_sparseTileSizeInBytes = CachedSelector.init("sparseTileSizeInBytes");
      pub fn sparseTileSizeInBytes(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sparseTileSizeInBytes.get(), );
 }}
var sel_maxBufferLength = CachedSelector.init("maxBufferLength");
      pub fn maxBufferLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxBufferLength.get(), );
 }}
var sel_counterSets = CachedSelector.init("counterSets");
      pub fn counterSets(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_counterSets.get(), );
 }}
var sel_supportsDynamicLibraries = CachedSelector.init("supportsDynamicLibraries");
      pub fn supportsDynamicLibraries(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsDynamicLibraries.get(), );
 }}
var sel_supportsRenderDynamicLibraries = CachedSelector.init("supportsRenderDynamicLibraries");
      pub fn supportsRenderDynamicLibraries(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsRenderDynamicLibraries.get(), );
 }}
var sel_supportsRaytracing = CachedSelector.init("supportsRaytracing");
      pub fn supportsRaytracing(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsRaytracing.get(), );
 }}
var sel_supportsFunctionPointers = CachedSelector.init("supportsFunctionPointers");
      pub fn supportsFunctionPointers(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsFunctionPointers.get(), );
 }}
var sel_supportsFunctionPointersFromRender = CachedSelector.init("supportsFunctionPointersFromRender");
      pub fn supportsFunctionPointersFromRender(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsFunctionPointersFromRender.get(), );
 }}
var sel_supportsRaytracingFromRender = CachedSelector.init("supportsRaytracingFromRender");
      pub fn supportsRaytracingFromRender(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsRaytracingFromRender.get(), );
 }}
var sel_supportsPrimitiveMotionBlur = CachedSelector.init("supportsPrimitiveMotionBlur");
      pub fn supportsPrimitiveMotionBlur(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsPrimitiveMotionBlur.get(), );
 }}
var sel_shouldMaximizeConcurrentCompilation = CachedSelector.init("shouldMaximizeConcurrentCompilation");
      pub fn shouldMaximizeConcurrentCompilation(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shouldMaximizeConcurrentCompilation.get(), );
 }}
var sel_setShouldMaximizeConcurrentCompilation_ = CachedSelector.init("setShouldMaximizeConcurrentCompilation:");
      pub fn setShouldMaximizeConcurrentCompilation(self: *Self, __shouldMaximizeConcurrentCompilation: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShouldMaximizeConcurrentCompilation_.get(), __shouldMaximizeConcurrentCompilation, );
 }}
var sel_maximumConcurrentCompilationTaskCount = CachedSelector.init("maximumConcurrentCompilationTaskCount");
      pub fn maximumConcurrentCompilationTaskCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maximumConcurrentCompilationTaskCount.get(), );
 }}
  };
}

pub const MTLDevice = opaque {
  const Self = @This();
  pub usingnamespace MTLDeviceProtocolMixin(Self, "MTLDevice");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLDevice");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLDevice");
};

pub fn MTLAccelerationStructureProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_size = CachedSelector.init("size");
      pub fn size(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_size.get(), );
 }}
var sel_gpuResourceID = CachedSelector.init("gpuResourceID");
      pub fn gpuResourceID(self: *Self, ) MTLResourceID {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceID, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gpuResourceID.get(), );
 }}
  };
}

pub const MTLAccelerationStructure = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureProtocolMixin(Self, "MTLAccelerationStructure");
  pub usingnamespace MTLResourceProtocolMixin(Self, "MTLAccelerationStructure");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructure");
};

pub fn MTLCaptureScopeProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_beginScope = CachedSelector.init("beginScope");
      pub fn beginScope(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_beginScope.get(), );
 }}
var sel_endScope = CachedSelector.init("endScope");
      pub fn endScope(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endScope.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_commandQueue = CachedSelector.init("commandQueue");
      pub fn commandQueue(self: *Self, )  ?* MTLCommandQueue {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCommandQueue, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandQueue.get(), );
 }}
  };
}

pub const MTLCaptureScope = opaque {
  const Self = @This();
  pub usingnamespace MTLCaptureScopeProtocolMixin(Self, "MTLCaptureScope");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCaptureScope");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCaptureScope");
};

pub fn NSURLProtocolClientProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_URLProtocol_wasRedirectedToRequest_redirectResponse_ = CachedSelector.init("URLProtocol:wasRedirectedToRequest:redirectResponse:");
      pub fn URLProtocolwasRedirectedToRequestredirectResponse(self: *Self, __protocol:  * NSURLProtocol, __request:  * NSURLRequest, __redirectResponse:  * NSURLResponse, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtocol,  * NSURLRequest,  * NSURLResponse, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLProtocol_wasRedirectedToRequest_redirectResponse_.get(), __protocol, __request, __redirectResponse, );
 }}
var sel_URLProtocol_cachedResponseIsValid_ = CachedSelector.init("URLProtocol:cachedResponseIsValid:");
      pub fn URLProtocolcachedResponseIsValid(self: *Self, __protocol:  * NSURLProtocol, __cachedResponse:  * NSCachedURLResponse, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtocol,  * NSCachedURLResponse, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLProtocol_cachedResponseIsValid_.get(), __protocol, __cachedResponse, );
 }}
var sel_URLProtocol_didReceiveResponse_cacheStoragePolicy_ = CachedSelector.init("URLProtocol:didReceiveResponse:cacheStoragePolicy:");
      pub fn URLProtocoldidReceiveResponsecacheStoragePolicy(self: *Self, __protocol:  * NSURLProtocol, __response:  * NSURLResponse, __policy: NSURLCacheStoragePolicy, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtocol,  * NSURLResponse, NSURLCacheStoragePolicy, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLProtocol_didReceiveResponse_cacheStoragePolicy_.get(), __protocol, __response, __policy, );
 }}
var sel_URLProtocol_didLoadData_ = CachedSelector.init("URLProtocol:didLoadData:");
      pub fn URLProtocoldidLoadData(self: *Self, __protocol:  * NSURLProtocol, __data:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtocol,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLProtocol_didLoadData_.get(), __protocol, __data, );
 }}
var sel_URLProtocolDidFinishLoading_ = CachedSelector.init("URLProtocolDidFinishLoading:");
      pub fn URLProtocolDidFinishLoading(self: *Self, __protocol:  * NSURLProtocol, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtocol, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLProtocolDidFinishLoading_.get(), __protocol, );
 }}
var sel_URLProtocol_didFailWithError_ = CachedSelector.init("URLProtocol:didFailWithError:");
      pub fn URLProtocoldidFailWithError(self: *Self, __protocol:  * NSURLProtocol, __an_error:  * NSError, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtocol,  * NSError, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLProtocol_didFailWithError_.get(), __protocol, __an_error, );
 }}
var sel_URLProtocol_didReceiveAuthenticationChallenge_ = CachedSelector.init("URLProtocol:didReceiveAuthenticationChallenge:");
      pub fn URLProtocoldidReceiveAuthenticationChallenge(self: *Self, __protocol:  * NSURLProtocol, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtocol,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLProtocol_didReceiveAuthenticationChallenge_.get(), __protocol, __challenge, );
 }}
var sel_URLProtocol_didCancelAuthenticationChallenge_ = CachedSelector.init("URLProtocol:didCancelAuthenticationChallenge:");
      pub fn URLProtocoldidCancelAuthenticationChallenge(self: *Self, __protocol:  * NSURLProtocol, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtocol,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLProtocol_didCancelAuthenticationChallenge_.get(), __protocol, __challenge, );
 }}
  };
}

pub const NSURLProtocolClient = opaque {
  const Self = @This();
  pub usingnamespace NSURLProtocolClientProtocolMixin(Self, "NSURLProtocolClient");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLProtocolClient");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLProtocolClient");
};

pub fn MTLCommandQueueProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_commandBuffer = CachedSelector.init("commandBuffer");
      pub fn commandBuffer(self: *Self, )  ?* MTLCommandBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCommandBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandBuffer.get(), );
 }}
var sel_commandBufferWithDescriptor_ = CachedSelector.init("commandBufferWithDescriptor:");
      pub fn commandBufferWithDescriptor(self: *Self, __descriptor:  * MTLCommandBufferDescriptor, )  ?* MTLCommandBuffer {{
           return @as(*const fn(*Self, SEL,  * MTLCommandBufferDescriptor, ) callconv(.C)  ?* MTLCommandBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandBufferWithDescriptor_.get(), __descriptor, );
 }}
var sel_commandBufferWithUnretainedReferences = CachedSelector.init("commandBufferWithUnretainedReferences");
      pub fn commandBufferWithUnretainedReferences(self: *Self, )  ?* MTLCommandBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCommandBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandBufferWithUnretainedReferences.get(), );
 }}
var sel_insertDebugCaptureBoundary = CachedSelector.init("insertDebugCaptureBoundary");
      pub fn insertDebugCaptureBoundary(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertDebugCaptureBoundary.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
  };
}

pub const MTLCommandQueue = opaque {
  const Self = @This();
  pub usingnamespace MTLCommandQueueProtocolMixin(Self, "MTLCommandQueue");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCommandQueue");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCommandQueue");
};

pub fn NSExtensionRequestHandlingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_beginRequestWithExtensionContext_ = CachedSelector.init("beginRequestWithExtensionContext:");
      pub fn beginRequestWithExtensionContext(self: *Self, __context:  * NSExtensionContext, ) void {{
           return @as(*const fn(*Self, SEL,  * NSExtensionContext, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_beginRequestWithExtensionContext_.get(), __context, );
 }}
  };
}

pub const NSExtensionRequestHandling = opaque {
  const Self = @This();
  pub usingnamespace NSExtensionRequestHandlingProtocolMixin(Self, "NSExtensionRequestHandling");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSExtensionRequestHandling");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSExtensionRequestHandling");
};

pub fn NSDecimalNumberBehaviorsProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_roundingMode = CachedSelector.init("roundingMode");
      pub fn roundingMode(self: *Self, ) NSRoundingMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSRoundingMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_roundingMode.get(), );
 }}
var sel_scale = CachedSelector.init("scale");
      pub fn scale(self: *Self, ) c_short {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_short, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scale.get(), );
 }}
var sel_exceptionDuringOperation_error_leftOperand_rightOperand_ = CachedSelector.init("exceptionDuringOperation:error:leftOperand:rightOperand:");
      pub fn exceptionDuringOperationerrorleftOperandrightOperand(self: *Self, __operation: SEL, __an_error: NSCalculationError, __leftOperand:  * NSDecimalNumber, __rightOperand:  ?* NSDecimalNumber, )  ?* NSDecimalNumber {{
           return @as(*const fn(*Self, SEL, SEL, NSCalculationError,  * NSDecimalNumber,  ?* NSDecimalNumber, ) callconv(.C)  ?* NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_exceptionDuringOperation_error_leftOperand_rightOperand_.get(), __operation, __an_error, __leftOperand, __rightOperand, );
 }}
  };
}

pub const NSDecimalNumberBehaviors = opaque {
  const Self = @This();
  pub usingnamespace NSDecimalNumberBehaviorsProtocolMixin(Self, "NSDecimalNumberBehaviors");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDecimalNumberBehaviors");
};

pub fn MTLIndirectCommandBufferProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_resetWithRange_ = CachedSelector.init("resetWithRange:");
      pub fn resetWithRange(self: *Self, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resetWithRange_.get(), __range, );
 }}
var sel_indirectRenderCommandAtIndex_ = CachedSelector.init("indirectRenderCommandAtIndex:");
      pub fn indirectRenderCommandAtIndex(self: *Self, __commandIndex: c_ulong, )  * MTLIndirectRenderCommand {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLIndirectRenderCommand, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indirectRenderCommandAtIndex_.get(), __commandIndex, );
 }}
var sel_indirectComputeCommandAtIndex_ = CachedSelector.init("indirectComputeCommandAtIndex:");
      pub fn indirectComputeCommandAtIndex(self: *Self, __commandIndex: c_ulong, )  * MTLIndirectComputeCommand {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLIndirectComputeCommand, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indirectComputeCommandAtIndex_.get(), __commandIndex, );
 }}
var sel_size = CachedSelector.init("size");
      pub fn size(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_size.get(), );
 }}
var sel_gpuResourceID = CachedSelector.init("gpuResourceID");
      pub fn gpuResourceID(self: *Self, ) MTLResourceID {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceID, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gpuResourceID.get(), );
 }}
  };
}

pub const MTLIndirectCommandBuffer = opaque {
  const Self = @This();
  pub usingnamespace MTLIndirectCommandBufferProtocolMixin(Self, "MTLIndirectCommandBuffer");
  pub usingnamespace MTLResourceProtocolMixin(Self, "MTLIndirectCommandBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIndirectCommandBuffer");
};

pub fn MTLBufferBindingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_bufferAlignment = CachedSelector.init("bufferAlignment");
      pub fn bufferAlignment(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferAlignment.get(), );
 }}
var sel_bufferDataSize = CachedSelector.init("bufferDataSize");
      pub fn bufferDataSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferDataSize.get(), );
 }}
var sel_bufferDataType = CachedSelector.init("bufferDataType");
      pub fn bufferDataType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferDataType.get(), );
 }}
var sel_bufferStructType = CachedSelector.init("bufferStructType");
      pub fn bufferStructType(self: *Self, )  ?* MTLStructType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLStructType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferStructType.get(), );
 }}
var sel_bufferPointerType = CachedSelector.init("bufferPointerType");
      pub fn bufferPointerType(self: *Self, )  ?* MTLPointerType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLPointerType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferPointerType.get(), );
 }}
  };
}

pub const MTLBufferBinding = opaque {
  const Self = @This();
  pub usingnamespace MTLBufferBindingProtocolMixin(Self, "MTLBufferBinding");
  pub usingnamespace MTLBindingProtocolMixin(Self, "MTLBufferBinding");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBufferBinding");
};

pub fn MTLCounterProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
  };
}

pub const MTLCounter = opaque {
  const Self = @This();
  pub usingnamespace MTLCounterProtocolMixin(Self, "MTLCounter");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCounter");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCounter");
};

pub fn MTLRasterizationRateMapProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_copyParameterDataToBuffer_offset_ = CachedSelector.init("copyParameterDataToBuffer:offset:");
      pub fn copyParameterDataToBufferoffset(self: *Self, __buffer:  * MTLBuffer, __offset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyParameterDataToBuffer_offset_.get(), __buffer, __offset, );
 }}
var sel_physicalSizeForLayer_ = CachedSelector.init("physicalSizeForLayer:");
      pub fn physicalSizeForLayer(self: *Self, __layerIndex: c_ulong, ) MTLSize {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) MTLSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_physicalSizeForLayer_.get(), __layerIndex, );
 }}
var sel_mapScreenToPhysicalCoordinates_forLayer_ = CachedSelector.init("mapScreenToPhysicalCoordinates:forLayer:");
      pub fn mapScreenToPhysicalCoordinatesforLayer(self: *Self, __screenCoordinates: MTLSamplePosition, __layerIndex: c_ulong, ) MTLSamplePosition {{
           return @as(*const fn(*Self, SEL, MTLSamplePosition, c_ulong, ) callconv(.C) MTLSamplePosition, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mapScreenToPhysicalCoordinates_forLayer_.get(), __screenCoordinates, __layerIndex, );
 }}
var sel_mapPhysicalToScreenCoordinates_forLayer_ = CachedSelector.init("mapPhysicalToScreenCoordinates:forLayer:");
      pub fn mapPhysicalToScreenCoordinatesforLayer(self: *Self, __physicalCoordinates: MTLSamplePosition, __layerIndex: c_ulong, ) MTLSamplePosition {{
           return @as(*const fn(*Self, SEL, MTLSamplePosition, c_ulong, ) callconv(.C) MTLSamplePosition, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mapPhysicalToScreenCoordinates_forLayer_.get(), __physicalCoordinates, __layerIndex, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_screenSize = CachedSelector.init("screenSize");
      pub fn screenSize(self: *Self, ) MTLSize {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_screenSize.get(), );
 }}
var sel_physicalGranularity = CachedSelector.init("physicalGranularity");
      pub fn physicalGranularity(self: *Self, ) MTLSize {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_physicalGranularity.get(), );
 }}
var sel_layerCount = CachedSelector.init("layerCount");
      pub fn layerCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_layerCount.get(), );
 }}
var sel_parameterBufferSizeAndAlign = CachedSelector.init("parameterBufferSizeAndAlign");
      pub fn parameterBufferSizeAndAlign(self: *Self, ) MTLSizeAndAlign {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSizeAndAlign, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parameterBufferSizeAndAlign.get(), );
 }}
  };
}

pub const MTLRasterizationRateMap = opaque {
  const Self = @This();
  pub usingnamespace MTLRasterizationRateMapProtocolMixin(Self, "MTLRasterizationRateMap");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRasterizationRateMap");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRasterizationRateMap");
};

pub fn MTLDynamicLibraryProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_serializeToURL_error_ = CachedSelector.init("serializeToURL:error:");
      pub fn serializeToURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_serializeToURL_error_.get(), __url, __an_error, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_installName = CachedSelector.init("installName");
      pub fn installName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_installName.get(), );
 }}
  };
}

pub const MTLDynamicLibrary = opaque {
  const Self = @This();
  pub usingnamespace MTLDynamicLibraryProtocolMixin(Self, "MTLDynamicLibrary");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLDynamicLibrary");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLDynamicLibrary");
};

pub fn MTLHeapProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_maxAvailableSizeWithAlignment_ = CachedSelector.init("maxAvailableSizeWithAlignment:");
      pub fn maxAvailableSizeWithAlignment(self: *Self, __alignment: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxAvailableSizeWithAlignment_.get(), __alignment, );
 }}
var sel_newBufferWithLength_options_ = CachedSelector.init("newBufferWithLength:options:");
      pub fn newBufferWithLengthoptions(self: *Self, __length: c_ulong, __options: MTLResourceOptions, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, c_ulong, MTLResourceOptions, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newBufferWithLength_options_.get(), __length, __options, );
 }}
var sel_newTextureWithDescriptor_ = CachedSelector.init("newTextureWithDescriptor:");
      pub fn newTextureWithDescriptor(self: *Self, __descriptor:  * MTLTextureDescriptor, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL,  * MTLTextureDescriptor, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newTextureWithDescriptor_.get(), __descriptor, );
 }}
var sel_setPurgeableState_ = CachedSelector.init("setPurgeableState:");
      pub fn setPurgeableState(self: *Self, __state: MTLPurgeableState, ) MTLPurgeableState {{
           return @as(*const fn(*Self, SEL, MTLPurgeableState, ) callconv(.C) MTLPurgeableState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPurgeableState_.get(), __state, );
 }}
var sel_newBufferWithLength_options_offset_ = CachedSelector.init("newBufferWithLength:options:offset:");
      pub fn newBufferWithLengthoptionsoffset(self: *Self, __length: c_ulong, __options: MTLResourceOptions, __offset: c_ulong, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, c_ulong, MTLResourceOptions, c_ulong, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newBufferWithLength_options_offset_.get(), __length, __options, __offset, );
 }}
var sel_newTextureWithDescriptor_offset_ = CachedSelector.init("newTextureWithDescriptor:offset:");
      pub fn newTextureWithDescriptoroffset(self: *Self, __descriptor:  * MTLTextureDescriptor, __offset: c_ulong, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL,  * MTLTextureDescriptor, c_ulong, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newTextureWithDescriptor_offset_.get(), __descriptor, __offset, );
 }}
var sel_newAccelerationStructureWithSize_ = CachedSelector.init("newAccelerationStructureWithSize:");
      pub fn newAccelerationStructureWithSize(self: *Self, __size: c_ulong, )  ?* MTLAccelerationStructure {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* MTLAccelerationStructure, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newAccelerationStructureWithSize_.get(), __size, );
 }}
var sel_newAccelerationStructureWithDescriptor_ = CachedSelector.init("newAccelerationStructureWithDescriptor:");
      pub fn newAccelerationStructureWithDescriptor(self: *Self, __descriptor:  * MTLAccelerationStructureDescriptor, )  ?* MTLAccelerationStructure {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructureDescriptor, ) callconv(.C)  ?* MTLAccelerationStructure, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newAccelerationStructureWithDescriptor_.get(), __descriptor, );
 }}
var sel_newAccelerationStructureWithSize_offset_ = CachedSelector.init("newAccelerationStructureWithSize:offset:");
      pub fn newAccelerationStructureWithSizeoffset(self: *Self, __size: c_ulong, __offset: c_ulong, )  ?* MTLAccelerationStructure {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C)  ?* MTLAccelerationStructure, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newAccelerationStructureWithSize_offset_.get(), __size, __offset, );
 }}
var sel_newAccelerationStructureWithDescriptor_offset_ = CachedSelector.init("newAccelerationStructureWithDescriptor:offset:");
      pub fn newAccelerationStructureWithDescriptoroffset(self: *Self, __descriptor:  * MTLAccelerationStructureDescriptor, __offset: c_ulong, )  ?* MTLAccelerationStructure {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructureDescriptor, c_ulong, ) callconv(.C)  ?* MTLAccelerationStructure, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newAccelerationStructureWithDescriptor_offset_.get(), __descriptor, __offset, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_storageMode = CachedSelector.init("storageMode");
      pub fn storageMode(self: *Self, ) MTLStorageMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStorageMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storageMode.get(), );
 }}
var sel_cpuCacheMode = CachedSelector.init("cpuCacheMode");
      pub fn cpuCacheMode(self: *Self, ) MTLCPUCacheMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCPUCacheMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cpuCacheMode.get(), );
 }}
var sel_hazardTrackingMode = CachedSelector.init("hazardTrackingMode");
      pub fn hazardTrackingMode(self: *Self, ) MTLHazardTrackingMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLHazardTrackingMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hazardTrackingMode.get(), );
 }}
var sel_resourceOptions = CachedSelector.init("resourceOptions");
      pub fn resourceOptions(self: *Self, ) MTLResourceOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceOptions.get(), );
 }}
var sel_size = CachedSelector.init("size");
      pub fn size(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_size.get(), );
 }}
var sel_usedSize = CachedSelector.init("usedSize");
      pub fn usedSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_usedSize.get(), );
 }}
var sel_currentAllocatedSize = CachedSelector.init("currentAllocatedSize");
      pub fn currentAllocatedSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentAllocatedSize.get(), );
 }}
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, ) MTLHeapType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLHeapType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
  };
}

pub const MTLHeap = opaque {
  const Self = @This();
  pub usingnamespace MTLHeapProtocolMixin(Self, "MTLHeap");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLHeap");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLHeap");
};

pub fn MTLIOFileHandleProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
  };
}

pub const MTLIOFileHandle = opaque {
  const Self = @This();
  pub usingnamespace MTLIOFileHandleProtocolMixin(Self, "MTLIOFileHandle");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOFileHandle");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOFileHandle");
};

pub fn NSCacheDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_cache_willEvictObject_ = CachedSelector.init("cache:willEvictObject:");
      pub fn cachewillEvictObject(self: *Self, __cache:  * NSCache, __obj: id, ) void {{
           return @as(*const fn(*Self, SEL,  * NSCache, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cache_willEvictObject_.get(), __cache, __obj, );
 }}
  };
}

pub const NSCacheDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSCacheDelegateProtocolMixin(Self, "NSCacheDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCacheDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCacheDelegate");
};

pub fn MTLResourceStateCommandEncoderProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_updateTextureMappings_mode_regions_mipLevels_slices_numRegions_ = CachedSelector.init("updateTextureMappings:mode:regions:mipLevels:slices:numRegions:");
      pub fn updateTextureMappingsmoderegionsmipLevelsslicesnumRegions(self: *Self, __texture:  * MTLTexture, __mode: MTLSparseTextureMappingMode, __regions: [*c]MTLRegion, __mipLevels: [*c]c_ulong, __slices: [*c]c_ulong, __numRegions: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, MTLSparseTextureMappingMode, [*c]MTLRegion, [*c]c_ulong, [*c]c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_updateTextureMappings_mode_regions_mipLevels_slices_numRegions_.get(), __texture, __mode, __regions, __mipLevels, __slices, __numRegions, );
 }}
var sel_updateTextureMapping_mode_region_mipLevel_slice_ = CachedSelector.init("updateTextureMapping:mode:region:mipLevel:slice:");
      pub fn updateTextureMappingmoderegionmipLevelslice(self: *Self, __texture:  * MTLTexture, __mode: MTLSparseTextureMappingMode, __region: MTLRegion, __mipLevel: c_ulong, __slice: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, MTLSparseTextureMappingMode, MTLRegion, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_updateTextureMapping_mode_region_mipLevel_slice_.get(), __texture, __mode, __region, __mipLevel, __slice, );
 }}
var sel_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset_ = CachedSelector.init("updateTextureMapping:mode:indirectBuffer:indirectBufferOffset:");
      pub fn updateTextureMappingmodeindirectBufferindirectBufferOffset(self: *Self, __texture:  * MTLTexture, __mode: MTLSparseTextureMappingMode, __indirectBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, MTLSparseTextureMappingMode,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset_.get(), __texture, __mode, __indirectBuffer, __indirectBufferOffset, );
 }}
var sel_updateFence_ = CachedSelector.init("updateFence:");
      pub fn updateFence(self: *Self, __fence:  * MTLFence, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_updateFence_.get(), __fence, );
 }}
var sel_waitForFence_ = CachedSelector.init("waitForFence:");
      pub fn waitForFence(self: *Self, __fence:  * MTLFence, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitForFence_.get(), __fence, );
 }}
var sel_moveTextureMappingsFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_ = CachedSelector.init("moveTextureMappingsFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:");
      pub fn moveTextureMappingsFromTexturesourceSlicesourceLevelsourceOriginsourceSizetoTexturedestinationSlicedestinationLeveldestinationOrigin(self: *Self, __sourceTexture:  * MTLTexture, __sourceSlice: c_ulong, __sourceLevel: c_ulong, __sourceOrigin: MTLOrigin, __sourceSize: MTLSize, __destinationTexture:  * MTLTexture, __destinationSlice: c_ulong, __destinationLevel: c_ulong, __destinationOrigin: MTLOrigin, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, c_ulong, c_ulong, MTLOrigin, MTLSize,  * MTLTexture, c_ulong, c_ulong, MTLOrigin, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_moveTextureMappingsFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_.get(), __sourceTexture, __sourceSlice, __sourceLevel, __sourceOrigin, __sourceSize, __destinationTexture, __destinationSlice, __destinationLevel, __destinationOrigin, );
 }}
  };
}

pub const MTLResourceStateCommandEncoder = opaque {
  const Self = @This();
  pub usingnamespace MTLResourceStateCommandEncoderProtocolMixin(Self, "MTLResourceStateCommandEncoder");
  pub usingnamespace MTLCommandEncoderProtocolMixin(Self, "MTLResourceStateCommandEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLResourceStateCommandEncoder");
};

pub fn MTLCommandBufferEncoderInfoProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_debugSignposts = CachedSelector.init("debugSignposts");
      pub fn debugSignposts(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_debugSignposts.get(), );
 }}
var sel_errorState = CachedSelector.init("errorState");
      pub fn errorState(self: *Self, ) MTLCommandEncoderErrorState {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCommandEncoderErrorState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_errorState.get(), );
 }}
  };
}

pub const MTLCommandBufferEncoderInfo = opaque {
  const Self = @This();
  pub usingnamespace MTLCommandBufferEncoderInfoProtocolMixin(Self, "MTLCommandBufferEncoderInfo");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCommandBufferEncoderInfo");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCommandBufferEncoderInfo");
};

pub fn NSNetServiceBrowserDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_netServiceBrowserWillSearch_ = CachedSelector.init("netServiceBrowserWillSearch:");
      pub fn netServiceBrowserWillSearch(self: *Self, __browser:  * NSNetServiceBrowser, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetServiceBrowser, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceBrowserWillSearch_.get(), __browser, );
 }}
var sel_netServiceBrowserDidStopSearch_ = CachedSelector.init("netServiceBrowserDidStopSearch:");
      pub fn netServiceBrowserDidStopSearch(self: *Self, __browser:  * NSNetServiceBrowser, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetServiceBrowser, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceBrowserDidStopSearch_.get(), __browser, );
 }}
var sel_netServiceBrowser_didNotSearch_ = CachedSelector.init("netServiceBrowser:didNotSearch:");
      pub fn netServiceBrowserdidNotSearch(self: *Self, __browser:  * NSNetServiceBrowser, __errorDict:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetServiceBrowser,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceBrowser_didNotSearch_.get(), __browser, __errorDict, );
 }}
var sel_netServiceBrowser_didFindDomain_moreComing_ = CachedSelector.init("netServiceBrowser:didFindDomain:moreComing:");
      pub fn netServiceBrowserdidFindDomainmoreComing(self: *Self, __browser:  * NSNetServiceBrowser, __domainString:  * NSString, __moreComing: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetServiceBrowser,  * NSString, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceBrowser_didFindDomain_moreComing_.get(), __browser, __domainString, __moreComing, );
 }}
var sel_netServiceBrowser_didFindService_moreComing_ = CachedSelector.init("netServiceBrowser:didFindService:moreComing:");
      pub fn netServiceBrowserdidFindServicemoreComing(self: *Self, __browser:  * NSNetServiceBrowser, __service:  * NSNetService, __moreComing: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetServiceBrowser,  * NSNetService, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceBrowser_didFindService_moreComing_.get(), __browser, __service, __moreComing, );
 }}
var sel_netServiceBrowser_didRemoveDomain_moreComing_ = CachedSelector.init("netServiceBrowser:didRemoveDomain:moreComing:");
      pub fn netServiceBrowserdidRemoveDomainmoreComing(self: *Self, __browser:  * NSNetServiceBrowser, __domainString:  * NSString, __moreComing: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetServiceBrowser,  * NSString, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceBrowser_didRemoveDomain_moreComing_.get(), __browser, __domainString, __moreComing, );
 }}
var sel_netServiceBrowser_didRemoveService_moreComing_ = CachedSelector.init("netServiceBrowser:didRemoveService:moreComing:");
      pub fn netServiceBrowserdidRemoveServicemoreComing(self: *Self, __browser:  * NSNetServiceBrowser, __service:  * NSNetService, __moreComing: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNetServiceBrowser,  * NSNetService, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_netServiceBrowser_didRemoveService_moreComing_.get(), __browser, __service, __moreComing, );
 }}
  };
}

pub const NSNetServiceBrowserDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSNetServiceBrowserDelegateProtocolMixin(Self, "NSNetServiceBrowserDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNetServiceBrowserDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNetServiceBrowserDelegate");
};

pub fn NSKeyedUnarchiverDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_unarchiver_cannotDecodeObjectOfClassName_originalClasses_ = CachedSelector.init("unarchiver:cannotDecodeObjectOfClassName:originalClasses:");
      pub fn unarchivercannotDecodeObjectOfClassNameoriginalClasses(self: *Self, __unarchiver:  * NSKeyedUnarchiver, __name:  * NSString, __classNames:  * NSArray, ) Class {{
           return @as(*const fn(*Self, SEL,  * NSKeyedUnarchiver,  * NSString,  * NSArray, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unarchiver_cannotDecodeObjectOfClassName_originalClasses_.get(), __unarchiver, __name, __classNames, );
 }}
var sel_unarchiver_didDecodeObject_ = CachedSelector.init("unarchiver:didDecodeObject:");
      pub fn unarchiverdidDecodeObject(self: *Self, __unarchiver:  * NSKeyedUnarchiver, __object: id, ) id {{
           return @as(*const fn(*Self, SEL,  * NSKeyedUnarchiver, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unarchiver_didDecodeObject_.get(), __unarchiver, __object, );
 }}
var sel_unarchiver_willReplaceObject_withObject_ = CachedSelector.init("unarchiver:willReplaceObject:withObject:");
      pub fn unarchiverwillReplaceObjectwithObject(self: *Self, __unarchiver:  * NSKeyedUnarchiver, __object: id, __newObject: id, ) void {{
           return @as(*const fn(*Self, SEL,  * NSKeyedUnarchiver, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unarchiver_willReplaceObject_withObject_.get(), __unarchiver, __object, __newObject, );
 }}
var sel_unarchiverWillFinish_ = CachedSelector.init("unarchiverWillFinish:");
      pub fn unarchiverWillFinish(self: *Self, __unarchiver:  * NSKeyedUnarchiver, ) void {{
           return @as(*const fn(*Self, SEL,  * NSKeyedUnarchiver, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unarchiverWillFinish_.get(), __unarchiver, );
 }}
var sel_unarchiverDidFinish_ = CachedSelector.init("unarchiverDidFinish:");
      pub fn unarchiverDidFinish(self: *Self, __unarchiver:  * NSKeyedUnarchiver, ) void {{
           return @as(*const fn(*Self, SEL,  * NSKeyedUnarchiver, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unarchiverDidFinish_.get(), __unarchiver, );
 }}
  };
}

pub const NSKeyedUnarchiverDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSKeyedUnarchiverDelegateProtocolMixin(Self, "NSKeyedUnarchiverDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSKeyedUnarchiverDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSKeyedUnarchiverDelegate");
};

pub fn MTLFunctionProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_newArgumentEncoderWithBufferIndex_ = CachedSelector.init("newArgumentEncoderWithBufferIndex:");
      pub fn newArgumentEncoderWithBufferIndex(self: *Self, __bufferIndex: c_ulong, )  * MTLArgumentEncoder {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLArgumentEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newArgumentEncoderWithBufferIndex_.get(), __bufferIndex, );
 }}
var sel_newArgumentEncoderWithBufferIndex_reflection_ = CachedSelector.init("newArgumentEncoderWithBufferIndex:reflection:");
      pub fn newArgumentEncoderWithBufferIndexreflection(self: *Self, __bufferIndex: c_ulong, __reflection:  [*c]  ?* MTLArgument, )  * MTLArgumentEncoder {{
           return @as(*const fn(*Self, SEL, c_ulong,  [*c]  ?* MTLArgument, ) callconv(.C)  * MTLArgumentEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newArgumentEncoderWithBufferIndex_reflection_.get(), __bufferIndex, __reflection, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_functionType = CachedSelector.init("functionType");
      pub fn functionType(self: *Self, ) MTLFunctionType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLFunctionType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionType.get(), );
 }}
var sel_patchType = CachedSelector.init("patchType");
      pub fn patchType(self: *Self, ) MTLPatchType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPatchType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_patchType.get(), );
 }}
var sel_patchControlPointCount = CachedSelector.init("patchControlPointCount");
      pub fn patchControlPointCount(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_patchControlPointCount.get(), );
 }}
var sel_vertexAttributes = CachedSelector.init("vertexAttributes");
      pub fn vertexAttributes(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexAttributes.get(), );
 }}
var sel_stageInputAttributes = CachedSelector.init("stageInputAttributes");
      pub fn stageInputAttributes(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stageInputAttributes.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_functionConstantsDictionary = CachedSelector.init("functionConstantsDictionary");
      pub fn functionConstantsDictionary(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionConstantsDictionary.get(), );
 }}
var sel_options = CachedSelector.init("options");
      pub fn options(self: *Self, ) MTLFunctionOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLFunctionOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_options.get(), );
 }}
  };
}

pub const MTLFunction = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionProtocolMixin(Self, "MTLFunction");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunction");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunction");
};

pub fn NSXPCListenerDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_listener_shouldAcceptNewConnection_ = CachedSelector.init("listener:shouldAcceptNewConnection:");
      pub fn listenershouldAcceptNewConnection(self: *Self, __listener:  * NSXPCListener, __newConnection:  * NSXPCConnection, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSXPCListener,  * NSXPCConnection, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_listener_shouldAcceptNewConnection_.get(), __listener, __newConnection, );
 }}
  };
}

pub const NSXPCListenerDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSXPCListenerDelegateProtocolMixin(Self, "NSXPCListenerDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXPCListenerDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXPCListenerDelegate");
};

pub fn MTLLogContainerProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const MTLLogContainer = opaque {
  const Self = @This();
  pub usingnamespace MTLLogContainerProtocolMixin(Self, "MTLLogContainer");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "MTLLogContainer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLLogContainer");
};

pub fn MTLThreadgroupBindingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_threadgroupMemoryAlignment = CachedSelector.init("threadgroupMemoryAlignment");
      pub fn threadgroupMemoryAlignment(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadgroupMemoryAlignment.get(), );
 }}
var sel_threadgroupMemoryDataSize = CachedSelector.init("threadgroupMemoryDataSize");
      pub fn threadgroupMemoryDataSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadgroupMemoryDataSize.get(), );
 }}
  };
}

pub const MTLThreadgroupBinding = opaque {
  const Self = @This();
  pub usingnamespace MTLThreadgroupBindingProtocolMixin(Self, "MTLThreadgroupBinding");
  pub usingnamespace MTLBindingProtocolMixin(Self, "MTLThreadgroupBinding");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLThreadgroupBinding");
};

pub fn MTLBindingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, ) MTLBindingType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBindingType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
var sel_access = CachedSelector.init("access");
      pub fn access(self: *Self, ) MTLBindingAccess {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBindingAccess, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_access.get(), );
 }}
var sel_index = CachedSelector.init("index");
      pub fn index(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_index.get(), );
 }}
var sel_isUsed = CachedSelector.init("isUsed");
      pub fn isUsed(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isUsed.get(), );
 }}
var sel_isArgument = CachedSelector.init("isArgument");
      pub fn isArgument(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isArgument.get(), );
 }}
  };
}

pub const MTLBinding = opaque {
  const Self = @This();
  pub usingnamespace MTLBindingProtocolMixin(Self, "MTLBinding");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBinding");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBinding");
};

pub fn MTLResourceProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setPurgeableState_ = CachedSelector.init("setPurgeableState:");
      pub fn setPurgeableState(self: *Self, __state: MTLPurgeableState, ) MTLPurgeableState {{
           return @as(*const fn(*Self, SEL, MTLPurgeableState, ) callconv(.C) MTLPurgeableState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPurgeableState_.get(), __state, );
 }}
var sel_makeAliasable = CachedSelector.init("makeAliasable");
      pub fn makeAliasable(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_makeAliasable.get(), );
 }}
var sel_isAliasable = CachedSelector.init("isAliasable");
      pub fn isAliasable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAliasable.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_cpuCacheMode = CachedSelector.init("cpuCacheMode");
      pub fn cpuCacheMode(self: *Self, ) MTLCPUCacheMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCPUCacheMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cpuCacheMode.get(), );
 }}
var sel_storageMode = CachedSelector.init("storageMode");
      pub fn storageMode(self: *Self, ) MTLStorageMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStorageMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storageMode.get(), );
 }}
var sel_hazardTrackingMode = CachedSelector.init("hazardTrackingMode");
      pub fn hazardTrackingMode(self: *Self, ) MTLHazardTrackingMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLHazardTrackingMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hazardTrackingMode.get(), );
 }}
var sel_resourceOptions = CachedSelector.init("resourceOptions");
      pub fn resourceOptions(self: *Self, ) MTLResourceOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceOptions.get(), );
 }}
var sel_heap = CachedSelector.init("heap");
      pub fn heap(self: *Self, )  ?* MTLHeap {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLHeap, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_heap.get(), );
 }}
var sel_heapOffset = CachedSelector.init("heapOffset");
      pub fn heapOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_heapOffset.get(), );
 }}
var sel_allocatedSize = CachedSelector.init("allocatedSize");
      pub fn allocatedSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allocatedSize.get(), );
 }}
  };
}

pub const MTLResource = opaque {
  const Self = @This();
  pub usingnamespace MTLResourceProtocolMixin(Self, "MTLResource");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLResource");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLResource");
};

pub fn MTLTextureBindingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_textureType = CachedSelector.init("textureType");
      pub fn textureType(self: *Self, ) MTLTextureType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureType.get(), );
 }}
var sel_textureDataType = CachedSelector.init("textureDataType");
      pub fn textureDataType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureDataType.get(), );
 }}
var sel_isDepthTexture = CachedSelector.init("isDepthTexture");
      pub fn isDepthTexture(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDepthTexture.get(), );
 }}
var sel_arrayLength = CachedSelector.init("arrayLength");
      pub fn arrayLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayLength.get(), );
 }}
  };
}

pub const MTLTextureBinding = opaque {
  const Self = @This();
  pub usingnamespace MTLTextureBindingProtocolMixin(Self, "MTLTextureBinding");
  pub usingnamespace MTLBindingProtocolMixin(Self, "MTLTextureBinding");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLTextureBinding");
};

pub fn MTLParallelRenderCommandEncoderProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_renderCommandEncoder = CachedSelector.init("renderCommandEncoder");
      pub fn renderCommandEncoder(self: *Self, )  ?* MTLRenderCommandEncoder {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLRenderCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_renderCommandEncoder.get(), );
 }}
var sel_setColorStoreAction_atIndex_ = CachedSelector.init("setColorStoreAction:atIndex:");
      pub fn setColorStoreActionatIndex(self: *Self, __storeAction: MTLStoreAction, __colorAttachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreAction, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setColorStoreAction_atIndex_.get(), __storeAction, __colorAttachmentIndex, );
 }}
var sel_setDepthStoreAction_ = CachedSelector.init("setDepthStoreAction:");
      pub fn setDepthStoreAction(self: *Self, __storeAction: MTLStoreAction, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreAction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthStoreAction_.get(), __storeAction, );
 }}
var sel_setStencilStoreAction_ = CachedSelector.init("setStencilStoreAction:");
      pub fn setStencilStoreAction(self: *Self, __storeAction: MTLStoreAction, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreAction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilStoreAction_.get(), __storeAction, );
 }}
var sel_setColorStoreActionOptions_atIndex_ = CachedSelector.init("setColorStoreActionOptions:atIndex:");
      pub fn setColorStoreActionOptionsatIndex(self: *Self, __storeActionOptions: MTLStoreActionOptions, __colorAttachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreActionOptions, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setColorStoreActionOptions_atIndex_.get(), __storeActionOptions, __colorAttachmentIndex, );
 }}
var sel_setDepthStoreActionOptions_ = CachedSelector.init("setDepthStoreActionOptions:");
      pub fn setDepthStoreActionOptions(self: *Self, __storeActionOptions: MTLStoreActionOptions, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreActionOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthStoreActionOptions_.get(), __storeActionOptions, );
 }}
var sel_setStencilStoreActionOptions_ = CachedSelector.init("setStencilStoreActionOptions:");
      pub fn setStencilStoreActionOptions(self: *Self, __storeActionOptions: MTLStoreActionOptions, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreActionOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilStoreActionOptions_.get(), __storeActionOptions, );
 }}
  };
}

pub const MTLParallelRenderCommandEncoder = opaque {
  const Self = @This();
  pub usingnamespace MTLParallelRenderCommandEncoderProtocolMixin(Self, "MTLParallelRenderCommandEncoder");
  pub usingnamespace MTLCommandEncoderProtocolMixin(Self, "MTLParallelRenderCommandEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLParallelRenderCommandEncoder");
};

pub fn MTLFunctionStitchingAttributeProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const MTLFunctionStitchingAttribute = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionStitchingAttributeProtocolMixin(Self, "MTLFunctionStitchingAttribute");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionStitchingAttribute");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionStitchingAttribute");
};

pub fn MTLArgumentEncoderProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setArgumentBuffer_offset_ = CachedSelector.init("setArgumentBuffer:offset:");
      pub fn setArgumentBufferoffset(self: *Self, __argumentBuffer:  ?* MTLBuffer, __offset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArgumentBuffer_offset_.get(), __argumentBuffer, __offset, );
 }}
var sel_setArgumentBuffer_startOffset_arrayElement_ = CachedSelector.init("setArgumentBuffer:startOffset:arrayElement:");
      pub fn setArgumentBufferstartOffsetarrayElement(self: *Self, __argumentBuffer:  ?* MTLBuffer, __startOffset: c_ulong, __arrayElement: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArgumentBuffer_startOffset_arrayElement_.get(), __argumentBuffer, __startOffset, __arrayElement, );
 }}
var sel_setBuffer_offset_atIndex_ = CachedSelector.init("setBuffer:offset:atIndex:");
      pub fn setBufferoffsetatIndex(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setBuffers_offsets_withRange_ = CachedSelector.init("setBuffers:offsets:withRange:");
      pub fn setBuffersoffsetswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBuffers_offsets_withRange_.get(), __buffers, __offsets, __range, );
 }}
var sel_setTexture_atIndex_ = CachedSelector.init("setTexture:atIndex:");
      pub fn setTextureatIndex(self: *Self, __texture:  ?* MTLTexture, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLTexture, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTexture_atIndex_.get(), __texture, __index, );
 }}
var sel_setTextures_withRange_ = CachedSelector.init("setTextures:withRange:");
      pub fn setTextureswithRange(self: *Self, __textures: [*c] ?* MTLTexture, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLTexture, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextures_withRange_.get(), __textures, __range, );
 }}
var sel_setSamplerState_atIndex_ = CachedSelector.init("setSamplerState:atIndex:");
      pub fn setSamplerStateatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSamplerState_atIndex_.get(), __sampler, __index, );
 }}
var sel_setSamplerStates_withRange_ = CachedSelector.init("setSamplerStates:withRange:");
      pub fn setSamplerStateswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSamplerStates_withRange_.get(), __samplers, __range, );
 }}
var sel_constantDataAtIndex_ = CachedSelector.init("constantDataAtIndex:");
      pub fn constantDataAtIndex(self: *Self, __index: c_ulong, )  [*c] void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  [*c] void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_constantDataAtIndex_.get(), __index, );
 }}
var sel_setRenderPipelineState_atIndex_ = CachedSelector.init("setRenderPipelineState:atIndex:");
      pub fn setRenderPipelineStateatIndex(self: *Self, __pipeline:  ?* MTLRenderPipelineState, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLRenderPipelineState, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRenderPipelineState_atIndex_.get(), __pipeline, __index, );
 }}
var sel_setRenderPipelineStates_withRange_ = CachedSelector.init("setRenderPipelineStates:withRange:");
      pub fn setRenderPipelineStateswithRange(self: *Self, __pipelines: [*c] ?* MTLRenderPipelineState, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLRenderPipelineState, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRenderPipelineStates_withRange_.get(), __pipelines, __range, );
 }}
var sel_setComputePipelineState_atIndex_ = CachedSelector.init("setComputePipelineState:atIndex:");
      pub fn setComputePipelineStateatIndex(self: *Self, __pipeline:  ?* MTLComputePipelineState, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLComputePipelineState, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setComputePipelineState_atIndex_.get(), __pipeline, __index, );
 }}
var sel_setComputePipelineStates_withRange_ = CachedSelector.init("setComputePipelineStates:withRange:");
      pub fn setComputePipelineStateswithRange(self: *Self, __pipelines: [*c] ?* MTLComputePipelineState, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLComputePipelineState, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setComputePipelineStates_withRange_.get(), __pipelines, __range, );
 }}
var sel_setIndirectCommandBuffer_atIndex_ = CachedSelector.init("setIndirectCommandBuffer:atIndex:");
      pub fn setIndirectCommandBufferatIndex(self: *Self, __indirectCommandBuffer:  ?* MTLIndirectCommandBuffer, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLIndirectCommandBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndirectCommandBuffer_atIndex_.get(), __indirectCommandBuffer, __index, );
 }}
var sel_setIndirectCommandBuffers_withRange_ = CachedSelector.init("setIndirectCommandBuffers:withRange:");
      pub fn setIndirectCommandBufferswithRange(self: *Self, __buffers: [*c] ?* MTLIndirectCommandBuffer, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLIndirectCommandBuffer, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndirectCommandBuffers_withRange_.get(), __buffers, __range, );
 }}
var sel_setAccelerationStructure_atIndex_ = CachedSelector.init("setAccelerationStructure:atIndex:");
      pub fn setAccelerationStructureatIndex(self: *Self, __accelerationStructure:  ?* MTLAccelerationStructure, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLAccelerationStructure, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAccelerationStructure_atIndex_.get(), __accelerationStructure, __index, );
 }}
var sel_newArgumentEncoderForBufferAtIndex_ = CachedSelector.init("newArgumentEncoderForBufferAtIndex:");
      pub fn newArgumentEncoderForBufferAtIndex(self: *Self, __index: c_ulong, )  ?* MTLArgumentEncoder {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* MTLArgumentEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newArgumentEncoderForBufferAtIndex_.get(), __index, );
 }}
var sel_setVisibleFunctionTable_atIndex_ = CachedSelector.init("setVisibleFunctionTable:atIndex:");
      pub fn setVisibleFunctionTableatIndex(self: *Self, __visibleFunctionTable:  ?* MTLVisibleFunctionTable, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLVisibleFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVisibleFunctionTable_atIndex_.get(), __visibleFunctionTable, __index, );
 }}
var sel_setVisibleFunctionTables_withRange_ = CachedSelector.init("setVisibleFunctionTables:withRange:");
      pub fn setVisibleFunctionTableswithRange(self: *Self, __visibleFunctionTables: [*c] ?* MTLVisibleFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLVisibleFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVisibleFunctionTables_withRange_.get(), __visibleFunctionTables, __range, );
 }}
var sel_setIntersectionFunctionTable_atIndex_ = CachedSelector.init("setIntersectionFunctionTable:atIndex:");
      pub fn setIntersectionFunctionTableatIndex(self: *Self, __intersectionFunctionTable:  ?* MTLIntersectionFunctionTable, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLIntersectionFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIntersectionFunctionTable_atIndex_.get(), __intersectionFunctionTable, __index, );
 }}
var sel_setIntersectionFunctionTables_withRange_ = CachedSelector.init("setIntersectionFunctionTables:withRange:");
      pub fn setIntersectionFunctionTableswithRange(self: *Self, __intersectionFunctionTables: [*c] ?* MTLIntersectionFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLIntersectionFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIntersectionFunctionTables_withRange_.get(), __intersectionFunctionTables, __range, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_encodedLength = CachedSelector.init("encodedLength");
      pub fn encodedLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodedLength.get(), );
 }}
var sel_alignment = CachedSelector.init("alignment");
      pub fn alignment(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_alignment.get(), );
 }}
  };
}

pub const MTLArgumentEncoder = opaque {
  const Self = @This();
  pub usingnamespace MTLArgumentEncoderProtocolMixin(Self, "MTLArgumentEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLArgumentEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLArgumentEncoder");
};

pub fn NSObjectProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_isEqual_ = CachedSelector.init("isEqual:");
      pub fn isEqual(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqual_.get(), __object, );
 }}
var sel_class = CachedSelector.init("class");
      pub fn _class(self: *Self, ) Class {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_class.get(), );
 }}
var sel_self = CachedSelector.init("self");
      pub fn _self(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_self.get(), );
 }}
var sel_performSelector_ = CachedSelector.init("performSelector:");
      pub fn performSelector(self: *Self, __aSelector: SEL, ) id {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelector_.get(), __aSelector, );
 }}
var sel_performSelector_withObject_ = CachedSelector.init("performSelector:withObject:");
      pub fn performSelectorwithObject(self: *Self, __aSelector: SEL, __object: id, ) id {{
           return @as(*const fn(*Self, SEL, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelector_withObject_.get(), __aSelector, __object, );
 }}
var sel_performSelector_withObject_withObject_ = CachedSelector.init("performSelector:withObject:withObject:");
      pub fn performSelectorwithObjectwithObject(self: *Self, __aSelector: SEL, __object1: id, __object2: id, ) id {{
           return @as(*const fn(*Self, SEL, SEL, id, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelector_withObject_withObject_.get(), __aSelector, __object1, __object2, );
 }}
var sel_isProxy = CachedSelector.init("isProxy");
      pub fn isProxy(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isProxy.get(), );
 }}
var sel_isKindOfClass_ = CachedSelector.init("isKindOfClass:");
      pub fn isKindOfClass(self: *Self, __aClass: Class, ) c_int {{
           return @as(*const fn(*Self, SEL, Class, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isKindOfClass_.get(), __aClass, );
 }}
var sel_isMemberOfClass_ = CachedSelector.init("isMemberOfClass:");
      pub fn isMemberOfClass(self: *Self, __aClass: Class, ) c_int {{
           return @as(*const fn(*Self, SEL, Class, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isMemberOfClass_.get(), __aClass, );
 }}
var sel_conformsToProtocol_ = CachedSelector.init("conformsToProtocol:");
      pub fn conformsToProtocol(self: *Self, __aProtocol:  * Protocol, ) c_int {{
           return @as(*const fn(*Self, SEL,  * Protocol, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_conformsToProtocol_.get(), __aProtocol, );
 }}
var sel_respondsToSelector_ = CachedSelector.init("respondsToSelector:");
      pub fn respondsToSelector(self: *Self, __aSelector: SEL, ) c_int {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_respondsToSelector_.get(), __aSelector, );
 }}
var sel_retain = CachedSelector.init("retain");
      pub fn retain(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_retain.get(), );
 }}
var sel_release = CachedSelector.init("release");
      pub fn release(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_release.get(), );
 }}
var sel_autorelease = CachedSelector.init("autorelease");
      pub fn autorelease(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_autorelease.get(), );
 }}
var sel_retainCount = CachedSelector.init("retainCount");
      pub fn retainCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_retainCount.get(), );
 }}
var sel_zone = CachedSelector.init("zone");
      pub fn zone(self: *Self, )  [*c] _NSZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] _NSZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_zone.get(), );
 }}
var sel_hash = CachedSelector.init("hash");
      pub fn hash(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hash.get(), );
 }}
var sel_superclass = CachedSelector.init("superclass");
      pub fn superclass(self: *Self, ) Class {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_superclass.get(), );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_debugDescription = CachedSelector.init("debugDescription");
      pub fn debugDescription(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_debugDescription.get(), );
 }}
  };
}

pub fn NSCodingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_encodeWithCoder_ = CachedSelector.init("encodeWithCoder:");
      pub fn encodeWithCoder(self: *Self, __coder:  * NSCoder, ) void {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeWithCoder_.get(), __coder, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
  };
}

pub const NSCoding = opaque {
  const Self = @This();
  pub usingnamespace NSCodingProtocolMixin(Self, "NSCoding");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCoding");
};

pub fn MTLComputeCommandEncoderProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setComputePipelineState_ = CachedSelector.init("setComputePipelineState:");
      pub fn setComputePipelineState(self: *Self, __state:  * MTLComputePipelineState, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLComputePipelineState, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setComputePipelineState_.get(), __state, );
 }}
var sel_setBytes_length_atIndex_ = CachedSelector.init("setBytes:length:atIndex:");
      pub fn setByteslengthatIndex(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBytes_length_atIndex_.get(), __bytes, __length, __index, );
 }}
var sel_setBuffer_offset_atIndex_ = CachedSelector.init("setBuffer:offset:atIndex:");
      pub fn setBufferoffsetatIndex(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setBufferOffset_atIndex_ = CachedSelector.init("setBufferOffset:atIndex:");
      pub fn setBufferOffsetatIndex(self: *Self, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBufferOffset_atIndex_.get(), __offset, __index, );
 }}
var sel_setBuffers_offsets_withRange_ = CachedSelector.init("setBuffers:offsets:withRange:");
      pub fn setBuffersoffsetswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBuffers_offsets_withRange_.get(), __buffers, __offsets, __range, );
 }}
var sel_setBuffer_offset_attributeStride_atIndex_ = CachedSelector.init("setBuffer:offset:attributeStride:atIndex:");
      pub fn setBufferoffsetattributeStrideatIndex(self: *Self, __buffer:  * MTLBuffer, __offset: c_ulong, __stride: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBuffer_offset_attributeStride_atIndex_.get(), __buffer, __offset, __stride, __index, );
 }}
var sel_setBuffers_offsets_attributeStrides_withRange_ = CachedSelector.init("setBuffers:offsets:attributeStrides:withRange:");
      pub fn setBuffersoffsetsattributeStrideswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __strides: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBuffers_offsets_attributeStrides_withRange_.get(), __buffers, __offsets, __strides, __range, );
 }}
var sel_setBufferOffset_attributeStride_atIndex_ = CachedSelector.init("setBufferOffset:attributeStride:atIndex:");
      pub fn setBufferOffsetattributeStrideatIndex(self: *Self, __offset: c_ulong, __stride: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBufferOffset_attributeStride_atIndex_.get(), __offset, __stride, __index, );
 }}
var sel_setBytes_length_attributeStride_atIndex_ = CachedSelector.init("setBytes:length:attributeStride:atIndex:");
      pub fn setByteslengthattributeStrideatIndex(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, __stride: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBytes_length_attributeStride_atIndex_.get(), __bytes, __length, __stride, __index, );
 }}
var sel_setVisibleFunctionTable_atBufferIndex_ = CachedSelector.init("setVisibleFunctionTable:atBufferIndex:");
      pub fn setVisibleFunctionTableatBufferIndex(self: *Self, __visibleFunctionTable:  ?* MTLVisibleFunctionTable, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLVisibleFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVisibleFunctionTable_atBufferIndex_.get(), __visibleFunctionTable, __bufferIndex, );
 }}
var sel_setVisibleFunctionTables_withBufferRange_ = CachedSelector.init("setVisibleFunctionTables:withBufferRange:");
      pub fn setVisibleFunctionTableswithBufferRange(self: *Self, __visibleFunctionTables: [*c] ?* MTLVisibleFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLVisibleFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVisibleFunctionTables_withBufferRange_.get(), __visibleFunctionTables, __range, );
 }}
var sel_setIntersectionFunctionTable_atBufferIndex_ = CachedSelector.init("setIntersectionFunctionTable:atBufferIndex:");
      pub fn setIntersectionFunctionTableatBufferIndex(self: *Self, __intersectionFunctionTable:  ?* MTLIntersectionFunctionTable, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLIntersectionFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIntersectionFunctionTable_atBufferIndex_.get(), __intersectionFunctionTable, __bufferIndex, );
 }}
var sel_setIntersectionFunctionTables_withBufferRange_ = CachedSelector.init("setIntersectionFunctionTables:withBufferRange:");
      pub fn setIntersectionFunctionTableswithBufferRange(self: *Self, __intersectionFunctionTables: [*c] ?* MTLIntersectionFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLIntersectionFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIntersectionFunctionTables_withBufferRange_.get(), __intersectionFunctionTables, __range, );
 }}
var sel_setAccelerationStructure_atBufferIndex_ = CachedSelector.init("setAccelerationStructure:atBufferIndex:");
      pub fn setAccelerationStructureatBufferIndex(self: *Self, __accelerationStructure:  ?* MTLAccelerationStructure, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLAccelerationStructure, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAccelerationStructure_atBufferIndex_.get(), __accelerationStructure, __bufferIndex, );
 }}
var sel_setTexture_atIndex_ = CachedSelector.init("setTexture:atIndex:");
      pub fn setTextureatIndex(self: *Self, __texture:  ?* MTLTexture, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLTexture, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTexture_atIndex_.get(), __texture, __index, );
 }}
var sel_setTextures_withRange_ = CachedSelector.init("setTextures:withRange:");
      pub fn setTextureswithRange(self: *Self, __textures: [*c] ?* MTLTexture, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLTexture, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextures_withRange_.get(), __textures, __range, );
 }}
var sel_setSamplerState_atIndex_ = CachedSelector.init("setSamplerState:atIndex:");
      pub fn setSamplerStateatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSamplerState_atIndex_.get(), __sampler, __index, );
 }}
var sel_setSamplerStates_withRange_ = CachedSelector.init("setSamplerStates:withRange:");
      pub fn setSamplerStateswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSamplerStates_withRange_.get(), __samplers, __range, );
 }}
var sel_setSamplerState_lodMinClamp_lodMaxClamp_atIndex_ = CachedSelector.init("setSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
      pub fn setSamplerStatelodMinClamplodMaxClampatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __lodMinClamp: f32, __lodMaxClamp: f32, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, f32, f32, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSamplerState_lodMinClamp_lodMaxClamp_atIndex_.get(), __sampler, __lodMinClamp, __lodMaxClamp, __index, );
 }}
var sel_setSamplerStates_lodMinClamps_lodMaxClamps_withRange_ = CachedSelector.init("setSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
      pub fn setSamplerStateslodMinClampslodMaxClampswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __lodMinClamps: [*c]f32, __lodMaxClamps: [*c]f32, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, [*c]f32, [*c]f32, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSamplerStates_lodMinClamps_lodMaxClamps_withRange_.get(), __samplers, __lodMinClamps, __lodMaxClamps, __range, );
 }}
var sel_setThreadgroupMemoryLength_atIndex_ = CachedSelector.init("setThreadgroupMemoryLength:atIndex:");
      pub fn setThreadgroupMemoryLengthatIndex(self: *Self, __length: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setThreadgroupMemoryLength_atIndex_.get(), __length, __index, );
 }}
var sel_setImageblockWidth_height_ = CachedSelector.init("setImageblockWidth:height:");
      pub fn setImageblockWidthheight(self: *Self, __width: c_ulong, __height: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setImageblockWidth_height_.get(), __width, __height, );
 }}
var sel_setStageInRegion_ = CachedSelector.init("setStageInRegion:");
      pub fn setStageInRegion(self: *Self, __region: MTLRegion, ) void {{
           return @as(*const fn(*Self, SEL, MTLRegion, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStageInRegion_.get(), __region, );
 }}
var sel_setStageInRegionWithIndirectBuffer_indirectBufferOffset_ = CachedSelector.init("setStageInRegionWithIndirectBuffer:indirectBufferOffset:");
      pub fn setStageInRegionWithIndirectBufferindirectBufferOffset(self: *Self, __indirectBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStageInRegionWithIndirectBuffer_indirectBufferOffset_.get(), __indirectBuffer, __indirectBufferOffset, );
 }}
var sel_dispatchThreadgroups_threadsPerThreadgroup_ = CachedSelector.init("dispatchThreadgroups:threadsPerThreadgroup:");
      pub fn dispatchThreadgroupsthreadsPerThreadgroup(self: *Self, __threadgroupsPerGrid: MTLSize, __threadsPerThreadgroup: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSize, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatchThreadgroups_threadsPerThreadgroup_.get(), __threadgroupsPerGrid, __threadsPerThreadgroup, );
 }}
var sel_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup_ = CachedSelector.init("dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:");
      pub fn dispatchThreadgroupsWithIndirectBufferindirectBufferOffsetthreadsPerThreadgroup(self: *Self, __indirectBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, __threadsPerThreadgroup: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup_.get(), __indirectBuffer, __indirectBufferOffset, __threadsPerThreadgroup, );
 }}
var sel_dispatchThreads_threadsPerThreadgroup_ = CachedSelector.init("dispatchThreads:threadsPerThreadgroup:");
      pub fn dispatchThreadsthreadsPerThreadgroup(self: *Self, __threadsPerGrid: MTLSize, __threadsPerThreadgroup: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSize, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatchThreads_threadsPerThreadgroup_.get(), __threadsPerGrid, __threadsPerThreadgroup, );
 }}
var sel_updateFence_ = CachedSelector.init("updateFence:");
      pub fn updateFence(self: *Self, __fence:  * MTLFence, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_updateFence_.get(), __fence, );
 }}
var sel_waitForFence_ = CachedSelector.init("waitForFence:");
      pub fn waitForFence(self: *Self, __fence:  * MTLFence, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitForFence_.get(), __fence, );
 }}
var sel_useResource_usage_ = CachedSelector.init("useResource:usage:");
      pub fn useResourceusage(self: *Self, __resource:  * MTLResource, __usage: MTLResourceUsage, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLResource, MTLResourceUsage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useResource_usage_.get(), __resource, __usage, );
 }}
var sel_useResources_count_usage_ = CachedSelector.init("useResources:count:usage:");
      pub fn useResourcescountusage(self: *Self, __resources: [*c] * MTLResource, __count: c_ulong, __usage: MTLResourceUsage, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLResource, c_ulong, MTLResourceUsage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useResources_count_usage_.get(), __resources, __count, __usage, );
 }}
var sel_useHeap_ = CachedSelector.init("useHeap:");
      pub fn useHeap(self: *Self, __heap:  * MTLHeap, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLHeap, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useHeap_.get(), __heap, );
 }}
var sel_useHeaps_count_ = CachedSelector.init("useHeaps:count:");
      pub fn useHeapscount(self: *Self, __heaps: [*c] * MTLHeap, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLHeap, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useHeaps_count_.get(), __heaps, __count, );
 }}
var sel_executeCommandsInBuffer_withRange_ = CachedSelector.init("executeCommandsInBuffer:withRange:");
      pub fn executeCommandsInBufferwithRange(self: *Self, __indirectCommandBuffer:  * MTLIndirectCommandBuffer, __executionRange: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLIndirectCommandBuffer, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeCommandsInBuffer_withRange_.get(), __indirectCommandBuffer, __executionRange, );
 }}
var sel_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset_ = CachedSelector.init("executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:");
      pub fn executeCommandsInBufferindirectBufferindirectBufferOffset(self: *Self, __indirectCommandbuffer:  * MTLIndirectCommandBuffer, __indirectRangeBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLIndirectCommandBuffer,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset_.get(), __indirectCommandbuffer, __indirectRangeBuffer, __indirectBufferOffset, );
 }}
var sel_memoryBarrierWithScope_ = CachedSelector.init("memoryBarrierWithScope:");
      pub fn memoryBarrierWithScope(self: *Self, __scope: MTLBarrierScope, ) void {{
           return @as(*const fn(*Self, SEL, MTLBarrierScope, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_memoryBarrierWithScope_.get(), __scope, );
 }}
var sel_memoryBarrierWithResources_count_ = CachedSelector.init("memoryBarrierWithResources:count:");
      pub fn memoryBarrierWithResourcescount(self: *Self, __resources: [*c] * MTLResource, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLResource, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_memoryBarrierWithResources_count_.get(), __resources, __count, );
 }}
var sel_sampleCountersInBuffer_atSampleIndex_withBarrier_ = CachedSelector.init("sampleCountersInBuffer:atSampleIndex:withBarrier:");
      pub fn sampleCountersInBufferatSampleIndexwithBarrier(self: *Self, __sampleBuffer:  * MTLCounterSampleBuffer, __sampleIndex: c_ulong, __barrier: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLCounterSampleBuffer, c_ulong, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCountersInBuffer_atSampleIndex_withBarrier_.get(), __sampleBuffer, __sampleIndex, __barrier, );
 }}
var sel_dispatchType = CachedSelector.init("dispatchType");
      pub fn dispatchType(self: *Self, ) MTLDispatchType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDispatchType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatchType.get(), );
 }}
  };
}

pub const MTLComputeCommandEncoder = opaque {
  const Self = @This();
  pub usingnamespace MTLComputeCommandEncoderProtocolMixin(Self, "MTLComputeCommandEncoder");
  pub usingnamespace MTLCommandEncoderProtocolMixin(Self, "MTLComputeCommandEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLComputeCommandEncoder");
};

pub fn MTLRenderCommandEncoderProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setRenderPipelineState_ = CachedSelector.init("setRenderPipelineState:");
      pub fn setRenderPipelineState(self: *Self, __pipelineState:  * MTLRenderPipelineState, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPipelineState, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRenderPipelineState_.get(), __pipelineState, );
 }}
var sel_setVertexBytes_length_atIndex_ = CachedSelector.init("setVertexBytes:length:atIndex:");
      pub fn setVertexByteslengthatIndex(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBytes_length_atIndex_.get(), __bytes, __length, __index, );
 }}
var sel_setVertexBuffer_offset_atIndex_ = CachedSelector.init("setVertexBuffer:offset:atIndex:");
      pub fn setVertexBufferoffsetatIndex(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setVertexBufferOffset_atIndex_ = CachedSelector.init("setVertexBufferOffset:atIndex:");
      pub fn setVertexBufferOffsetatIndex(self: *Self, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBufferOffset_atIndex_.get(), __offset, __index, );
 }}
var sel_setVertexBuffers_offsets_withRange_ = CachedSelector.init("setVertexBuffers:offsets:withRange:");
      pub fn setVertexBuffersoffsetswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBuffers_offsets_withRange_.get(), __buffers, __offsets, __range, );
 }}
var sel_setVertexBuffer_offset_attributeStride_atIndex_ = CachedSelector.init("setVertexBuffer:offset:attributeStride:atIndex:");
      pub fn setVertexBufferoffsetattributeStrideatIndex(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __stride: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBuffer_offset_attributeStride_atIndex_.get(), __buffer, __offset, __stride, __index, );
 }}
var sel_setVertexBuffers_offsets_attributeStrides_withRange_ = CachedSelector.init("setVertexBuffers:offsets:attributeStrides:withRange:");
      pub fn setVertexBuffersoffsetsattributeStrideswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __strides: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBuffers_offsets_attributeStrides_withRange_.get(), __buffers, __offsets, __strides, __range, );
 }}
var sel_setVertexBufferOffset_attributeStride_atIndex_ = CachedSelector.init("setVertexBufferOffset:attributeStride:atIndex:");
      pub fn setVertexBufferOffsetattributeStrideatIndex(self: *Self, __offset: c_ulong, __stride: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBufferOffset_attributeStride_atIndex_.get(), __offset, __stride, __index, );
 }}
var sel_setVertexBytes_length_attributeStride_atIndex_ = CachedSelector.init("setVertexBytes:length:attributeStride:atIndex:");
      pub fn setVertexByteslengthattributeStrideatIndex(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, __stride: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBytes_length_attributeStride_atIndex_.get(), __bytes, __length, __stride, __index, );
 }}
var sel_setVertexTexture_atIndex_ = CachedSelector.init("setVertexTexture:atIndex:");
      pub fn setVertexTextureatIndex(self: *Self, __texture:  ?* MTLTexture, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLTexture, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexTexture_atIndex_.get(), __texture, __index, );
 }}
var sel_setVertexTextures_withRange_ = CachedSelector.init("setVertexTextures:withRange:");
      pub fn setVertexTextureswithRange(self: *Self, __textures: [*c] ?* MTLTexture, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLTexture, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexTextures_withRange_.get(), __textures, __range, );
 }}
var sel_setVertexSamplerState_atIndex_ = CachedSelector.init("setVertexSamplerState:atIndex:");
      pub fn setVertexSamplerStateatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexSamplerState_atIndex_.get(), __sampler, __index, );
 }}
var sel_setVertexSamplerStates_withRange_ = CachedSelector.init("setVertexSamplerStates:withRange:");
      pub fn setVertexSamplerStateswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexSamplerStates_withRange_.get(), __samplers, __range, );
 }}
var sel_setVertexSamplerState_lodMinClamp_lodMaxClamp_atIndex_ = CachedSelector.init("setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
      pub fn setVertexSamplerStatelodMinClamplodMaxClampatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __lodMinClamp: f32, __lodMaxClamp: f32, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, f32, f32, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexSamplerState_lodMinClamp_lodMaxClamp_atIndex_.get(), __sampler, __lodMinClamp, __lodMaxClamp, __index, );
 }}
var sel_setVertexSamplerStates_lodMinClamps_lodMaxClamps_withRange_ = CachedSelector.init("setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
      pub fn setVertexSamplerStateslodMinClampslodMaxClampswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __lodMinClamps: [*c]f32, __lodMaxClamps: [*c]f32, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, [*c]f32, [*c]f32, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexSamplerStates_lodMinClamps_lodMaxClamps_withRange_.get(), __samplers, __lodMinClamps, __lodMaxClamps, __range, );
 }}
var sel_setVertexVisibleFunctionTable_atBufferIndex_ = CachedSelector.init("setVertexVisibleFunctionTable:atBufferIndex:");
      pub fn setVertexVisibleFunctionTableatBufferIndex(self: *Self, __functionTable:  ?* MTLVisibleFunctionTable, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLVisibleFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexVisibleFunctionTable_atBufferIndex_.get(), __functionTable, __bufferIndex, );
 }}
var sel_setVertexVisibleFunctionTables_withBufferRange_ = CachedSelector.init("setVertexVisibleFunctionTables:withBufferRange:");
      pub fn setVertexVisibleFunctionTableswithBufferRange(self: *Self, __functionTables: [*c] ?* MTLVisibleFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLVisibleFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexVisibleFunctionTables_withBufferRange_.get(), __functionTables, __range, );
 }}
var sel_setVertexIntersectionFunctionTable_atBufferIndex_ = CachedSelector.init("setVertexIntersectionFunctionTable:atBufferIndex:");
      pub fn setVertexIntersectionFunctionTableatBufferIndex(self: *Self, __intersectionFunctionTable:  ?* MTLIntersectionFunctionTable, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLIntersectionFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexIntersectionFunctionTable_atBufferIndex_.get(), __intersectionFunctionTable, __bufferIndex, );
 }}
var sel_setVertexIntersectionFunctionTables_withBufferRange_ = CachedSelector.init("setVertexIntersectionFunctionTables:withBufferRange:");
      pub fn setVertexIntersectionFunctionTableswithBufferRange(self: *Self, __intersectionFunctionTables: [*c] ?* MTLIntersectionFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLIntersectionFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexIntersectionFunctionTables_withBufferRange_.get(), __intersectionFunctionTables, __range, );
 }}
var sel_setVertexAccelerationStructure_atBufferIndex_ = CachedSelector.init("setVertexAccelerationStructure:atBufferIndex:");
      pub fn setVertexAccelerationStructureatBufferIndex(self: *Self, __accelerationStructure:  ?* MTLAccelerationStructure, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLAccelerationStructure, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexAccelerationStructure_atBufferIndex_.get(), __accelerationStructure, __bufferIndex, );
 }}
var sel_setViewport_ = CachedSelector.init("setViewport:");
      pub fn setViewport(self: *Self, __viewport: MTLViewport, ) void {{
           return @as(*const fn(*Self, SEL, MTLViewport, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setViewport_.get(), __viewport, );
 }}
var sel_setViewports_count_ = CachedSelector.init("setViewports:count:");
      pub fn setViewportscount(self: *Self, __viewports: [*c]MTLViewport, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c]MTLViewport, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setViewports_count_.get(), __viewports, __count, );
 }}
var sel_setFrontFacingWinding_ = CachedSelector.init("setFrontFacingWinding:");
      pub fn setFrontFacingWinding(self: *Self, __frontFacingWinding: MTLWinding, ) void {{
           return @as(*const fn(*Self, SEL, MTLWinding, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFrontFacingWinding_.get(), __frontFacingWinding, );
 }}
var sel_setVertexAmplificationCount_viewMappings_ = CachedSelector.init("setVertexAmplificationCount:viewMappings:");
      pub fn setVertexAmplificationCountviewMappings(self: *Self, __count: c_ulong, __viewMappings:  [*c] MTLVertexAmplificationViewMapping, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong,  [*c] MTLVertexAmplificationViewMapping, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexAmplificationCount_viewMappings_.get(), __count, __viewMappings, );
 }}
var sel_setCullMode_ = CachedSelector.init("setCullMode:");
      pub fn setCullMode(self: *Self, __cullMode: MTLCullMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLCullMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCullMode_.get(), __cullMode, );
 }}
var sel_setDepthClipMode_ = CachedSelector.init("setDepthClipMode:");
      pub fn setDepthClipMode(self: *Self, __depthClipMode: MTLDepthClipMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLDepthClipMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthClipMode_.get(), __depthClipMode, );
 }}
var sel_setDepthBias_slopeScale_clamp_ = CachedSelector.init("setDepthBias:slopeScale:clamp:");
      pub fn setDepthBiasslopeScaleclamp(self: *Self, __depthBias: f32, __slopeScale: f32, __clamp: f32, ) void {{
           return @as(*const fn(*Self, SEL, f32, f32, f32, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthBias_slopeScale_clamp_.get(), __depthBias, __slopeScale, __clamp, );
 }}
var sel_setScissorRect_ = CachedSelector.init("setScissorRect:");
      pub fn setScissorRect(self: *Self, __rect: MTLScissorRect, ) void {{
           return @as(*const fn(*Self, SEL, MTLScissorRect, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScissorRect_.get(), __rect, );
 }}
var sel_setScissorRects_count_ = CachedSelector.init("setScissorRects:count:");
      pub fn setScissorRectscount(self: *Self, __scissorRects: [*c]MTLScissorRect, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c]MTLScissorRect, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScissorRects_count_.get(), __scissorRects, __count, );
 }}
var sel_setTriangleFillMode_ = CachedSelector.init("setTriangleFillMode:");
      pub fn setTriangleFillMode(self: *Self, __fillMode: MTLTriangleFillMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLTriangleFillMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTriangleFillMode_.get(), __fillMode, );
 }}
var sel_setFragmentBytes_length_atIndex_ = CachedSelector.init("setFragmentBytes:length:atIndex:");
      pub fn setFragmentByteslengthatIndex(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentBytes_length_atIndex_.get(), __bytes, __length, __index, );
 }}
var sel_setFragmentBuffer_offset_atIndex_ = CachedSelector.init("setFragmentBuffer:offset:atIndex:");
      pub fn setFragmentBufferoffsetatIndex(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setFragmentBufferOffset_atIndex_ = CachedSelector.init("setFragmentBufferOffset:atIndex:");
      pub fn setFragmentBufferOffsetatIndex(self: *Self, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentBufferOffset_atIndex_.get(), __offset, __index, );
 }}
var sel_setFragmentBuffers_offsets_withRange_ = CachedSelector.init("setFragmentBuffers:offsets:withRange:");
      pub fn setFragmentBuffersoffsetswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentBuffers_offsets_withRange_.get(), __buffers, __offsets, __range, );
 }}
var sel_setFragmentTexture_atIndex_ = CachedSelector.init("setFragmentTexture:atIndex:");
      pub fn setFragmentTextureatIndex(self: *Self, __texture:  ?* MTLTexture, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLTexture, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentTexture_atIndex_.get(), __texture, __index, );
 }}
var sel_setFragmentTextures_withRange_ = CachedSelector.init("setFragmentTextures:withRange:");
      pub fn setFragmentTextureswithRange(self: *Self, __textures: [*c] ?* MTLTexture, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLTexture, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentTextures_withRange_.get(), __textures, __range, );
 }}
var sel_setFragmentSamplerState_atIndex_ = CachedSelector.init("setFragmentSamplerState:atIndex:");
      pub fn setFragmentSamplerStateatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentSamplerState_atIndex_.get(), __sampler, __index, );
 }}
var sel_setFragmentSamplerStates_withRange_ = CachedSelector.init("setFragmentSamplerStates:withRange:");
      pub fn setFragmentSamplerStateswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentSamplerStates_withRange_.get(), __samplers, __range, );
 }}
var sel_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex_ = CachedSelector.init("setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
      pub fn setFragmentSamplerStatelodMinClamplodMaxClampatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __lodMinClamp: f32, __lodMaxClamp: f32, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, f32, f32, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex_.get(), __sampler, __lodMinClamp, __lodMaxClamp, __index, );
 }}
var sel_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange_ = CachedSelector.init("setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
      pub fn setFragmentSamplerStateslodMinClampslodMaxClampswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __lodMinClamps: [*c]f32, __lodMaxClamps: [*c]f32, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, [*c]f32, [*c]f32, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange_.get(), __samplers, __lodMinClamps, __lodMaxClamps, __range, );
 }}
var sel_setFragmentVisibleFunctionTable_atBufferIndex_ = CachedSelector.init("setFragmentVisibleFunctionTable:atBufferIndex:");
      pub fn setFragmentVisibleFunctionTableatBufferIndex(self: *Self, __functionTable:  ?* MTLVisibleFunctionTable, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLVisibleFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentVisibleFunctionTable_atBufferIndex_.get(), __functionTable, __bufferIndex, );
 }}
var sel_setFragmentVisibleFunctionTables_withBufferRange_ = CachedSelector.init("setFragmentVisibleFunctionTables:withBufferRange:");
      pub fn setFragmentVisibleFunctionTableswithBufferRange(self: *Self, __functionTables: [*c] ?* MTLVisibleFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLVisibleFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentVisibleFunctionTables_withBufferRange_.get(), __functionTables, __range, );
 }}
var sel_setFragmentIntersectionFunctionTable_atBufferIndex_ = CachedSelector.init("setFragmentIntersectionFunctionTable:atBufferIndex:");
      pub fn setFragmentIntersectionFunctionTableatBufferIndex(self: *Self, __intersectionFunctionTable:  ?* MTLIntersectionFunctionTable, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLIntersectionFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentIntersectionFunctionTable_atBufferIndex_.get(), __intersectionFunctionTable, __bufferIndex, );
 }}
var sel_setFragmentIntersectionFunctionTables_withBufferRange_ = CachedSelector.init("setFragmentIntersectionFunctionTables:withBufferRange:");
      pub fn setFragmentIntersectionFunctionTableswithBufferRange(self: *Self, __intersectionFunctionTables: [*c] ?* MTLIntersectionFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLIntersectionFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentIntersectionFunctionTables_withBufferRange_.get(), __intersectionFunctionTables, __range, );
 }}
var sel_setFragmentAccelerationStructure_atBufferIndex_ = CachedSelector.init("setFragmentAccelerationStructure:atBufferIndex:");
      pub fn setFragmentAccelerationStructureatBufferIndex(self: *Self, __accelerationStructure:  ?* MTLAccelerationStructure, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLAccelerationStructure, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentAccelerationStructure_atBufferIndex_.get(), __accelerationStructure, __bufferIndex, );
 }}
var sel_setBlendColorRed_green_blue_alpha_ = CachedSelector.init("setBlendColorRed:green:blue:alpha:");
      pub fn setBlendColorRedgreenbluealpha(self: *Self, __red: f32, __green: f32, __blue: f32, __alpha: f32, ) void {{
           return @as(*const fn(*Self, SEL, f32, f32, f32, f32, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBlendColorRed_green_blue_alpha_.get(), __red, __green, __blue, __alpha, );
 }}
var sel_setDepthStencilState_ = CachedSelector.init("setDepthStencilState:");
      pub fn setDepthStencilState(self: *Self, __depthStencilState:  ?* MTLDepthStencilState, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLDepthStencilState, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthStencilState_.get(), __depthStencilState, );
 }}
var sel_setStencilReferenceValue_ = CachedSelector.init("setStencilReferenceValue:");
      pub fn setStencilReferenceValue(self: *Self, __referenceValue: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilReferenceValue_.get(), __referenceValue, );
 }}
var sel_setStencilFrontReferenceValue_backReferenceValue_ = CachedSelector.init("setStencilFrontReferenceValue:backReferenceValue:");
      pub fn setStencilFrontReferenceValuebackReferenceValue(self: *Self, __frontReferenceValue: c_uint, __backReferenceValue: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, c_uint, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilFrontReferenceValue_backReferenceValue_.get(), __frontReferenceValue, __backReferenceValue, );
 }}
var sel_setVisibilityResultMode_offset_ = CachedSelector.init("setVisibilityResultMode:offset:");
      pub fn setVisibilityResultModeoffset(self: *Self, __mode: MTLVisibilityResultMode, __offset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLVisibilityResultMode, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVisibilityResultMode_offset_.get(), __mode, __offset, );
 }}
var sel_setColorStoreAction_atIndex_ = CachedSelector.init("setColorStoreAction:atIndex:");
      pub fn setColorStoreActionatIndex(self: *Self, __storeAction: MTLStoreAction, __colorAttachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreAction, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setColorStoreAction_atIndex_.get(), __storeAction, __colorAttachmentIndex, );
 }}
var sel_setDepthStoreAction_ = CachedSelector.init("setDepthStoreAction:");
      pub fn setDepthStoreAction(self: *Self, __storeAction: MTLStoreAction, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreAction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthStoreAction_.get(), __storeAction, );
 }}
var sel_setStencilStoreAction_ = CachedSelector.init("setStencilStoreAction:");
      pub fn setStencilStoreAction(self: *Self, __storeAction: MTLStoreAction, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreAction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilStoreAction_.get(), __storeAction, );
 }}
var sel_setColorStoreActionOptions_atIndex_ = CachedSelector.init("setColorStoreActionOptions:atIndex:");
      pub fn setColorStoreActionOptionsatIndex(self: *Self, __storeActionOptions: MTLStoreActionOptions, __colorAttachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreActionOptions, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setColorStoreActionOptions_atIndex_.get(), __storeActionOptions, __colorAttachmentIndex, );
 }}
var sel_setDepthStoreActionOptions_ = CachedSelector.init("setDepthStoreActionOptions:");
      pub fn setDepthStoreActionOptions(self: *Self, __storeActionOptions: MTLStoreActionOptions, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreActionOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthStoreActionOptions_.get(), __storeActionOptions, );
 }}
var sel_setStencilStoreActionOptions_ = CachedSelector.init("setStencilStoreActionOptions:");
      pub fn setStencilStoreActionOptions(self: *Self, __storeActionOptions: MTLStoreActionOptions, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreActionOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilStoreActionOptions_.get(), __storeActionOptions, );
 }}
var sel_setObjectBytes_length_atIndex_ = CachedSelector.init("setObjectBytes:length:atIndex:");
      pub fn setObjectByteslengthatIndex(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectBytes_length_atIndex_.get(), __bytes, __length, __index, );
 }}
var sel_setObjectBuffer_offset_atIndex_ = CachedSelector.init("setObjectBuffer:offset:atIndex:");
      pub fn setObjectBufferoffsetatIndex(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setObjectBufferOffset_atIndex_ = CachedSelector.init("setObjectBufferOffset:atIndex:");
      pub fn setObjectBufferOffsetatIndex(self: *Self, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectBufferOffset_atIndex_.get(), __offset, __index, );
 }}
var sel_setObjectBuffers_offsets_withRange_ = CachedSelector.init("setObjectBuffers:offsets:withRange:");
      pub fn setObjectBuffersoffsetswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectBuffers_offsets_withRange_.get(), __buffers, __offsets, __range, );
 }}
var sel_setObjectTexture_atIndex_ = CachedSelector.init("setObjectTexture:atIndex:");
      pub fn setObjectTextureatIndex(self: *Self, __texture:  ?* MTLTexture, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLTexture, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectTexture_atIndex_.get(), __texture, __index, );
 }}
var sel_setObjectTextures_withRange_ = CachedSelector.init("setObjectTextures:withRange:");
      pub fn setObjectTextureswithRange(self: *Self, __textures: [*c] ?* MTLTexture, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLTexture, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectTextures_withRange_.get(), __textures, __range, );
 }}
var sel_setObjectSamplerState_atIndex_ = CachedSelector.init("setObjectSamplerState:atIndex:");
      pub fn setObjectSamplerStateatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectSamplerState_atIndex_.get(), __sampler, __index, );
 }}
var sel_setObjectSamplerStates_withRange_ = CachedSelector.init("setObjectSamplerStates:withRange:");
      pub fn setObjectSamplerStateswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectSamplerStates_withRange_.get(), __samplers, __range, );
 }}
var sel_setObjectSamplerState_lodMinClamp_lodMaxClamp_atIndex_ = CachedSelector.init("setObjectSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
      pub fn setObjectSamplerStatelodMinClamplodMaxClampatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __lodMinClamp: f32, __lodMaxClamp: f32, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, f32, f32, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectSamplerState_lodMinClamp_lodMaxClamp_atIndex_.get(), __sampler, __lodMinClamp, __lodMaxClamp, __index, );
 }}
var sel_setObjectSamplerStates_lodMinClamps_lodMaxClamps_withRange_ = CachedSelector.init("setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
      pub fn setObjectSamplerStateslodMinClampslodMaxClampswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __lodMinClamps: [*c]f32, __lodMaxClamps: [*c]f32, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, [*c]f32, [*c]f32, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectSamplerStates_lodMinClamps_lodMaxClamps_withRange_.get(), __samplers, __lodMinClamps, __lodMaxClamps, __range, );
 }}
var sel_setObjectThreadgroupMemoryLength_atIndex_ = CachedSelector.init("setObjectThreadgroupMemoryLength:atIndex:");
      pub fn setObjectThreadgroupMemoryLengthatIndex(self: *Self, __length: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectThreadgroupMemoryLength_atIndex_.get(), __length, __index, );
 }}
var sel_setMeshBytes_length_atIndex_ = CachedSelector.init("setMeshBytes:length:atIndex:");
      pub fn setMeshByteslengthatIndex(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshBytes_length_atIndex_.get(), __bytes, __length, __index, );
 }}
var sel_setMeshBuffer_offset_atIndex_ = CachedSelector.init("setMeshBuffer:offset:atIndex:");
      pub fn setMeshBufferoffsetatIndex(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setMeshBufferOffset_atIndex_ = CachedSelector.init("setMeshBufferOffset:atIndex:");
      pub fn setMeshBufferOffsetatIndex(self: *Self, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshBufferOffset_atIndex_.get(), __offset, __index, );
 }}
var sel_setMeshBuffers_offsets_withRange_ = CachedSelector.init("setMeshBuffers:offsets:withRange:");
      pub fn setMeshBuffersoffsetswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshBuffers_offsets_withRange_.get(), __buffers, __offsets, __range, );
 }}
var sel_setMeshTexture_atIndex_ = CachedSelector.init("setMeshTexture:atIndex:");
      pub fn setMeshTextureatIndex(self: *Self, __texture:  ?* MTLTexture, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLTexture, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshTexture_atIndex_.get(), __texture, __index, );
 }}
var sel_setMeshTextures_withRange_ = CachedSelector.init("setMeshTextures:withRange:");
      pub fn setMeshTextureswithRange(self: *Self, __textures: [*c] ?* MTLTexture, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLTexture, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshTextures_withRange_.get(), __textures, __range, );
 }}
var sel_setMeshSamplerState_atIndex_ = CachedSelector.init("setMeshSamplerState:atIndex:");
      pub fn setMeshSamplerStateatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshSamplerState_atIndex_.get(), __sampler, __index, );
 }}
var sel_setMeshSamplerStates_withRange_ = CachedSelector.init("setMeshSamplerStates:withRange:");
      pub fn setMeshSamplerStateswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshSamplerStates_withRange_.get(), __samplers, __range, );
 }}
var sel_setMeshSamplerState_lodMinClamp_lodMaxClamp_atIndex_ = CachedSelector.init("setMeshSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
      pub fn setMeshSamplerStatelodMinClamplodMaxClampatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __lodMinClamp: f32, __lodMaxClamp: f32, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, f32, f32, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshSamplerState_lodMinClamp_lodMaxClamp_atIndex_.get(), __sampler, __lodMinClamp, __lodMaxClamp, __index, );
 }}
var sel_setMeshSamplerStates_lodMinClamps_lodMaxClamps_withRange_ = CachedSelector.init("setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
      pub fn setMeshSamplerStateslodMinClampslodMaxClampswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __lodMinClamps: [*c]f32, __lodMaxClamps: [*c]f32, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, [*c]f32, [*c]f32, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshSamplerStates_lodMinClamps_lodMaxClamps_withRange_.get(), __samplers, __lodMinClamps, __lodMaxClamps, __range, );
 }}
var sel_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_ = CachedSelector.init("drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:");
      pub fn drawMeshThreadgroupsthreadsPerObjectThreadgroupthreadsPerMeshThreadgroup(self: *Self, __threadgroupsPerGrid: MTLSize, __threadsPerObjectThreadgroup: MTLSize, __threadsPerMeshThreadgroup: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSize, MTLSize, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_.get(), __threadgroupsPerGrid, __threadsPerObjectThreadgroup, __threadsPerMeshThreadgroup, );
 }}
var sel_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_ = CachedSelector.init("drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:");
      pub fn drawMeshThreadsthreadsPerObjectThreadgroupthreadsPerMeshThreadgroup(self: *Self, __threadsPerGrid: MTLSize, __threadsPerObjectThreadgroup: MTLSize, __threadsPerMeshThreadgroup: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSize, MTLSize, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_.get(), __threadsPerGrid, __threadsPerObjectThreadgroup, __threadsPerMeshThreadgroup, );
 }}
var sel_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_ = CachedSelector.init("drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:");
      pub fn drawMeshThreadgroupsWithIndirectBufferindirectBufferOffsetthreadsPerObjectThreadgroupthreadsPerMeshThreadgroup(self: *Self, __indirectBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, __threadsPerObjectThreadgroup: MTLSize, __threadsPerMeshThreadgroup: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, MTLSize, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_.get(), __indirectBuffer, __indirectBufferOffset, __threadsPerObjectThreadgroup, __threadsPerMeshThreadgroup, );
 }}
var sel_drawPrimitives_vertexStart_vertexCount_instanceCount_ = CachedSelector.init("drawPrimitives:vertexStart:vertexCount:instanceCount:");
      pub fn drawPrimitivesvertexStartvertexCountinstanceCount(self: *Self, __primitiveType: MTLPrimitiveType, __vertexStart: c_ulong, __vertexCount: c_ulong, __instanceCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_.get(), __primitiveType, __vertexStart, __vertexCount, __instanceCount, );
 }}
var sel_drawPrimitives_vertexStart_vertexCount_ = CachedSelector.init("drawPrimitives:vertexStart:vertexCount:");
      pub fn drawPrimitivesvertexStartvertexCount(self: *Self, __primitiveType: MTLPrimitiveType, __vertexStart: c_ulong, __vertexCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawPrimitives_vertexStart_vertexCount_.get(), __primitiveType, __vertexStart, __vertexCount, );
 }}
var sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_ = CachedSelector.init("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:");
      pub fn drawIndexedPrimitivesindexCountindexTypeindexBufferindexBufferOffsetinstanceCount(self: *Self, __primitiveType: MTLPrimitiveType, __indexCount: c_ulong, __indexType: MTLIndexType, __indexBuffer:  * MTLBuffer, __indexBufferOffset: c_ulong, __instanceCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType, c_ulong, MTLIndexType,  * MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_.get(), __primitiveType, __indexCount, __indexType, __indexBuffer, __indexBufferOffset, __instanceCount, );
 }}
var sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_ = CachedSelector.init("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:");
      pub fn drawIndexedPrimitivesindexCountindexTypeindexBufferindexBufferOffset(self: *Self, __primitiveType: MTLPrimitiveType, __indexCount: c_ulong, __indexType: MTLIndexType, __indexBuffer:  * MTLBuffer, __indexBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType, c_ulong, MTLIndexType,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_.get(), __primitiveType, __indexCount, __indexType, __indexBuffer, __indexBufferOffset, );
 }}
var sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_ = CachedSelector.init("drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:");
      pub fn drawPrimitivesvertexStartvertexCountinstanceCountbaseInstance(self: *Self, __primitiveType: MTLPrimitiveType, __vertexStart: c_ulong, __vertexCount: c_ulong, __instanceCount: c_ulong, __baseInstance: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType, c_ulong, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_.get(), __primitiveType, __vertexStart, __vertexCount, __instanceCount, __baseInstance, );
 }}
var sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_ = CachedSelector.init("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:");
      pub fn drawIndexedPrimitivesindexCountindexTypeindexBufferindexBufferOffsetinstanceCountbaseVertexbaseInstance(self: *Self, __primitiveType: MTLPrimitiveType, __indexCount: c_ulong, __indexType: MTLIndexType, __indexBuffer:  * MTLBuffer, __indexBufferOffset: c_ulong, __instanceCount: c_ulong, __baseVertex: c_long, __baseInstance: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType, c_ulong, MTLIndexType,  * MTLBuffer, c_ulong, c_ulong, c_long, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_.get(), __primitiveType, __indexCount, __indexType, __indexBuffer, __indexBufferOffset, __instanceCount, __baseVertex, __baseInstance, );
 }}
var sel_drawPrimitives_indirectBuffer_indirectBufferOffset_ = CachedSelector.init("drawPrimitives:indirectBuffer:indirectBufferOffset:");
      pub fn drawPrimitivesindirectBufferindirectBufferOffset(self: *Self, __primitiveType: MTLPrimitiveType, __indirectBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawPrimitives_indirectBuffer_indirectBufferOffset_.get(), __primitiveType, __indirectBuffer, __indirectBufferOffset, );
 }}
var sel_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset_ = CachedSelector.init("drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:");
      pub fn drawIndexedPrimitivesindexTypeindexBufferindexBufferOffsetindirectBufferindirectBufferOffset(self: *Self, __primitiveType: MTLPrimitiveType, __indexType: MTLIndexType, __indexBuffer:  * MTLBuffer, __indexBufferOffset: c_ulong, __indirectBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveType, MTLIndexType,  * MTLBuffer, c_ulong,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset_.get(), __primitiveType, __indexType, __indexBuffer, __indexBufferOffset, __indirectBuffer, __indirectBufferOffset, );
 }}
var sel_textureBarrier = CachedSelector.init("textureBarrier");
      pub fn textureBarrier(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureBarrier.get(), );
 }}
var sel_updateFence_afterStages_ = CachedSelector.init("updateFence:afterStages:");
      pub fn updateFenceafterStages(self: *Self, __fence:  * MTLFence, __stages: MTLRenderStages, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, MTLRenderStages, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_updateFence_afterStages_.get(), __fence, __stages, );
 }}
var sel_waitForFence_beforeStages_ = CachedSelector.init("waitForFence:beforeStages:");
      pub fn waitForFencebeforeStages(self: *Self, __fence:  * MTLFence, __stages: MTLRenderStages, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, MTLRenderStages, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitForFence_beforeStages_.get(), __fence, __stages, );
 }}
var sel_setTessellationFactorBuffer_offset_instanceStride_ = CachedSelector.init("setTessellationFactorBuffer:offset:instanceStride:");
      pub fn setTessellationFactorBufferoffsetinstanceStride(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __instanceStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTessellationFactorBuffer_offset_instanceStride_.get(), __buffer, __offset, __instanceStride, );
 }}
var sel_setTessellationFactorScale_ = CachedSelector.init("setTessellationFactorScale:");
      pub fn setTessellationFactorScale(self: *Self, __scale: f32, ) void {{
           return @as(*const fn(*Self, SEL, f32, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTessellationFactorScale_.get(), __scale, );
 }}
var sel_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_ = CachedSelector.init("drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:");
      pub fn drawPatchespatchStartpatchCountpatchIndexBufferpatchIndexBufferOffsetinstanceCountbaseInstance(self: *Self, __numberOfPatchControlPoints: c_ulong, __patchStart: c_ulong, __patchCount: c_ulong, __patchIndexBuffer:  ?* MTLBuffer, __patchIndexBufferOffset: c_ulong, __instanceCount: c_ulong, __baseInstance: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, c_ulong,  ?* MTLBuffer, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_.get(), __numberOfPatchControlPoints, __patchStart, __patchCount, __patchIndexBuffer, __patchIndexBufferOffset, __instanceCount, __baseInstance, );
 }}
var sel_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset_ = CachedSelector.init("drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:");
      pub fn drawPatchespatchIndexBufferpatchIndexBufferOffsetindirectBufferindirectBufferOffset(self: *Self, __numberOfPatchControlPoints: c_ulong, __patchIndexBuffer:  ?* MTLBuffer, __patchIndexBufferOffset: c_ulong, __indirectBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong,  ?* MTLBuffer, c_ulong,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset_.get(), __numberOfPatchControlPoints, __patchIndexBuffer, __patchIndexBufferOffset, __indirectBuffer, __indirectBufferOffset, );
 }}
var sel_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_ = CachedSelector.init("drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:");
      pub fn drawIndexedPatchespatchStartpatchCountpatchIndexBufferpatchIndexBufferOffsetcontrolPointIndexBuffercontrolPointIndexBufferOffsetinstanceCountbaseInstance(self: *Self, __numberOfPatchControlPoints: c_ulong, __patchStart: c_ulong, __patchCount: c_ulong, __patchIndexBuffer:  ?* MTLBuffer, __patchIndexBufferOffset: c_ulong, __controlPointIndexBuffer:  * MTLBuffer, __controlPointIndexBufferOffset: c_ulong, __instanceCount: c_ulong, __baseInstance: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, c_ulong,  ?* MTLBuffer, c_ulong,  * MTLBuffer, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_.get(), __numberOfPatchControlPoints, __patchStart, __patchCount, __patchIndexBuffer, __patchIndexBufferOffset, __controlPointIndexBuffer, __controlPointIndexBufferOffset, __instanceCount, __baseInstance, );
 }}
var sel_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset_ = CachedSelector.init("drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:");
      pub fn drawIndexedPatchespatchIndexBufferpatchIndexBufferOffsetcontrolPointIndexBuffercontrolPointIndexBufferOffsetindirectBufferindirectBufferOffset(self: *Self, __numberOfPatchControlPoints: c_ulong, __patchIndexBuffer:  ?* MTLBuffer, __patchIndexBufferOffset: c_ulong, __controlPointIndexBuffer:  * MTLBuffer, __controlPointIndexBufferOffset: c_ulong, __indirectBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong,  ?* MTLBuffer, c_ulong,  * MTLBuffer, c_ulong,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset_.get(), __numberOfPatchControlPoints, __patchIndexBuffer, __patchIndexBufferOffset, __controlPointIndexBuffer, __controlPointIndexBufferOffset, __indirectBuffer, __indirectBufferOffset, );
 }}
var sel_setTileBytes_length_atIndex_ = CachedSelector.init("setTileBytes:length:atIndex:");
      pub fn setTileByteslengthatIndex(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileBytes_length_atIndex_.get(), __bytes, __length, __index, );
 }}
var sel_setTileBuffer_offset_atIndex_ = CachedSelector.init("setTileBuffer:offset:atIndex:");
      pub fn setTileBufferoffsetatIndex(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setTileBufferOffset_atIndex_ = CachedSelector.init("setTileBufferOffset:atIndex:");
      pub fn setTileBufferOffsetatIndex(self: *Self, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileBufferOffset_atIndex_.get(), __offset, __index, );
 }}
var sel_setTileBuffers_offsets_withRange_ = CachedSelector.init("setTileBuffers:offsets:withRange:");
      pub fn setTileBuffersoffsetswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileBuffers_offsets_withRange_.get(), __buffers, __offsets, __range, );
 }}
var sel_setTileTexture_atIndex_ = CachedSelector.init("setTileTexture:atIndex:");
      pub fn setTileTextureatIndex(self: *Self, __texture:  ?* MTLTexture, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLTexture, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileTexture_atIndex_.get(), __texture, __index, );
 }}
var sel_setTileTextures_withRange_ = CachedSelector.init("setTileTextures:withRange:");
      pub fn setTileTextureswithRange(self: *Self, __textures: [*c] ?* MTLTexture, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLTexture, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileTextures_withRange_.get(), __textures, __range, );
 }}
var sel_setTileSamplerState_atIndex_ = CachedSelector.init("setTileSamplerState:atIndex:");
      pub fn setTileSamplerStateatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileSamplerState_atIndex_.get(), __sampler, __index, );
 }}
var sel_setTileSamplerStates_withRange_ = CachedSelector.init("setTileSamplerStates:withRange:");
      pub fn setTileSamplerStateswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileSamplerStates_withRange_.get(), __samplers, __range, );
 }}
var sel_setTileSamplerState_lodMinClamp_lodMaxClamp_atIndex_ = CachedSelector.init("setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
      pub fn setTileSamplerStatelodMinClamplodMaxClampatIndex(self: *Self, __sampler:  ?* MTLSamplerState, __lodMinClamp: f32, __lodMaxClamp: f32, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLSamplerState, f32, f32, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileSamplerState_lodMinClamp_lodMaxClamp_atIndex_.get(), __sampler, __lodMinClamp, __lodMaxClamp, __index, );
 }}
var sel_setTileSamplerStates_lodMinClamps_lodMaxClamps_withRange_ = CachedSelector.init("setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
      pub fn setTileSamplerStateslodMinClampslodMaxClampswithRange(self: *Self, __samplers: [*c] ?* MTLSamplerState, __lodMinClamps: [*c]f32, __lodMaxClamps: [*c]f32, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLSamplerState, [*c]f32, [*c]f32, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileSamplerStates_lodMinClamps_lodMaxClamps_withRange_.get(), __samplers, __lodMinClamps, __lodMaxClamps, __range, );
 }}
var sel_setTileVisibleFunctionTable_atBufferIndex_ = CachedSelector.init("setTileVisibleFunctionTable:atBufferIndex:");
      pub fn setTileVisibleFunctionTableatBufferIndex(self: *Self, __functionTable:  ?* MTLVisibleFunctionTable, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLVisibleFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileVisibleFunctionTable_atBufferIndex_.get(), __functionTable, __bufferIndex, );
 }}
var sel_setTileVisibleFunctionTables_withBufferRange_ = CachedSelector.init("setTileVisibleFunctionTables:withBufferRange:");
      pub fn setTileVisibleFunctionTableswithBufferRange(self: *Self, __functionTables: [*c] ?* MTLVisibleFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLVisibleFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileVisibleFunctionTables_withBufferRange_.get(), __functionTables, __range, );
 }}
var sel_setTileIntersectionFunctionTable_atBufferIndex_ = CachedSelector.init("setTileIntersectionFunctionTable:atBufferIndex:");
      pub fn setTileIntersectionFunctionTableatBufferIndex(self: *Self, __intersectionFunctionTable:  ?* MTLIntersectionFunctionTable, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLIntersectionFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileIntersectionFunctionTable_atBufferIndex_.get(), __intersectionFunctionTable, __bufferIndex, );
 }}
var sel_setTileIntersectionFunctionTables_withBufferRange_ = CachedSelector.init("setTileIntersectionFunctionTables:withBufferRange:");
      pub fn setTileIntersectionFunctionTableswithBufferRange(self: *Self, __intersectionFunctionTables: [*c] ?* MTLIntersectionFunctionTable, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLIntersectionFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileIntersectionFunctionTables_withBufferRange_.get(), __intersectionFunctionTables, __range, );
 }}
var sel_setTileAccelerationStructure_atBufferIndex_ = CachedSelector.init("setTileAccelerationStructure:atBufferIndex:");
      pub fn setTileAccelerationStructureatBufferIndex(self: *Self, __accelerationStructure:  ?* MTLAccelerationStructure, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLAccelerationStructure, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileAccelerationStructure_atBufferIndex_.get(), __accelerationStructure, __bufferIndex, );
 }}
var sel_dispatchThreadsPerTile_ = CachedSelector.init("dispatchThreadsPerTile:");
      pub fn dispatchThreadsPerTile(self: *Self, __threadsPerTile: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatchThreadsPerTile_.get(), __threadsPerTile, );
 }}
var sel_setThreadgroupMemoryLength_offset_atIndex_ = CachedSelector.init("setThreadgroupMemoryLength:offset:atIndex:");
      pub fn setThreadgroupMemoryLengthoffsetatIndex(self: *Self, __length: c_ulong, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setThreadgroupMemoryLength_offset_atIndex_.get(), __length, __offset, __index, );
 }}
var sel_useResource_usage_ = CachedSelector.init("useResource:usage:");
      pub fn useResourceusage(self: *Self, __resource:  * MTLResource, __usage: MTLResourceUsage, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLResource, MTLResourceUsage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useResource_usage_.get(), __resource, __usage, );
 }}
var sel_useResources_count_usage_ = CachedSelector.init("useResources:count:usage:");
      pub fn useResourcescountusage(self: *Self, __resources: [*c] * MTLResource, __count: c_ulong, __usage: MTLResourceUsage, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLResource, c_ulong, MTLResourceUsage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useResources_count_usage_.get(), __resources, __count, __usage, );
 }}
var sel_useResource_usage_stages_ = CachedSelector.init("useResource:usage:stages:");
      pub fn useResourceusagestages(self: *Self, __resource:  * MTLResource, __usage: MTLResourceUsage, __stages: MTLRenderStages, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLResource, MTLResourceUsage, MTLRenderStages, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useResource_usage_stages_.get(), __resource, __usage, __stages, );
 }}
var sel_useResources_count_usage_stages_ = CachedSelector.init("useResources:count:usage:stages:");
      pub fn useResourcescountusagestages(self: *Self, __resources: [*c] * MTLResource, __count: c_ulong, __usage: MTLResourceUsage, __stages: MTLRenderStages, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLResource, c_ulong, MTLResourceUsage, MTLRenderStages, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useResources_count_usage_stages_.get(), __resources, __count, __usage, __stages, );
 }}
var sel_useHeap_ = CachedSelector.init("useHeap:");
      pub fn useHeap(self: *Self, __heap:  * MTLHeap, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLHeap, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useHeap_.get(), __heap, );
 }}
var sel_useHeaps_count_ = CachedSelector.init("useHeaps:count:");
      pub fn useHeapscount(self: *Self, __heaps: [*c] * MTLHeap, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLHeap, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useHeaps_count_.get(), __heaps, __count, );
 }}
var sel_useHeap_stages_ = CachedSelector.init("useHeap:stages:");
      pub fn useHeapstages(self: *Self, __heap:  * MTLHeap, __stages: MTLRenderStages, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLHeap, MTLRenderStages, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useHeap_stages_.get(), __heap, __stages, );
 }}
var sel_useHeaps_count_stages_ = CachedSelector.init("useHeaps:count:stages:");
      pub fn useHeapscountstages(self: *Self, __heaps: [*c] * MTLHeap, __count: c_ulong, __stages: MTLRenderStages, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLHeap, c_ulong, MTLRenderStages, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useHeaps_count_stages_.get(), __heaps, __count, __stages, );
 }}
var sel_executeCommandsInBuffer_withRange_ = CachedSelector.init("executeCommandsInBuffer:withRange:");
      pub fn executeCommandsInBufferwithRange(self: *Self, __indirectCommandBuffer:  * MTLIndirectCommandBuffer, __executionRange: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLIndirectCommandBuffer, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeCommandsInBuffer_withRange_.get(), __indirectCommandBuffer, __executionRange, );
 }}
var sel_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset_ = CachedSelector.init("executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:");
      pub fn executeCommandsInBufferindirectBufferindirectBufferOffset(self: *Self, __indirectCommandbuffer:  * MTLIndirectCommandBuffer, __indirectRangeBuffer:  * MTLBuffer, __indirectBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLIndirectCommandBuffer,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset_.get(), __indirectCommandbuffer, __indirectRangeBuffer, __indirectBufferOffset, );
 }}
var sel_memoryBarrierWithScope_afterStages_beforeStages_ = CachedSelector.init("memoryBarrierWithScope:afterStages:beforeStages:");
      pub fn memoryBarrierWithScopeafterStagesbeforeStages(self: *Self, __scope: MTLBarrierScope, __after: MTLRenderStages, __before: MTLRenderStages, ) void {{
           return @as(*const fn(*Self, SEL, MTLBarrierScope, MTLRenderStages, MTLRenderStages, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_memoryBarrierWithScope_afterStages_beforeStages_.get(), __scope, __after, __before, );
 }}
var sel_memoryBarrierWithResources_count_afterStages_beforeStages_ = CachedSelector.init("memoryBarrierWithResources:count:afterStages:beforeStages:");
      pub fn memoryBarrierWithResourcescountafterStagesbeforeStages(self: *Self, __resources: [*c] * MTLResource, __count: c_ulong, __after: MTLRenderStages, __before: MTLRenderStages, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLResource, c_ulong, MTLRenderStages, MTLRenderStages, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_memoryBarrierWithResources_count_afterStages_beforeStages_.get(), __resources, __count, __after, __before, );
 }}
var sel_sampleCountersInBuffer_atSampleIndex_withBarrier_ = CachedSelector.init("sampleCountersInBuffer:atSampleIndex:withBarrier:");
      pub fn sampleCountersInBufferatSampleIndexwithBarrier(self: *Self, __sampleBuffer:  * MTLCounterSampleBuffer, __sampleIndex: c_ulong, __barrier: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLCounterSampleBuffer, c_ulong, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCountersInBuffer_atSampleIndex_withBarrier_.get(), __sampleBuffer, __sampleIndex, __barrier, );
 }}
var sel_tileWidth = CachedSelector.init("tileWidth");
      pub fn tileWidth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tileWidth.get(), );
 }}
var sel_tileHeight = CachedSelector.init("tileHeight");
      pub fn tileHeight(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tileHeight.get(), );
 }}
  };
}

pub const MTLRenderCommandEncoder = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderCommandEncoderProtocolMixin(Self, "MTLRenderCommandEncoder");
  pub usingnamespace MTLCommandEncoderProtocolMixin(Self, "MTLRenderCommandEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderCommandEncoder");
};

pub fn NSURLSessionTaskDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_URLSession_didCreateTask_ = CachedSelector.init("URLSession:didCreateTask:");
      pub fn URLSessiondidCreateTask(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_didCreateTask_.get(), __session, __task, );
 }}
var sel_URLSession_task_willBeginDelayedRequest_completionHandler_ = CachedSelector.init("URLSession:task:willBeginDelayedRequest:completionHandler:");
      pub fn URLSessiontaskwillBeginDelayedRequestcompletionHandler(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, __request:  * NSURLRequest, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask,  * NSURLRequest, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_task_willBeginDelayedRequest_completionHandler_.get(), __session, __task, __request, __completionHandler, );
 }}
var sel_URLSession_taskIsWaitingForConnectivity_ = CachedSelector.init("URLSession:taskIsWaitingForConnectivity:");
      pub fn URLSessiontaskIsWaitingForConnectivity(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_taskIsWaitingForConnectivity_.get(), __session, __task, );
 }}
var sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_ = CachedSelector.init("URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:");
      pub fn URLSessiontaskwillPerformHTTPRedirectionnewRequestcompletionHandler(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, __response:  * NSHTTPURLResponse, __request:  * NSURLRequest, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask,  * NSHTTPURLResponse,  * NSURLRequest, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_.get(), __session, __task, __response, __request, __completionHandler, );
 }}
var sel_URLSession_task_didReceiveChallenge_completionHandler_ = CachedSelector.init("URLSession:task:didReceiveChallenge:completionHandler:");
      pub fn URLSessiontaskdidReceiveChallengecompletionHandler(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, __challenge:  * NSURLAuthenticationChallenge, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask,  * NSURLAuthenticationChallenge, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_task_didReceiveChallenge_completionHandler_.get(), __session, __task, __challenge, __completionHandler, );
 }}
var sel_URLSession_task_needNewBodyStream_ = CachedSelector.init("URLSession:task:needNewBodyStream:");
      pub fn URLSessiontaskneedNewBodyStream(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_task_needNewBodyStream_.get(), __session, __task, __completionHandler, );
 }}
var sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_ = CachedSelector.init("URLSession:task:needNewBodyStreamFromOffset:completionHandler:");
      pub fn URLSessiontaskneedNewBodyStreamFromOffsetcompletionHandler(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, __offset: c_longlong, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask, c_longlong, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_task_needNewBodyStreamFromOffset_completionHandler_.get(), __session, __task, __offset, __completionHandler, );
 }}
var sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_ = CachedSelector.init("URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:");
      pub fn URLSessiontaskdidSendBodyDatatotalBytesSenttotalBytesExpectedToSend(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, __bytesSent: c_longlong, __totalBytesSent: c_longlong, __totalBytesExpectedToSend: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask, c_longlong, c_longlong, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_.get(), __session, __task, __bytesSent, __totalBytesSent, __totalBytesExpectedToSend, );
 }}
var sel_URLSession_task_didReceiveInformationalResponse_ = CachedSelector.init("URLSession:task:didReceiveInformationalResponse:");
      pub fn URLSessiontaskdidReceiveInformationalResponse(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, __response:  * NSHTTPURLResponse, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask,  * NSHTTPURLResponse, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_task_didReceiveInformationalResponse_.get(), __session, __task, __response, );
 }}
var sel_URLSession_task_didFinishCollectingMetrics_ = CachedSelector.init("URLSession:task:didFinishCollectingMetrics:");
      pub fn URLSessiontaskdidFinishCollectingMetrics(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, __metrics:  * NSURLSessionTaskMetrics, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask,  * NSURLSessionTaskMetrics, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_task_didFinishCollectingMetrics_.get(), __session, __task, __metrics, );
 }}
var sel_URLSession_task_didCompleteWithError_ = CachedSelector.init("URLSession:task:didCompleteWithError:");
      pub fn URLSessiontaskdidCompleteWithError(self: *Self, __session:  * NSURLSession, __task:  * NSURLSessionTask, __an_error:  ?* NSError, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionTask,  ?* NSError, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_task_didCompleteWithError_.get(), __session, __task, __an_error, );
 }}
  };
}

pub const NSURLSessionTaskDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionTaskDelegateProtocolMixin(Self, "NSURLSessionTaskDelegate");
  pub usingnamespace NSURLSessionDelegateProtocolMixin(Self, "NSURLSessionTaskDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionTaskDelegate");
};

pub fn MTLFunctionLogDebugLocationProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_functionName = CachedSelector.init("functionName");
      pub fn functionName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionName.get(), );
 }}
var sel_URL = CachedSelector.init("URL");
      pub fn URL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL.get(), );
 }}
var sel_line = CachedSelector.init("line");
      pub fn line(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_line.get(), );
 }}
var sel_column = CachedSelector.init("column");
      pub fn column(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_column.get(), );
 }}
  };
}

pub const MTLFunctionLogDebugLocation = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionLogDebugLocationProtocolMixin(Self, "MTLFunctionLogDebugLocation");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionLogDebugLocation");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionLogDebugLocation");
};

pub fn MTLBinaryArchiveProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addComputePipelineFunctionsWithDescriptor_error_ = CachedSelector.init("addComputePipelineFunctionsWithDescriptor:error:");
      pub fn addComputePipelineFunctionsWithDescriptorerror(self: *Self, __descriptor:  * MTLComputePipelineDescriptor, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * MTLComputePipelineDescriptor,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addComputePipelineFunctionsWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_addRenderPipelineFunctionsWithDescriptor_error_ = CachedSelector.init("addRenderPipelineFunctionsWithDescriptor:error:");
      pub fn addRenderPipelineFunctionsWithDescriptorerror(self: *Self, __descriptor:  * MTLRenderPipelineDescriptor, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPipelineDescriptor,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addRenderPipelineFunctionsWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_addTileRenderPipelineFunctionsWithDescriptor_error_ = CachedSelector.init("addTileRenderPipelineFunctionsWithDescriptor:error:");
      pub fn addTileRenderPipelineFunctionsWithDescriptorerror(self: *Self, __descriptor:  * MTLTileRenderPipelineDescriptor, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * MTLTileRenderPipelineDescriptor,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addTileRenderPipelineFunctionsWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_serializeToURL_error_ = CachedSelector.init("serializeToURL:error:");
      pub fn serializeToURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_serializeToURL_error_.get(), __url, __an_error, );
 }}
var sel_addFunctionWithDescriptor_library_error_ = CachedSelector.init("addFunctionWithDescriptor:library:error:");
      pub fn addFunctionWithDescriptorlibraryerror(self: *Self, __descriptor:  * MTLFunctionDescriptor, __library:  * MTLLibrary, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * MTLFunctionDescriptor,  * MTLLibrary,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addFunctionWithDescriptor_library_error_.get(), __descriptor, __library, __an_error, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
  };
}

pub const MTLBinaryArchive = opaque {
  const Self = @This();
  pub usingnamespace MTLBinaryArchiveProtocolMixin(Self, "MTLBinaryArchive");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBinaryArchive");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBinaryArchive");
};

pub fn MTLAccelerationStructureCommandEncoderProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset_ = CachedSelector.init("buildAccelerationStructure:descriptor:scratchBuffer:scratchBufferOffset:");
      pub fn buildAccelerationStructuredescriptorscratchBufferscratchBufferOffset(self: *Self, __accelerationStructure:  * MTLAccelerationStructure, __descriptor:  * MTLAccelerationStructureDescriptor, __scratchBuffer:  * MTLBuffer, __scratchBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructure,  * MTLAccelerationStructureDescriptor,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset_.get(), __accelerationStructure, __descriptor, __scratchBuffer, __scratchBufferOffset, );
 }}
var sel_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_ = CachedSelector.init("refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:");
      pub fn refitAccelerationStructuredescriptordestinationscratchBufferscratchBufferOffset(self: *Self, __sourceAccelerationStructure:  * MTLAccelerationStructure, __descriptor:  * MTLAccelerationStructureDescriptor, __destinationAccelerationStructure:  ?* MTLAccelerationStructure, __scratchBuffer:  ?* MTLBuffer, __scratchBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructure,  * MTLAccelerationStructureDescriptor,  ?* MTLAccelerationStructure,  ?* MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_.get(), __sourceAccelerationStructure, __descriptor, __destinationAccelerationStructure, __scratchBuffer, __scratchBufferOffset, );
 }}
var sel_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_options_ = CachedSelector.init("refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:options:");
      pub fn refitAccelerationStructuredescriptordestinationscratchBufferscratchBufferOffsetoptions(self: *Self, __sourceAccelerationStructure:  * MTLAccelerationStructure, __descriptor:  * MTLAccelerationStructureDescriptor, __destinationAccelerationStructure:  ?* MTLAccelerationStructure, __scratchBuffer:  ?* MTLBuffer, __scratchBufferOffset: c_ulong, __options: MTLAccelerationStructureRefitOptions, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructure,  * MTLAccelerationStructureDescriptor,  ?* MTLAccelerationStructure,  ?* MTLBuffer, c_ulong, MTLAccelerationStructureRefitOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_options_.get(), __sourceAccelerationStructure, __descriptor, __destinationAccelerationStructure, __scratchBuffer, __scratchBufferOffset, __options, );
 }}
var sel_copyAccelerationStructure_toAccelerationStructure_ = CachedSelector.init("copyAccelerationStructure:toAccelerationStructure:");
      pub fn copyAccelerationStructuretoAccelerationStructure(self: *Self, __sourceAccelerationStructure:  * MTLAccelerationStructure, __destinationAccelerationStructure:  * MTLAccelerationStructure, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructure,  * MTLAccelerationStructure, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyAccelerationStructure_toAccelerationStructure_.get(), __sourceAccelerationStructure, __destinationAccelerationStructure, );
 }}
var sel_writeCompactedAccelerationStructureSize_toBuffer_offset_ = CachedSelector.init("writeCompactedAccelerationStructureSize:toBuffer:offset:");
      pub fn writeCompactedAccelerationStructureSizetoBufferoffset(self: *Self, __accelerationStructure:  * MTLAccelerationStructure, __buffer:  * MTLBuffer, __offset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructure,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeCompactedAccelerationStructureSize_toBuffer_offset_.get(), __accelerationStructure, __buffer, __offset, );
 }}
var sel_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType_ = CachedSelector.init("writeCompactedAccelerationStructureSize:toBuffer:offset:sizeDataType:");
      pub fn writeCompactedAccelerationStructureSizetoBufferoffsetsizeDataType(self: *Self, __accelerationStructure:  * MTLAccelerationStructure, __buffer:  * MTLBuffer, __offset: c_ulong, __sizeDataType: MTLDataType, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructure,  * MTLBuffer, c_ulong, MTLDataType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType_.get(), __accelerationStructure, __buffer, __offset, __sizeDataType, );
 }}
var sel_copyAndCompactAccelerationStructure_toAccelerationStructure_ = CachedSelector.init("copyAndCompactAccelerationStructure:toAccelerationStructure:");
      pub fn copyAndCompactAccelerationStructuretoAccelerationStructure(self: *Self, __sourceAccelerationStructure:  * MTLAccelerationStructure, __destinationAccelerationStructure:  * MTLAccelerationStructure, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructure,  * MTLAccelerationStructure, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyAndCompactAccelerationStructure_toAccelerationStructure_.get(), __sourceAccelerationStructure, __destinationAccelerationStructure, );
 }}
var sel_updateFence_ = CachedSelector.init("updateFence:");
      pub fn updateFence(self: *Self, __fence:  * MTLFence, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_updateFence_.get(), __fence, );
 }}
var sel_waitForFence_ = CachedSelector.init("waitForFence:");
      pub fn waitForFence(self: *Self, __fence:  * MTLFence, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitForFence_.get(), __fence, );
 }}
var sel_useResource_usage_ = CachedSelector.init("useResource:usage:");
      pub fn useResourceusage(self: *Self, __resource:  * MTLResource, __usage: MTLResourceUsage, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLResource, MTLResourceUsage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useResource_usage_.get(), __resource, __usage, );
 }}
var sel_useResources_count_usage_ = CachedSelector.init("useResources:count:usage:");
      pub fn useResourcescountusage(self: *Self, __resources: [*c] * MTLResource, __count: c_ulong, __usage: MTLResourceUsage, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLResource, c_ulong, MTLResourceUsage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useResources_count_usage_.get(), __resources, __count, __usage, );
 }}
var sel_useHeap_ = CachedSelector.init("useHeap:");
      pub fn useHeap(self: *Self, __heap:  * MTLHeap, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLHeap, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useHeap_.get(), __heap, );
 }}
var sel_useHeaps_count_ = CachedSelector.init("useHeaps:count:");
      pub fn useHeapscount(self: *Self, __heaps: [*c] * MTLHeap, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c] * MTLHeap, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_useHeaps_count_.get(), __heaps, __count, );
 }}
var sel_sampleCountersInBuffer_atSampleIndex_withBarrier_ = CachedSelector.init("sampleCountersInBuffer:atSampleIndex:withBarrier:");
      pub fn sampleCountersInBufferatSampleIndexwithBarrier(self: *Self, __sampleBuffer:  * MTLCounterSampleBuffer, __sampleIndex: c_ulong, __barrier: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLCounterSampleBuffer, c_ulong, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCountersInBuffer_atSampleIndex_withBarrier_.get(), __sampleBuffer, __sampleIndex, __barrier, );
 }}
  };
}

pub const MTLAccelerationStructureCommandEncoder = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureCommandEncoderProtocolMixin(Self, "MTLAccelerationStructureCommandEncoder");
  pub usingnamespace MTLCommandEncoderProtocolMixin(Self, "MTLAccelerationStructureCommandEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructureCommandEncoder");
};

pub fn NSProgressReportingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_progress = CachedSelector.init("progress");
      pub fn progress(self: *Self, )  * NSProgress {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_progress.get(), );
 }}
  };
}

pub const NSProgressReporting = opaque {
  const Self = @This();
  pub usingnamespace NSProgressReportingProtocolMixin(Self, "NSProgressReporting");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSProgressReporting");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSProgressReporting");
};

pub fn NSUserActivityDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_userActivityWillSave_ = CachedSelector.init("userActivityWillSave:");
      pub fn userActivityWillSave(self: *Self, __userActivity:  * NSUserActivity, ) void {{
           return @as(*const fn(*Self, SEL,  * NSUserActivity, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userActivityWillSave_.get(), __userActivity, );
 }}
var sel_userActivityWasContinued_ = CachedSelector.init("userActivityWasContinued:");
      pub fn userActivityWasContinued(self: *Self, __userActivity:  * NSUserActivity, ) void {{
           return @as(*const fn(*Self, SEL,  * NSUserActivity, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userActivityWasContinued_.get(), __userActivity, );
 }}
var sel_userActivity_didReceiveInputStream_outputStream_ = CachedSelector.init("userActivity:didReceiveInputStream:outputStream:");
      pub fn userActivitydidReceiveInputStreamoutputStream(self: *Self, __userActivity:  * NSUserActivity, __inputStream:  * NSInputStream, __outputStream:  * NSOutputStream, ) void {{
           return @as(*const fn(*Self, SEL,  * NSUserActivity,  * NSInputStream,  * NSOutputStream, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userActivity_didReceiveInputStream_outputStream_.get(), __userActivity, __inputStream, __outputStream, );
 }}
  };
}

pub const NSUserActivityDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSUserActivityDelegateProtocolMixin(Self, "NSUserActivityDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserActivityDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserActivityDelegate");
};

pub fn NSFileManagerDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_fileManager_shouldCopyItemAtPath_toPath_ = CachedSelector.init("fileManager:shouldCopyItemAtPath:toPath:");
      pub fn fileManagershouldCopyItemAtPathtoPath(self: *Self, __fileManager:  * NSFileManager, __srcPath:  * NSString, __dstPath:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSString,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldCopyItemAtPath_toPath_.get(), __fileManager, __srcPath, __dstPath, );
 }}
var sel_fileManager_shouldCopyItemAtURL_toURL_ = CachedSelector.init("fileManager:shouldCopyItemAtURL:toURL:");
      pub fn fileManagershouldCopyItemAtURLtoURL(self: *Self, __fileManager:  * NSFileManager, __srcURL:  * NSURL, __dstURL:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSURL,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldCopyItemAtURL_toURL_.get(), __fileManager, __srcURL, __dstURL, );
 }}
var sel_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_ = CachedSelector.init("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:");
      pub fn fileManagershouldProceedAfterErrorcopyingItemAtPathtoPath(self: *Self, __fileManager:  * NSFileManager, __an_error:  * NSError, __srcPath:  * NSString, __dstPath:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSError,  * NSString,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_.get(), __fileManager, __an_error, __srcPath, __dstPath, );
 }}
var sel_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_ = CachedSelector.init("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:");
      pub fn fileManagershouldProceedAfterErrorcopyingItemAtURLtoURL(self: *Self, __fileManager:  * NSFileManager, __an_error:  * NSError, __srcURL:  * NSURL, __dstURL:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSError,  * NSURL,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_.get(), __fileManager, __an_error, __srcURL, __dstURL, );
 }}
var sel_fileManager_shouldMoveItemAtPath_toPath_ = CachedSelector.init("fileManager:shouldMoveItemAtPath:toPath:");
      pub fn fileManagershouldMoveItemAtPathtoPath(self: *Self, __fileManager:  * NSFileManager, __srcPath:  * NSString, __dstPath:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSString,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldMoveItemAtPath_toPath_.get(), __fileManager, __srcPath, __dstPath, );
 }}
var sel_fileManager_shouldMoveItemAtURL_toURL_ = CachedSelector.init("fileManager:shouldMoveItemAtURL:toURL:");
      pub fn fileManagershouldMoveItemAtURLtoURL(self: *Self, __fileManager:  * NSFileManager, __srcURL:  * NSURL, __dstURL:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSURL,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldMoveItemAtURL_toURL_.get(), __fileManager, __srcURL, __dstURL, );
 }}
var sel_fileManager_shouldProceedAfterError_movingItemAtPath_toPath_ = CachedSelector.init("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:");
      pub fn fileManagershouldProceedAfterErrormovingItemAtPathtoPath(self: *Self, __fileManager:  * NSFileManager, __an_error:  * NSError, __srcPath:  * NSString, __dstPath:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSError,  * NSString,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldProceedAfterError_movingItemAtPath_toPath_.get(), __fileManager, __an_error, __srcPath, __dstPath, );
 }}
var sel_fileManager_shouldProceedAfterError_movingItemAtURL_toURL_ = CachedSelector.init("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:");
      pub fn fileManagershouldProceedAfterErrormovingItemAtURLtoURL(self: *Self, __fileManager:  * NSFileManager, __an_error:  * NSError, __srcURL:  * NSURL, __dstURL:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSError,  * NSURL,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldProceedAfterError_movingItemAtURL_toURL_.get(), __fileManager, __an_error, __srcURL, __dstURL, );
 }}
var sel_fileManager_shouldLinkItemAtPath_toPath_ = CachedSelector.init("fileManager:shouldLinkItemAtPath:toPath:");
      pub fn fileManagershouldLinkItemAtPathtoPath(self: *Self, __fileManager:  * NSFileManager, __srcPath:  * NSString, __dstPath:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSString,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldLinkItemAtPath_toPath_.get(), __fileManager, __srcPath, __dstPath, );
 }}
var sel_fileManager_shouldLinkItemAtURL_toURL_ = CachedSelector.init("fileManager:shouldLinkItemAtURL:toURL:");
      pub fn fileManagershouldLinkItemAtURLtoURL(self: *Self, __fileManager:  * NSFileManager, __srcURL:  * NSURL, __dstURL:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSURL,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldLinkItemAtURL_toURL_.get(), __fileManager, __srcURL, __dstURL, );
 }}
var sel_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_ = CachedSelector.init("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:");
      pub fn fileManagershouldProceedAfterErrorlinkingItemAtPathtoPath(self: *Self, __fileManager:  * NSFileManager, __an_error:  * NSError, __srcPath:  * NSString, __dstPath:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSError,  * NSString,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_.get(), __fileManager, __an_error, __srcPath, __dstPath, );
 }}
var sel_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_ = CachedSelector.init("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:");
      pub fn fileManagershouldProceedAfterErrorlinkingItemAtURLtoURL(self: *Self, __fileManager:  * NSFileManager, __an_error:  * NSError, __srcURL:  * NSURL, __dstURL:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSError,  * NSURL,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_.get(), __fileManager, __an_error, __srcURL, __dstURL, );
 }}
var sel_fileManager_shouldRemoveItemAtPath_ = CachedSelector.init("fileManager:shouldRemoveItemAtPath:");
      pub fn fileManagershouldRemoveItemAtPath(self: *Self, __fileManager:  * NSFileManager, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldRemoveItemAtPath_.get(), __fileManager, __path, );
 }}
var sel_fileManager_shouldRemoveItemAtURL_ = CachedSelector.init("fileManager:shouldRemoveItemAtURL:");
      pub fn fileManagershouldRemoveItemAtURL(self: *Self, __fileManager:  * NSFileManager, __URL:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldRemoveItemAtURL_.get(), __fileManager, __URL, );
 }}
var sel_fileManager_shouldProceedAfterError_removingItemAtPath_ = CachedSelector.init("fileManager:shouldProceedAfterError:removingItemAtPath:");
      pub fn fileManagershouldProceedAfterErrorremovingItemAtPath(self: *Self, __fileManager:  * NSFileManager, __an_error:  * NSError, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSError,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldProceedAfterError_removingItemAtPath_.get(), __fileManager, __an_error, __path, );
 }}
var sel_fileManager_shouldProceedAfterError_removingItemAtURL_ = CachedSelector.init("fileManager:shouldProceedAfterError:removingItemAtURL:");
      pub fn fileManagershouldProceedAfterErrorremovingItemAtURL(self: *Self, __fileManager:  * NSFileManager, __an_error:  * NSError, __URL:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSError,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldProceedAfterError_removingItemAtURL_.get(), __fileManager, __an_error, __URL, );
 }}
  };
}

pub const NSFileManagerDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSFileManagerDelegateProtocolMixin(Self, "NSFileManagerDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileManagerDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileManagerDelegate");
};

pub fn NSCopyingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_copyWithZone_ = CachedSelector.init("copyWithZone:");
      pub fn copyWithZone(self: *Self, __zone:  [*c] _NSZone, ) id {{
           return @as(*const fn(*Self, SEL,  [*c] _NSZone, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyWithZone_.get(), __zone, );
 }}
  };
}

pub const NSCopying = opaque {
  const Self = @This();
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSCopying");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCopying");
};

pub fn NSURLConnectionDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_connection_didFailWithError_ = CachedSelector.init("connection:didFailWithError:");
      pub fn connectiondidFailWithError(self: *Self, __connection:  * NSURLConnection, __an_error:  * NSError, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSError, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_didFailWithError_.get(), __connection, __an_error, );
 }}
var sel_connectionShouldUseCredentialStorage_ = CachedSelector.init("connectionShouldUseCredentialStorage:");
      pub fn connectionShouldUseCredentialStorage(self: *Self, __connection:  * NSURLConnection, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connectionShouldUseCredentialStorage_.get(), __connection, );
 }}
var sel_connection_willSendRequestForAuthenticationChallenge_ = CachedSelector.init("connection:willSendRequestForAuthenticationChallenge:");
      pub fn connectionwillSendRequestForAuthenticationChallenge(self: *Self, __connection:  * NSURLConnection, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_willSendRequestForAuthenticationChallenge_.get(), __connection, __challenge, );
 }}
var sel_connection_canAuthenticateAgainstProtectionSpace_ = CachedSelector.init("connection:canAuthenticateAgainstProtectionSpace:");
      pub fn connectioncanAuthenticateAgainstProtectionSpace(self: *Self, __connection:  * NSURLConnection, __protectionSpace:  * NSURLProtectionSpace, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSURLProtectionSpace, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_canAuthenticateAgainstProtectionSpace_.get(), __connection, __protectionSpace, );
 }}
var sel_connection_didReceiveAuthenticationChallenge_ = CachedSelector.init("connection:didReceiveAuthenticationChallenge:");
      pub fn connectiondidReceiveAuthenticationChallenge(self: *Self, __connection:  * NSURLConnection, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_didReceiveAuthenticationChallenge_.get(), __connection, __challenge, );
 }}
var sel_connection_didCancelAuthenticationChallenge_ = CachedSelector.init("connection:didCancelAuthenticationChallenge:");
      pub fn connectiondidCancelAuthenticationChallenge(self: *Self, __connection:  * NSURLConnection, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLConnection,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_didCancelAuthenticationChallenge_.get(), __connection, __challenge, );
 }}
  };
}

pub const NSURLConnectionDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLConnectionDelegateProtocolMixin(Self, "NSURLConnectionDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLConnectionDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLConnectionDelegate");
};

pub fn NSUserNotificationCenterDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_userNotificationCenter_didDeliverNotification_ = CachedSelector.init("userNotificationCenter:didDeliverNotification:");
      pub fn userNotificationCenterdidDeliverNotification(self: *Self, __center:  * NSUserNotificationCenter, __notification:  * NSUserNotification, ) void {{
           return @as(*const fn(*Self, SEL,  * NSUserNotificationCenter,  * NSUserNotification, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userNotificationCenter_didDeliverNotification_.get(), __center, __notification, );
 }}
var sel_userNotificationCenter_didActivateNotification_ = CachedSelector.init("userNotificationCenter:didActivateNotification:");
      pub fn userNotificationCenterdidActivateNotification(self: *Self, __center:  * NSUserNotificationCenter, __notification:  * NSUserNotification, ) void {{
           return @as(*const fn(*Self, SEL,  * NSUserNotificationCenter,  * NSUserNotification, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userNotificationCenter_didActivateNotification_.get(), __center, __notification, );
 }}
var sel_userNotificationCenter_shouldPresentNotification_ = CachedSelector.init("userNotificationCenter:shouldPresentNotification:");
      pub fn userNotificationCentershouldPresentNotification(self: *Self, __center:  * NSUserNotificationCenter, __notification:  * NSUserNotification, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSUserNotificationCenter,  * NSUserNotification, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userNotificationCenter_shouldPresentNotification_.get(), __center, __notification, );
 }}
  };
}

pub const NSUserNotificationCenterDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSUserNotificationCenterDelegateProtocolMixin(Self, "NSUserNotificationCenterDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserNotificationCenterDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserNotificationCenterDelegate");
};

pub fn MTLCommandBufferProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_enqueue = CachedSelector.init("enqueue");
      pub fn enqueue(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enqueue.get(), );
 }}
var sel_commit = CachedSelector.init("commit");
      pub fn commit(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commit.get(), );
 }}
var sel_addScheduledHandler_ = CachedSelector.init("addScheduledHandler:");
      pub fn addScheduledHandler(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addScheduledHandler_.get(), __block, );
 }}
var sel_presentDrawable_ = CachedSelector.init("presentDrawable:");
      pub fn presentDrawable(self: *Self, __drawable:  * MTLDrawable, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLDrawable, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentDrawable_.get(), __drawable, );
 }}
var sel_presentDrawable_atTime_ = CachedSelector.init("presentDrawable:atTime:");
      pub fn presentDrawableatTime(self: *Self, __drawable:  * MTLDrawable, __presentationTime: f64, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLDrawable, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentDrawable_atTime_.get(), __drawable, __presentationTime, );
 }}
var sel_presentDrawable_afterMinimumDuration_ = CachedSelector.init("presentDrawable:afterMinimumDuration:");
      pub fn presentDrawableafterMinimumDuration(self: *Self, __drawable:  * MTLDrawable, __duration: f64, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLDrawable, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_presentDrawable_afterMinimumDuration_.get(), __drawable, __duration, );
 }}
var sel_waitUntilScheduled = CachedSelector.init("waitUntilScheduled");
      pub fn waitUntilScheduled(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitUntilScheduled.get(), );
 }}
var sel_addCompletedHandler_ = CachedSelector.init("addCompletedHandler:");
      pub fn addCompletedHandler(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addCompletedHandler_.get(), __block, );
 }}
var sel_waitUntilCompleted = CachedSelector.init("waitUntilCompleted");
      pub fn waitUntilCompleted(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitUntilCompleted.get(), );
 }}
var sel_blitCommandEncoder = CachedSelector.init("blitCommandEncoder");
      pub fn blitCommandEncoder(self: *Self, )  ?* MTLBlitCommandEncoder {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBlitCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_blitCommandEncoder.get(), );
 }}
var sel_renderCommandEncoderWithDescriptor_ = CachedSelector.init("renderCommandEncoderWithDescriptor:");
      pub fn renderCommandEncoderWithDescriptor(self: *Self, __renderPassDescriptor:  * MTLRenderPassDescriptor, )  ?* MTLRenderCommandEncoder {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPassDescriptor, ) callconv(.C)  ?* MTLRenderCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_renderCommandEncoderWithDescriptor_.get(), __renderPassDescriptor, );
 }}
var sel_computeCommandEncoderWithDescriptor_ = CachedSelector.init("computeCommandEncoderWithDescriptor:");
      pub fn computeCommandEncoderWithDescriptor(self: *Self, __computePassDescriptor:  * MTLComputePassDescriptor, )  ?* MTLComputeCommandEncoder {{
           return @as(*const fn(*Self, SEL,  * MTLComputePassDescriptor, ) callconv(.C)  ?* MTLComputeCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_computeCommandEncoderWithDescriptor_.get(), __computePassDescriptor, );
 }}
var sel_blitCommandEncoderWithDescriptor_ = CachedSelector.init("blitCommandEncoderWithDescriptor:");
      pub fn blitCommandEncoderWithDescriptor(self: *Self, __blitPassDescriptor:  * MTLBlitPassDescriptor, )  ?* MTLBlitCommandEncoder {{
           return @as(*const fn(*Self, SEL,  * MTLBlitPassDescriptor, ) callconv(.C)  ?* MTLBlitCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_blitCommandEncoderWithDescriptor_.get(), __blitPassDescriptor, );
 }}
var sel_computeCommandEncoder = CachedSelector.init("computeCommandEncoder");
      pub fn computeCommandEncoder(self: *Self, )  ?* MTLComputeCommandEncoder {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLComputeCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_computeCommandEncoder.get(), );
 }}
var sel_computeCommandEncoderWithDispatchType_ = CachedSelector.init("computeCommandEncoderWithDispatchType:");
      pub fn computeCommandEncoderWithDispatchType(self: *Self, __dispatchType: MTLDispatchType, )  ?* MTLComputeCommandEncoder {{
           return @as(*const fn(*Self, SEL, MTLDispatchType, ) callconv(.C)  ?* MTLComputeCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_computeCommandEncoderWithDispatchType_.get(), __dispatchType, );
 }}
var sel_encodeWaitForEvent_value_ = CachedSelector.init("encodeWaitForEvent:value:");
      pub fn encodeWaitForEventvalue(self: *Self, __event:  * MTLEvent, __value: c_ulonglong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLEvent, c_ulonglong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeWaitForEvent_value_.get(), __event, __value, );
 }}
var sel_encodeSignalEvent_value_ = CachedSelector.init("encodeSignalEvent:value:");
      pub fn encodeSignalEventvalue(self: *Self, __event:  * MTLEvent, __value: c_ulonglong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLEvent, c_ulonglong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeSignalEvent_value_.get(), __event, __value, );
 }}
var sel_parallelRenderCommandEncoderWithDescriptor_ = CachedSelector.init("parallelRenderCommandEncoderWithDescriptor:");
      pub fn parallelRenderCommandEncoderWithDescriptor(self: *Self, __renderPassDescriptor:  * MTLRenderPassDescriptor, )  ?* MTLParallelRenderCommandEncoder {{
           return @as(*const fn(*Self, SEL,  * MTLRenderPassDescriptor, ) callconv(.C)  ?* MTLParallelRenderCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parallelRenderCommandEncoderWithDescriptor_.get(), __renderPassDescriptor, );
 }}
var sel_resourceStateCommandEncoder = CachedSelector.init("resourceStateCommandEncoder");
      pub fn resourceStateCommandEncoder(self: *Self, )  ?* MTLResourceStateCommandEncoder {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLResourceStateCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceStateCommandEncoder.get(), );
 }}
var sel_resourceStateCommandEncoderWithDescriptor_ = CachedSelector.init("resourceStateCommandEncoderWithDescriptor:");
      pub fn resourceStateCommandEncoderWithDescriptor(self: *Self, __resourceStatePassDescriptor:  * MTLResourceStatePassDescriptor, )  ?* MTLResourceStateCommandEncoder {{
           return @as(*const fn(*Self, SEL,  * MTLResourceStatePassDescriptor, ) callconv(.C)  ?* MTLResourceStateCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceStateCommandEncoderWithDescriptor_.get(), __resourceStatePassDescriptor, );
 }}
var sel_accelerationStructureCommandEncoder = CachedSelector.init("accelerationStructureCommandEncoder");
      pub fn accelerationStructureCommandEncoder(self: *Self, )  ?* MTLAccelerationStructureCommandEncoder {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLAccelerationStructureCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_accelerationStructureCommandEncoder.get(), );
 }}
var sel_accelerationStructureCommandEncoderWithDescriptor_ = CachedSelector.init("accelerationStructureCommandEncoderWithDescriptor:");
      pub fn accelerationStructureCommandEncoderWithDescriptor(self: *Self, __descriptor:  * MTLAccelerationStructurePassDescriptor, )  * MTLAccelerationStructureCommandEncoder {{
           return @as(*const fn(*Self, SEL,  * MTLAccelerationStructurePassDescriptor, ) callconv(.C)  * MTLAccelerationStructureCommandEncoder, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_accelerationStructureCommandEncoderWithDescriptor_.get(), __descriptor, );
 }}
var sel_pushDebugGroup_ = CachedSelector.init("pushDebugGroup:");
      pub fn pushDebugGroup(self: *Self, __string:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pushDebugGroup_.get(), __string, );
 }}
var sel_popDebugGroup = CachedSelector.init("popDebugGroup");
      pub fn popDebugGroup(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_popDebugGroup.get(), );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_commandQueue = CachedSelector.init("commandQueue");
      pub fn commandQueue(self: *Self, )  * MTLCommandQueue {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLCommandQueue, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandQueue.get(), );
 }}
var sel_retainedReferences = CachedSelector.init("retainedReferences");
      pub fn retainedReferences(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_retainedReferences.get(), );
 }}
var sel_errorOptions = CachedSelector.init("errorOptions");
      pub fn errorOptions(self: *Self, ) MTLCommandBufferErrorOption {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCommandBufferErrorOption, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_errorOptions.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_kernelStartTime = CachedSelector.init("kernelStartTime");
      pub fn kernelStartTime(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_kernelStartTime.get(), );
 }}
var sel_kernelEndTime = CachedSelector.init("kernelEndTime");
      pub fn kernelEndTime(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_kernelEndTime.get(), );
 }}
var sel_logs = CachedSelector.init("logs");
      pub fn logs(self: *Self, )  * MTLLogContainer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLLogContainer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_logs.get(), );
 }}
var sel_GPUStartTime = CachedSelector.init("GPUStartTime");
      pub fn GPUStartTime(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_GPUStartTime.get(), );
 }}
var sel_GPUEndTime = CachedSelector.init("GPUEndTime");
      pub fn GPUEndTime(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_GPUEndTime.get(), );
 }}
var sel_status = CachedSelector.init("status");
      pub fn status(self: *Self, ) MTLCommandBufferStatus {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCommandBufferStatus, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_status.get(), );
 }}
var sel_error = CachedSelector.init("error");
      pub fn _error(self: *Self, )  ?* NSError {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSError, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_error.get(), );
 }}
  };
}

pub const MTLCommandBuffer = opaque {
  const Self = @This();
  pub usingnamespace MTLCommandBufferProtocolMixin(Self, "MTLCommandBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCommandBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCommandBuffer");
};

pub fn MTLIOScratchBufferProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_buffer = CachedSelector.init("buffer");
      pub fn buffer(self: *Self, )  * MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_buffer.get(), );
 }}
  };
}

pub const MTLIOScratchBuffer = opaque {
  const Self = @This();
  pub usingnamespace MTLIOScratchBufferProtocolMixin(Self, "MTLIOScratchBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOScratchBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOScratchBuffer");
};

pub fn NSURLSessionStreamDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_URLSession_readClosedForStreamTask_ = CachedSelector.init("URLSession:readClosedForStreamTask:");
      pub fn URLSessionreadClosedForStreamTask(self: *Self, __session:  * NSURLSession, __streamTask:  * NSURLSessionStreamTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionStreamTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_readClosedForStreamTask_.get(), __session, __streamTask, );
 }}
var sel_URLSession_writeClosedForStreamTask_ = CachedSelector.init("URLSession:writeClosedForStreamTask:");
      pub fn URLSessionwriteClosedForStreamTask(self: *Self, __session:  * NSURLSession, __streamTask:  * NSURLSessionStreamTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionStreamTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_writeClosedForStreamTask_.get(), __session, __streamTask, );
 }}
var sel_URLSession_betterRouteDiscoveredForStreamTask_ = CachedSelector.init("URLSession:betterRouteDiscoveredForStreamTask:");
      pub fn URLSessionbetterRouteDiscoveredForStreamTask(self: *Self, __session:  * NSURLSession, __streamTask:  * NSURLSessionStreamTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionStreamTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_betterRouteDiscoveredForStreamTask_.get(), __session, __streamTask, );
 }}
var sel_URLSession_streamTask_didBecomeInputStream_outputStream_ = CachedSelector.init("URLSession:streamTask:didBecomeInputStream:outputStream:");
      pub fn URLSessionstreamTaskdidBecomeInputStreamoutputStream(self: *Self, __session:  * NSURLSession, __streamTask:  * NSURLSessionStreamTask, __inputStream:  * NSInputStream, __outputStream:  * NSOutputStream, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionStreamTask,  * NSInputStream,  * NSOutputStream, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_streamTask_didBecomeInputStream_outputStream_.get(), __session, __streamTask, __inputStream, __outputStream, );
 }}
  };
}

pub const NSURLSessionStreamDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionStreamDelegateProtocolMixin(Self, "NSURLSessionStreamDelegate");
  pub usingnamespace NSURLSessionTaskDelegateProtocolMixin(Self, "NSURLSessionStreamDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionStreamDelegate");
};

pub fn MTLCommandEncoderProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_endEncoding = CachedSelector.init("endEncoding");
      pub fn endEncoding(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endEncoding.get(), );
 }}
var sel_insertDebugSignpost_ = CachedSelector.init("insertDebugSignpost:");
      pub fn insertDebugSignpost(self: *Self, __string:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertDebugSignpost_.get(), __string, );
 }}
var sel_pushDebugGroup_ = CachedSelector.init("pushDebugGroup:");
      pub fn pushDebugGroup(self: *Self, __string:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pushDebugGroup_.get(), __string, );
 }}
var sel_popDebugGroup = CachedSelector.init("popDebugGroup");
      pub fn popDebugGroup(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_popDebugGroup.get(), );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
  };
}

pub const MTLCommandEncoder = opaque {
  const Self = @This();
  pub usingnamespace MTLCommandEncoderProtocolMixin(Self, "MTLCommandEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCommandEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCommandEncoder");
};

pub fn NSDiscardableContentProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_beginContentAccess = CachedSelector.init("beginContentAccess");
      pub fn beginContentAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_beginContentAccess.get(), );
 }}
var sel_endContentAccess = CachedSelector.init("endContentAccess");
      pub fn endContentAccess(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endContentAccess.get(), );
 }}
var sel_discardContentIfPossible = CachedSelector.init("discardContentIfPossible");
      pub fn discardContentIfPossible(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_discardContentIfPossible.get(), );
 }}
var sel_isContentDiscarded = CachedSelector.init("isContentDiscarded");
      pub fn isContentDiscarded(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isContentDiscarded.get(), );
 }}
  };
}

pub const NSDiscardableContent = opaque {
  const Self = @This();
  pub usingnamespace NSDiscardableContentProtocolMixin(Self, "NSDiscardableContent");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDiscardableContent");
};

pub fn MTLIOCommandQueueProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_enqueueBarrier = CachedSelector.init("enqueueBarrier");
      pub fn enqueueBarrier(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enqueueBarrier.get(), );
 }}
var sel_commandBuffer = CachedSelector.init("commandBuffer");
      pub fn commandBuffer(self: *Self, )  * MTLIOCommandBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLIOCommandBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandBuffer.get(), );
 }}
var sel_commandBufferWithUnretainedReferences = CachedSelector.init("commandBufferWithUnretainedReferences");
      pub fn commandBufferWithUnretainedReferences(self: *Self, )  * MTLIOCommandBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLIOCommandBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandBufferWithUnretainedReferences.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
  };
}

pub const MTLIOCommandQueue = opaque {
  const Self = @This();
  pub usingnamespace MTLIOCommandQueueProtocolMixin(Self, "MTLIOCommandQueue");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOCommandQueue");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOCommandQueue");
};

pub fn MTLTextureProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice_ = CachedSelector.init("getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:");
      pub fn getBytesbytesPerRowbytesPerImagefromRegionmipmapLevelslice(self: *Self, __pixelBytes:  [*c] void, __bytesPerRow: c_ulong, __bytesPerImage: c_ulong, __region: MTLRegion, __level: c_ulong, __slice: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, c_ulong, MTLRegion, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice_.get(), __pixelBytes, __bytesPerRow, __bytesPerImage, __region, __level, __slice, );
 }}
var sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_ = CachedSelector.init("replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:");
      pub fn replaceRegionmipmapLevelslicewithBytesbytesPerRowbytesPerImage(self: *Self, __region: MTLRegion, __level: c_ulong, __slice: c_ulong, __pixelBytes:  [*c]  const void, __bytesPerRow: c_ulong, __bytesPerImage: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLRegion, c_ulong, c_ulong,  [*c]  const void, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_.get(), __region, __level, __slice, __pixelBytes, __bytesPerRow, __bytesPerImage, );
 }}
var sel_getBytes_bytesPerRow_fromRegion_mipmapLevel_ = CachedSelector.init("getBytes:bytesPerRow:fromRegion:mipmapLevel:");
      pub fn getBytesbytesPerRowfromRegionmipmapLevel(self: *Self, __pixelBytes:  [*c] void, __bytesPerRow: c_ulong, __region: MTLRegion, __level: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, MTLRegion, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getBytes_bytesPerRow_fromRegion_mipmapLevel_.get(), __pixelBytes, __bytesPerRow, __region, __level, );
 }}
var sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_ = CachedSelector.init("replaceRegion:mipmapLevel:withBytes:bytesPerRow:");
      pub fn replaceRegionmipmapLevelwithBytesbytesPerRow(self: *Self, __region: MTLRegion, __level: c_ulong, __pixelBytes:  [*c]  const void, __bytesPerRow: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLRegion, c_ulong,  [*c]  const void, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_.get(), __region, __level, __pixelBytes, __bytesPerRow, );
 }}
var sel_newTextureViewWithPixelFormat_ = CachedSelector.init("newTextureViewWithPixelFormat:");
      pub fn newTextureViewWithPixelFormat(self: *Self, __pixelFormat: MTLPixelFormat, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newTextureViewWithPixelFormat_.get(), __pixelFormat, );
 }}
var sel_newTextureViewWithPixelFormat_textureType_levels_slices_ = CachedSelector.init("newTextureViewWithPixelFormat:textureType:levels:slices:");
      pub fn newTextureViewWithPixelFormattextureTypelevelsslices(self: *Self, __pixelFormat: MTLPixelFormat, __textureType: MTLTextureType, __levelRange: _NSRange, __sliceRange: _NSRange, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, MTLTextureType, _NSRange, _NSRange, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newTextureViewWithPixelFormat_textureType_levels_slices_.get(), __pixelFormat, __textureType, __levelRange, __sliceRange, );
 }}
var sel_newSharedTextureHandle = CachedSelector.init("newSharedTextureHandle");
      pub fn newSharedTextureHandle(self: *Self, )  ?* MTLSharedTextureHandle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLSharedTextureHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newSharedTextureHandle.get(), );
 }}
var sel_newRemoteTextureViewForDevice_ = CachedSelector.init("newRemoteTextureViewForDevice:");
      pub fn newRemoteTextureViewForDevice(self: *Self, __device:  * MTLDevice, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL,  * MTLDevice, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newRemoteTextureViewForDevice_.get(), __device, );
 }}
var sel_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_ = CachedSelector.init("newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:");
      pub fn newTextureViewWithPixelFormattextureTypelevelsslicesswizzle(self: *Self, __pixelFormat: MTLPixelFormat, __textureType: MTLTextureType, __levelRange: _NSRange, __sliceRange: _NSRange, __swizzle: MTLTextureSwizzleChannels, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, MTLTextureType, _NSRange, _NSRange, MTLTextureSwizzleChannels, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_.get(), __pixelFormat, __textureType, __levelRange, __sliceRange, __swizzle, );
 }}
var sel_rootResource = CachedSelector.init("rootResource");
      pub fn rootResource(self: *Self, )  ?* MTLResource {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLResource, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rootResource.get(), );
 }}
var sel_parentTexture = CachedSelector.init("parentTexture");
      pub fn parentTexture(self: *Self, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parentTexture.get(), );
 }}
var sel_parentRelativeLevel = CachedSelector.init("parentRelativeLevel");
      pub fn parentRelativeLevel(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parentRelativeLevel.get(), );
 }}
var sel_parentRelativeSlice = CachedSelector.init("parentRelativeSlice");
      pub fn parentRelativeSlice(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parentRelativeSlice.get(), );
 }}
var sel_buffer = CachedSelector.init("buffer");
      pub fn buffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_buffer.get(), );
 }}
var sel_bufferOffset = CachedSelector.init("bufferOffset");
      pub fn bufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferOffset.get(), );
 }}
var sel_bufferBytesPerRow = CachedSelector.init("bufferBytesPerRow");
      pub fn bufferBytesPerRow(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferBytesPerRow.get(), );
 }}
var sel_iosurface = CachedSelector.init("iosurface");
      pub fn iosurface(self: *Self, )  [*c] __IOSurface {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] __IOSurface, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_iosurface.get(), );
 }}
var sel_iosurfacePlane = CachedSelector.init("iosurfacePlane");
      pub fn iosurfacePlane(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_iosurfacePlane.get(), );
 }}
var sel_textureType = CachedSelector.init("textureType");
      pub fn textureType(self: *Self, ) MTLTextureType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureType.get(), );
 }}
var sel_pixelFormat = CachedSelector.init("pixelFormat");
      pub fn pixelFormat(self: *Self, ) MTLPixelFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPixelFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pixelFormat.get(), );
 }}
var sel_width = CachedSelector.init("width");
      pub fn width(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_width.get(), );
 }}
var sel_height = CachedSelector.init("height");
      pub fn height(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_height.get(), );
 }}
var sel_depth = CachedSelector.init("depth");
      pub fn depth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depth.get(), );
 }}
var sel_mipmapLevelCount = CachedSelector.init("mipmapLevelCount");
      pub fn mipmapLevelCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mipmapLevelCount.get(), );
 }}
var sel_sampleCount = CachedSelector.init("sampleCount");
      pub fn sampleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCount.get(), );
 }}
var sel_arrayLength = CachedSelector.init("arrayLength");
      pub fn arrayLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayLength.get(), );
 }}
var sel_usage = CachedSelector.init("usage");
      pub fn usage(self: *Self, ) MTLTextureUsage {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureUsage, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_usage.get(), );
 }}
var sel_isShareable = CachedSelector.init("isShareable");
      pub fn isShareable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isShareable.get(), );
 }}
var sel_isFramebufferOnly = CachedSelector.init("isFramebufferOnly");
      pub fn isFramebufferOnly(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isFramebufferOnly.get(), );
 }}
var sel_firstMipmapInTail = CachedSelector.init("firstMipmapInTail");
      pub fn firstMipmapInTail(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_firstMipmapInTail.get(), );
 }}
var sel_tailSizeInBytes = CachedSelector.init("tailSizeInBytes");
      pub fn tailSizeInBytes(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tailSizeInBytes.get(), );
 }}
var sel_isSparse = CachedSelector.init("isSparse");
      pub fn isSparse(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSparse.get(), );
 }}
var sel_allowGPUOptimizedContents = CachedSelector.init("allowGPUOptimizedContents");
      pub fn allowGPUOptimizedContents(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowGPUOptimizedContents.get(), );
 }}
var sel_compressionType = CachedSelector.init("compressionType");
      pub fn compressionType(self: *Self, ) MTLTextureCompressionType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureCompressionType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compressionType.get(), );
 }}
var sel_gpuResourceID = CachedSelector.init("gpuResourceID");
      pub fn gpuResourceID(self: *Self, ) MTLResourceID {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceID, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gpuResourceID.get(), );
 }}
var sel_remoteStorageTexture = CachedSelector.init("remoteStorageTexture");
      pub fn remoteStorageTexture(self: *Self, )  * MTLTexture {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remoteStorageTexture.get(), );
 }}
var sel_swizzle = CachedSelector.init("swizzle");
      pub fn swizzle(self: *Self, ) MTLTextureSwizzleChannels {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureSwizzleChannels, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_swizzle.get(), );
 }}
  };
}

pub const MTLTexture = opaque {
  const Self = @This();
  pub usingnamespace MTLTextureProtocolMixin(Self, "MTLTexture");
  pub usingnamespace MTLResourceProtocolMixin(Self, "MTLTexture");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLTexture");
};

pub fn NSMutableCopyingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_mutableCopyWithZone_ = CachedSelector.init("mutableCopyWithZone:");
      pub fn mutableCopyWithZone(self: *Self, __zone:  [*c] _NSZone, ) id {{
           return @as(*const fn(*Self, SEL,  [*c] _NSZone, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableCopyWithZone_.get(), __zone, );
 }}
  };
}

pub const NSMutableCopying = opaque {
  const Self = @This();
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSMutableCopying");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableCopying");
};

pub fn NSFastEnumerationProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_countByEnumeratingWithState_objects_count_ = CachedSelector.init("countByEnumeratingWithState:objects:count:");
      pub fn countByEnumeratingWithStateobjectscount(self: *Self, __state:  [*c] NSFastEnumerationState, __buffer: [*c]id, __len: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  [*c] NSFastEnumerationState, [*c]id, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countByEnumeratingWithState_objects_count_.get(), __state, __buffer, __len, );
 }}
  };
}

pub const NSFastEnumeration = opaque {
  const Self = @This();
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSFastEnumeration");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFastEnumeration");
};

pub fn NSURLHandleClientProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_URLHandle_resourceDataDidBecomeAvailable_ = CachedSelector.init("URLHandle:resourceDataDidBecomeAvailable:");
      pub fn URLHandleresourceDataDidBecomeAvailable(self: *Self, __sender:  * NSURLHandle, __newBytes:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLHandle,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLHandle_resourceDataDidBecomeAvailable_.get(), __sender, __newBytes, );
 }}
var sel_URLHandleResourceDidBeginLoading_ = CachedSelector.init("URLHandleResourceDidBeginLoading:");
      pub fn URLHandleResourceDidBeginLoading(self: *Self, __sender:  * NSURLHandle, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLHandle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLHandleResourceDidBeginLoading_.get(), __sender, );
 }}
var sel_URLHandleResourceDidFinishLoading_ = CachedSelector.init("URLHandleResourceDidFinishLoading:");
      pub fn URLHandleResourceDidFinishLoading(self: *Self, __sender:  * NSURLHandle, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLHandle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLHandleResourceDidFinishLoading_.get(), __sender, );
 }}
var sel_URLHandleResourceDidCancelLoading_ = CachedSelector.init("URLHandleResourceDidCancelLoading:");
      pub fn URLHandleResourceDidCancelLoading(self: *Self, __sender:  * NSURLHandle, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLHandle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLHandleResourceDidCancelLoading_.get(), __sender, );
 }}
var sel_URLHandle_resourceDidFailLoadingWithReason_ = CachedSelector.init("URLHandle:resourceDidFailLoadingWithReason:");
      pub fn URLHandleresourceDidFailLoadingWithReason(self: *Self, __sender:  * NSURLHandle, __reason:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLHandle,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLHandle_resourceDidFailLoadingWithReason_.get(), __sender, __reason, );
 }}
  };
}

pub const NSURLHandleClient = opaque {
  const Self = @This();
  pub usingnamespace NSURLHandleClientProtocolMixin(Self, "NSURLHandleClient");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLHandleClient");
};

pub fn NSXMLParserDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_parserDidStartDocument_ = CachedSelector.init("parserDidStartDocument:");
      pub fn parserDidStartDocument(self: *Self, __parser:  * NSXMLParser, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parserDidStartDocument_.get(), __parser, );
 }}
var sel_parserDidEndDocument_ = CachedSelector.init("parserDidEndDocument:");
      pub fn parserDidEndDocument(self: *Self, __parser:  * NSXMLParser, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parserDidEndDocument_.get(), __parser, );
 }}
var sel_parser_foundNotationDeclarationWithName_publicID_systemID_ = CachedSelector.init("parser:foundNotationDeclarationWithName:publicID:systemID:");
      pub fn parserfoundNotationDeclarationWithNamepublicIDsystemID(self: *Self, __parser:  * NSXMLParser, __name:  * NSString, __publicID:  ?* NSString, __systemID:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  ?* NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundNotationDeclarationWithName_publicID_systemID_.get(), __parser, __name, __publicID, __systemID, );
 }}
var sel_parser_foundUnparsedEntityDeclarationWithName_publicID_systemID_notationName_ = CachedSelector.init("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:");
      pub fn parserfoundUnparsedEntityDeclarationWithNamepublicIDsystemIDnotationName(self: *Self, __parser:  * NSXMLParser, __name:  * NSString, __publicID:  ?* NSString, __systemID:  ?* NSString, __notationName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  ?* NSString,  ?* NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundUnparsedEntityDeclarationWithName_publicID_systemID_notationName_.get(), __parser, __name, __publicID, __systemID, __notationName, );
 }}
var sel_parser_foundAttributeDeclarationWithName_forElement_type_defaultValue_ = CachedSelector.init("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:");
      pub fn parserfoundAttributeDeclarationWithNameforElementtypedefaultValue(self: *Self, __parser:  * NSXMLParser, __attributeName:  * NSString, __elementName:  * NSString, __a_type:  ?* NSString, __defaultValue:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  * NSString,  ?* NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundAttributeDeclarationWithName_forElement_type_defaultValue_.get(), __parser, __attributeName, __elementName, __a_type, __defaultValue, );
 }}
var sel_parser_foundElementDeclarationWithName_model_ = CachedSelector.init("parser:foundElementDeclarationWithName:model:");
      pub fn parserfoundElementDeclarationWithNamemodel(self: *Self, __parser:  * NSXMLParser, __elementName:  * NSString, __model:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundElementDeclarationWithName_model_.get(), __parser, __elementName, __model, );
 }}
var sel_parser_foundInternalEntityDeclarationWithName_value_ = CachedSelector.init("parser:foundInternalEntityDeclarationWithName:value:");
      pub fn parserfoundInternalEntityDeclarationWithNamevalue(self: *Self, __parser:  * NSXMLParser, __name:  * NSString, __value:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundInternalEntityDeclarationWithName_value_.get(), __parser, __name, __value, );
 }}
var sel_parser_foundExternalEntityDeclarationWithName_publicID_systemID_ = CachedSelector.init("parser:foundExternalEntityDeclarationWithName:publicID:systemID:");
      pub fn parserfoundExternalEntityDeclarationWithNamepublicIDsystemID(self: *Self, __parser:  * NSXMLParser, __name:  * NSString, __publicID:  ?* NSString, __systemID:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  ?* NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundExternalEntityDeclarationWithName_publicID_systemID_.get(), __parser, __name, __publicID, __systemID, );
 }}
var sel_parser_didStartElement_namespaceURI_qualifiedName_attributes_ = CachedSelector.init("parser:didStartElement:namespaceURI:qualifiedName:attributes:");
      pub fn parserdidStartElementnamespaceURIqualifiedNameattributes(self: *Self, __parser:  * NSXMLParser, __elementName:  * NSString, __namespaceURI:  ?* NSString, __qName:  ?* NSString, __attributeDict:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  ?* NSString,  ?* NSString,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_didStartElement_namespaceURI_qualifiedName_attributes_.get(), __parser, __elementName, __namespaceURI, __qName, __attributeDict, );
 }}
var sel_parser_didEndElement_namespaceURI_qualifiedName_ = CachedSelector.init("parser:didEndElement:namespaceURI:qualifiedName:");
      pub fn parserdidEndElementnamespaceURIqualifiedName(self: *Self, __parser:  * NSXMLParser, __elementName:  * NSString, __namespaceURI:  ?* NSString, __qName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  ?* NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_didEndElement_namespaceURI_qualifiedName_.get(), __parser, __elementName, __namespaceURI, __qName, );
 }}
var sel_parser_didStartMappingPrefix_toURI_ = CachedSelector.init("parser:didStartMappingPrefix:toURI:");
      pub fn parserdidStartMappingPrefixtoURI(self: *Self, __parser:  * NSXMLParser, __prefix:  * NSString, __namespaceURI:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_didStartMappingPrefix_toURI_.get(), __parser, __prefix, __namespaceURI, );
 }}
var sel_parser_didEndMappingPrefix_ = CachedSelector.init("parser:didEndMappingPrefix:");
      pub fn parserdidEndMappingPrefix(self: *Self, __parser:  * NSXMLParser, __prefix:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_didEndMappingPrefix_.get(), __parser, __prefix, );
 }}
var sel_parser_foundCharacters_ = CachedSelector.init("parser:foundCharacters:");
      pub fn parserfoundCharacters(self: *Self, __parser:  * NSXMLParser, __string:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundCharacters_.get(), __parser, __string, );
 }}
var sel_parser_foundIgnorableWhitespace_ = CachedSelector.init("parser:foundIgnorableWhitespace:");
      pub fn parserfoundIgnorableWhitespace(self: *Self, __parser:  * NSXMLParser, __whitespaceString:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundIgnorableWhitespace_.get(), __parser, __whitespaceString, );
 }}
var sel_parser_foundProcessingInstructionWithTarget_data_ = CachedSelector.init("parser:foundProcessingInstructionWithTarget:data:");
      pub fn parserfoundProcessingInstructionWithTargetdata(self: *Self, __parser:  * NSXMLParser, __target:  * NSString, __data:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundProcessingInstructionWithTarget_data_.get(), __parser, __target, __data, );
 }}
var sel_parser_foundComment_ = CachedSelector.init("parser:foundComment:");
      pub fn parserfoundComment(self: *Self, __parser:  * NSXMLParser, __comment:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundComment_.get(), __parser, __comment, );
 }}
var sel_parser_foundCDATA_ = CachedSelector.init("parser:foundCDATA:");
      pub fn parserfoundCDATA(self: *Self, __parser:  * NSXMLParser, __CDATABlock:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_foundCDATA_.get(), __parser, __CDATABlock, );
 }}
var sel_parser_resolveExternalEntityName_systemID_ = CachedSelector.init("parser:resolveExternalEntityName:systemID:");
      pub fn parserresolveExternalEntityNamesystemID(self: *Self, __parser:  * NSXMLParser, __name:  * NSString, __systemID:  ?* NSString, )  ?* NSData {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSString,  ?* NSString, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_resolveExternalEntityName_systemID_.get(), __parser, __name, __systemID, );
 }}
var sel_parser_parseErrorOccurred_ = CachedSelector.init("parser:parseErrorOccurred:");
      pub fn parserparseErrorOccurred(self: *Self, __parser:  * NSXMLParser, __parseError:  * NSError, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSError, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_parseErrorOccurred_.get(), __parser, __parseError, );
 }}
var sel_parser_validationErrorOccurred_ = CachedSelector.init("parser:validationErrorOccurred:");
      pub fn parservalidationErrorOccurred(self: *Self, __parser:  * NSXMLParser, __validationError:  * NSError, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLParser,  * NSError, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parser_validationErrorOccurred_.get(), __parser, __validationError, );
 }}
  };
}

pub const NSXMLParserDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSXMLParserDelegateProtocolMixin(Self, "NSXMLParserDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXMLParserDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXMLParserDelegate");
};

pub fn MTLCounterSampleBufferProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_resolveCounterRange_ = CachedSelector.init("resolveCounterRange:");
      pub fn resolveCounterRange(self: *Self, __range: _NSRange, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolveCounterRange_.get(), __range, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_sampleCount = CachedSelector.init("sampleCount");
      pub fn sampleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCount.get(), );
 }}
  };
}

pub const MTLCounterSampleBuffer = opaque {
  const Self = @This();
  pub usingnamespace MTLCounterSampleBufferProtocolMixin(Self, "MTLCounterSampleBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCounterSampleBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCounterSampleBuffer");
};

pub fn MTLBlitCommandEncoderProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_synchronizeResource_ = CachedSelector.init("synchronizeResource:");
      pub fn synchronizeResource(self: *Self, __resource:  * MTLResource, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLResource, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_synchronizeResource_.get(), __resource, );
 }}
var sel_synchronizeTexture_slice_level_ = CachedSelector.init("synchronizeTexture:slice:level:");
      pub fn synchronizeTextureslicelevel(self: *Self, __texture:  * MTLTexture, __slice: c_ulong, __level: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_synchronizeTexture_slice_level_.get(), __texture, __slice, __level, );
 }}
var sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_ = CachedSelector.init("copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:");
      pub fn copyFromTexturesourceSlicesourceLevelsourceOriginsourceSizetoTexturedestinationSlicedestinationLeveldestinationOrigin(self: *Self, __sourceTexture:  * MTLTexture, __sourceSlice: c_ulong, __sourceLevel: c_ulong, __sourceOrigin: MTLOrigin, __sourceSize: MTLSize, __destinationTexture:  * MTLTexture, __destinationSlice: c_ulong, __destinationLevel: c_ulong, __destinationOrigin: MTLOrigin, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, c_ulong, c_ulong, MTLOrigin, MTLSize,  * MTLTexture, c_ulong, c_ulong, MTLOrigin, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_.get(), __sourceTexture, __sourceSlice, __sourceLevel, __sourceOrigin, __sourceSize, __destinationTexture, __destinationSlice, __destinationLevel, __destinationOrigin, );
 }}
var sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_ = CachedSelector.init("copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:");
      pub fn copyFromBuffersourceOffsetsourceBytesPerRowsourceBytesPerImagesourceSizetoTexturedestinationSlicedestinationLeveldestinationOrigin(self: *Self, __sourceBuffer:  * MTLBuffer, __sourceOffset: c_ulong, __sourceBytesPerRow: c_ulong, __sourceBytesPerImage: c_ulong, __sourceSize: MTLSize, __destinationTexture:  * MTLTexture, __destinationSlice: c_ulong, __destinationLevel: c_ulong, __destinationOrigin: MTLOrigin, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, c_ulong, c_ulong, MTLSize,  * MTLTexture, c_ulong, c_ulong, MTLOrigin, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_.get(), __sourceBuffer, __sourceOffset, __sourceBytesPerRow, __sourceBytesPerImage, __sourceSize, __destinationTexture, __destinationSlice, __destinationLevel, __destinationOrigin, );
 }}
var sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options_ = CachedSelector.init("copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:");
      pub fn copyFromBuffersourceOffsetsourceBytesPerRowsourceBytesPerImagesourceSizetoTexturedestinationSlicedestinationLeveldestinationOriginoptions(self: *Self, __sourceBuffer:  * MTLBuffer, __sourceOffset: c_ulong, __sourceBytesPerRow: c_ulong, __sourceBytesPerImage: c_ulong, __sourceSize: MTLSize, __destinationTexture:  * MTLTexture, __destinationSlice: c_ulong, __destinationLevel: c_ulong, __destinationOrigin: MTLOrigin, __options: MTLBlitOption, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, c_ulong, c_ulong, MTLSize,  * MTLTexture, c_ulong, c_ulong, MTLOrigin, MTLBlitOption, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options_.get(), __sourceBuffer, __sourceOffset, __sourceBytesPerRow, __sourceBytesPerImage, __sourceSize, __destinationTexture, __destinationSlice, __destinationLevel, __destinationOrigin, __options, );
 }}
var sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_ = CachedSelector.init("copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:");
      pub fn copyFromTexturesourceSlicesourceLevelsourceOriginsourceSizetoBufferdestinationOffsetdestinationBytesPerRowdestinationBytesPerImage(self: *Self, __sourceTexture:  * MTLTexture, __sourceSlice: c_ulong, __sourceLevel: c_ulong, __sourceOrigin: MTLOrigin, __sourceSize: MTLSize, __destinationBuffer:  * MTLBuffer, __destinationOffset: c_ulong, __destinationBytesPerRow: c_ulong, __destinationBytesPerImage: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, c_ulong, c_ulong, MTLOrigin, MTLSize,  * MTLBuffer, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_.get(), __sourceTexture, __sourceSlice, __sourceLevel, __sourceOrigin, __sourceSize, __destinationBuffer, __destinationOffset, __destinationBytesPerRow, __destinationBytesPerImage, );
 }}
var sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options_ = CachedSelector.init("copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:");
      pub fn copyFromTexturesourceSlicesourceLevelsourceOriginsourceSizetoBufferdestinationOffsetdestinationBytesPerRowdestinationBytesPerImageoptions(self: *Self, __sourceTexture:  * MTLTexture, __sourceSlice: c_ulong, __sourceLevel: c_ulong, __sourceOrigin: MTLOrigin, __sourceSize: MTLSize, __destinationBuffer:  * MTLBuffer, __destinationOffset: c_ulong, __destinationBytesPerRow: c_ulong, __destinationBytesPerImage: c_ulong, __options: MTLBlitOption, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, c_ulong, c_ulong, MTLOrigin, MTLSize,  * MTLBuffer, c_ulong, c_ulong, c_ulong, MTLBlitOption, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options_.get(), __sourceTexture, __sourceSlice, __sourceLevel, __sourceOrigin, __sourceSize, __destinationBuffer, __destinationOffset, __destinationBytesPerRow, __destinationBytesPerImage, __options, );
 }}
var sel_generateMipmapsForTexture_ = CachedSelector.init("generateMipmapsForTexture:");
      pub fn generateMipmapsForTexture(self: *Self, __texture:  * MTLTexture, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_generateMipmapsForTexture_.get(), __texture, );
 }}
var sel_fillBuffer_range_value_ = CachedSelector.init("fillBuffer:range:value:");
      pub fn fillBufferrangevalue(self: *Self, __buffer:  * MTLBuffer, __range: _NSRange, __value: u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, _NSRange, u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fillBuffer_range_value_.get(), __buffer, __range, __value, );
 }}
var sel_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount_ = CachedSelector.init("copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:");
      pub fn copyFromTexturesourceSlicesourceLeveltoTexturedestinationSlicedestinationLevelsliceCountlevelCount(self: *Self, __sourceTexture:  * MTLTexture, __sourceSlice: c_ulong, __sourceLevel: c_ulong, __destinationTexture:  * MTLTexture, __destinationSlice: c_ulong, __destinationLevel: c_ulong, __sliceCount: c_ulong, __levelCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, c_ulong, c_ulong,  * MTLTexture, c_ulong, c_ulong, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount_.get(), __sourceTexture, __sourceSlice, __sourceLevel, __destinationTexture, __destinationSlice, __destinationLevel, __sliceCount, __levelCount, );
 }}
var sel_copyFromTexture_toTexture_ = CachedSelector.init("copyFromTexture:toTexture:");
      pub fn copyFromTexturetoTexture(self: *Self, __sourceTexture:  * MTLTexture, __destinationTexture:  * MTLTexture, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture,  * MTLTexture, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyFromTexture_toTexture_.get(), __sourceTexture, __destinationTexture, );
 }}
var sel_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_ = CachedSelector.init("copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:");
      pub fn copyFromBuffersourceOffsettoBufferdestinationOffsetsize(self: *Self, __sourceBuffer:  * MTLBuffer, __sourceOffset: c_ulong, __destinationBuffer:  * MTLBuffer, __destinationOffset: c_ulong, __size: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong,  * MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_.get(), __sourceBuffer, __sourceOffset, __destinationBuffer, __destinationOffset, __size, );
 }}
var sel_updateFence_ = CachedSelector.init("updateFence:");
      pub fn updateFence(self: *Self, __fence:  * MTLFence, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_updateFence_.get(), __fence, );
 }}
var sel_waitForFence_ = CachedSelector.init("waitForFence:");
      pub fn waitForFence(self: *Self, __fence:  * MTLFence, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFence, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitForFence_.get(), __fence, );
 }}
var sel_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset_ = CachedSelector.init("getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:");
      pub fn getTextureAccessCountersregionmipLevelsliceresetCounterscountersBuffercountersBufferOffset(self: *Self, __texture:  * MTLTexture, __region: MTLRegion, __mipLevel: c_ulong, __slice: c_ulong, __resetCounters: c_int, __countersBuffer:  * MTLBuffer, __countersBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, MTLRegion, c_ulong, c_ulong, c_int,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset_.get(), __texture, __region, __mipLevel, __slice, __resetCounters, __countersBuffer, __countersBufferOffset, );
 }}
var sel_resetTextureAccessCounters_region_mipLevel_slice_ = CachedSelector.init("resetTextureAccessCounters:region:mipLevel:slice:");
      pub fn resetTextureAccessCountersregionmipLevelslice(self: *Self, __texture:  * MTLTexture, __region: MTLRegion, __mipLevel: c_ulong, __slice: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, MTLRegion, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resetTextureAccessCounters_region_mipLevel_slice_.get(), __texture, __region, __mipLevel, __slice, );
 }}
var sel_optimizeContentsForGPUAccess_ = CachedSelector.init("optimizeContentsForGPUAccess:");
      pub fn optimizeContentsForGPUAccess(self: *Self, __texture:  * MTLTexture, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_optimizeContentsForGPUAccess_.get(), __texture, );
 }}
var sel_optimizeContentsForGPUAccess_slice_level_ = CachedSelector.init("optimizeContentsForGPUAccess:slice:level:");
      pub fn optimizeContentsForGPUAccessslicelevel(self: *Self, __texture:  * MTLTexture, __slice: c_ulong, __level: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_optimizeContentsForGPUAccess_slice_level_.get(), __texture, __slice, __level, );
 }}
var sel_optimizeContentsForCPUAccess_ = CachedSelector.init("optimizeContentsForCPUAccess:");
      pub fn optimizeContentsForCPUAccess(self: *Self, __texture:  * MTLTexture, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_optimizeContentsForCPUAccess_.get(), __texture, );
 }}
var sel_optimizeContentsForCPUAccess_slice_level_ = CachedSelector.init("optimizeContentsForCPUAccess:slice:level:");
      pub fn optimizeContentsForCPUAccessslicelevel(self: *Self, __texture:  * MTLTexture, __slice: c_ulong, __level: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_optimizeContentsForCPUAccess_slice_level_.get(), __texture, __slice, __level, );
 }}
var sel_resetCommandsInBuffer_withRange_ = CachedSelector.init("resetCommandsInBuffer:withRange:");
      pub fn resetCommandsInBufferwithRange(self: *Self, __buffer:  * MTLIndirectCommandBuffer, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLIndirectCommandBuffer, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resetCommandsInBuffer_withRange_.get(), __buffer, __range, );
 }}
var sel_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex_ = CachedSelector.init("copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:");
      pub fn copyIndirectCommandBuffersourceRangedestinationdestinationIndex(self: *Self, __source:  * MTLIndirectCommandBuffer, __sourceRange: _NSRange, __destination:  * MTLIndirectCommandBuffer, __destinationIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLIndirectCommandBuffer, _NSRange,  * MTLIndirectCommandBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex_.get(), __source, __sourceRange, __destination, __destinationIndex, );
 }}
var sel_optimizeIndirectCommandBuffer_withRange_ = CachedSelector.init("optimizeIndirectCommandBuffer:withRange:");
      pub fn optimizeIndirectCommandBufferwithRange(self: *Self, __indirectCommandBuffer:  * MTLIndirectCommandBuffer, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLIndirectCommandBuffer, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_optimizeIndirectCommandBuffer_withRange_.get(), __indirectCommandBuffer, __range, );
 }}
var sel_sampleCountersInBuffer_atSampleIndex_withBarrier_ = CachedSelector.init("sampleCountersInBuffer:atSampleIndex:withBarrier:");
      pub fn sampleCountersInBufferatSampleIndexwithBarrier(self: *Self, __sampleBuffer:  * MTLCounterSampleBuffer, __sampleIndex: c_ulong, __barrier: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLCounterSampleBuffer, c_ulong, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCountersInBuffer_atSampleIndex_withBarrier_.get(), __sampleBuffer, __sampleIndex, __barrier, );
 }}
var sel_resolveCounters_inRange_destinationBuffer_destinationOffset_ = CachedSelector.init("resolveCounters:inRange:destinationBuffer:destinationOffset:");
      pub fn resolveCountersinRangedestinationBufferdestinationOffset(self: *Self, __sampleBuffer:  * MTLCounterSampleBuffer, __range: _NSRange, __destinationBuffer:  * MTLBuffer, __destinationOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLCounterSampleBuffer, _NSRange,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolveCounters_inRange_destinationBuffer_destinationOffset_.get(), __sampleBuffer, __range, __destinationBuffer, __destinationOffset, );
 }}
  };
}

pub const MTLBlitCommandEncoder = opaque {
  const Self = @This();
  pub usingnamespace MTLBlitCommandEncoderProtocolMixin(Self, "MTLBlitCommandEncoder");
  pub usingnamespace MTLCommandEncoderProtocolMixin(Self, "MTLBlitCommandEncoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBlitCommandEncoder");
};

pub fn NSPortDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_handlePortMessage_ = CachedSelector.init("handlePortMessage:");
      pub fn handlePortMessage(self: *Self, __message:  * NSPortMessage, ) void {{
           return @as(*const fn(*Self, SEL,  * NSPortMessage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_handlePortMessage_.get(), __message, );
 }}
  };
}

pub const NSPortDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSPortDelegateProtocolMixin(Self, "NSPortDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPortDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPortDelegate");
};

pub fn MTLEventProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  ?* MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
  };
}

pub const MTLEvent = opaque {
  const Self = @This();
  pub usingnamespace MTLEventProtocolMixin(Self, "MTLEvent");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLEvent");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLEvent");
};

pub fn NSURLDownloadDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_downloadDidBegin_ = CachedSelector.init("downloadDidBegin:");
      pub fn downloadDidBegin(self: *Self, __download:  * NSURLDownload, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_downloadDidBegin_.get(), __download, );
 }}
var sel_download_willSendRequest_redirectResponse_ = CachedSelector.init("download:willSendRequest:redirectResponse:");
      pub fn downloadwillSendRequestredirectResponse(self: *Self, __download:  * NSURLDownload, __request:  * NSURLRequest, __redirectResponse:  ?* NSURLResponse, )  ?* NSURLRequest {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSURLRequest,  ?* NSURLResponse, ) callconv(.C)  ?* NSURLRequest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_willSendRequest_redirectResponse_.get(), __download, __request, __redirectResponse, );
 }}
var sel_download_canAuthenticateAgainstProtectionSpace_ = CachedSelector.init("download:canAuthenticateAgainstProtectionSpace:");
      pub fn downloadcanAuthenticateAgainstProtectionSpace(self: *Self, __connection:  * NSURLDownload, __protectionSpace:  * NSURLProtectionSpace, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSURLProtectionSpace, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_canAuthenticateAgainstProtectionSpace_.get(), __connection, __protectionSpace, );
 }}
var sel_download_didReceiveAuthenticationChallenge_ = CachedSelector.init("download:didReceiveAuthenticationChallenge:");
      pub fn downloaddidReceiveAuthenticationChallenge(self: *Self, __download:  * NSURLDownload, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_didReceiveAuthenticationChallenge_.get(), __download, __challenge, );
 }}
var sel_download_didCancelAuthenticationChallenge_ = CachedSelector.init("download:didCancelAuthenticationChallenge:");
      pub fn downloaddidCancelAuthenticationChallenge(self: *Self, __download:  * NSURLDownload, __challenge:  * NSURLAuthenticationChallenge, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSURLAuthenticationChallenge, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_didCancelAuthenticationChallenge_.get(), __download, __challenge, );
 }}
var sel_downloadShouldUseCredentialStorage_ = CachedSelector.init("downloadShouldUseCredentialStorage:");
      pub fn downloadShouldUseCredentialStorage(self: *Self, __download:  * NSURLDownload, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_downloadShouldUseCredentialStorage_.get(), __download, );
 }}
var sel_download_didReceiveResponse_ = CachedSelector.init("download:didReceiveResponse:");
      pub fn downloaddidReceiveResponse(self: *Self, __download:  * NSURLDownload, __response:  * NSURLResponse, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSURLResponse, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_didReceiveResponse_.get(), __download, __response, );
 }}
var sel_download_willResumeWithResponse_fromByte_ = CachedSelector.init("download:willResumeWithResponse:fromByte:");
      pub fn downloadwillResumeWithResponsefromByte(self: *Self, __download:  * NSURLDownload, __response:  * NSURLResponse, __startingByte: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSURLResponse, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_willResumeWithResponse_fromByte_.get(), __download, __response, __startingByte, );
 }}
var sel_download_didReceiveDataOfLength_ = CachedSelector.init("download:didReceiveDataOfLength:");
      pub fn downloaddidReceiveDataOfLength(self: *Self, __download:  * NSURLDownload, __length: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_didReceiveDataOfLength_.get(), __download, __length, );
 }}
var sel_download_shouldDecodeSourceDataOfMIMEType_ = CachedSelector.init("download:shouldDecodeSourceDataOfMIMEType:");
      pub fn downloadshouldDecodeSourceDataOfMIMEType(self: *Self, __download:  * NSURLDownload, __encodingType:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_shouldDecodeSourceDataOfMIMEType_.get(), __download, __encodingType, );
 }}
var sel_download_decideDestinationWithSuggestedFilename_ = CachedSelector.init("download:decideDestinationWithSuggestedFilename:");
      pub fn downloaddecideDestinationWithSuggestedFilename(self: *Self, __download:  * NSURLDownload, __filename:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_decideDestinationWithSuggestedFilename_.get(), __download, __filename, );
 }}
var sel_download_didCreateDestination_ = CachedSelector.init("download:didCreateDestination:");
      pub fn downloaddidCreateDestination(self: *Self, __download:  * NSURLDownload, __path:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_didCreateDestination_.get(), __download, __path, );
 }}
var sel_downloadDidFinish_ = CachedSelector.init("downloadDidFinish:");
      pub fn downloadDidFinish(self: *Self, __download:  * NSURLDownload, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_downloadDidFinish_.get(), __download, );
 }}
var sel_download_didFailWithError_ = CachedSelector.init("download:didFailWithError:");
      pub fn downloaddidFailWithError(self: *Self, __download:  * NSURLDownload, __an_error:  * NSError, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLDownload,  * NSError, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_download_didFailWithError_.get(), __download, __an_error, );
 }}
  };
}

pub const NSURLDownloadDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLDownloadDelegateProtocolMixin(Self, "NSURLDownloadDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLDownloadDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLDownloadDelegate");
};

pub fn MTLFunctionHandleProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_functionType = CachedSelector.init("functionType");
      pub fn functionType(self: *Self, ) MTLFunctionType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLFunctionType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionType.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
  };
}

pub const MTLFunctionHandle = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionHandleProtocolMixin(Self, "MTLFunctionHandle");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionHandle");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionHandle");
};

pub fn MTLLibraryProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_newFunctionWithName_ = CachedSelector.init("newFunctionWithName:");
      pub fn newFunctionWithName(self: *Self, __functionName:  * NSString, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newFunctionWithName_.get(), __functionName, );
 }}
var sel_newFunctionWithName_constantValues_error_ = CachedSelector.init("newFunctionWithName:constantValues:error:");
      pub fn newFunctionWithNameconstantValueserror(self: *Self, __name:  * NSString, __constantValues:  * MTLFunctionConstantValues, __an_error:  [*c]  ?* NSError, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL,  * NSString,  * MTLFunctionConstantValues,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newFunctionWithName_constantValues_error_.get(), __name, __constantValues, __an_error, );
 }}
var sel_newFunctionWithName_constantValues_completionHandler_ = CachedSelector.init("newFunctionWithName:constantValues:completionHandler:");
      pub fn newFunctionWithNameconstantValuescompletionHandler(self: *Self, __name:  * NSString, __constantValues:  * MTLFunctionConstantValues, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  * MTLFunctionConstantValues, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newFunctionWithName_constantValues_completionHandler_.get(), __name, __constantValues, __completionHandler, );
 }}
var sel_newFunctionWithDescriptor_completionHandler_ = CachedSelector.init("newFunctionWithDescriptor:completionHandler:");
      pub fn newFunctionWithDescriptorcompletionHandler(self: *Self, __descriptor:  * MTLFunctionDescriptor, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFunctionDescriptor, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newFunctionWithDescriptor_completionHandler_.get(), __descriptor, __completionHandler, );
 }}
var sel_newFunctionWithDescriptor_error_ = CachedSelector.init("newFunctionWithDescriptor:error:");
      pub fn newFunctionWithDescriptorerror(self: *Self, __descriptor:  * MTLFunctionDescriptor, __an_error:  [*c]  ?* NSError, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL,  * MTLFunctionDescriptor,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newFunctionWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_newIntersectionFunctionWithDescriptor_completionHandler_ = CachedSelector.init("newIntersectionFunctionWithDescriptor:completionHandler:");
      pub fn newIntersectionFunctionWithDescriptorcompletionHandler(self: *Self, __descriptor:  * MTLIntersectionFunctionDescriptor, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLIntersectionFunctionDescriptor, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIntersectionFunctionWithDescriptor_completionHandler_.get(), __descriptor, __completionHandler, );
 }}
var sel_newIntersectionFunctionWithDescriptor_error_ = CachedSelector.init("newIntersectionFunctionWithDescriptor:error:");
      pub fn newIntersectionFunctionWithDescriptorerror(self: *Self, __descriptor:  * MTLIntersectionFunctionDescriptor, __an_error:  [*c]  ?* NSError, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL,  * MTLIntersectionFunctionDescriptor,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIntersectionFunctionWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_functionNames = CachedSelector.init("functionNames");
      pub fn functionNames(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionNames.get(), );
 }}
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, ) MTLLibraryType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLLibraryType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
var sel_installName = CachedSelector.init("installName");
      pub fn installName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_installName.get(), );
 }}
  };
}

pub const MTLLibrary = opaque {
  const Self = @This();
  pub usingnamespace MTLLibraryProtocolMixin(Self, "MTLLibrary");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLLibrary");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLLibrary");
};

pub fn MTLIntersectionFunctionTableProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setBuffer_offset_atIndex_ = CachedSelector.init("setBuffer:offset:atIndex:");
      pub fn setBufferoffsetatIndex(self: *Self, __buffer:  ?* MTLBuffer, __offset: c_ulong, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBuffer_offset_atIndex_.get(), __buffer, __offset, __index, );
 }}
var sel_setBuffers_offsets_withRange_ = CachedSelector.init("setBuffers:offsets:withRange:");
      pub fn setBuffersoffsetswithRange(self: *Self, __buffers: [*c] ?* MTLBuffer, __offsets: [*c]c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLBuffer, [*c]c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBuffers_offsets_withRange_.get(), __buffers, __offsets, __range, );
 }}
var sel_setFunction_atIndex_ = CachedSelector.init("setFunction:atIndex:");
      pub fn setFunctionatIndex(self: *Self, __function:  ?* MTLFunctionHandle, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunctionHandle, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunction_atIndex_.get(), __function, __index, );
 }}
var sel_setFunctions_withRange_ = CachedSelector.init("setFunctions:withRange:");
      pub fn setFunctionswithRange(self: *Self, __functions: [*c] ?* MTLFunctionHandle, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLFunctionHandle, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunctions_withRange_.get(), __functions, __range, );
 }}
var sel_setOpaqueTriangleIntersectionFunctionWithSignature_atIndex_ = CachedSelector.init("setOpaqueTriangleIntersectionFunctionWithSignature:atIndex:");
      pub fn setOpaqueTriangleIntersectionFunctionWithSignatureatIndex(self: *Self, __signature: MTLIntersectionFunctionSignature, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLIntersectionFunctionSignature, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOpaqueTriangleIntersectionFunctionWithSignature_atIndex_.get(), __signature, __index, );
 }}
var sel_setOpaqueTriangleIntersectionFunctionWithSignature_withRange_ = CachedSelector.init("setOpaqueTriangleIntersectionFunctionWithSignature:withRange:");
      pub fn setOpaqueTriangleIntersectionFunctionWithSignaturewithRange(self: *Self, __signature: MTLIntersectionFunctionSignature, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, MTLIntersectionFunctionSignature, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOpaqueTriangleIntersectionFunctionWithSignature_withRange_.get(), __signature, __range, );
 }}
var sel_setOpaqueCurveIntersectionFunctionWithSignature_atIndex_ = CachedSelector.init("setOpaqueCurveIntersectionFunctionWithSignature:atIndex:");
      pub fn setOpaqueCurveIntersectionFunctionWithSignatureatIndex(self: *Self, __signature: MTLIntersectionFunctionSignature, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, MTLIntersectionFunctionSignature, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOpaqueCurveIntersectionFunctionWithSignature_atIndex_.get(), __signature, __index, );
 }}
var sel_setOpaqueCurveIntersectionFunctionWithSignature_withRange_ = CachedSelector.init("setOpaqueCurveIntersectionFunctionWithSignature:withRange:");
      pub fn setOpaqueCurveIntersectionFunctionWithSignaturewithRange(self: *Self, __signature: MTLIntersectionFunctionSignature, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, MTLIntersectionFunctionSignature, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOpaqueCurveIntersectionFunctionWithSignature_withRange_.get(), __signature, __range, );
 }}
var sel_setVisibleFunctionTable_atBufferIndex_ = CachedSelector.init("setVisibleFunctionTable:atBufferIndex:");
      pub fn setVisibleFunctionTableatBufferIndex(self: *Self, __functionTable:  ?* MTLVisibleFunctionTable, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLVisibleFunctionTable, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVisibleFunctionTable_atBufferIndex_.get(), __functionTable, __bufferIndex, );
 }}
var sel_setVisibleFunctionTables_withBufferRange_ = CachedSelector.init("setVisibleFunctionTables:withBufferRange:");
      pub fn setVisibleFunctionTableswithBufferRange(self: *Self, __functionTables: [*c] ?* MTLVisibleFunctionTable, __bufferRange: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c] ?* MTLVisibleFunctionTable, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVisibleFunctionTables_withBufferRange_.get(), __functionTables, __bufferRange, );
 }}
var sel_gpuResourceID = CachedSelector.init("gpuResourceID");
      pub fn gpuResourceID(self: *Self, ) MTLResourceID {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceID, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gpuResourceID.get(), );
 }}
  };
}

pub const MTLIntersectionFunctionTable = opaque {
  const Self = @This();
  pub usingnamespace MTLIntersectionFunctionTableProtocolMixin(Self, "MTLIntersectionFunctionTable");
  pub usingnamespace MTLResourceProtocolMixin(Self, "MTLIntersectionFunctionTable");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIntersectionFunctionTable");
};

pub fn NSConnectionDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_makeNewConnection_sender_ = CachedSelector.init("makeNewConnection:sender:");
      pub fn makeNewConnectionsender(self: *Self, __conn:  * NSConnection, __ancestor:  * NSConnection, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSConnection,  * NSConnection, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_makeNewConnection_sender_.get(), __conn, __ancestor, );
 }}
var sel_connection_shouldMakeNewConnection_ = CachedSelector.init("connection:shouldMakeNewConnection:");
      pub fn connectionshouldMakeNewConnection(self: *Self, __ancestor:  * NSConnection, __conn:  * NSConnection, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSConnection,  * NSConnection, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_shouldMakeNewConnection_.get(), __ancestor, __conn, );
 }}
var sel_authenticationDataForComponents_ = CachedSelector.init("authenticationDataForComponents:");
      pub fn authenticationDataForComponents(self: *Self, __components:  * NSArray, )  * NSData {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_authenticationDataForComponents_.get(), __components, );
 }}
var sel_authenticateComponents_withData_ = CachedSelector.init("authenticateComponents:withData:");
      pub fn authenticateComponentswithData(self: *Self, __components:  * NSArray, __signature:  * NSData, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSArray,  * NSData, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_authenticateComponents_withData_.get(), __components, __signature, );
 }}
var sel_createConversationForConnection_ = CachedSelector.init("createConversationForConnection:");
      pub fn createConversationForConnection(self: *Self, __conn:  * NSConnection, ) id {{
           return @as(*const fn(*Self, SEL,  * NSConnection, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createConversationForConnection_.get(), __conn, );
 }}
var sel_connection_handleRequest_ = CachedSelector.init("connection:handleRequest:");
      pub fn connectionhandleRequest(self: *Self, __connection:  * NSConnection, __doreq:  * NSDistantObjectRequest, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSConnection,  * NSDistantObjectRequest, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection_handleRequest_.get(), __connection, __doreq, );
 }}
  };
}

pub const NSConnectionDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSConnectionDelegateProtocolMixin(Self, "NSConnectionDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSConnectionDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSConnectionDelegate");
};

pub fn NSLockingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_lock = CachedSelector.init("lock");
      pub fn lock(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lock.get(), );
 }}
var sel_unlock = CachedSelector.init("unlock");
      pub fn unlock(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unlock.get(), );
 }}
  };
}

pub const NSLocking = opaque {
  const Self = @This();
  pub usingnamespace NSLockingProtocolMixin(Self, "NSLocking");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSLocking");
};

pub fn NSSecureCodingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_supportsSecureCoding = CachedSelector.init("supportsSecureCoding");
      pub fn supportsSecureCoding() c_int {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_supportsSecureCoding.get(), );
 }}
  };
}

pub const NSSecureCoding = opaque {
  const Self = @This();
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSSecureCoding");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSSecureCoding");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSecureCoding");
};

pub fn MTLIOCommandBufferProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addCompletedHandler_ = CachedSelector.init("addCompletedHandler:");
      pub fn addCompletedHandler(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addCompletedHandler_.get(), __block, );
 }}
var sel_loadBytes_size_sourceHandle_sourceHandleOffset_ = CachedSelector.init("loadBytes:size:sourceHandle:sourceHandleOffset:");
      pub fn loadBytessizesourceHandlesourceHandleOffset(self: *Self, __pointer:  [*c] void, __size: c_ulong, __sourceHandle:  * MTLIOFileHandle, __sourceHandleOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong,  * MTLIOFileHandle, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadBytes_size_sourceHandle_sourceHandleOffset_.get(), __pointer, __size, __sourceHandle, __sourceHandleOffset, );
 }}
var sel_loadBuffer_offset_size_sourceHandle_sourceHandleOffset_ = CachedSelector.init("loadBuffer:offset:size:sourceHandle:sourceHandleOffset:");
      pub fn loadBufferoffsetsizesourceHandlesourceHandleOffset(self: *Self, __buffer:  * MTLBuffer, __offset: c_ulong, __size: c_ulong, __sourceHandle:  * MTLIOFileHandle, __sourceHandleOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, c_ulong,  * MTLIOFileHandle, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadBuffer_offset_size_sourceHandle_sourceHandleOffset_.get(), __buffer, __offset, __size, __sourceHandle, __sourceHandleOffset, );
 }}
var sel_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationOrigin_sourceHandle_sourceHandleOffset_ = CachedSelector.init("loadTexture:slice:level:size:sourceBytesPerRow:sourceBytesPerImage:destinationOrigin:sourceHandle:sourceHandleOffset:");
      pub fn loadTextureslicelevelsizesourceBytesPerRowsourceBytesPerImagedestinationOriginsourceHandlesourceHandleOffset(self: *Self, __texture:  * MTLTexture, __slice: c_ulong, __level: c_ulong, __size: MTLSize, __sourceBytesPerRow: c_ulong, __sourceBytesPerImage: c_ulong, __destinationOrigin: MTLOrigin, __sourceHandle:  * MTLIOFileHandle, __sourceHandleOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTexture, c_ulong, c_ulong, MTLSize, c_ulong, c_ulong, MTLOrigin,  * MTLIOFileHandle, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationOrigin_sourceHandle_sourceHandleOffset_.get(), __texture, __slice, __level, __size, __sourceBytesPerRow, __sourceBytesPerImage, __destinationOrigin, __sourceHandle, __sourceHandleOffset, );
 }}
var sel_copyStatusToBuffer_offset_ = CachedSelector.init("copyStatusToBuffer:offset:");
      pub fn copyStatusToBufferoffset(self: *Self, __buffer:  * MTLBuffer, __offset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLBuffer, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyStatusToBuffer_offset_.get(), __buffer, __offset, );
 }}
var sel_commit = CachedSelector.init("commit");
      pub fn commit(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commit.get(), );
 }}
var sel_waitUntilCompleted = CachedSelector.init("waitUntilCompleted");
      pub fn waitUntilCompleted(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitUntilCompleted.get(), );
 }}
var sel_tryCancel = CachedSelector.init("tryCancel");
      pub fn tryCancel(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tryCancel.get(), );
 }}
var sel_addBarrier = CachedSelector.init("addBarrier");
      pub fn addBarrier(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addBarrier.get(), );
 }}
var sel_pushDebugGroup_ = CachedSelector.init("pushDebugGroup:");
      pub fn pushDebugGroup(self: *Self, __string:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pushDebugGroup_.get(), __string, );
 }}
var sel_popDebugGroup = CachedSelector.init("popDebugGroup");
      pub fn popDebugGroup(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_popDebugGroup.get(), );
 }}
var sel_enqueue = CachedSelector.init("enqueue");
      pub fn enqueue(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enqueue.get(), );
 }}
var sel_waitForEvent_value_ = CachedSelector.init("waitForEvent:value:");
      pub fn waitForEventvalue(self: *Self, __event:  * MTLSharedEvent, __value: c_ulonglong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLSharedEvent, c_ulonglong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitForEvent_value_.get(), __event, __value, );
 }}
var sel_signalEvent_value_ = CachedSelector.init("signalEvent:value:");
      pub fn signalEventvalue(self: *Self, __event:  * MTLSharedEvent, __value: c_ulonglong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLSharedEvent, c_ulonglong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_signalEvent_value_.get(), __event, __value, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_status = CachedSelector.init("status");
      pub fn status(self: *Self, ) MTLIOStatus {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLIOStatus, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_status.get(), );
 }}
var sel_error = CachedSelector.init("error");
      pub fn _error(self: *Self, )  ?* NSError {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSError, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_error.get(), );
 }}
  };
}

pub const MTLIOCommandBuffer = opaque {
  const Self = @This();
  pub usingnamespace MTLIOCommandBufferProtocolMixin(Self, "MTLIOCommandBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOCommandBuffer");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOCommandBuffer");
};

pub fn NSItemProviderReadingProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectWithItemProviderData_typeIdentifier_error_ = CachedSelector.init("objectWithItemProviderData:typeIdentifier:error:");
      pub fn objectWithItemProviderDatatypeIdentifiererror(__data:  * NSData, __typeIdentifier:  * NSString, __outError:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSData,  * NSString,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_objectWithItemProviderData_typeIdentifier_error_.get(), __data, __typeIdentifier, __outError, );
 }}
var sel_readableTypeIdentifiersForItemProvider = CachedSelector.init("readableTypeIdentifiersForItemProvider");
      pub fn readableTypeIdentifiersForItemProvider()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_readableTypeIdentifiersForItemProvider.get(), );
 }}
  };
}

pub const NSItemProviderReading = opaque {
  const Self = @This();
  pub usingnamespace NSItemProviderReadingProtocolMixin(Self, "NSItemProviderReading");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSItemProviderReading");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSItemProviderReading");
};

pub fn NSSpellServerDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_spellServer_findMisspelledWordInString_language_wordCount_countOnly_ = CachedSelector.init("spellServer:findMisspelledWordInString:language:wordCount:countOnly:");
      pub fn spellServerfindMisspelledWordInStringlanguagewordCountcountOnly(self: *Self, __sender:  * NSSpellServer, __stringToCheck:  * NSString, __language:  * NSString, __wordCount:  [*c] c_long, __countOnly: c_int, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSSpellServer,  * NSString,  * NSString,  [*c] c_long, c_int, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_spellServer_findMisspelledWordInString_language_wordCount_countOnly_.get(), __sender, __stringToCheck, __language, __wordCount, __countOnly, );
 }}
var sel_spellServer_suggestGuessesForWord_inLanguage_ = CachedSelector.init("spellServer:suggestGuessesForWord:inLanguage:");
      pub fn spellServersuggestGuessesForWordinLanguage(self: *Self, __sender:  * NSSpellServer, __word:  * NSString, __language:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSSpellServer,  * NSString,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_spellServer_suggestGuessesForWord_inLanguage_.get(), __sender, __word, __language, );
 }}
var sel_spellServer_didLearnWord_inLanguage_ = CachedSelector.init("spellServer:didLearnWord:inLanguage:");
      pub fn spellServerdidLearnWordinLanguage(self: *Self, __sender:  * NSSpellServer, __word:  * NSString, __language:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSpellServer,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_spellServer_didLearnWord_inLanguage_.get(), __sender, __word, __language, );
 }}
var sel_spellServer_didForgetWord_inLanguage_ = CachedSelector.init("spellServer:didForgetWord:inLanguage:");
      pub fn spellServerdidForgetWordinLanguage(self: *Self, __sender:  * NSSpellServer, __word:  * NSString, __language:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSpellServer,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_spellServer_didForgetWord_inLanguage_.get(), __sender, __word, __language, );
 }}
var sel_spellServer_suggestCompletionsForPartialWordRange_inString_language_ = CachedSelector.init("spellServer:suggestCompletionsForPartialWordRange:inString:language:");
      pub fn spellServersuggestCompletionsForPartialWordRangeinStringlanguage(self: *Self, __sender:  * NSSpellServer, __range: _NSRange, __string:  * NSString, __language:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSSpellServer, _NSRange,  * NSString,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_spellServer_suggestCompletionsForPartialWordRange_inString_language_.get(), __sender, __range, __string, __language, );
 }}
var sel_spellServer_checkGrammarInString_language_details_ = CachedSelector.init("spellServer:checkGrammarInString:language:details:");
      pub fn spellServercheckGrammarInStringlanguagedetails(self: *Self, __sender:  * NSSpellServer, __stringToCheck:  * NSString, __language:  ?* NSString, __details:  [*c]  ?* NSArray, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSSpellServer,  * NSString,  ?* NSString,  [*c]  ?* NSArray, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_spellServer_checkGrammarInString_language_details_.get(), __sender, __stringToCheck, __language, __details, );
 }}
var sel_spellServer_checkString_offset_types_options_orthography_wordCount_ = CachedSelector.init("spellServer:checkString:offset:types:options:orthography:wordCount:");
      pub fn spellServercheckStringoffsettypesoptionsorthographywordCount(self: *Self, __sender:  * NSSpellServer, __stringToCheck:  * NSString, __offset: c_ulong, __checkingTypes: c_ulonglong, __options:  ?* NSDictionary, __orthography:  ?* NSOrthography, __wordCount:  [*c] c_long, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSSpellServer,  * NSString, c_ulong, c_ulonglong,  ?* NSDictionary,  ?* NSOrthography,  [*c] c_long, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_spellServer_checkString_offset_types_options_orthography_wordCount_.get(), __sender, __stringToCheck, __offset, __checkingTypes, __options, __orthography, __wordCount, );
 }}
var sel_spellServer_recordResponse_toCorrection_forWord_language_ = CachedSelector.init("spellServer:recordResponse:toCorrection:forWord:language:");
      pub fn spellServerrecordResponsetoCorrectionforWordlanguage(self: *Self, __sender:  * NSSpellServer, __response: c_ulong, __correction:  * NSString, __word:  * NSString, __language:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSpellServer, c_ulong,  * NSString,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_spellServer_recordResponse_toCorrection_forWord_language_.get(), __sender, __response, __correction, __word, __language, );
 }}
  };
}

pub const NSSpellServerDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSSpellServerDelegateProtocolMixin(Self, "NSSpellServerDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSpellServerDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSpellServerDelegate");
};

pub fn MTLDepthStencilStateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
  };
}

pub const MTLDepthStencilState = opaque {
  const Self = @This();
  pub usingnamespace MTLDepthStencilStateProtocolMixin(Self, "MTLDepthStencilState");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLDepthStencilState");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLDepthStencilState");
};

pub fn MTLSharedEventProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_notifyListener_atValue_block_ = CachedSelector.init("notifyListener:atValue:block:");
      pub fn notifyListeneratValueblock(self: *Self, __listener:  * MTLSharedEventListener, __value: c_ulonglong, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLSharedEventListener, c_ulonglong, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_notifyListener_atValue_block_.get(), __listener, __value, __block, );
 }}
var sel_newSharedEventHandle = CachedSelector.init("newSharedEventHandle");
      pub fn newSharedEventHandle(self: *Self, )  * MTLSharedEventHandle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLSharedEventHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newSharedEventHandle.get(), );
 }}
var sel_signaledValue = CachedSelector.init("signaledValue");
      pub fn signaledValue(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_signaledValue.get(), );
 }}
var sel_setSignaledValue_ = CachedSelector.init("setSignaledValue:");
      pub fn setSignaledValue(self: *Self, __signaledValue: c_ulonglong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulonglong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSignaledValue_.get(), __signaledValue, );
 }}
  };
}

pub const MTLSharedEvent = opaque {
  const Self = @This();
  pub usingnamespace MTLSharedEventProtocolMixin(Self, "MTLSharedEvent");
  pub usingnamespace MTLEventProtocolMixin(Self, "MTLSharedEvent");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLSharedEvent");
};

pub fn MTLComputePipelineStateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_imageblockMemoryLengthForDimensions_ = CachedSelector.init("imageblockMemoryLengthForDimensions:");
      pub fn imageblockMemoryLengthForDimensions(self: *Self, __imageblockDimensions: MTLSize, ) c_ulong {{
           return @as(*const fn(*Self, SEL, MTLSize, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_imageblockMemoryLengthForDimensions_.get(), __imageblockDimensions, );
 }}
var sel_functionHandleWithFunction_ = CachedSelector.init("functionHandleWithFunction:");
      pub fn functionHandleWithFunction(self: *Self, __function:  * MTLFunction, )  ?* MTLFunctionHandle {{
           return @as(*const fn(*Self, SEL,  * MTLFunction, ) callconv(.C)  ?* MTLFunctionHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionHandleWithFunction_.get(), __function, );
 }}
var sel_newComputePipelineStateWithAdditionalBinaryFunctions_error_ = CachedSelector.init("newComputePipelineStateWithAdditionalBinaryFunctions:error:");
      pub fn newComputePipelineStateWithAdditionalBinaryFunctionserror(self: *Self, __functions:  * NSArray, __an_error:  [*c]  ?* NSError, )  ?* MTLComputePipelineState {{
           return @as(*const fn(*Self, SEL,  * NSArray,  [*c]  ?* NSError, ) callconv(.C)  ?* MTLComputePipelineState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newComputePipelineStateWithAdditionalBinaryFunctions_error_.get(), __functions, __an_error, );
 }}
var sel_newVisibleFunctionTableWithDescriptor_ = CachedSelector.init("newVisibleFunctionTableWithDescriptor:");
      pub fn newVisibleFunctionTableWithDescriptor(self: *Self, __descriptor:  * MTLVisibleFunctionTableDescriptor, )  ?* MTLVisibleFunctionTable {{
           return @as(*const fn(*Self, SEL,  * MTLVisibleFunctionTableDescriptor, ) callconv(.C)  ?* MTLVisibleFunctionTable, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newVisibleFunctionTableWithDescriptor_.get(), __descriptor, );
 }}
var sel_newIntersectionFunctionTableWithDescriptor_ = CachedSelector.init("newIntersectionFunctionTableWithDescriptor:");
      pub fn newIntersectionFunctionTableWithDescriptor(self: *Self, __descriptor:  * MTLIntersectionFunctionTableDescriptor, )  ?* MTLIntersectionFunctionTable {{
           return @as(*const fn(*Self, SEL,  * MTLIntersectionFunctionTableDescriptor, ) callconv(.C)  ?* MTLIntersectionFunctionTable, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newIntersectionFunctionTableWithDescriptor_.get(), __descriptor, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_maxTotalThreadsPerThreadgroup = CachedSelector.init("maxTotalThreadsPerThreadgroup");
      pub fn maxTotalThreadsPerThreadgroup(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadsPerThreadgroup.get(), );
 }}
var sel_threadExecutionWidth = CachedSelector.init("threadExecutionWidth");
      pub fn threadExecutionWidth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadExecutionWidth.get(), );
 }}
var sel_staticThreadgroupMemoryLength = CachedSelector.init("staticThreadgroupMemoryLength");
      pub fn staticThreadgroupMemoryLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_staticThreadgroupMemoryLength.get(), );
 }}
var sel_supportIndirectCommandBuffers = CachedSelector.init("supportIndirectCommandBuffers");
      pub fn supportIndirectCommandBuffers(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportIndirectCommandBuffers.get(), );
 }}
var sel_gpuResourceID = CachedSelector.init("gpuResourceID");
      pub fn gpuResourceID(self: *Self, ) MTLResourceID {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceID, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gpuResourceID.get(), );
 }}
  };
}

pub const MTLComputePipelineState = opaque {
  const Self = @This();
  pub usingnamespace MTLComputePipelineStateProtocolMixin(Self, "MTLComputePipelineState");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLComputePipelineState");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLComputePipelineState");
};

pub fn NSURLSessionDownloadDelegateProtocolMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_URLSession_downloadTask_didFinishDownloadingToURL_ = CachedSelector.init("URLSession:downloadTask:didFinishDownloadingToURL:");
      pub fn URLSessiondownloadTaskdidFinishDownloadingToURL(self: *Self, __session:  * NSURLSession, __downloadTask:  * NSURLSessionDownloadTask, __location:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionDownloadTask,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_downloadTask_didFinishDownloadingToURL_.get(), __session, __downloadTask, __location, );
 }}
var sel_URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_ = CachedSelector.init("URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:");
      pub fn URLSessiondownloadTaskdidWriteDatatotalBytesWrittentotalBytesExpectedToWrite(self: *Self, __session:  * NSURLSession, __downloadTask:  * NSURLSessionDownloadTask, __bytesWritten: c_longlong, __totalBytesWritten: c_longlong, __totalBytesExpectedToWrite: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionDownloadTask, c_longlong, c_longlong, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_.get(), __session, __downloadTask, __bytesWritten, __totalBytesWritten, __totalBytesExpectedToWrite, );
 }}
var sel_URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_ = CachedSelector.init("URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:");
      pub fn URLSessiondownloadTaskdidResumeAtOffsetexpectedTotalBytes(self: *Self, __session:  * NSURLSession, __downloadTask:  * NSURLSessionDownloadTask, __fileOffset: c_longlong, __expectedTotalBytes: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSession,  * NSURLSessionDownloadTask, c_longlong, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_.get(), __session, __downloadTask, __fileOffset, __expectedTotalBytes, );
 }}
  };
}

pub const NSURLSessionDownloadDelegate = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionDownloadDelegateProtocolMixin(Self, "NSURLSessionDownloadDelegate");
  pub usingnamespace NSURLSessionTaskDelegateProtocolMixin(Self, "NSURLSessionDownloadDelegate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionDownloadDelegate");
};

pub fn MTLComputePipelineReflectionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_bindings = CachedSelector.init("bindings");
      pub fn bindings(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bindings.get(), );
 }}
var sel_arguments = CachedSelector.init("arguments");
      pub fn arguments(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arguments.get(), );
 }}
  };
}

pub const MTLComputePipelineReflection = opaque {
  const Self = @This();
  pub usingnamespace MTLComputePipelineReflectionInterfaceMixin(Self, "MTLComputePipelineReflection");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLComputePipelineReflection");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLComputePipelineReflection");
};

pub fn NSSpellServerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_registerLanguage_byVendor_ = CachedSelector.init("registerLanguage:byVendor:");
      pub fn registerLanguagebyVendor(self: *Self, __language:  ?* NSString, __vendor:  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerLanguage_byVendor_.get(), __language, __vendor, );
 }}
var sel_isWordInUserDictionaries_caseSensitive_ = CachedSelector.init("isWordInUserDictionaries:caseSensitive:");
      pub fn isWordInUserDictionariescaseSensitive(self: *Self, __word:  * NSString, __flag: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isWordInUserDictionaries_caseSensitive_.get(), __word, __flag, );
 }}
var sel_run = CachedSelector.init("run");
      pub fn run(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_run.get(), );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSSpellServerDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSSpellServerDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSSpellServerDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSSpellServerDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
  };
}

pub const NSSpellServer = opaque {
  const Self = @This();
  pub usingnamespace NSSpellServerInterfaceMixin(Self, "NSSpellServer");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSpellServer");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSSpellServer");
};

pub fn NSURLSessionDataTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
  };
}

pub const NSURLSessionDataTask = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionDataTaskInterfaceMixin(Self, "NSURLSessionDataTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionDataTask");
  pub usingnamespace NSURLSessionTaskInterfaceMixin(Self, "NSURLSessionDataTask");
};

pub fn MTLIntersectionFunctionTableDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_intersectionFunctionTableDescriptor = CachedSelector.init("intersectionFunctionTableDescriptor");
      pub fn intersectionFunctionTableDescriptor()  * MTLIntersectionFunctionTableDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLIntersectionFunctionTableDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_intersectionFunctionTableDescriptor.get(), );
 }}
var sel_functionCount = CachedSelector.init("functionCount");
      pub fn functionCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionCount.get(), );
 }}
var sel_setFunctionCount_ = CachedSelector.init("setFunctionCount:");
      pub fn setFunctionCount(self: *Self, __functionCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunctionCount_.get(), __functionCount, );
 }}
  };
}

pub const MTLIntersectionFunctionTableDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLIntersectionFunctionTableDescriptorInterfaceMixin(Self, "MTLIntersectionFunctionTableDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLIntersectionFunctionTableDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIntersectionFunctionTableDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLIntersectionFunctionTableDescriptor");
};

pub fn MTLRasterizationRateLayerDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithSampleCount_ = CachedSelector.init("initWithSampleCount:");
      pub fn initWithSampleCount(self: *Self, __sampleCount: MTLSize, ) *Self {{
           return @as(*const fn(*Self, SEL, MTLSize, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSampleCount_.get(), __sampleCount, );
 }}
var sel_initWithSampleCount_horizontal_vertical_ = CachedSelector.init("initWithSampleCount:horizontal:vertical:");
      pub fn initWithSampleCounthorizontalvertical(self: *Self, __sampleCount: MTLSize, __horizontal:  [*c]  const f32, __vertical:  [*c]  const f32, ) *Self {{
           return @as(*const fn(*Self, SEL, MTLSize,  [*c]  const f32,  [*c]  const f32, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSampleCount_horizontal_vertical_.get(), __sampleCount, __horizontal, __vertical, );
 }}
var sel_sampleCount = CachedSelector.init("sampleCount");
      pub fn sampleCount(self: *Self, ) MTLSize {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCount.get(), );
 }}
var sel_maxSampleCount = CachedSelector.init("maxSampleCount");
      pub fn maxSampleCount(self: *Self, ) MTLSize {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxSampleCount.get(), );
 }}
var sel_horizontalSampleStorage = CachedSelector.init("horizontalSampleStorage");
      pub fn horizontalSampleStorage(self: *Self, )  [*c] f32 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_horizontalSampleStorage.get(), );
 }}
var sel_verticalSampleStorage = CachedSelector.init("verticalSampleStorage");
      pub fn verticalSampleStorage(self: *Self, )  [*c] f32 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_verticalSampleStorage.get(), );
 }}
var sel_horizontal = CachedSelector.init("horizontal");
      pub fn horizontal(self: *Self, )  * MTLRasterizationRateSampleArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLRasterizationRateSampleArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_horizontal.get(), );
 }}
var sel_vertical = CachedSelector.init("vertical");
      pub fn vertical(self: *Self, )  * MTLRasterizationRateSampleArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLRasterizationRateSampleArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertical.get(), );
 }}
var sel_setSampleCount_ = CachedSelector.init("setSampleCount:");
      pub fn setSampleCount(self: *Self, __sampleCount: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSampleCount_.get(), __sampleCount, );
 }}
  };
}

pub const MTLRasterizationRateLayerDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRasterizationRateLayerDescriptorInterfaceMixin(Self, "MTLRasterizationRateLayerDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLRasterizationRateLayerDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRasterizationRateLayerDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRasterizationRateLayerDescriptor");
};

pub fn NSFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stringForObjectValue_ = CachedSelector.init("stringForObjectValue:");
      pub fn stringForObjectValue(self: *Self, __obj: id, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringForObjectValue_.get(), __obj, );
 }}
var sel_attributedStringForObjectValue_withDefaultAttributes_ = CachedSelector.init("attributedStringForObjectValue:withDefaultAttributes:");
      pub fn attributedStringForObjectValuewithDefaultAttributes(self: *Self, __obj: id, __attrs:  ?* NSDictionary, )  ?* NSAttributedString {{
           return @as(*const fn(*Self, SEL, id,  ?* NSDictionary, ) callconv(.C)  ?* NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributedStringForObjectValue_withDefaultAttributes_.get(), __obj, __attrs, );
 }}
var sel_editingStringForObjectValue_ = CachedSelector.init("editingStringForObjectValue:");
      pub fn editingStringForObjectValue(self: *Self, __obj: id, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_editingStringForObjectValue_.get(), __obj, );
 }}
var sel_getObjectValue_forString_errorDescription_ = CachedSelector.init("getObjectValue:forString:errorDescription:");
      pub fn getObjectValueforStringerrorDescription(self: *Self, __obj:  ?* id, __string:  * NSString, __an_error:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* id,  * NSString,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjectValue_forString_errorDescription_.get(), __obj, __string, __an_error, );
 }}
var sel_isPartialStringValid_newEditingString_errorDescription_ = CachedSelector.init("isPartialStringValid:newEditingString:errorDescription:");
      pub fn isPartialStringValidnewEditingStringerrorDescription(self: *Self, __partialString:  * NSString, __newString:  [*c]  ?* NSString, __an_error:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSString,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPartialStringValid_newEditingString_errorDescription_.get(), __partialString, __newString, __an_error, );
 }}
var sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_ = CachedSelector.init("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:");
      pub fn isPartialStringValidproposedSelectedRangeoriginalStringoriginalSelectedRangeerrorDescription(self: *Self, __partialStringPtr:  [*c]  * NSString, __proposedSelRangePtr:  [*c] _NSRange, __origString:  * NSString, __origSelRange: _NSRange, __an_error:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  * NSString,  [*c] _NSRange,  * NSString, _NSRange,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_.get(), __partialStringPtr, __proposedSelRangePtr, __origString, __origSelRange, __an_error, );
 }}
  };
}

pub const NSFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSFormatter");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSFormatter");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFormatter");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSFormatter");
};

pub fn NSDecimalNumberHandlerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_ = CachedSelector.init("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:");
      pub fn initWithRoundingModescaleraiseOnExactnessraiseOnOverflowraiseOnUnderflowraiseOnDivideByZero(self: *Self, __roundingMode: NSRoundingMode, __scale: c_short, __exact: c_int, __overflow: c_int, __underflow: c_int, __divideByZero: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL, NSRoundingMode, c_short, c_int, c_int, c_int, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_.get(), __roundingMode, __scale, __exact, __overflow, __underflow, __divideByZero, );
 }}
var sel_decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_ = CachedSelector.init("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:");
      pub fn decimalNumberHandlerWithRoundingModescaleraiseOnExactnessraiseOnOverflowraiseOnUnderflowraiseOnDivideByZero(__roundingMode: NSRoundingMode, __scale: c_short, __exact: c_int, __overflow: c_int, __underflow: c_int, __divideByZero: c_int, ) *Self {{
           return @as(*const fn(Class, SEL, NSRoundingMode, c_short, c_int, c_int, c_int, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_.get(), __roundingMode, __scale, __exact, __overflow, __underflow, __divideByZero, );
 }}
var sel_defaultDecimalNumberHandler = CachedSelector.init("defaultDecimalNumberHandler");
      pub fn defaultDecimalNumberHandler()  * NSDecimalNumberHandler {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDecimalNumberHandler, @ptrCast(&objc_msgSend))(class.get(), sel_defaultDecimalNumberHandler.get(), );
 }}
  };
}

pub const NSDecimalNumberHandler = opaque {
  const Self = @This();
  pub usingnamespace NSDecimalNumberHandlerInterfaceMixin(Self, "NSDecimalNumberHandler");
  pub usingnamespace NSDecimalNumberBehaviorsProtocolMixin(Self, "NSDecimalNumberHandler");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSDecimalNumberHandler");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDecimalNumberHandler");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSDecimalNumberHandler");
};

pub fn NSMetadataQueryAttributeValueTupleInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_attribute = CachedSelector.init("attribute");
      pub fn attribute(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attribute.get(), );
 }}
var sel_value = CachedSelector.init("value");
      pub fn value(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_value.get(), );
 }}
var sel_count = CachedSelector.init("count");
      pub fn count(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_count.get(), );
 }}
  };
}

pub const NSMetadataQueryAttributeValueTuple = opaque {
  const Self = @This();
  pub usingnamespace NSMetadataQueryAttributeValueTupleInterfaceMixin(Self, "NSMetadataQueryAttributeValueTuple");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMetadataQueryAttributeValueTuple");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMetadataQueryAttributeValueTuple");
};

pub fn MTLResourceStatePassDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_resourceStatePassDescriptor = CachedSelector.init("resourceStatePassDescriptor");
      pub fn resourceStatePassDescriptor()  * MTLResourceStatePassDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLResourceStatePassDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_resourceStatePassDescriptor.get(), );
 }}
var sel_sampleBufferAttachments = CachedSelector.init("sampleBufferAttachments");
      pub fn sampleBufferAttachments(self: *Self, )  * MTLResourceStatePassSampleBufferAttachmentDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLResourceStatePassSampleBufferAttachmentDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBufferAttachments.get(), );
 }}
  };
}

pub const MTLResourceStatePassDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLResourceStatePassDescriptorInterfaceMixin(Self, "MTLResourceStatePassDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLResourceStatePassDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLResourceStatePassDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLResourceStatePassDescriptor");
};

pub fn MTLRenderPipelineColorAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_pixelFormat = CachedSelector.init("pixelFormat");
      pub fn pixelFormat(self: *Self, ) MTLPixelFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPixelFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pixelFormat.get(), );
 }}
var sel_setPixelFormat_ = CachedSelector.init("setPixelFormat:");
      pub fn setPixelFormat(self: *Self, __pixelFormat: MTLPixelFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPixelFormat_.get(), __pixelFormat, );
 }}
var sel_isBlendingEnabled = CachedSelector.init("isBlendingEnabled");
      pub fn isBlendingEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isBlendingEnabled.get(), );
 }}
var sel_setBlendingEnabled_ = CachedSelector.init("setBlendingEnabled:");
      pub fn setBlendingEnabled(self: *Self, __blendingEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBlendingEnabled_.get(), __blendingEnabled, );
 }}
var sel_sourceRGBBlendFactor = CachedSelector.init("sourceRGBBlendFactor");
      pub fn sourceRGBBlendFactor(self: *Self, ) MTLBlendFactor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBlendFactor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sourceRGBBlendFactor.get(), );
 }}
var sel_setSourceRGBBlendFactor_ = CachedSelector.init("setSourceRGBBlendFactor:");
      pub fn setSourceRGBBlendFactor(self: *Self, __sourceRGBBlendFactor: MTLBlendFactor, ) void {{
           return @as(*const fn(*Self, SEL, MTLBlendFactor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSourceRGBBlendFactor_.get(), __sourceRGBBlendFactor, );
 }}
var sel_destinationRGBBlendFactor = CachedSelector.init("destinationRGBBlendFactor");
      pub fn destinationRGBBlendFactor(self: *Self, ) MTLBlendFactor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBlendFactor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_destinationRGBBlendFactor.get(), );
 }}
var sel_setDestinationRGBBlendFactor_ = CachedSelector.init("setDestinationRGBBlendFactor:");
      pub fn setDestinationRGBBlendFactor(self: *Self, __destinationRGBBlendFactor: MTLBlendFactor, ) void {{
           return @as(*const fn(*Self, SEL, MTLBlendFactor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDestinationRGBBlendFactor_.get(), __destinationRGBBlendFactor, );
 }}
var sel_rgbBlendOperation = CachedSelector.init("rgbBlendOperation");
      pub fn rgbBlendOperation(self: *Self, ) MTLBlendOperation {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBlendOperation, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rgbBlendOperation.get(), );
 }}
var sel_setRgbBlendOperation_ = CachedSelector.init("setRgbBlendOperation:");
      pub fn setRgbBlendOperation(self: *Self, __rgbBlendOperation: MTLBlendOperation, ) void {{
           return @as(*const fn(*Self, SEL, MTLBlendOperation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRgbBlendOperation_.get(), __rgbBlendOperation, );
 }}
var sel_sourceAlphaBlendFactor = CachedSelector.init("sourceAlphaBlendFactor");
      pub fn sourceAlphaBlendFactor(self: *Self, ) MTLBlendFactor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBlendFactor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sourceAlphaBlendFactor.get(), );
 }}
var sel_setSourceAlphaBlendFactor_ = CachedSelector.init("setSourceAlphaBlendFactor:");
      pub fn setSourceAlphaBlendFactor(self: *Self, __sourceAlphaBlendFactor: MTLBlendFactor, ) void {{
           return @as(*const fn(*Self, SEL, MTLBlendFactor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSourceAlphaBlendFactor_.get(), __sourceAlphaBlendFactor, );
 }}
var sel_destinationAlphaBlendFactor = CachedSelector.init("destinationAlphaBlendFactor");
      pub fn destinationAlphaBlendFactor(self: *Self, ) MTLBlendFactor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBlendFactor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_destinationAlphaBlendFactor.get(), );
 }}
var sel_setDestinationAlphaBlendFactor_ = CachedSelector.init("setDestinationAlphaBlendFactor:");
      pub fn setDestinationAlphaBlendFactor(self: *Self, __destinationAlphaBlendFactor: MTLBlendFactor, ) void {{
           return @as(*const fn(*Self, SEL, MTLBlendFactor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDestinationAlphaBlendFactor_.get(), __destinationAlphaBlendFactor, );
 }}
var sel_alphaBlendOperation = CachedSelector.init("alphaBlendOperation");
      pub fn alphaBlendOperation(self: *Self, ) MTLBlendOperation {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBlendOperation, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_alphaBlendOperation.get(), );
 }}
var sel_setAlphaBlendOperation_ = CachedSelector.init("setAlphaBlendOperation:");
      pub fn setAlphaBlendOperation(self: *Self, __alphaBlendOperation: MTLBlendOperation, ) void {{
           return @as(*const fn(*Self, SEL, MTLBlendOperation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAlphaBlendOperation_.get(), __alphaBlendOperation, );
 }}
var sel_writeMask = CachedSelector.init("writeMask");
      pub fn writeMask(self: *Self, ) MTLColorWriteMask {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLColorWriteMask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeMask.get(), );
 }}
var sel_setWriteMask_ = CachedSelector.init("setWriteMask:");
      pub fn setWriteMask(self: *Self, __writeMask: MTLColorWriteMask, ) void {{
           return @as(*const fn(*Self, SEL, MTLColorWriteMask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWriteMask_.get(), __writeMask, );
 }}
  };
}

pub const MTLRenderPipelineColorAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPipelineColorAttachmentDescriptorInterfaceMixin(Self, "MTLRenderPipelineColorAttachmentDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLRenderPipelineColorAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPipelineColorAttachmentDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPipelineColorAttachmentDescriptor");
};

pub fn NSStringInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_characterAtIndex_ = CachedSelector.init("characterAtIndex:");
      pub fn characterAtIndex(self: *Self, __index: c_ulong, ) c_ushort {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_ushort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_characterAtIndex_.get(), __index, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_length = CachedSelector.init("length");
      pub fn length(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_length.get(), );
 }}
var sel_substringFromIndex_ = CachedSelector.init("substringFromIndex:");
      pub fn substringFromIndex(self: *Self, __from: c_ulong, )  * NSString {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_substringFromIndex_.get(), __from, );
 }}
var sel_substringToIndex_ = CachedSelector.init("substringToIndex:");
      pub fn substringToIndex(self: *Self, __to: c_ulong, )  * NSString {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_substringToIndex_.get(), __to, );
 }}
var sel_substringWithRange_ = CachedSelector.init("substringWithRange:");
      pub fn substringWithRange(self: *Self, __range: _NSRange, )  * NSString {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_substringWithRange_.get(), __range, );
 }}
var sel_getCharacters_range_ = CachedSelector.init("getCharacters:range:");
      pub fn getCharactersrange(self: *Self, __buffer:  [*c] c_ushort, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_ushort, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCharacters_range_.get(), __buffer, __range, );
 }}
var sel_compare_ = CachedSelector.init("compare:");
      pub fn compare(self: *Self, __string:  * NSString, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_.get(), __string, );
 }}
var sel_compare_options_ = CachedSelector.init("compare:options:");
      pub fn compareoptions(self: *Self, __string:  * NSString, __mask: NSStringCompareOptions, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSString, NSStringCompareOptions, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_options_.get(), __string, __mask, );
 }}
var sel_compare_options_range_ = CachedSelector.init("compare:options:range:");
      pub fn compareoptionsrange(self: *Self, __string:  * NSString, __mask: NSStringCompareOptions, __rangeOfReceiverToCompare: _NSRange, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSString, NSStringCompareOptions, _NSRange, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_options_range_.get(), __string, __mask, __rangeOfReceiverToCompare, );
 }}
var sel_compare_options_range_locale_ = CachedSelector.init("compare:options:range:locale:");
      pub fn compareoptionsrangelocale(self: *Self, __string:  * NSString, __mask: NSStringCompareOptions, __rangeOfReceiverToCompare: _NSRange, __locale: id, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSString, NSStringCompareOptions, _NSRange, id, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_options_range_locale_.get(), __string, __mask, __rangeOfReceiverToCompare, __locale, );
 }}
var sel_caseInsensitiveCompare_ = CachedSelector.init("caseInsensitiveCompare:");
      pub fn caseInsensitiveCompare(self: *Self, __string:  * NSString, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_caseInsensitiveCompare_.get(), __string, );
 }}
var sel_localizedCompare_ = CachedSelector.init("localizedCompare:");
      pub fn localizedCompare(self: *Self, __string:  * NSString, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedCompare_.get(), __string, );
 }}
var sel_localizedCaseInsensitiveCompare_ = CachedSelector.init("localizedCaseInsensitiveCompare:");
      pub fn localizedCaseInsensitiveCompare(self: *Self, __string:  * NSString, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedCaseInsensitiveCompare_.get(), __string, );
 }}
var sel_localizedStandardCompare_ = CachedSelector.init("localizedStandardCompare:");
      pub fn localizedStandardCompare(self: *Self, __string:  * NSString, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStandardCompare_.get(), __string, );
 }}
var sel_isEqualToString_ = CachedSelector.init("isEqualToString:");
      pub fn isEqualToString(self: *Self, __aString:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToString_.get(), __aString, );
 }}
var sel_hasPrefix_ = CachedSelector.init("hasPrefix:");
      pub fn hasPrefix(self: *Self, __str:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasPrefix_.get(), __str, );
 }}
var sel_hasSuffix_ = CachedSelector.init("hasSuffix:");
      pub fn hasSuffix(self: *Self, __str:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasSuffix_.get(), __str, );
 }}
var sel_commonPrefixWithString_options_ = CachedSelector.init("commonPrefixWithString:options:");
      pub fn commonPrefixWithStringoptions(self: *Self, __str:  * NSString, __mask: NSStringCompareOptions, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, NSStringCompareOptions, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commonPrefixWithString_options_.get(), __str, __mask, );
 }}
var sel_containsString_ = CachedSelector.init("containsString:");
      pub fn containsString(self: *Self, __str:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsString_.get(), __str, );
 }}
var sel_localizedCaseInsensitiveContainsString_ = CachedSelector.init("localizedCaseInsensitiveContainsString:");
      pub fn localizedCaseInsensitiveContainsString(self: *Self, __str:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedCaseInsensitiveContainsString_.get(), __str, );
 }}
var sel_localizedStandardContainsString_ = CachedSelector.init("localizedStandardContainsString:");
      pub fn localizedStandardContainsString(self: *Self, __str:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStandardContainsString_.get(), __str, );
 }}
var sel_localizedStandardRangeOfString_ = CachedSelector.init("localizedStandardRangeOfString:");
      pub fn localizedStandardRangeOfString(self: *Self, __str:  * NSString, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStandardRangeOfString_.get(), __str, );
 }}
var sel_rangeOfString_ = CachedSelector.init("rangeOfString:");
      pub fn rangeOfString(self: *Self, __searchString:  * NSString, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfString_.get(), __searchString, );
 }}
var sel_rangeOfString_options_ = CachedSelector.init("rangeOfString:options:");
      pub fn rangeOfStringoptions(self: *Self, __searchString:  * NSString, __mask: NSStringCompareOptions, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSString, NSStringCompareOptions, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfString_options_.get(), __searchString, __mask, );
 }}
var sel_rangeOfString_options_range_ = CachedSelector.init("rangeOfString:options:range:");
      pub fn rangeOfStringoptionsrange(self: *Self, __searchString:  * NSString, __mask: NSStringCompareOptions, __rangeOfReceiverToSearch: _NSRange, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSString, NSStringCompareOptions, _NSRange, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfString_options_range_.get(), __searchString, __mask, __rangeOfReceiverToSearch, );
 }}
var sel_rangeOfString_options_range_locale_ = CachedSelector.init("rangeOfString:options:range:locale:");
      pub fn rangeOfStringoptionsrangelocale(self: *Self, __searchString:  * NSString, __mask: NSStringCompareOptions, __rangeOfReceiverToSearch: _NSRange, __locale:  ?* NSLocale, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSString, NSStringCompareOptions, _NSRange,  ?* NSLocale, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfString_options_range_locale_.get(), __searchString, __mask, __rangeOfReceiverToSearch, __locale, );
 }}
var sel_rangeOfCharacterFromSet_ = CachedSelector.init("rangeOfCharacterFromSet:");
      pub fn rangeOfCharacterFromSet(self: *Self, __searchSet:  * NSCharacterSet, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfCharacterFromSet_.get(), __searchSet, );
 }}
var sel_rangeOfCharacterFromSet_options_ = CachedSelector.init("rangeOfCharacterFromSet:options:");
      pub fn rangeOfCharacterFromSetoptions(self: *Self, __searchSet:  * NSCharacterSet, __mask: NSStringCompareOptions, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet, NSStringCompareOptions, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfCharacterFromSet_options_.get(), __searchSet, __mask, );
 }}
var sel_rangeOfCharacterFromSet_options_range_ = CachedSelector.init("rangeOfCharacterFromSet:options:range:");
      pub fn rangeOfCharacterFromSetoptionsrange(self: *Self, __searchSet:  * NSCharacterSet, __mask: NSStringCompareOptions, __rangeOfReceiverToSearch: _NSRange, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet, NSStringCompareOptions, _NSRange, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfCharacterFromSet_options_range_.get(), __searchSet, __mask, __rangeOfReceiverToSearch, );
 }}
var sel_rangeOfComposedCharacterSequenceAtIndex_ = CachedSelector.init("rangeOfComposedCharacterSequenceAtIndex:");
      pub fn rangeOfComposedCharacterSequenceAtIndex(self: *Self, __index: c_ulong, ) _NSRange {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfComposedCharacterSequenceAtIndex_.get(), __index, );
 }}
var sel_rangeOfComposedCharacterSequencesForRange_ = CachedSelector.init("rangeOfComposedCharacterSequencesForRange:");
      pub fn rangeOfComposedCharacterSequencesForRange(self: *Self, __range: _NSRange, ) _NSRange {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfComposedCharacterSequencesForRange_.get(), __range, );
 }}
var sel_stringByAppendingString_ = CachedSelector.init("stringByAppendingString:");
      pub fn stringByAppendingString(self: *Self, __aString:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByAppendingString_.get(), __aString, );
 }}
var sel_stringByAppendingFormat_ = CachedSelector.init("stringByAppendingFormat:");
      pub fn stringByAppendingFormat(self: *Self, __format:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByAppendingFormat_.get(), __format, );
 }}
var sel_uppercaseStringWithLocale_ = CachedSelector.init("uppercaseStringWithLocale:");
      pub fn uppercaseStringWithLocale(self: *Self, __locale:  ?* NSLocale, )  * NSString {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uppercaseStringWithLocale_.get(), __locale, );
 }}
var sel_lowercaseStringWithLocale_ = CachedSelector.init("lowercaseStringWithLocale:");
      pub fn lowercaseStringWithLocale(self: *Self, __locale:  ?* NSLocale, )  * NSString {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lowercaseStringWithLocale_.get(), __locale, );
 }}
var sel_capitalizedStringWithLocale_ = CachedSelector.init("capitalizedStringWithLocale:");
      pub fn capitalizedStringWithLocale(self: *Self, __locale:  ?* NSLocale, )  * NSString {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_capitalizedStringWithLocale_.get(), __locale, );
 }}
var sel_getLineStart_end_contentsEnd_forRange_ = CachedSelector.init("getLineStart:end:contentsEnd:forRange:");
      pub fn getLineStartendcontentsEndforRange(self: *Self, __startPtr:  [*c] c_ulong, __lineEndPtr:  [*c] c_ulong, __contentsEndPtr:  [*c] c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulong,  [*c] c_ulong,  [*c] c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getLineStart_end_contentsEnd_forRange_.get(), __startPtr, __lineEndPtr, __contentsEndPtr, __range, );
 }}
var sel_lineRangeForRange_ = CachedSelector.init("lineRangeForRange:");
      pub fn lineRangeForRange(self: *Self, __range: _NSRange, ) _NSRange {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lineRangeForRange_.get(), __range, );
 }}
var sel_getParagraphStart_end_contentsEnd_forRange_ = CachedSelector.init("getParagraphStart:end:contentsEnd:forRange:");
      pub fn getParagraphStartendcontentsEndforRange(self: *Self, __startPtr:  [*c] c_ulong, __parEndPtr:  [*c] c_ulong, __contentsEndPtr:  [*c] c_ulong, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulong,  [*c] c_ulong,  [*c] c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getParagraphStart_end_contentsEnd_forRange_.get(), __startPtr, __parEndPtr, __contentsEndPtr, __range, );
 }}
var sel_paragraphRangeForRange_ = CachedSelector.init("paragraphRangeForRange:");
      pub fn paragraphRangeForRange(self: *Self, __range: _NSRange, ) _NSRange {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_paragraphRangeForRange_.get(), __range, );
 }}
var sel_enumerateSubstringsInRange_options_usingBlock_ = CachedSelector.init("enumerateSubstringsInRange:options:usingBlock:");
      pub fn enumerateSubstringsInRangeoptionsusingBlock(self: *Self, __range: _NSRange, __opts: NSStringEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, NSStringEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateSubstringsInRange_options_usingBlock_.get(), __range, __opts, __block, );
 }}
var sel_enumerateLinesUsingBlock_ = CachedSelector.init("enumerateLinesUsingBlock:");
      pub fn enumerateLinesUsingBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateLinesUsingBlock_.get(), __block, );
 }}
var sel_dataUsingEncoding_allowLossyConversion_ = CachedSelector.init("dataUsingEncoding:allowLossyConversion:");
      pub fn dataUsingEncodingallowLossyConversion(self: *Self, __encoding: c_ulong, __lossy: c_int, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, c_ulong, c_int, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataUsingEncoding_allowLossyConversion_.get(), __encoding, __lossy, );
 }}
var sel_dataUsingEncoding_ = CachedSelector.init("dataUsingEncoding:");
      pub fn dataUsingEncoding(self: *Self, __encoding: c_ulong, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataUsingEncoding_.get(), __encoding, );
 }}
var sel_canBeConvertedToEncoding_ = CachedSelector.init("canBeConvertedToEncoding:");
      pub fn canBeConvertedToEncoding(self: *Self, __encoding: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_canBeConvertedToEncoding_.get(), __encoding, );
 }}
var sel_cStringUsingEncoding_ = CachedSelector.init("cStringUsingEncoding:");
      pub fn cStringUsingEncoding(self: *Self, __encoding: c_ulong, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cStringUsingEncoding_.get(), __encoding, );
 }}
var sel_getCString_maxLength_encoding_ = CachedSelector.init("getCString:maxLength:encoding:");
      pub fn getCStringmaxLengthencoding(self: *Self, __buffer:  [*c] u8, __maxBufferCount: c_ulong, __encoding: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCString_maxLength_encoding_.get(), __buffer, __maxBufferCount, __encoding, );
 }}
var sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_ = CachedSelector.init("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
      pub fn getBytesmaxLengthusedLengthencodingoptionsrangeremainingRange(self: *Self, __buffer:  [*c] void, __maxBufferCount: c_ulong, __usedBufferCount:  [*c] c_ulong, __encoding: c_ulong, __options: NSStringEncodingConversionOptions, __range: _NSRange, __leftover:  [*c] _NSRange, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong,  [*c] c_ulong, c_ulong, NSStringEncodingConversionOptions, _NSRange,  [*c] _NSRange, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_.get(), __buffer, __maxBufferCount, __usedBufferCount, __encoding, __options, __range, __leftover, );
 }}
var sel_maximumLengthOfBytesUsingEncoding_ = CachedSelector.init("maximumLengthOfBytesUsingEncoding:");
      pub fn maximumLengthOfBytesUsingEncoding(self: *Self, __enc: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maximumLengthOfBytesUsingEncoding_.get(), __enc, );
 }}
var sel_lengthOfBytesUsingEncoding_ = CachedSelector.init("lengthOfBytesUsingEncoding:");
      pub fn lengthOfBytesUsingEncoding(self: *Self, __enc: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lengthOfBytesUsingEncoding_.get(), __enc, );
 }}
var sel_localizedNameOfStringEncoding_ = CachedSelector.init("localizedNameOfStringEncoding:");
      pub fn localizedNameOfStringEncoding(__encoding: c_ulong, )  * NSString {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localizedNameOfStringEncoding_.get(), __encoding, );
 }}
var sel_componentsSeparatedByString_ = CachedSelector.init("componentsSeparatedByString:");
      pub fn componentsSeparatedByString(self: *Self, __separator:  * NSString, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_componentsSeparatedByString_.get(), __separator, );
 }}
var sel_componentsSeparatedByCharactersInSet_ = CachedSelector.init("componentsSeparatedByCharactersInSet:");
      pub fn componentsSeparatedByCharactersInSet(self: *Self, __separator:  * NSCharacterSet, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_componentsSeparatedByCharactersInSet_.get(), __separator, );
 }}
var sel_stringByTrimmingCharactersInSet_ = CachedSelector.init("stringByTrimmingCharactersInSet:");
      pub fn stringByTrimmingCharactersInSet(self: *Self, __set:  * NSCharacterSet, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByTrimmingCharactersInSet_.get(), __set, );
 }}
var sel_stringByPaddingToLength_withString_startingAtIndex_ = CachedSelector.init("stringByPaddingToLength:withString:startingAtIndex:");
      pub fn stringByPaddingToLengthwithStringstartingAtIndex(self: *Self, __newLength: c_ulong, __padString:  * NSString, __padIndex: c_ulong, )  * NSString {{
           return @as(*const fn(*Self, SEL, c_ulong,  * NSString, c_ulong, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByPaddingToLength_withString_startingAtIndex_.get(), __newLength, __padString, __padIndex, );
 }}
var sel_stringByFoldingWithOptions_locale_ = CachedSelector.init("stringByFoldingWithOptions:locale:");
      pub fn stringByFoldingWithOptionslocale(self: *Self, __options: NSStringCompareOptions, __locale:  ?* NSLocale, )  * NSString {{
           return @as(*const fn(*Self, SEL, NSStringCompareOptions,  ?* NSLocale, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByFoldingWithOptions_locale_.get(), __options, __locale, );
 }}
var sel_stringByReplacingOccurrencesOfString_withString_options_range_ = CachedSelector.init("stringByReplacingOccurrencesOfString:withString:options:range:");
      pub fn stringByReplacingOccurrencesOfStringwithStringoptionsrange(self: *Self, __target:  * NSString, __replacement:  * NSString, __options: NSStringCompareOptions, __searchRange: _NSRange, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, NSStringCompareOptions, _NSRange, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByReplacingOccurrencesOfString_withString_options_range_.get(), __target, __replacement, __options, __searchRange, );
 }}
var sel_stringByReplacingOccurrencesOfString_withString_ = CachedSelector.init("stringByReplacingOccurrencesOfString:withString:");
      pub fn stringByReplacingOccurrencesOfStringwithString(self: *Self, __target:  * NSString, __replacement:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByReplacingOccurrencesOfString_withString_.get(), __target, __replacement, );
 }}
var sel_stringByReplacingCharactersInRange_withString_ = CachedSelector.init("stringByReplacingCharactersInRange:withString:");
      pub fn stringByReplacingCharactersInRangewithString(self: *Self, __range: _NSRange, __replacement:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByReplacingCharactersInRange_withString_.get(), __range, __replacement, );
 }}
var sel_stringByApplyingTransform_reverse_ = CachedSelector.init("stringByApplyingTransform:reverse:");
      pub fn stringByApplyingTransformreverse(self: *Self, __transform:  * NSString, __reverse: c_int, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByApplyingTransform_reverse_.get(), __transform, __reverse, );
 }}
var sel_writeToURL_atomically_encoding_error_ = CachedSelector.init("writeToURL:atomically:encoding:error:");
      pub fn writeToURLatomicallyencodingerror(self: *Self, __url:  * NSURL, __useAuxiliaryFile: c_int, __enc: c_ulong, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_int, c_ulong,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToURL_atomically_encoding_error_.get(), __url, __useAuxiliaryFile, __enc, __an_error, );
 }}
var sel_writeToFile_atomically_encoding_error_ = CachedSelector.init("writeToFile:atomically:encoding:error:");
      pub fn writeToFileatomicallyencodingerror(self: *Self, __path:  * NSString, __useAuxiliaryFile: c_int, __enc: c_ulong, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, c_ulong,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToFile_atomically_encoding_error_.get(), __path, __useAuxiliaryFile, __enc, __an_error, );
 }}
var sel_initWithCharactersNoCopy_length_freeWhenDone_ = CachedSelector.init("initWithCharactersNoCopy:length:freeWhenDone:");
      pub fn initWithCharactersNoCopylengthfreeWhenDone(self: *Self, __characters:  [*c] c_ushort, __length: c_ulong, __freeBuffer: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] c_ushort, c_ulong, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCharactersNoCopy_length_freeWhenDone_.get(), __characters, __length, __freeBuffer, );
 }}
var sel_initWithCharactersNoCopy_length_deallocator_ = CachedSelector.init("initWithCharactersNoCopy:length:deallocator:");
      pub fn initWithCharactersNoCopylengthdeallocator(self: *Self, __chars:  [*c] c_ushort, __len: c_ulong, __deallocator: ?*u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] c_ushort, c_ulong, ?*u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCharactersNoCopy_length_deallocator_.get(), __chars, __len, __deallocator, );
 }}
var sel_initWithCharacters_length_ = CachedSelector.init("initWithCharacters:length:");
      pub fn initWithCharacterslength(self: *Self, __characters:  [*c] c_ushort, __length: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] c_ushort, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCharacters_length_.get(), __characters, __length, );
 }}
var sel_initWithUTF8String_ = CachedSelector.init("initWithUTF8String:");
      pub fn initWithUTF8String(self: *Self, __nullTerminatedCString:  [*c]  const u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUTF8String_.get(), __nullTerminatedCString, );
 }}
var sel_initWithString_ = CachedSelector.init("initWithString:");
      pub fn initWithString(self: *Self, __aString:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_.get(), __aString, );
 }}
var sel_initWithFormat_ = CachedSelector.init("initWithFormat:");
      pub fn initWithFormat(self: *Self, __format:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFormat_.get(), __format, );
 }}
var sel_initWithFormat_arguments_ = CachedSelector.init("initWithFormat:arguments:");
      pub fn initWithFormatarguments(self: *Self, __format:  * NSString, __argList:  [*c] u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c] u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFormat_arguments_.get(), __format, __argList, );
 }}
var sel_initWithFormat_locale_ = CachedSelector.init("initWithFormat:locale:");
      pub fn initWithFormatlocale(self: *Self, __format:  * NSString, __locale: id, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFormat_locale_.get(), __format, __locale, );
 }}
var sel_initWithFormat_locale_arguments_ = CachedSelector.init("initWithFormat:locale:arguments:");
      pub fn initWithFormatlocalearguments(self: *Self, __format:  * NSString, __locale: id, __argList:  [*c] u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, id,  [*c] u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFormat_locale_arguments_.get(), __format, __locale, __argList, );
 }}
var sel_initWithValidatedFormat_validFormatSpecifiers_error_ = CachedSelector.init("initWithValidatedFormat:validFormatSpecifiers:error:");
      pub fn initWithValidatedFormatvalidFormatSpecifierserror(self: *Self, __format:  * NSString, __validFormatSpecifiers:  * NSString, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithValidatedFormat_validFormatSpecifiers_error_.get(), __format, __validFormatSpecifiers, __an_error, );
 }}
var sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_ = CachedSelector.init("initWithValidatedFormat:validFormatSpecifiers:locale:error:");
      pub fn initWithValidatedFormatvalidFormatSpecifierslocaleerror(self: *Self, __format:  * NSString, __validFormatSpecifiers:  * NSString, __locale: id, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, id,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_.get(), __format, __validFormatSpecifiers, __locale, __an_error, );
 }}
var sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_ = CachedSelector.init("initWithValidatedFormat:validFormatSpecifiers:arguments:error:");
      pub fn initWithValidatedFormatvalidFormatSpecifiersargumentserror(self: *Self, __format:  * NSString, __validFormatSpecifiers:  * NSString, __argList:  [*c] u8, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  [*c] u8,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_.get(), __format, __validFormatSpecifiers, __argList, __an_error, );
 }}
var sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_ = CachedSelector.init("initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:");
      pub fn initWithValidatedFormatvalidFormatSpecifierslocaleargumentserror(self: *Self, __format:  * NSString, __validFormatSpecifiers:  * NSString, __locale: id, __argList:  [*c] u8, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, id,  [*c] u8,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_.get(), __format, __validFormatSpecifiers, __locale, __argList, __an_error, );
 }}
var sel_initWithData_encoding_ = CachedSelector.init("initWithData:encoding:");
      pub fn initWithDataencoding(self: *Self, __data:  * NSData, __encoding: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithData_encoding_.get(), __data, __encoding, );
 }}
var sel_initWithBytes_length_encoding_ = CachedSelector.init("initWithBytes:length:encoding:");
      pub fn initWithByteslengthencoding(self: *Self, __bytes:  [*c]  const void, __len: c_ulong, __encoding: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBytes_length_encoding_.get(), __bytes, __len, __encoding, );
 }}
var sel_initWithBytesNoCopy_length_encoding_freeWhenDone_ = CachedSelector.init("initWithBytesNoCopy:length:encoding:freeWhenDone:");
      pub fn initWithBytesNoCopylengthencodingfreeWhenDone(self: *Self, __bytes:  [*c] void, __len: c_ulong, __encoding: c_ulong, __freeBuffer: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, c_ulong, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBytesNoCopy_length_encoding_freeWhenDone_.get(), __bytes, __len, __encoding, __freeBuffer, );
 }}
var sel_initWithBytesNoCopy_length_encoding_deallocator_ = CachedSelector.init("initWithBytesNoCopy:length:encoding:deallocator:");
      pub fn initWithBytesNoCopylengthencodingdeallocator(self: *Self, __bytes:  [*c] void, __len: c_ulong, __encoding: c_ulong, __deallocator: ?*u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, c_ulong, ?*u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBytesNoCopy_length_encoding_deallocator_.get(), __bytes, __len, __encoding, __deallocator, );
 }}
var sel_string = CachedSelector.init("string");
      pub fn string() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_string.get(), );
 }}
var sel_stringWithString_ = CachedSelector.init("stringWithString:");
      pub fn stringWithString(__string:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithString_.get(), __string, );
 }}
var sel_stringWithCharacters_length_ = CachedSelector.init("stringWithCharacters:length:");
      pub fn stringWithCharacterslength(__characters:  [*c] c_ushort, __length: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL,  [*c] c_ushort, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithCharacters_length_.get(), __characters, __length, );
 }}
var sel_stringWithUTF8String_ = CachedSelector.init("stringWithUTF8String:");
      pub fn stringWithUTF8String(__nullTerminatedCString:  [*c]  const u8, ) *Self {{
           return @as(*const fn(Class, SEL,  [*c]  const u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithUTF8String_.get(), __nullTerminatedCString, );
 }}
var sel_stringWithFormat_ = CachedSelector.init("stringWithFormat:");
      pub fn stringWithFormat(__format:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithFormat_.get(), __format, );
 }}
var sel_localizedStringWithFormat_ = CachedSelector.init("localizedStringWithFormat:");
      pub fn localizedStringWithFormat(__format:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_localizedStringWithFormat_.get(), __format, );
 }}
var sel_stringWithValidatedFormat_validFormatSpecifiers_error_ = CachedSelector.init("stringWithValidatedFormat:validFormatSpecifiers:error:");
      pub fn stringWithValidatedFormatvalidFormatSpecifierserror(__format:  * NSString, __validFormatSpecifiers:  * NSString, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithValidatedFormat_validFormatSpecifiers_error_.get(), __format, __validFormatSpecifiers, __an_error, );
 }}
var sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_ = CachedSelector.init("localizedStringWithValidatedFormat:validFormatSpecifiers:error:");
      pub fn localizedStringWithValidatedFormatvalidFormatSpecifierserror(__format:  * NSString, __validFormatSpecifiers:  * NSString, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_.get(), __format, __validFormatSpecifiers, __an_error, );
 }}
var sel_initWithCString_encoding_ = CachedSelector.init("initWithCString:encoding:");
      pub fn initWithCStringencoding(self: *Self, __nullTerminatedCString:  [*c]  const u8, __encoding: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCString_encoding_.get(), __nullTerminatedCString, __encoding, );
 }}
var sel_stringWithCString_encoding_ = CachedSelector.init("stringWithCString:encoding:");
      pub fn stringWithCStringencoding(__cString:  [*c]  const u8, __enc: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL,  [*c]  const u8, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithCString_encoding_.get(), __cString, __enc, );
 }}
var sel_initWithContentsOfURL_encoding_error_ = CachedSelector.init("initWithContentsOfURL:encoding:error:");
      pub fn initWithContentsOfURLencodingerror(self: *Self, __url:  * NSURL, __enc: c_ulong, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_ulong,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_encoding_error_.get(), __url, __enc, __an_error, );
 }}
var sel_initWithContentsOfFile_encoding_error_ = CachedSelector.init("initWithContentsOfFile:encoding:error:");
      pub fn initWithContentsOfFileencodingerror(self: *Self, __path:  * NSString, __enc: c_ulong, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, c_ulong,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfFile_encoding_error_.get(), __path, __enc, __an_error, );
 }}
var sel_stringWithContentsOfURL_encoding_error_ = CachedSelector.init("stringWithContentsOfURL:encoding:error:");
      pub fn stringWithContentsOfURLencodingerror(__url:  * NSURL, __enc: c_ulong, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, c_ulong,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithContentsOfURL_encoding_error_.get(), __url, __enc, __an_error, );
 }}
var sel_stringWithContentsOfFile_encoding_error_ = CachedSelector.init("stringWithContentsOfFile:encoding:error:");
      pub fn stringWithContentsOfFileencodingerror(__path:  * NSString, __enc: c_ulong, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, c_ulong,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithContentsOfFile_encoding_error_.get(), __path, __enc, __an_error, );
 }}
var sel_initWithContentsOfURL_usedEncoding_error_ = CachedSelector.init("initWithContentsOfURL:usedEncoding:error:");
      pub fn initWithContentsOfURLusedEncodingerror(self: *Self, __url:  * NSURL, __enc:  [*c] c_ulong, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c] c_ulong,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_usedEncoding_error_.get(), __url, __enc, __an_error, );
 }}
var sel_initWithContentsOfFile_usedEncoding_error_ = CachedSelector.init("initWithContentsOfFile:usedEncoding:error:");
      pub fn initWithContentsOfFileusedEncodingerror(self: *Self, __path:  * NSString, __enc:  [*c] c_ulong, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c] c_ulong,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfFile_usedEncoding_error_.get(), __path, __enc, __an_error, );
 }}
var sel_stringWithContentsOfURL_usedEncoding_error_ = CachedSelector.init("stringWithContentsOfURL:usedEncoding:error:");
      pub fn stringWithContentsOfURLusedEncodingerror(__url:  * NSURL, __enc:  [*c] c_ulong, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL,  [*c] c_ulong,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithContentsOfURL_usedEncoding_error_.get(), __url, __enc, __an_error, );
 }}
var sel_stringWithContentsOfFile_usedEncoding_error_ = CachedSelector.init("stringWithContentsOfFile:usedEncoding:error:");
      pub fn stringWithContentsOfFileusedEncodingerror(__path:  * NSString, __enc:  [*c] c_ulong, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  [*c] c_ulong,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithContentsOfFile_usedEncoding_error_.get(), __path, __enc, __an_error, );
 }}
var sel_doubleValue = CachedSelector.init("doubleValue");
      pub fn doubleValue(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doubleValue.get(), );
 }}
var sel_floatValue = CachedSelector.init("floatValue");
      pub fn floatValue(self: *Self, ) f32 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_floatValue.get(), );
 }}
var sel_intValue = CachedSelector.init("intValue");
      pub fn intValue(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intValue.get(), );
 }}
var sel_integerValue = CachedSelector.init("integerValue");
      pub fn integerValue(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_integerValue.get(), );
 }}
var sel_longLongValue = CachedSelector.init("longLongValue");
      pub fn longLongValue(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_longLongValue.get(), );
 }}
var sel_boolValue = CachedSelector.init("boolValue");
      pub fn boolValue(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boolValue.get(), );
 }}
var sel_uppercaseString = CachedSelector.init("uppercaseString");
      pub fn uppercaseString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uppercaseString.get(), );
 }}
var sel_lowercaseString = CachedSelector.init("lowercaseString");
      pub fn lowercaseString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lowercaseString.get(), );
 }}
var sel_capitalizedString = CachedSelector.init("capitalizedString");
      pub fn capitalizedString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_capitalizedString.get(), );
 }}
var sel_localizedUppercaseString = CachedSelector.init("localizedUppercaseString");
      pub fn localizedUppercaseString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedUppercaseString.get(), );
 }}
var sel_localizedLowercaseString = CachedSelector.init("localizedLowercaseString");
      pub fn localizedLowercaseString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedLowercaseString.get(), );
 }}
var sel_localizedCapitalizedString = CachedSelector.init("localizedCapitalizedString");
      pub fn localizedCapitalizedString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedCapitalizedString.get(), );
 }}
var sel_UTF8String = CachedSelector.init("UTF8String");
      pub fn UTF8String(self: *Self, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_UTF8String.get(), );
 }}
var sel_fastestEncoding = CachedSelector.init("fastestEncoding");
      pub fn fastestEncoding(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fastestEncoding.get(), );
 }}
var sel_smallestEncoding = CachedSelector.init("smallestEncoding");
      pub fn smallestEncoding(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_smallestEncoding.get(), );
 }}
var sel_availableStringEncodings = CachedSelector.init("availableStringEncodings");
      pub fn availableStringEncodings()  [*c] c_ulong {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  [*c] c_ulong, @ptrCast(&objc_msgSend))(class.get(), sel_availableStringEncodings.get(), );
 }}
var sel_defaultCStringEncoding = CachedSelector.init("defaultCStringEncoding");
      pub fn defaultCStringEncoding() c_ulong {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(class.get(), sel_defaultCStringEncoding.get(), );
 }}
var sel_decomposedStringWithCanonicalMapping = CachedSelector.init("decomposedStringWithCanonicalMapping");
      pub fn decomposedStringWithCanonicalMapping(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decomposedStringWithCanonicalMapping.get(), );
 }}
var sel_precomposedStringWithCanonicalMapping = CachedSelector.init("precomposedStringWithCanonicalMapping");
      pub fn precomposedStringWithCanonicalMapping(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_precomposedStringWithCanonicalMapping.get(), );
 }}
var sel_decomposedStringWithCompatibilityMapping = CachedSelector.init("decomposedStringWithCompatibilityMapping");
      pub fn decomposedStringWithCompatibilityMapping(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decomposedStringWithCompatibilityMapping.get(), );
 }}
var sel_precomposedStringWithCompatibilityMapping = CachedSelector.init("precomposedStringWithCompatibilityMapping");
      pub fn precomposedStringWithCompatibilityMapping(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_precomposedStringWithCompatibilityMapping.get(), );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_hash = CachedSelector.init("hash");
      pub fn hash(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hash.get(), );
 }}
var sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_ = CachedSelector.init("stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:");
      pub fn stringEncodingForDataencodingOptionsconvertedStringusedLossyConversion(__data:  * NSData, __opts:  ?* NSDictionary, __string:  [*c]  ?* NSString, __usedLossyConversion:  [*c] c_int, ) c_ulong {{
           return @as(*const fn(Class, SEL,  * NSData,  ?* NSDictionary,  [*c]  ?* NSString,  [*c] c_int, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(class.get(), sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_.get(), __data, __opts, __string, __usedLossyConversion, );
 }}
var sel_propertyList = CachedSelector.init("propertyList");
      pub fn propertyList(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_propertyList.get(), );
 }}
var sel_propertyListFromStringsFileFormat = CachedSelector.init("propertyListFromStringsFileFormat");
      pub fn propertyListFromStringsFileFormat(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_propertyListFromStringsFileFormat.get(), );
 }}
var sel_cString = CachedSelector.init("cString");
      pub fn cString(self: *Self, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cString.get(), );
 }}
var sel_lossyCString = CachedSelector.init("lossyCString");
      pub fn lossyCString(self: *Self, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lossyCString.get(), );
 }}
var sel_cStringLength = CachedSelector.init("cStringLength");
      pub fn cStringLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cStringLength.get(), );
 }}
var sel_getCString_ = CachedSelector.init("getCString:");
      pub fn getCString(self: *Self, __bytes:  [*c] u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCString_.get(), __bytes, );
 }}
var sel_getCString_maxLength_ = CachedSelector.init("getCString:maxLength:");
      pub fn getCStringmaxLength(self: *Self, __bytes:  [*c] u8, __maxLength: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCString_maxLength_.get(), __bytes, __maxLength, );
 }}
var sel_getCString_maxLength_range_remainingRange_ = CachedSelector.init("getCString:maxLength:range:remainingRange:");
      pub fn getCStringmaxLengthrangeremainingRange(self: *Self, __bytes:  [*c] u8, __maxLength: c_ulong, __aRange: _NSRange, __leftoverRange:  [*c] _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong, _NSRange,  [*c] _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCString_maxLength_range_remainingRange_.get(), __bytes, __maxLength, __aRange, __leftoverRange, );
 }}
var sel_writeToFile_atomically_ = CachedSelector.init("writeToFile:atomically:");
      pub fn writeToFileatomically(self: *Self, __path:  * NSString, __useAuxiliaryFile: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToFile_atomically_.get(), __path, __useAuxiliaryFile, );
 }}
var sel_writeToURL_atomically_ = CachedSelector.init("writeToURL:atomically:");
      pub fn writeToURLatomically(self: *Self, __url:  * NSURL, __atomically: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToURL_atomically_.get(), __url, __atomically, );
 }}
var sel_initWithContentsOfFile_ = CachedSelector.init("initWithContentsOfFile:");
      pub fn initWithContentsOfFile(self: *Self, __path:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfFile_.get(), __path, );
 }}
var sel_initWithContentsOfURL_ = CachedSelector.init("initWithContentsOfURL:");
      pub fn initWithContentsOfURL(self: *Self, __url:  * NSURL, ) id {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_.get(), __url, );
 }}
var sel_stringWithContentsOfFile_ = CachedSelector.init("stringWithContentsOfFile:");
      pub fn stringWithContentsOfFile(__path:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithContentsOfFile_.get(), __path, );
 }}
var sel_stringWithContentsOfURL_ = CachedSelector.init("stringWithContentsOfURL:");
      pub fn stringWithContentsOfURL(__url:  * NSURL, ) id {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithContentsOfURL_.get(), __url, );
 }}
var sel_initWithCStringNoCopy_length_freeWhenDone_ = CachedSelector.init("initWithCStringNoCopy:length:freeWhenDone:");
      pub fn initWithCStringNoCopylengthfreeWhenDone(self: *Self, __bytes:  [*c] u8, __length: c_ulong, __freeBuffer: c_int, ) id {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong, c_int, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCStringNoCopy_length_freeWhenDone_.get(), __bytes, __length, __freeBuffer, );
 }}
var sel_initWithCString_length_ = CachedSelector.init("initWithCString:length:");
      pub fn initWithCStringlength(self: *Self, __bytes:  [*c]  const u8, __length: c_ulong, ) id {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, c_ulong, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCString_length_.get(), __bytes, __length, );
 }}
var sel_initWithCString_ = CachedSelector.init("initWithCString:");
      pub fn initWithCString(self: *Self, __bytes:  [*c]  const u8, ) id {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCString_.get(), __bytes, );
 }}
var sel_stringWithCString_length_ = CachedSelector.init("stringWithCString:length:");
      pub fn stringWithCStringlength(__bytes:  [*c]  const u8, __length: c_ulong, ) id {{
           return @as(*const fn(Class, SEL,  [*c]  const u8, c_ulong, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithCString_length_.get(), __bytes, __length, );
 }}
var sel_stringWithCString_ = CachedSelector.init("stringWithCString:");
      pub fn stringWithCString(__bytes:  [*c]  const u8, ) id {{
           return @as(*const fn(Class, SEL,  [*c]  const u8, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithCString_.get(), __bytes, );
 }}
var sel_getCharacters_ = CachedSelector.init("getCharacters:");
      pub fn getCharacters(self: *Self, __buffer:  [*c] c_ushort, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_ushort, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCharacters_.get(), __buffer, );
 }}
var sel_variantFittingPresentationWidth_ = CachedSelector.init("variantFittingPresentationWidth:");
      pub fn variantFittingPresentationWidth(self: *Self, __width: c_long, )  * NSString {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_variantFittingPresentationWidth_.get(), __width, );
 }}
var sel_pathWithComponents_ = CachedSelector.init("pathWithComponents:");
      pub fn pathWithComponents(__components:  * NSArray, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_pathWithComponents_.get(), __components, );
 }}
var sel_stringByAppendingPathComponent_ = CachedSelector.init("stringByAppendingPathComponent:");
      pub fn stringByAppendingPathComponent(self: *Self, __str:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByAppendingPathComponent_.get(), __str, );
 }}
var sel_stringByAppendingPathExtension_ = CachedSelector.init("stringByAppendingPathExtension:");
      pub fn stringByAppendingPathExtension(self: *Self, __str:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByAppendingPathExtension_.get(), __str, );
 }}
var sel_stringsByAppendingPaths_ = CachedSelector.init("stringsByAppendingPaths:");
      pub fn stringsByAppendingPaths(self: *Self, __paths:  * NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringsByAppendingPaths_.get(), __paths, );
 }}
var sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_ = CachedSelector.init("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:");
      pub fn completePathIntoStringcaseSensitivematchesIntoArrayfilterTypes(self: *Self, __outputName:  [*c]  ?* NSString, __flag: c_int, __outputArray:  [*c]  ?* NSArray, __filterTypes:  ?* NSArray, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSString, c_int,  [*c]  ?* NSArray,  ?* NSArray, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_.get(), __outputName, __flag, __outputArray, __filterTypes, );
 }}
var sel_getFileSystemRepresentation_maxLength_ = CachedSelector.init("getFileSystemRepresentation:maxLength:");
      pub fn getFileSystemRepresentationmaxLength(self: *Self, __cname:  [*c] u8, __max: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getFileSystemRepresentation_maxLength_.get(), __cname, __max, );
 }}
var sel_pathComponents = CachedSelector.init("pathComponents");
      pub fn pathComponents(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathComponents.get(), );
 }}
var sel_isAbsolutePath = CachedSelector.init("isAbsolutePath");
      pub fn isAbsolutePath(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAbsolutePath.get(), );
 }}
var sel_lastPathComponent = CachedSelector.init("lastPathComponent");
      pub fn lastPathComponent(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lastPathComponent.get(), );
 }}
var sel_stringByDeletingLastPathComponent = CachedSelector.init("stringByDeletingLastPathComponent");
      pub fn stringByDeletingLastPathComponent(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByDeletingLastPathComponent.get(), );
 }}
var sel_pathExtension = CachedSelector.init("pathExtension");
      pub fn pathExtension(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathExtension.get(), );
 }}
var sel_stringByDeletingPathExtension = CachedSelector.init("stringByDeletingPathExtension");
      pub fn stringByDeletingPathExtension(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByDeletingPathExtension.get(), );
 }}
var sel_stringByAbbreviatingWithTildeInPath = CachedSelector.init("stringByAbbreviatingWithTildeInPath");
      pub fn stringByAbbreviatingWithTildeInPath(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByAbbreviatingWithTildeInPath.get(), );
 }}
var sel_stringByExpandingTildeInPath = CachedSelector.init("stringByExpandingTildeInPath");
      pub fn stringByExpandingTildeInPath(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByExpandingTildeInPath.get(), );
 }}
var sel_stringByStandardizingPath = CachedSelector.init("stringByStandardizingPath");
      pub fn stringByStandardizingPath(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByStandardizingPath.get(), );
 }}
var sel_stringByResolvingSymlinksInPath = CachedSelector.init("stringByResolvingSymlinksInPath");
      pub fn stringByResolvingSymlinksInPath(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByResolvingSymlinksInPath.get(), );
 }}
var sel_fileSystemRepresentation = CachedSelector.init("fileSystemRepresentation");
      pub fn fileSystemRepresentation(self: *Self, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileSystemRepresentation.get(), );
 }}
var sel_stringByAddingPercentEncodingWithAllowedCharacters_ = CachedSelector.init("stringByAddingPercentEncodingWithAllowedCharacters:");
      pub fn stringByAddingPercentEncodingWithAllowedCharacters(self: *Self, __allowedCharacters:  * NSCharacterSet, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByAddingPercentEncodingWithAllowedCharacters_.get(), __allowedCharacters, );
 }}
var sel_stringByAddingPercentEscapesUsingEncoding_ = CachedSelector.init("stringByAddingPercentEscapesUsingEncoding:");
      pub fn stringByAddingPercentEscapesUsingEncoding(self: *Self, __enc: c_ulong, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByAddingPercentEscapesUsingEncoding_.get(), __enc, );
 }}
var sel_stringByReplacingPercentEscapesUsingEncoding_ = CachedSelector.init("stringByReplacingPercentEscapesUsingEncoding:");
      pub fn stringByReplacingPercentEscapesUsingEncoding(self: *Self, __enc: c_ulong, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByReplacingPercentEscapesUsingEncoding_.get(), __enc, );
 }}
var sel_stringByRemovingPercentEncoding = CachedSelector.init("stringByRemovingPercentEncoding");
      pub fn stringByRemovingPercentEncoding(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByRemovingPercentEncoding.get(), );
 }}
var sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_ = CachedSelector.init("linguisticTagsInRange:scheme:options:orthography:tokenRanges:");
      pub fn linguisticTagsInRangeschemeoptionsorthographytokenRanges(self: *Self, __range: _NSRange, __scheme:  * NSString, __options: NSLinguisticTaggerOptions, __orthography:  ?* NSOrthography, __tokenRanges:  [*c]  ?* NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSString, NSLinguisticTaggerOptions,  ?* NSOrthography,  [*c]  ?* NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_.get(), __range, __scheme, __options, __orthography, __tokenRanges, );
 }}
var sel_enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_ = CachedSelector.init("enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:");
      pub fn enumerateLinguisticTagsInRangeschemeoptionsorthographyusingBlock(self: *Self, __range: _NSRange, __scheme:  * NSString, __options: NSLinguisticTaggerOptions, __orthography:  ?* NSOrthography, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSString, NSLinguisticTaggerOptions,  ?* NSOrthography, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_.get(), __range, __scheme, __options, __orthography, __block, );
 }}
  };
}

pub const NSString = opaque {
  const Self = @This();
  pub usingnamespace NSStringInterfaceMixin(Self, "NSString");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSString");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSString");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSString");
  pub usingnamespace NSItemProviderReadingProtocolMixin(Self, "NSString");
  pub usingnamespace NSItemProviderWritingProtocolMixin(Self, "NSString");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSString");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSString");
};

pub fn NSAppleScriptInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithContentsOfURL_error_ = CachedSelector.init("initWithContentsOfURL:error:");
      pub fn initWithContentsOfURLerror(self: *Self, __url:  * NSURL, __errorInfo:  [*c]  ?* NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_error_.get(), __url, __errorInfo, );
 }}
var sel_initWithSource_ = CachedSelector.init("initWithSource:");
      pub fn initWithSource(self: *Self, __source:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSource_.get(), __source, );
 }}
var sel_compileAndReturnError_ = CachedSelector.init("compileAndReturnError:");
      pub fn compileAndReturnError(self: *Self, __errorInfo:  [*c]  ?* NSDictionary, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSDictionary, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compileAndReturnError_.get(), __errorInfo, );
 }}
var sel_executeAndReturnError_ = CachedSelector.init("executeAndReturnError:");
      pub fn executeAndReturnError(self: *Self, __errorInfo:  [*c]  ?* NSDictionary, )  * NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSDictionary, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeAndReturnError_.get(), __errorInfo, );
 }}
var sel_executeAppleEvent_error_ = CachedSelector.init("executeAppleEvent:error:");
      pub fn executeAppleEventerror(self: *Self, __event:  * NSAppleEventDescriptor, __errorInfo:  [*c]  ?* NSDictionary, )  * NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL,  * NSAppleEventDescriptor,  [*c]  ?* NSDictionary, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeAppleEvent_error_.get(), __event, __errorInfo, );
 }}
var sel_source = CachedSelector.init("source");
      pub fn source(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_source.get(), );
 }}
var sel_isCompiled = CachedSelector.init("isCompiled");
      pub fn isCompiled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isCompiled.get(), );
 }}
  };
}

pub const NSAppleScript = opaque {
  const Self = @This();
  pub usingnamespace NSAppleScriptInterfaceMixin(Self, "NSAppleScript");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSAppleScript");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSAppleScript");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSAppleScript");
};

pub fn NSThreadInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_detachNewThreadWithBlock_ = CachedSelector.init("detachNewThreadWithBlock:");
      pub fn detachNewThreadWithBlock(__block: ?*u8, ) void {{
           return @as(*const fn(Class, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_detachNewThreadWithBlock_.get(), __block, );
 }}
var sel_detachNewThreadSelector_toTarget_withObject_ = CachedSelector.init("detachNewThreadSelector:toTarget:withObject:");
      pub fn detachNewThreadSelectortoTargetwithObject(__selector: SEL, __target: id, __argument: id, ) void {{
           return @as(*const fn(Class, SEL, SEL, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_detachNewThreadSelector_toTarget_withObject_.get(), __selector, __target, __argument, );
 }}
var sel_isMultiThreaded = CachedSelector.init("isMultiThreaded");
      pub fn isMultiThreaded() c_int {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_isMultiThreaded.get(), );
 }}
var sel_sleepUntilDate_ = CachedSelector.init("sleepUntilDate:");
      pub fn sleepUntilDate(__date:  * NSDate, ) void {{
           return @as(*const fn(Class, SEL,  * NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_sleepUntilDate_.get(), __date, );
 }}
var sel_sleepForTimeInterval_ = CachedSelector.init("sleepForTimeInterval:");
      pub fn sleepForTimeInterval(__ti: f64, ) void {{
           return @as(*const fn(Class, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_sleepForTimeInterval_.get(), __ti, );
 }}
var sel_exit = CachedSelector.init("exit");
      pub fn exit() void {{
           return @as(*const fn(Class, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_exit.get(), );
 }}
var sel_threadPriority = CachedSelector.init("threadPriority");
      pub fn threadPriority() f64 {{
           return @as(*const fn(Class, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(class.get(), sel_threadPriority.get(), );
 }}
var sel_setThreadPriority_ = CachedSelector.init("setThreadPriority:");
      pub fn setThreadPriority(__p: f64, ) c_int {{
           return @as(*const fn(Class, SEL, f64, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_setThreadPriority_.get(), __p, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithTarget_selector_object_ = CachedSelector.init("initWithTarget:selector:object:");
      pub fn initWithTargetselectorobject(self: *Self, __target: id, __selector: SEL, __argument: id, ) *Self {{
           return @as(*const fn(*Self, SEL, id, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTarget_selector_object_.get(), __target, __selector, __argument, );
 }}
var sel_initWithBlock_ = CachedSelector.init("initWithBlock:");
      pub fn initWithBlock(self: *Self, __block: ?*u8, ) *Self {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBlock_.get(), __block, );
 }}
var sel_cancel = CachedSelector.init("cancel");
      pub fn cancel(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancel.get(), );
 }}
var sel_start = CachedSelector.init("start");
      pub fn start(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_start.get(), );
 }}
var sel_main = CachedSelector.init("main");
      pub fn main(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_main.get(), );
 }}
var sel_currentThread = CachedSelector.init("currentThread");
      pub fn currentThread()  * NSThread {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSThread, @ptrCast(&objc_msgSend))(class.get(), sel_currentThread.get(), );
 }}
var sel_threadDictionary = CachedSelector.init("threadDictionary");
      pub fn threadDictionary(self: *Self, )  * NSMutableDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSMutableDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadDictionary.get(), );
 }}
var sel_qualityOfService = CachedSelector.init("qualityOfService");
      pub fn qualityOfService(self: *Self, ) NSQualityOfService {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSQualityOfService, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_qualityOfService.get(), );
 }}
var sel_setQualityOfService_ = CachedSelector.init("setQualityOfService:");
      pub fn setQualityOfService(self: *Self, __qualityOfService: NSQualityOfService, ) void {{
           return @as(*const fn(*Self, SEL, NSQualityOfService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQualityOfService_.get(), __qualityOfService, );
 }}
var sel_callStackReturnAddresses = CachedSelector.init("callStackReturnAddresses");
      pub fn callStackReturnAddresses()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_callStackReturnAddresses.get(), );
 }}
var sel_callStackSymbols = CachedSelector.init("callStackSymbols");
      pub fn callStackSymbols()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_callStackSymbols.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
var sel_stackSize = CachedSelector.init("stackSize");
      pub fn stackSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stackSize.get(), );
 }}
var sel_setStackSize_ = CachedSelector.init("setStackSize:");
      pub fn setStackSize(self: *Self, __stackSize: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStackSize_.get(), __stackSize, );
 }}
var sel_isMainThread = CachedSelector.init("isMainThread");
      pub fn isMainThread(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isMainThread.get(), );
 }}
var sel_mainThread = CachedSelector.init("mainThread");
      pub fn mainThread()  * NSThread {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSThread, @ptrCast(&objc_msgSend))(class.get(), sel_mainThread.get(), );
 }}
var sel_isExecuting = CachedSelector.init("isExecuting");
      pub fn isExecuting(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isExecuting.get(), );
 }}
var sel_isFinished = CachedSelector.init("isFinished");
      pub fn isFinished(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isFinished.get(), );
 }}
var sel_isCancelled = CachedSelector.init("isCancelled");
      pub fn isCancelled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isCancelled.get(), );
 }}
  };
}

pub const NSThread = opaque {
  const Self = @This();
  pub usingnamespace NSThreadInterfaceMixin(Self, "NSThread");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSThread");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSThread");
};

pub fn MTLAccelerationStructureDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_usage = CachedSelector.init("usage");
      pub fn usage(self: *Self, ) MTLAccelerationStructureUsage {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAccelerationStructureUsage, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_usage.get(), );
 }}
var sel_setUsage_ = CachedSelector.init("setUsage:");
      pub fn setUsage(self: *Self, __usage: MTLAccelerationStructureUsage, ) void {{
           return @as(*const fn(*Self, SEL, MTLAccelerationStructureUsage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUsage_.get(), __usage, );
 }}
  };
}

pub const MTLAccelerationStructureDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureDescriptorInterfaceMixin(Self, "MTLAccelerationStructureDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLAccelerationStructureDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructureDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLAccelerationStructureDescriptor");
};

pub fn NSMetadataQueryInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_startQuery = CachedSelector.init("startQuery");
      pub fn startQuery(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startQuery.get(), );
 }}
var sel_stopQuery = CachedSelector.init("stopQuery");
      pub fn stopQuery(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stopQuery.get(), );
 }}
var sel_disableUpdates = CachedSelector.init("disableUpdates");
      pub fn disableUpdates(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_disableUpdates.get(), );
 }}
var sel_enableUpdates = CachedSelector.init("enableUpdates");
      pub fn enableUpdates(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enableUpdates.get(), );
 }}
var sel_resultAtIndex_ = CachedSelector.init("resultAtIndex:");
      pub fn resultAtIndex(self: *Self, __idx: c_ulong, ) id {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resultAtIndex_.get(), __idx, );
 }}
var sel_enumerateResultsUsingBlock_ = CachedSelector.init("enumerateResultsUsingBlock:");
      pub fn enumerateResultsUsingBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateResultsUsingBlock_.get(), __block, );
 }}
var sel_enumerateResultsWithOptions_usingBlock_ = CachedSelector.init("enumerateResultsWithOptions:usingBlock:");
      pub fn enumerateResultsWithOptionsusingBlock(self: *Self, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateResultsWithOptions_usingBlock_.get(), __opts, __block, );
 }}
var sel_indexOfResult_ = CachedSelector.init("indexOfResult:");
      pub fn indexOfResult(self: *Self, __result: id, ) c_ulong {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfResult_.get(), __result, );
 }}
var sel_valueOfAttribute_forResultAtIndex_ = CachedSelector.init("valueOfAttribute:forResultAtIndex:");
      pub fn valueOfAttributeforResultAtIndex(self: *Self, __attrName:  * NSString, __idx: c_ulong, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, c_ulong, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueOfAttribute_forResultAtIndex_.get(), __attrName, __idx, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSMetadataQueryDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSMetadataQueryDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSMetadataQueryDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSMetadataQueryDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_predicate = CachedSelector.init("predicate");
      pub fn predicate(self: *Self, )  ?* NSPredicate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSPredicate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_predicate.get(), );
 }}
var sel_setPredicate_ = CachedSelector.init("setPredicate:");
      pub fn setPredicate(self: *Self, __predicate:  ?* NSPredicate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSPredicate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPredicate_.get(), __predicate, );
 }}
var sel_sortDescriptors = CachedSelector.init("sortDescriptors");
      pub fn sortDescriptors(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortDescriptors.get(), );
 }}
var sel_setSortDescriptors_ = CachedSelector.init("setSortDescriptors:");
      pub fn setSortDescriptors(self: *Self, __sortDescriptors:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSortDescriptors_.get(), __sortDescriptors, );
 }}
var sel_valueListAttributes = CachedSelector.init("valueListAttributes");
      pub fn valueListAttributes(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueListAttributes.get(), );
 }}
var sel_setValueListAttributes_ = CachedSelector.init("setValueListAttributes:");
      pub fn setValueListAttributes(self: *Self, __valueListAttributes:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValueListAttributes_.get(), __valueListAttributes, );
 }}
var sel_groupingAttributes = CachedSelector.init("groupingAttributes");
      pub fn groupingAttributes(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_groupingAttributes.get(), );
 }}
var sel_setGroupingAttributes_ = CachedSelector.init("setGroupingAttributes:");
      pub fn setGroupingAttributes(self: *Self, __groupingAttributes:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGroupingAttributes_.get(), __groupingAttributes, );
 }}
var sel_notificationBatchingInterval = CachedSelector.init("notificationBatchingInterval");
      pub fn notificationBatchingInterval(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_notificationBatchingInterval.get(), );
 }}
var sel_setNotificationBatchingInterval_ = CachedSelector.init("setNotificationBatchingInterval:");
      pub fn setNotificationBatchingInterval(self: *Self, __notificationBatchingInterval: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNotificationBatchingInterval_.get(), __notificationBatchingInterval, );
 }}
var sel_searchScopes = CachedSelector.init("searchScopes");
      pub fn searchScopes(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_searchScopes.get(), );
 }}
var sel_setSearchScopes_ = CachedSelector.init("setSearchScopes:");
      pub fn setSearchScopes(self: *Self, __searchScopes:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSearchScopes_.get(), __searchScopes, );
 }}
var sel_searchItems = CachedSelector.init("searchItems");
      pub fn searchItems(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_searchItems.get(), );
 }}
var sel_setSearchItems_ = CachedSelector.init("setSearchItems:");
      pub fn setSearchItems(self: *Self, __searchItems:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSearchItems_.get(), __searchItems, );
 }}
var sel_operationQueue = CachedSelector.init("operationQueue");
      pub fn operationQueue(self: *Self, )  ?* NSOperationQueue {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSOperationQueue, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_operationQueue.get(), );
 }}
var sel_setOperationQueue_ = CachedSelector.init("setOperationQueue:");
      pub fn setOperationQueue(self: *Self, __operationQueue:  ?* NSOperationQueue, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSOperationQueue, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOperationQueue_.get(), __operationQueue, );
 }}
var sel_isStarted = CachedSelector.init("isStarted");
      pub fn isStarted(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isStarted.get(), );
 }}
var sel_isGathering = CachedSelector.init("isGathering");
      pub fn isGathering(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isGathering.get(), );
 }}
var sel_isStopped = CachedSelector.init("isStopped");
      pub fn isStopped(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isStopped.get(), );
 }}
var sel_resultCount = CachedSelector.init("resultCount");
      pub fn resultCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resultCount.get(), );
 }}
var sel_results = CachedSelector.init("results");
      pub fn results(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_results.get(), );
 }}
var sel_valueLists = CachedSelector.init("valueLists");
      pub fn valueLists(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueLists.get(), );
 }}
var sel_groupedResults = CachedSelector.init("groupedResults");
      pub fn groupedResults(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_groupedResults.get(), );
 }}
  };
}

pub const NSMetadataQuery = opaque {
  const Self = @This();
  pub usingnamespace NSMetadataQueryInterfaceMixin(Self, "NSMetadataQuery");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMetadataQuery");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMetadataQuery");
};

pub fn MTLDepthStencilDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_depthCompareFunction = CachedSelector.init("depthCompareFunction");
      pub fn depthCompareFunction(self: *Self, ) MTLCompareFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCompareFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depthCompareFunction.get(), );
 }}
var sel_setDepthCompareFunction_ = CachedSelector.init("setDepthCompareFunction:");
      pub fn setDepthCompareFunction(self: *Self, __depthCompareFunction: MTLCompareFunction, ) void {{
           return @as(*const fn(*Self, SEL, MTLCompareFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthCompareFunction_.get(), __depthCompareFunction, );
 }}
var sel_isDepthWriteEnabled = CachedSelector.init("isDepthWriteEnabled");
      pub fn isDepthWriteEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDepthWriteEnabled.get(), );
 }}
var sel_setDepthWriteEnabled_ = CachedSelector.init("setDepthWriteEnabled:");
      pub fn setDepthWriteEnabled(self: *Self, __depthWriteEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthWriteEnabled_.get(), __depthWriteEnabled, );
 }}
var sel_frontFaceStencil = CachedSelector.init("frontFaceStencil");
      pub fn frontFaceStencil(self: *Self, )  * MTLStencilDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLStencilDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_frontFaceStencil.get(), );
 }}
var sel_setFrontFaceStencil_ = CachedSelector.init("setFrontFaceStencil:");
      pub fn setFrontFaceStencil(self: *Self, __frontFaceStencil:  ?* MTLStencilDescriptor, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLStencilDescriptor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFrontFaceStencil_.get(), __frontFaceStencil, );
 }}
var sel_backFaceStencil = CachedSelector.init("backFaceStencil");
      pub fn backFaceStencil(self: *Self, )  * MTLStencilDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLStencilDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_backFaceStencil.get(), );
 }}
var sel_setBackFaceStencil_ = CachedSelector.init("setBackFaceStencil:");
      pub fn setBackFaceStencil(self: *Self, __backFaceStencil:  ?* MTLStencilDescriptor, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLStencilDescriptor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBackFaceStencil_.get(), __backFaceStencil, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
  };
}

pub const MTLDepthStencilDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLDepthStencilDescriptorInterfaceMixin(Self, "MTLDepthStencilDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLDepthStencilDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLDepthStencilDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLDepthStencilDescriptor");
};

pub fn MTLVertexBufferLayoutDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stride = CachedSelector.init("stride");
      pub fn stride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stride.get(), );
 }}
var sel_setStride_ = CachedSelector.init("setStride:");
      pub fn setStride(self: *Self, __stride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStride_.get(), __stride, );
 }}
var sel_stepFunction = CachedSelector.init("stepFunction");
      pub fn stepFunction(self: *Self, ) MTLVertexStepFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLVertexStepFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stepFunction.get(), );
 }}
var sel_setStepFunction_ = CachedSelector.init("setStepFunction:");
      pub fn setStepFunction(self: *Self, __stepFunction: MTLVertexStepFunction, ) void {{
           return @as(*const fn(*Self, SEL, MTLVertexStepFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStepFunction_.get(), __stepFunction, );
 }}
var sel_stepRate = CachedSelector.init("stepRate");
      pub fn stepRate(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stepRate.get(), );
 }}
var sel_setStepRate_ = CachedSelector.init("setStepRate:");
      pub fn setStepRate(self: *Self, __stepRate: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStepRate_.get(), __stepRate, );
 }}
  };
}

pub const MTLVertexBufferLayoutDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLVertexBufferLayoutDescriptorInterfaceMixin(Self, "MTLVertexBufferLayoutDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLVertexBufferLayoutDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLVertexBufferLayoutDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLVertexBufferLayoutDescriptor");
};

pub fn NSCountedSetInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCapacity_ = CachedSelector.init("initWithCapacity:");
      pub fn initWithCapacity(self: *Self, __numItems: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCapacity_.get(), __numItems, );
 }}
var sel_initWithArray_ = CachedSelector.init("initWithArray:");
      pub fn initWithArray(self: *Self, __array:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithArray_.get(), __array, );
 }}
var sel_initWithSet_ = CachedSelector.init("initWithSet:");
      pub fn initWithSet(self: *Self, __set:  * NSSet, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSet_.get(), __set, );
 }}
var sel_countForObject_ = CachedSelector.init("countForObject:");
      pub fn countForObject(self: *Self, __object: id, ) c_ulong {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countForObject_.get(), __object, );
 }}
var sel_objectEnumerator = CachedSelector.init("objectEnumerator");
      pub fn objectEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectEnumerator.get(), );
 }}
var sel_addObject_ = CachedSelector.init("addObject:");
      pub fn addObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObject_.get(), __object, );
 }}
var sel_removeObject_ = CachedSelector.init("removeObject:");
      pub fn removeObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObject_.get(), __object, );
 }}
  };
}

pub const NSCountedSet = opaque {
  const Self = @This();
  pub usingnamespace NSCountedSetInterfaceMixin(Self, "NSCountedSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCountedSet");
  pub usingnamespace NSMutableSetInterfaceMixin(Self, "NSCountedSet");
};

pub fn MTLComputePipelineDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_reset = CachedSelector.init("reset");
      pub fn reset(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reset.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_computeFunction = CachedSelector.init("computeFunction");
      pub fn computeFunction(self: *Self, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_computeFunction.get(), );
 }}
var sel_setComputeFunction_ = CachedSelector.init("setComputeFunction:");
      pub fn setComputeFunction(self: *Self, __computeFunction:  ?* MTLFunction, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setComputeFunction_.get(), __computeFunction, );
 }}
var sel_threadGroupSizeIsMultipleOfThreadExecutionWidth = CachedSelector.init("threadGroupSizeIsMultipleOfThreadExecutionWidth");
      pub fn threadGroupSizeIsMultipleOfThreadExecutionWidth(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadGroupSizeIsMultipleOfThreadExecutionWidth.get(), );
 }}
var sel_setThreadGroupSizeIsMultipleOfThreadExecutionWidth_ = CachedSelector.init("setThreadGroupSizeIsMultipleOfThreadExecutionWidth:");
      pub fn setThreadGroupSizeIsMultipleOfThreadExecutionWidth(self: *Self, __threadGroupSizeIsMultipleOfThreadExecutionWidth: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setThreadGroupSizeIsMultipleOfThreadExecutionWidth_.get(), __threadGroupSizeIsMultipleOfThreadExecutionWidth, );
 }}
var sel_maxTotalThreadsPerThreadgroup = CachedSelector.init("maxTotalThreadsPerThreadgroup");
      pub fn maxTotalThreadsPerThreadgroup(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadsPerThreadgroup.get(), );
 }}
var sel_setMaxTotalThreadsPerThreadgroup_ = CachedSelector.init("setMaxTotalThreadsPerThreadgroup:");
      pub fn setMaxTotalThreadsPerThreadgroup(self: *Self, __maxTotalThreadsPerThreadgroup: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxTotalThreadsPerThreadgroup_.get(), __maxTotalThreadsPerThreadgroup, );
 }}
var sel_stageInputDescriptor = CachedSelector.init("stageInputDescriptor");
      pub fn stageInputDescriptor(self: *Self, )  ?* MTLStageInputOutputDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLStageInputOutputDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stageInputDescriptor.get(), );
 }}
var sel_setStageInputDescriptor_ = CachedSelector.init("setStageInputDescriptor:");
      pub fn setStageInputDescriptor(self: *Self, __stageInputDescriptor:  ?* MTLStageInputOutputDescriptor, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLStageInputOutputDescriptor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStageInputDescriptor_.get(), __stageInputDescriptor, );
 }}
var sel_buffers = CachedSelector.init("buffers");
      pub fn buffers(self: *Self, )  * MTLPipelineBufferDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLPipelineBufferDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_buffers.get(), );
 }}
var sel_supportIndirectCommandBuffers = CachedSelector.init("supportIndirectCommandBuffers");
      pub fn supportIndirectCommandBuffers(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportIndirectCommandBuffers.get(), );
 }}
var sel_setSupportIndirectCommandBuffers_ = CachedSelector.init("setSupportIndirectCommandBuffers:");
      pub fn setSupportIndirectCommandBuffers(self: *Self, __supportIndirectCommandBuffers: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportIndirectCommandBuffers_.get(), __supportIndirectCommandBuffers, );
 }}
var sel_insertLibraries = CachedSelector.init("insertLibraries");
      pub fn insertLibraries(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertLibraries.get(), );
 }}
var sel_setInsertLibraries_ = CachedSelector.init("setInsertLibraries:");
      pub fn setInsertLibraries(self: *Self, __insertLibraries:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInsertLibraries_.get(), __insertLibraries, );
 }}
var sel_preloadedLibraries = CachedSelector.init("preloadedLibraries");
      pub fn preloadedLibraries(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_preloadedLibraries.get(), );
 }}
var sel_setPreloadedLibraries_ = CachedSelector.init("setPreloadedLibraries:");
      pub fn setPreloadedLibraries(self: *Self, __preloadedLibraries:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPreloadedLibraries_.get(), __preloadedLibraries, );
 }}
var sel_binaryArchives = CachedSelector.init("binaryArchives");
      pub fn binaryArchives(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_binaryArchives.get(), );
 }}
var sel_setBinaryArchives_ = CachedSelector.init("setBinaryArchives:");
      pub fn setBinaryArchives(self: *Self, __binaryArchives:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBinaryArchives_.get(), __binaryArchives, );
 }}
var sel_linkedFunctions = CachedSelector.init("linkedFunctions");
      pub fn linkedFunctions(self: *Self, )  ?* MTLLinkedFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLLinkedFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_linkedFunctions.get(), );
 }}
var sel_setLinkedFunctions_ = CachedSelector.init("setLinkedFunctions:");
      pub fn setLinkedFunctions(self: *Self, __linkedFunctions:  ?* MTLLinkedFunctions, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLLinkedFunctions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLinkedFunctions_.get(), __linkedFunctions, );
 }}
var sel_supportAddingBinaryFunctions = CachedSelector.init("supportAddingBinaryFunctions");
      pub fn supportAddingBinaryFunctions(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportAddingBinaryFunctions.get(), );
 }}
var sel_setSupportAddingBinaryFunctions_ = CachedSelector.init("setSupportAddingBinaryFunctions:");
      pub fn setSupportAddingBinaryFunctions(self: *Self, __supportAddingBinaryFunctions: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportAddingBinaryFunctions_.get(), __supportAddingBinaryFunctions, );
 }}
var sel_maxCallStackDepth = CachedSelector.init("maxCallStackDepth");
      pub fn maxCallStackDepth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxCallStackDepth.get(), );
 }}
var sel_setMaxCallStackDepth_ = CachedSelector.init("setMaxCallStackDepth:");
      pub fn setMaxCallStackDepth(self: *Self, __maxCallStackDepth: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxCallStackDepth_.get(), __maxCallStackDepth, );
 }}
  };
}

pub const MTLComputePipelineDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLComputePipelineDescriptorInterfaceMixin(Self, "MTLComputePipelineDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLComputePipelineDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLComputePipelineDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLComputePipelineDescriptor");
};

pub fn NSUnitLengthInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_megameters = CachedSelector.init("megameters");
      pub fn megameters()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_megameters.get(), );
 }}
var sel_kilometers = CachedSelector.init("kilometers");
      pub fn kilometers()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_kilometers.get(), );
 }}
var sel_hectometers = CachedSelector.init("hectometers");
      pub fn hectometers()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_hectometers.get(), );
 }}
var sel_decameters = CachedSelector.init("decameters");
      pub fn decameters()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_decameters.get(), );
 }}
var sel_meters = CachedSelector.init("meters");
      pub fn meters()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_meters.get(), );
 }}
var sel_decimeters = CachedSelector.init("decimeters");
      pub fn decimeters()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_decimeters.get(), );
 }}
var sel_centimeters = CachedSelector.init("centimeters");
      pub fn centimeters()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_centimeters.get(), );
 }}
var sel_millimeters = CachedSelector.init("millimeters");
      pub fn millimeters()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_millimeters.get(), );
 }}
var sel_micrometers = CachedSelector.init("micrometers");
      pub fn micrometers()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_micrometers.get(), );
 }}
var sel_nanometers = CachedSelector.init("nanometers");
      pub fn nanometers()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_nanometers.get(), );
 }}
var sel_picometers = CachedSelector.init("picometers");
      pub fn picometers()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_picometers.get(), );
 }}
var sel_inches = CachedSelector.init("inches");
      pub fn inches()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_inches.get(), );
 }}
var sel_feet = CachedSelector.init("feet");
      pub fn feet()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_feet.get(), );
 }}
var sel_yards = CachedSelector.init("yards");
      pub fn yards()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_yards.get(), );
 }}
var sel_miles = CachedSelector.init("miles");
      pub fn miles()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_miles.get(), );
 }}
var sel_scandinavianMiles = CachedSelector.init("scandinavianMiles");
      pub fn scandinavianMiles()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_scandinavianMiles.get(), );
 }}
var sel_lightyears = CachedSelector.init("lightyears");
      pub fn lightyears()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_lightyears.get(), );
 }}
var sel_nauticalMiles = CachedSelector.init("nauticalMiles");
      pub fn nauticalMiles()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_nauticalMiles.get(), );
 }}
var sel_fathoms = CachedSelector.init("fathoms");
      pub fn fathoms()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_fathoms.get(), );
 }}
var sel_furlongs = CachedSelector.init("furlongs");
      pub fn furlongs()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_furlongs.get(), );
 }}
var sel_astronomicalUnits = CachedSelector.init("astronomicalUnits");
      pub fn astronomicalUnits()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_astronomicalUnits.get(), );
 }}
var sel_parsecs = CachedSelector.init("parsecs");
      pub fn parsecs()  * NSUnitLength {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitLength, @ptrCast(&objc_msgSend))(class.get(), sel_parsecs.get(), );
 }}
  };
}

pub const NSUnitLength = opaque {
  const Self = @This();
  pub usingnamespace NSUnitLengthInterfaceMixin(Self, "NSUnitLength");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitLength");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitLength");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitLength");
};

pub fn NSDistantObjectInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_proxyWithTarget_connection_ = CachedSelector.init("proxyWithTarget:connection:");
      pub fn proxyWithTargetconnection(__target: id, __connection:  * NSConnection, ) id {{
           return @as(*const fn(Class, SEL, id,  * NSConnection, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_proxyWithTarget_connection_.get(), __target, __connection, );
 }}
var sel_initWithTarget_connection_ = CachedSelector.init("initWithTarget:connection:");
      pub fn initWithTargetconnection(self: *Self, __target: id, __connection:  * NSConnection, ) *Self {{
           return @as(*const fn(*Self, SEL, id,  * NSConnection, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTarget_connection_.get(), __target, __connection, );
 }}
var sel_proxyWithLocal_connection_ = CachedSelector.init("proxyWithLocal:connection:");
      pub fn proxyWithLocalconnection(__target: id, __connection:  * NSConnection, ) id {{
           return @as(*const fn(Class, SEL, id,  * NSConnection, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_proxyWithLocal_connection_.get(), __target, __connection, );
 }}
var sel_initWithLocal_connection_ = CachedSelector.init("initWithLocal:connection:");
      pub fn initWithLocalconnection(self: *Self, __target: id, __connection:  * NSConnection, ) *Self {{
           return @as(*const fn(*Self, SEL, id,  * NSConnection, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithLocal_connection_.get(), __target, __connection, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_setProtocolForProxy_ = CachedSelector.init("setProtocolForProxy:");
      pub fn setProtocolForProxy(self: *Self, __proto:  ?* Protocol, ) void {{
           return @as(*const fn(*Self, SEL,  ?* Protocol, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setProtocolForProxy_.get(), __proto, );
 }}
var sel_connectionForProxy = CachedSelector.init("connectionForProxy");
      pub fn connectionForProxy(self: *Self, )  * NSConnection {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSConnection, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connectionForProxy.get(), );
 }}
  };
}

pub const NSDistantObject = opaque {
  const Self = @This();
  pub usingnamespace NSDistantObjectInterfaceMixin(Self, "NSDistantObject");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSDistantObject");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDistantObject");
  pub usingnamespace NSProxyInterfaceMixin(Self, "NSDistantObject");
};

pub fn NSAssertionHandlerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_handleFailureInMethod_object_file_lineNumber_description_ = CachedSelector.init("handleFailureInMethod:object:file:lineNumber:description:");
      pub fn handleFailureInMethodobjectfilelineNumberdescription(self: *Self, __selector: SEL, __object: id, __fileName:  * NSString, __line: c_long, __format:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id,  * NSString, c_long,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_handleFailureInMethod_object_file_lineNumber_description_.get(), __selector, __object, __fileName, __line, __format, );
 }}
var sel_handleFailureInFunction_file_lineNumber_description_ = CachedSelector.init("handleFailureInFunction:file:lineNumber:description:");
      pub fn handleFailureInFunctionfilelineNumberdescription(self: *Self, __functionName:  * NSString, __fileName:  * NSString, __line: c_long, __format:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, c_long,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_handleFailureInFunction_file_lineNumber_description_.get(), __functionName, __fileName, __line, __format, );
 }}
var sel_currentHandler = CachedSelector.init("currentHandler");
      pub fn currentHandler()  * NSAssertionHandler {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSAssertionHandler, @ptrCast(&objc_msgSend))(class.get(), sel_currentHandler.get(), );
 }}
  };
}

pub const NSAssertionHandler = opaque {
  const Self = @This();
  pub usingnamespace NSAssertionHandlerInterfaceMixin(Self, "NSAssertionHandler");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSAssertionHandler");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSAssertionHandler");
};

pub fn NSXMLDTDNodeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithXMLString_ = CachedSelector.init("initWithXMLString:");
      pub fn initWithXMLString(self: *Self, __string:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithXMLString_.get(), __string, );
 }}
var sel_initWithKind_options_ = CachedSelector.init("initWithKind:options:");
      pub fn initWithKindoptions(self: *Self, __kind: NSXMLNodeKind, __options: NSXMLNodeOptions, ) *Self {{
           return @as(*const fn(*Self, SEL, NSXMLNodeKind, NSXMLNodeOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKind_options_.get(), __kind, __options, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_DTDKind = CachedSelector.init("DTDKind");
      pub fn DTDKind(self: *Self, ) NSXMLDTDNodeKind {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSXMLDTDNodeKind, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_DTDKind.get(), );
 }}
var sel_setDTDKind_ = CachedSelector.init("setDTDKind:");
      pub fn setDTDKind(self: *Self, __DTDKind: NSXMLDTDNodeKind, ) void {{
           return @as(*const fn(*Self, SEL, NSXMLDTDNodeKind, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDTDKind_.get(), __DTDKind, );
 }}
var sel_isExternal = CachedSelector.init("isExternal");
      pub fn isExternal(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isExternal.get(), );
 }}
var sel_publicID = CachedSelector.init("publicID");
      pub fn publicID(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_publicID.get(), );
 }}
var sel_setPublicID_ = CachedSelector.init("setPublicID:");
      pub fn setPublicID(self: *Self, __publicID:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPublicID_.get(), __publicID, );
 }}
var sel_systemID = CachedSelector.init("systemID");
      pub fn systemID(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_systemID.get(), );
 }}
var sel_setSystemID_ = CachedSelector.init("setSystemID:");
      pub fn setSystemID(self: *Self, __systemID:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSystemID_.get(), __systemID, );
 }}
var sel_notationName = CachedSelector.init("notationName");
      pub fn notationName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_notationName.get(), );
 }}
var sel_setNotationName_ = CachedSelector.init("setNotationName:");
      pub fn setNotationName(self: *Self, __notationName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNotationName_.get(), __notationName, );
 }}
  };
}

pub const NSXMLDTDNode = opaque {
  const Self = @This();
  pub usingnamespace NSXMLDTDNodeInterfaceMixin(Self, "NSXMLDTDNode");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXMLDTDNode");
  pub usingnamespace NSXMLNodeInterfaceMixin(Self, "NSXMLDTDNode");
};

pub fn MTLAttributeDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __index: c_ulong, )  * MTLAttributeDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLAttributeDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __index, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attributeDesc:  ?* MTLAttributeDescriptor, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLAttributeDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attributeDesc, __index, );
 }}
  };
}

pub const MTLAttributeDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLAttributeDescriptorArrayInterfaceMixin(Self, "MTLAttributeDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAttributeDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLAttributeDescriptorArray");
};

pub fn NSFileSecurityInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
  };
}

pub const NSFileSecurity = opaque {
  const Self = @This();
  pub usingnamespace NSFileSecurityInterfaceMixin(Self, "NSFileSecurity");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSFileSecurity");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSFileSecurity");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileSecurity");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSFileSecurity");
};

pub fn NSCharacterSetInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_characterSetWithRange_ = CachedSelector.init("characterSetWithRange:");
      pub fn characterSetWithRange(__aRange: _NSRange, )  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, _NSRange, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_characterSetWithRange_.get(), __aRange, );
 }}
var sel_characterSetWithCharactersInString_ = CachedSelector.init("characterSetWithCharactersInString:");
      pub fn characterSetWithCharactersInString(__aString:  * NSString, )  * NSCharacterSet {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_characterSetWithCharactersInString_.get(), __aString, );
 }}
var sel_characterSetWithBitmapRepresentation_ = CachedSelector.init("characterSetWithBitmapRepresentation:");
      pub fn characterSetWithBitmapRepresentation(__data:  * NSData, )  * NSCharacterSet {{
           return @as(*const fn(Class, SEL,  * NSData, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_characterSetWithBitmapRepresentation_.get(), __data, );
 }}
var sel_characterSetWithContentsOfFile_ = CachedSelector.init("characterSetWithContentsOfFile:");
      pub fn characterSetWithContentsOfFile(__fName:  * NSString, )  ?* NSCharacterSet {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_characterSetWithContentsOfFile_.get(), __fName, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_characterIsMember_ = CachedSelector.init("characterIsMember:");
      pub fn characterIsMember(self: *Self, __aCharacter: c_ushort, ) c_int {{
           return @as(*const fn(*Self, SEL, c_ushort, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_characterIsMember_.get(), __aCharacter, );
 }}
var sel_longCharacterIsMember_ = CachedSelector.init("longCharacterIsMember:");
      pub fn longCharacterIsMember(self: *Self, __theLongChar: c_uint, ) c_int {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_longCharacterIsMember_.get(), __theLongChar, );
 }}
var sel_isSupersetOfSet_ = CachedSelector.init("isSupersetOfSet:");
      pub fn isSupersetOfSet(self: *Self, __theOtherSet:  * NSCharacterSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSupersetOfSet_.get(), __theOtherSet, );
 }}
var sel_hasMemberInPlane_ = CachedSelector.init("hasMemberInPlane:");
      pub fn hasMemberInPlane(self: *Self, __thePlane: u8, ) c_int {{
           return @as(*const fn(*Self, SEL, u8, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasMemberInPlane_.get(), __thePlane, );
 }}
var sel_controlCharacterSet = CachedSelector.init("controlCharacterSet");
      pub fn controlCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_controlCharacterSet.get(), );
 }}
var sel_whitespaceCharacterSet = CachedSelector.init("whitespaceCharacterSet");
      pub fn whitespaceCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_whitespaceCharacterSet.get(), );
 }}
var sel_whitespaceAndNewlineCharacterSet = CachedSelector.init("whitespaceAndNewlineCharacterSet");
      pub fn whitespaceAndNewlineCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_whitespaceAndNewlineCharacterSet.get(), );
 }}
var sel_decimalDigitCharacterSet = CachedSelector.init("decimalDigitCharacterSet");
      pub fn decimalDigitCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_decimalDigitCharacterSet.get(), );
 }}
var sel_letterCharacterSet = CachedSelector.init("letterCharacterSet");
      pub fn letterCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_letterCharacterSet.get(), );
 }}
var sel_lowercaseLetterCharacterSet = CachedSelector.init("lowercaseLetterCharacterSet");
      pub fn lowercaseLetterCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_lowercaseLetterCharacterSet.get(), );
 }}
var sel_uppercaseLetterCharacterSet = CachedSelector.init("uppercaseLetterCharacterSet");
      pub fn uppercaseLetterCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_uppercaseLetterCharacterSet.get(), );
 }}
var sel_nonBaseCharacterSet = CachedSelector.init("nonBaseCharacterSet");
      pub fn nonBaseCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_nonBaseCharacterSet.get(), );
 }}
var sel_alphanumericCharacterSet = CachedSelector.init("alphanumericCharacterSet");
      pub fn alphanumericCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_alphanumericCharacterSet.get(), );
 }}
var sel_decomposableCharacterSet = CachedSelector.init("decomposableCharacterSet");
      pub fn decomposableCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_decomposableCharacterSet.get(), );
 }}
var sel_illegalCharacterSet = CachedSelector.init("illegalCharacterSet");
      pub fn illegalCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_illegalCharacterSet.get(), );
 }}
var sel_punctuationCharacterSet = CachedSelector.init("punctuationCharacterSet");
      pub fn punctuationCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_punctuationCharacterSet.get(), );
 }}
var sel_capitalizedLetterCharacterSet = CachedSelector.init("capitalizedLetterCharacterSet");
      pub fn capitalizedLetterCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_capitalizedLetterCharacterSet.get(), );
 }}
var sel_symbolCharacterSet = CachedSelector.init("symbolCharacterSet");
      pub fn symbolCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_symbolCharacterSet.get(), );
 }}
var sel_newlineCharacterSet = CachedSelector.init("newlineCharacterSet");
      pub fn newlineCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_newlineCharacterSet.get(), );
 }}
var sel_bitmapRepresentation = CachedSelector.init("bitmapRepresentation");
      pub fn bitmapRepresentation(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bitmapRepresentation.get(), );
 }}
var sel_invertedSet = CachedSelector.init("invertedSet");
      pub fn invertedSet(self: *Self, )  * NSCharacterSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invertedSet.get(), );
 }}
var sel_URLUserAllowedCharacterSet = CachedSelector.init("URLUserAllowedCharacterSet");
      pub fn URLUserAllowedCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_URLUserAllowedCharacterSet.get(), );
 }}
var sel_URLPasswordAllowedCharacterSet = CachedSelector.init("URLPasswordAllowedCharacterSet");
      pub fn URLPasswordAllowedCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_URLPasswordAllowedCharacterSet.get(), );
 }}
var sel_URLHostAllowedCharacterSet = CachedSelector.init("URLHostAllowedCharacterSet");
      pub fn URLHostAllowedCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_URLHostAllowedCharacterSet.get(), );
 }}
var sel_URLPathAllowedCharacterSet = CachedSelector.init("URLPathAllowedCharacterSet");
      pub fn URLPathAllowedCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_URLPathAllowedCharacterSet.get(), );
 }}
var sel_URLQueryAllowedCharacterSet = CachedSelector.init("URLQueryAllowedCharacterSet");
      pub fn URLQueryAllowedCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_URLQueryAllowedCharacterSet.get(), );
 }}
var sel_URLFragmentAllowedCharacterSet = CachedSelector.init("URLFragmentAllowedCharacterSet");
      pub fn URLFragmentAllowedCharacterSet()  * NSCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_URLFragmentAllowedCharacterSet.get(), );
 }}
  };
}

pub const NSCharacterSet = opaque {
  const Self = @This();
  pub usingnamespace NSCharacterSetInterfaceMixin(Self, "NSCharacterSet");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSCharacterSet");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSCharacterSet");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSCharacterSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCharacterSet");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSCharacterSet");
};

pub fn NSUnitFuelEfficiencyInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_litersPer100Kilometers = CachedSelector.init("litersPer100Kilometers");
      pub fn litersPer100Kilometers()  * NSUnitFuelEfficiency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFuelEfficiency, @ptrCast(&objc_msgSend))(class.get(), sel_litersPer100Kilometers.get(), );
 }}
var sel_milesPerImperialGallon = CachedSelector.init("milesPerImperialGallon");
      pub fn milesPerImperialGallon()  * NSUnitFuelEfficiency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFuelEfficiency, @ptrCast(&objc_msgSend))(class.get(), sel_milesPerImperialGallon.get(), );
 }}
var sel_milesPerGallon = CachedSelector.init("milesPerGallon");
      pub fn milesPerGallon()  * NSUnitFuelEfficiency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFuelEfficiency, @ptrCast(&objc_msgSend))(class.get(), sel_milesPerGallon.get(), );
 }}
  };
}

pub const NSUnitFuelEfficiency = opaque {
  const Self = @This();
  pub usingnamespace NSUnitFuelEfficiencyInterfaceMixin(Self, "NSUnitFuelEfficiency");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitFuelEfficiency");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitFuelEfficiency");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitFuelEfficiency");
};

pub fn NSURLSessionDownloadTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_cancelByProducingResumeData_ = CachedSelector.init("cancelByProducingResumeData:");
      pub fn cancelByProducingResumeData(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancelByProducingResumeData_.get(), __completionHandler, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
  };
}

pub const NSURLSessionDownloadTask = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionDownloadTaskInterfaceMixin(Self, "NSURLSessionDownloadTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionDownloadTask");
  pub usingnamespace NSURLSessionTaskInterfaceMixin(Self, "NSURLSessionDownloadTask");
};

pub fn NSURLSessionWebSocketTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sendMessage_completionHandler_ = CachedSelector.init("sendMessage:completionHandler:");
      pub fn sendMessagecompletionHandler(self: *Self, __message:  * NSURLSessionWebSocketMessage, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSessionWebSocketMessage, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sendMessage_completionHandler_.get(), __message, __completionHandler, );
 }}
var sel_receiveMessageWithCompletionHandler_ = CachedSelector.init("receiveMessageWithCompletionHandler:");
      pub fn receiveMessageWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_receiveMessageWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_sendPingWithPongReceiveHandler_ = CachedSelector.init("sendPingWithPongReceiveHandler:");
      pub fn sendPingWithPongReceiveHandler(self: *Self, __pongReceiveHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sendPingWithPongReceiveHandler_.get(), __pongReceiveHandler, );
 }}
var sel_cancelWithCloseCode_reason_ = CachedSelector.init("cancelWithCloseCode:reason:");
      pub fn cancelWithCloseCodereason(self: *Self, __closeCode: NSURLSessionWebSocketCloseCode, __reason:  ?* NSData, ) void {{
           return @as(*const fn(*Self, SEL, NSURLSessionWebSocketCloseCode,  ?* NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancelWithCloseCode_reason_.get(), __closeCode, __reason, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_maximumMessageSize = CachedSelector.init("maximumMessageSize");
      pub fn maximumMessageSize(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maximumMessageSize.get(), );
 }}
var sel_setMaximumMessageSize_ = CachedSelector.init("setMaximumMessageSize:");
      pub fn setMaximumMessageSize(self: *Self, __maximumMessageSize: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaximumMessageSize_.get(), __maximumMessageSize, );
 }}
var sel_closeCode = CachedSelector.init("closeCode");
      pub fn closeCode(self: *Self, ) NSURLSessionWebSocketCloseCode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLSessionWebSocketCloseCode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_closeCode.get(), );
 }}
var sel_closeReason = CachedSelector.init("closeReason");
      pub fn closeReason(self: *Self, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_closeReason.get(), );
 }}
  };
}

pub const NSURLSessionWebSocketTask = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionWebSocketTaskInterfaceMixin(Self, "NSURLSessionWebSocketTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionWebSocketTask");
  pub usingnamespace NSURLSessionTaskInterfaceMixin(Self, "NSURLSessionWebSocketTask");
};

pub fn NSGetCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSGetCommand = opaque {
  const Self = @This();
  pub usingnamespace NSGetCommandInterfaceMixin(Self, "NSGetCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSGetCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSGetCommand");
};

pub fn NSPredicateInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_predicateWithFormat_argumentArray_ = CachedSelector.init("predicateWithFormat:argumentArray:");
      pub fn predicateWithFormatargumentArray(__predicateFormat:  * NSString, __arguments:  ?* NSArray, )  * NSPredicate {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSArray, ) callconv(.C)  * NSPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_predicateWithFormat_argumentArray_.get(), __predicateFormat, __arguments, );
 }}
var sel_predicateWithFormat_ = CachedSelector.init("predicateWithFormat:");
      pub fn predicateWithFormat(__predicateFormat:  * NSString, )  * NSPredicate {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_predicateWithFormat_.get(), __predicateFormat, );
 }}
var sel_predicateWithFormat_arguments_ = CachedSelector.init("predicateWithFormat:arguments:");
      pub fn predicateWithFormatarguments(__predicateFormat:  * NSString, __argList:  [*c] u8, )  * NSPredicate {{
           return @as(*const fn(Class, SEL,  * NSString,  [*c] u8, ) callconv(.C)  * NSPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_predicateWithFormat_arguments_.get(), __predicateFormat, __argList, );
 }}
var sel_predicateFromMetadataQueryString_ = CachedSelector.init("predicateFromMetadataQueryString:");
      pub fn predicateFromMetadataQueryString(__queryString:  * NSString, )  ?* NSPredicate {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_predicateFromMetadataQueryString_.get(), __queryString, );
 }}
var sel_predicateWithValue_ = CachedSelector.init("predicateWithValue:");
      pub fn predicateWithValue(__value: c_int, )  * NSPredicate {{
           return @as(*const fn(Class, SEL, c_int, ) callconv(.C)  * NSPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_predicateWithValue_.get(), __value, );
 }}
var sel_predicateWithBlock_ = CachedSelector.init("predicateWithBlock:");
      pub fn predicateWithBlock(__block: ?*u8, )  * NSPredicate {{
           return @as(*const fn(Class, SEL, ?*u8, ) callconv(.C)  * NSPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_predicateWithBlock_.get(), __block, );
 }}
var sel_predicateWithSubstitutionVariables_ = CachedSelector.init("predicateWithSubstitutionVariables:");
      pub fn predicateWithSubstitutionVariables(self: *Self, __variables:  * NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_predicateWithSubstitutionVariables_.get(), __variables, );
 }}
var sel_evaluateWithObject_ = CachedSelector.init("evaluateWithObject:");
      pub fn evaluateWithObject(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_evaluateWithObject_.get(), __object, );
 }}
var sel_evaluateWithObject_substitutionVariables_ = CachedSelector.init("evaluateWithObject:substitutionVariables:");
      pub fn evaluateWithObjectsubstitutionVariables(self: *Self, __object: id, __bindings:  ?* NSDictionary, ) c_int {{
           return @as(*const fn(*Self, SEL, id,  ?* NSDictionary, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_evaluateWithObject_substitutionVariables_.get(), __object, __bindings, );
 }}
var sel_allowEvaluation = CachedSelector.init("allowEvaluation");
      pub fn allowEvaluation(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowEvaluation.get(), );
 }}
var sel_predicateFormat = CachedSelector.init("predicateFormat");
      pub fn predicateFormat(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_predicateFormat.get(), );
 }}
  };
}

pub const NSPredicate = opaque {
  const Self = @This();
  pub usingnamespace NSPredicateInterfaceMixin(Self, "NSPredicate");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSPredicate");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSPredicate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPredicate");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPredicate");
};

pub fn NSConditionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_wait = CachedSelector.init("wait");
      pub fn wait(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_wait.get(), );
 }}
var sel_waitUntilDate_ = CachedSelector.init("waitUntilDate:");
      pub fn waitUntilDate(self: *Self, __limit:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitUntilDate_.get(), __limit, );
 }}
var sel_signal = CachedSelector.init("signal");
      pub fn signal(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_signal.get(), );
 }}
var sel_broadcast = CachedSelector.init("broadcast");
      pub fn broadcast(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_broadcast.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
  };
}

pub const NSCondition = opaque {
  const Self = @This();
  pub usingnamespace NSConditionInterfaceMixin(Self, "NSCondition");
  pub usingnamespace NSLockingProtocolMixin(Self, "NSCondition");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCondition");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSCondition");
};

pub fn NSInputStreamInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_read_maxLength_ = CachedSelector.init("read:maxLength:");
      pub fn readmaxLength(self: *Self, __buffer:  [*c] u8, __len: c_ulong, ) c_long {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_read_maxLength_.get(), __buffer, __len, );
 }}
var sel_getBuffer_length_ = CachedSelector.init("getBuffer:length:");
      pub fn getBufferlength(self: *Self, __buffer:  [*c]  [*c] u8, __len:  [*c] c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  [*c] u8,  [*c] c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getBuffer_length_.get(), __buffer, __len, );
 }}
var sel_initWithData_ = CachedSelector.init("initWithData:");
      pub fn initWithData(self: *Self, __data:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithData_.get(), __data, );
 }}
var sel_initWithURL_ = CachedSelector.init("initWithURL:");
      pub fn initWithURL(self: *Self, __url:  * NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_.get(), __url, );
 }}
var sel_hasBytesAvailable = CachedSelector.init("hasBytesAvailable");
      pub fn hasBytesAvailable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasBytesAvailable.get(), );
 }}
var sel_initWithFileAtPath_ = CachedSelector.init("initWithFileAtPath:");
      pub fn initWithFileAtPath(self: *Self, __path:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFileAtPath_.get(), __path, );
 }}
var sel_inputStreamWithData_ = CachedSelector.init("inputStreamWithData:");
      pub fn inputStreamWithData(__data:  * NSData, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_inputStreamWithData_.get(), __data, );
 }}
var sel_inputStreamWithFileAtPath_ = CachedSelector.init("inputStreamWithFileAtPath:");
      pub fn inputStreamWithFileAtPath(__path:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_inputStreamWithFileAtPath_.get(), __path, );
 }}
var sel_inputStreamWithURL_ = CachedSelector.init("inputStreamWithURL:");
      pub fn inputStreamWithURL(__url:  * NSURL, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_inputStreamWithURL_.get(), __url, );
 }}
  };
}

pub const NSInputStream = opaque {
  const Self = @This();
  pub usingnamespace NSInputStreamInterfaceMixin(Self, "NSInputStream");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSInputStream");
  pub usingnamespace NSStreamInterfaceMixin(Self, "NSInputStream");
};

pub fn NSValueInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_getValue_size_ = CachedSelector.init("getValue:size:");
      pub fn getValuesize(self: *Self, __value:  [*c] void, __size: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getValue_size_.get(), __value, __size, );
 }}
var sel_initWithBytes_objCType_ = CachedSelector.init("initWithBytes:objCType:");
      pub fn initWithBytesobjCType(self: *Self, __value:  [*c]  const void, __a_type:  [*c]  const u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c]  const void,  [*c]  const u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBytes_objCType_.get(), __value, __a_type, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_objCType = CachedSelector.init("objCType");
      pub fn objCType(self: *Self, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objCType.get(), );
 }}
var sel_valueWithBytes_objCType_ = CachedSelector.init("valueWithBytes:objCType:");
      pub fn valueWithBytesobjCType(__value:  [*c]  const void, __a_type:  [*c]  const u8, )  * NSValue {{
           return @as(*const fn(Class, SEL,  [*c]  const void,  [*c]  const u8, ) callconv(.C)  * NSValue, @ptrCast(&objc_msgSend))(class.get(), sel_valueWithBytes_objCType_.get(), __value, __a_type, );
 }}
var sel_value_withObjCType_ = CachedSelector.init("value:withObjCType:");
      pub fn valuewithObjCType(__value:  [*c]  const void, __a_type:  [*c]  const u8, )  * NSValue {{
           return @as(*const fn(Class, SEL,  [*c]  const void,  [*c]  const u8, ) callconv(.C)  * NSValue, @ptrCast(&objc_msgSend))(class.get(), sel_value_withObjCType_.get(), __value, __a_type, );
 }}
var sel_valueWithNonretainedObject_ = CachedSelector.init("valueWithNonretainedObject:");
      pub fn valueWithNonretainedObject(__anObject: id, )  * NSValue {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C)  * NSValue, @ptrCast(&objc_msgSend))(class.get(), sel_valueWithNonretainedObject_.get(), __anObject, );
 }}
var sel_valueWithPointer_ = CachedSelector.init("valueWithPointer:");
      pub fn valueWithPointer(__pointer:  [*c]  const void, )  * NSValue {{
           return @as(*const fn(Class, SEL,  [*c]  const void, ) callconv(.C)  * NSValue, @ptrCast(&objc_msgSend))(class.get(), sel_valueWithPointer_.get(), __pointer, );
 }}
var sel_isEqualToValue_ = CachedSelector.init("isEqualToValue:");
      pub fn isEqualToValue(self: *Self, __value:  * NSValue, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSValue, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToValue_.get(), __value, );
 }}
var sel_nonretainedObjectValue = CachedSelector.init("nonretainedObjectValue");
      pub fn nonretainedObjectValue(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nonretainedObjectValue.get(), );
 }}
var sel_pointerValue = CachedSelector.init("pointerValue");
      pub fn pointerValue(self: *Self, )  [*c] void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pointerValue.get(), );
 }}
var sel_getValue_ = CachedSelector.init("getValue:");
      pub fn getValue(self: *Self, __value:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getValue_.get(), __value, );
 }}
var sel_valueWithRange_ = CachedSelector.init("valueWithRange:");
      pub fn valueWithRange(__range: _NSRange, )  * NSValue {{
           return @as(*const fn(Class, SEL, _NSRange, ) callconv(.C)  * NSValue, @ptrCast(&objc_msgSend))(class.get(), sel_valueWithRange_.get(), __range, );
 }}
var sel_rangeValue = CachedSelector.init("rangeValue");
      pub fn rangeValue(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeValue.get(), );
 }}
var sel_valueWithPoint_ = CachedSelector.init("valueWithPoint:");
      pub fn valueWithPoint(__point: CGPoint, )  * NSValue {{
           return @as(*const fn(Class, SEL, CGPoint, ) callconv(.C)  * NSValue, @ptrCast(&objc_msgSend))(class.get(), sel_valueWithPoint_.get(), __point, );
 }}
var sel_valueWithSize_ = CachedSelector.init("valueWithSize:");
      pub fn valueWithSize(__size: CGSize, )  * NSValue {{
           return @as(*const fn(Class, SEL, CGSize, ) callconv(.C)  * NSValue, @ptrCast(&objc_msgSend))(class.get(), sel_valueWithSize_.get(), __size, );
 }}
var sel_valueWithRect_ = CachedSelector.init("valueWithRect:");
      pub fn valueWithRect(__rect: CGRect, )  * NSValue {{
           return @as(*const fn(Class, SEL, CGRect, ) callconv(.C)  * NSValue, @ptrCast(&objc_msgSend))(class.get(), sel_valueWithRect_.get(), __rect, );
 }}
var sel_valueWithEdgeInsets_ = CachedSelector.init("valueWithEdgeInsets:");
      pub fn valueWithEdgeInsets(__insets: NSEdgeInsets, )  * NSValue {{
           return @as(*const fn(Class, SEL, NSEdgeInsets, ) callconv(.C)  * NSValue, @ptrCast(&objc_msgSend))(class.get(), sel_valueWithEdgeInsets_.get(), __insets, );
 }}
var sel_pointValue = CachedSelector.init("pointValue");
      pub fn pointValue(self: *Self, ) CGPoint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) CGPoint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pointValue.get(), );
 }}
var sel_sizeValue = CachedSelector.init("sizeValue");
      pub fn sizeValue(self: *Self, ) CGSize {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) CGSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sizeValue.get(), );
 }}
var sel_rectValue = CachedSelector.init("rectValue");
      pub fn rectValue(self: *Self, ) CGRect {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) CGRect, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rectValue.get(), );
 }}
var sel_edgeInsetsValue = CachedSelector.init("edgeInsetsValue");
      pub fn edgeInsetsValue(self: *Self, ) NSEdgeInsets {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSEdgeInsets, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_edgeInsetsValue.get(), );
 }}
  };
}

pub const NSValue = opaque {
  const Self = @This();
  pub usingnamespace NSValueInterfaceMixin(Self, "NSValue");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSValue");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSValue");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSValue");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSValue");
};

pub fn MTLSharedTextureHandleInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_device = CachedSelector.init("device");
      pub fn device(self: *Self, )  * MTLDevice {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLDevice, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_device.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
  };
}

pub const MTLSharedTextureHandle = opaque {
  const Self = @This();
  pub usingnamespace MTLSharedTextureHandleInterfaceMixin(Self, "MTLSharedTextureHandle");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "MTLSharedTextureHandle");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLSharedTextureHandle");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLSharedTextureHandle");
};

pub fn NSConstantStringInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSConstantString = opaque {
  const Self = @This();
  pub usingnamespace NSConstantStringInterfaceMixin(Self, "NSConstantString");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSConstantString");
  pub usingnamespace NSSimpleCStringInterfaceMixin(Self, "NSConstantString");
};

pub fn NSTimeZoneInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_secondsFromGMTForDate_ = CachedSelector.init("secondsFromGMTForDate:");
      pub fn secondsFromGMTForDate(self: *Self, __aDate:  * NSDate, ) c_long {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_secondsFromGMTForDate_.get(), __aDate, );
 }}
var sel_abbreviationForDate_ = CachedSelector.init("abbreviationForDate:");
      pub fn abbreviationForDate(self: *Self, __aDate:  * NSDate, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_abbreviationForDate_.get(), __aDate, );
 }}
var sel_isDaylightSavingTimeForDate_ = CachedSelector.init("isDaylightSavingTimeForDate:");
      pub fn isDaylightSavingTimeForDate(self: *Self, __aDate:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDaylightSavingTimeForDate_.get(), __aDate, );
 }}
var sel_daylightSavingTimeOffsetForDate_ = CachedSelector.init("daylightSavingTimeOffsetForDate:");
      pub fn daylightSavingTimeOffsetForDate(self: *Self, __aDate:  * NSDate, ) f64 {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_daylightSavingTimeOffsetForDate_.get(), __aDate, );
 }}
var sel_nextDaylightSavingTimeTransitionAfterDate_ = CachedSelector.init("nextDaylightSavingTimeTransitionAfterDate:");
      pub fn nextDaylightSavingTimeTransitionAfterDate(self: *Self, __aDate:  * NSDate, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nextDaylightSavingTimeTransitionAfterDate_.get(), __aDate, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_data = CachedSelector.init("data");
      pub fn data(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_data.get(), );
 }}
var sel_resetSystemTimeZone = CachedSelector.init("resetSystemTimeZone");
      pub fn resetSystemTimeZone() void {{
           return @as(*const fn(Class, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_resetSystemTimeZone.get(), );
 }}
var sel_abbreviationDictionary = CachedSelector.init("abbreviationDictionary");
      pub fn abbreviationDictionary()  * NSDictionary {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_abbreviationDictionary.get(), );
 }}
var sel_isEqualToTimeZone_ = CachedSelector.init("isEqualToTimeZone:");
      pub fn isEqualToTimeZone(self: *Self, __aTimeZone:  * NSTimeZone, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSTimeZone, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToTimeZone_.get(), __aTimeZone, );
 }}
var sel_localizedName_locale_ = CachedSelector.init("localizedName:locale:");
      pub fn localizedNamelocale(self: *Self, __style: NSTimeZoneNameStyle, __locale:  ?* NSLocale, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, NSTimeZoneNameStyle,  ?* NSLocale, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedName_locale_.get(), __style, __locale, );
 }}
var sel_systemTimeZone = CachedSelector.init("systemTimeZone");
      pub fn systemTimeZone()  * NSTimeZone {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSTimeZone, @ptrCast(&objc_msgSend))(class.get(), sel_systemTimeZone.get(), );
 }}
var sel_defaultTimeZone = CachedSelector.init("defaultTimeZone");
      pub fn defaultTimeZone()  * NSTimeZone {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSTimeZone, @ptrCast(&objc_msgSend))(class.get(), sel_defaultTimeZone.get(), );
 }}
var sel_setDefaultTimeZone_ = CachedSelector.init("setDefaultTimeZone:");
      pub fn setDefaultTimeZone(__defaultTimeZone:  * NSTimeZone, ) void {{
           return @as(*const fn(Class, SEL,  * NSTimeZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setDefaultTimeZone_.get(), __defaultTimeZone, );
 }}
var sel_localTimeZone = CachedSelector.init("localTimeZone");
      pub fn localTimeZone()  * NSTimeZone {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSTimeZone, @ptrCast(&objc_msgSend))(class.get(), sel_localTimeZone.get(), );
 }}
var sel_knownTimeZoneNames = CachedSelector.init("knownTimeZoneNames");
      pub fn knownTimeZoneNames()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_knownTimeZoneNames.get(), );
 }}
var sel_setAbbreviationDictionary_ = CachedSelector.init("setAbbreviationDictionary:");
      pub fn setAbbreviationDictionary(__abbreviationDictionary:  * NSDictionary, ) void {{
           return @as(*const fn(Class, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setAbbreviationDictionary_.get(), __abbreviationDictionary, );
 }}
var sel_timeZoneDataVersion = CachedSelector.init("timeZoneDataVersion");
      pub fn timeZoneDataVersion()  * NSString {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_timeZoneDataVersion.get(), );
 }}
var sel_secondsFromGMT = CachedSelector.init("secondsFromGMT");
      pub fn secondsFromGMT(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_secondsFromGMT.get(), );
 }}
var sel_abbreviation = CachedSelector.init("abbreviation");
      pub fn abbreviation(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_abbreviation.get(), );
 }}
var sel_isDaylightSavingTime = CachedSelector.init("isDaylightSavingTime");
      pub fn isDaylightSavingTime(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDaylightSavingTime.get(), );
 }}
var sel_daylightSavingTimeOffset = CachedSelector.init("daylightSavingTimeOffset");
      pub fn daylightSavingTimeOffset(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_daylightSavingTimeOffset.get(), );
 }}
var sel_nextDaylightSavingTimeTransition = CachedSelector.init("nextDaylightSavingTimeTransition");
      pub fn nextDaylightSavingTimeTransition(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nextDaylightSavingTimeTransition.get(), );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_timeZoneWithName_ = CachedSelector.init("timeZoneWithName:");
      pub fn timeZoneWithName(__tzName:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_timeZoneWithName_.get(), __tzName, );
 }}
var sel_timeZoneWithName_data_ = CachedSelector.init("timeZoneWithName:data:");
      pub fn timeZoneWithNamedata(__tzName:  * NSString, __aData:  ?* NSData, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_timeZoneWithName_data_.get(), __tzName, __aData, );
 }}
var sel_initWithName_ = CachedSelector.init("initWithName:");
      pub fn initWithName(self: *Self, __tzName:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithName_.get(), __tzName, );
 }}
var sel_initWithName_data_ = CachedSelector.init("initWithName:data:");
      pub fn initWithNamedata(self: *Self, __tzName:  * NSString, __aData:  ?* NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithName_data_.get(), __tzName, __aData, );
 }}
var sel_timeZoneForSecondsFromGMT_ = CachedSelector.init("timeZoneForSecondsFromGMT:");
      pub fn timeZoneForSecondsFromGMT(__seconds: c_long, ) *Self {{
           return @as(*const fn(Class, SEL, c_long, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_timeZoneForSecondsFromGMT_.get(), __seconds, );
 }}
var sel_timeZoneWithAbbreviation_ = CachedSelector.init("timeZoneWithAbbreviation:");
      pub fn timeZoneWithAbbreviation(__abbreviation:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_timeZoneWithAbbreviation_.get(), __abbreviation, );
 }}
  };
}

pub const NSTimeZone = opaque {
  const Self = @This();
  pub usingnamespace NSTimeZoneInterfaceMixin(Self, "NSTimeZone");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSTimeZone");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSTimeZone");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSTimeZone");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSTimeZone");
};

pub fn NSDataInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_length = CachedSelector.init("length");
      pub fn length(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_length.get(), );
 }}
var sel_bytes = CachedSelector.init("bytes");
      pub fn bytes(self: *Self, )  [*c]  const void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c]  const void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bytes.get(), );
 }}
var sel_getBytes_length_ = CachedSelector.init("getBytes:length:");
      pub fn getByteslength(self: *Self, __buffer:  [*c] void, __length: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getBytes_length_.get(), __buffer, __length, );
 }}
var sel_getBytes_range_ = CachedSelector.init("getBytes:range:");
      pub fn getBytesrange(self: *Self, __buffer:  [*c] void, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getBytes_range_.get(), __buffer, __range, );
 }}
var sel_isEqualToData_ = CachedSelector.init("isEqualToData:");
      pub fn isEqualToData(self: *Self, __other:  * NSData, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToData_.get(), __other, );
 }}
var sel_subdataWithRange_ = CachedSelector.init("subdataWithRange:");
      pub fn subdataWithRange(self: *Self, __range: _NSRange, )  * NSData {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_subdataWithRange_.get(), __range, );
 }}
var sel_writeToFile_atomically_ = CachedSelector.init("writeToFile:atomically:");
      pub fn writeToFileatomically(self: *Self, __path:  * NSString, __useAuxiliaryFile: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToFile_atomically_.get(), __path, __useAuxiliaryFile, );
 }}
var sel_writeToURL_atomically_ = CachedSelector.init("writeToURL:atomically:");
      pub fn writeToURLatomically(self: *Self, __url:  * NSURL, __atomically: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToURL_atomically_.get(), __url, __atomically, );
 }}
var sel_writeToFile_options_error_ = CachedSelector.init("writeToFile:options:error:");
      pub fn writeToFileoptionserror(self: *Self, __path:  * NSString, __writeOptionsMask: NSDataWritingOptions, __errorPtr:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, NSDataWritingOptions,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToFile_options_error_.get(), __path, __writeOptionsMask, __errorPtr, );
 }}
var sel_writeToURL_options_error_ = CachedSelector.init("writeToURL:options:error:");
      pub fn writeToURLoptionserror(self: *Self, __url:  * NSURL, __writeOptionsMask: NSDataWritingOptions, __errorPtr:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSDataWritingOptions,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToURL_options_error_.get(), __url, __writeOptionsMask, __errorPtr, );
 }}
var sel_rangeOfData_options_range_ = CachedSelector.init("rangeOfData:options:range:");
      pub fn rangeOfDataoptionsrange(self: *Self, __dataToFind:  * NSData, __mask: NSDataSearchOptions, __searchRange: _NSRange, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSData, NSDataSearchOptions, _NSRange, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfData_options_range_.get(), __dataToFind, __mask, __searchRange, );
 }}
var sel_enumerateByteRangesUsingBlock_ = CachedSelector.init("enumerateByteRangesUsingBlock:");
      pub fn enumerateByteRangesUsingBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateByteRangesUsingBlock_.get(), __block, );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_data = CachedSelector.init("data");
      pub fn data() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_data.get(), );
 }}
var sel_dataWithBytes_length_ = CachedSelector.init("dataWithBytes:length:");
      pub fn dataWithByteslength(__bytes:  [*c]  const void, __length: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL,  [*c]  const void, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithBytes_length_.get(), __bytes, __length, );
 }}
var sel_dataWithBytesNoCopy_length_ = CachedSelector.init("dataWithBytesNoCopy:length:");
      pub fn dataWithBytesNoCopylength(__bytes:  [*c] void, __length: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL,  [*c] void, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithBytesNoCopy_length_.get(), __bytes, __length, );
 }}
var sel_dataWithBytesNoCopy_length_freeWhenDone_ = CachedSelector.init("dataWithBytesNoCopy:length:freeWhenDone:");
      pub fn dataWithBytesNoCopylengthfreeWhenDone(__bytes:  [*c] void, __length: c_ulong, __b: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  [*c] void, c_ulong, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithBytesNoCopy_length_freeWhenDone_.get(), __bytes, __length, __b, );
 }}
var sel_dataWithContentsOfFile_options_error_ = CachedSelector.init("dataWithContentsOfFile:options:error:");
      pub fn dataWithContentsOfFileoptionserror(__path:  * NSString, __readOptionsMask: NSDataReadingOptions, __errorPtr:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, NSDataReadingOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithContentsOfFile_options_error_.get(), __path, __readOptionsMask, __errorPtr, );
 }}
var sel_dataWithContentsOfURL_options_error_ = CachedSelector.init("dataWithContentsOfURL:options:error:");
      pub fn dataWithContentsOfURLoptionserror(__url:  * NSURL, __readOptionsMask: NSDataReadingOptions, __errorPtr:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, NSDataReadingOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithContentsOfURL_options_error_.get(), __url, __readOptionsMask, __errorPtr, );
 }}
var sel_dataWithContentsOfFile_ = CachedSelector.init("dataWithContentsOfFile:");
      pub fn dataWithContentsOfFile(__path:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithContentsOfFile_.get(), __path, );
 }}
var sel_dataWithContentsOfURL_ = CachedSelector.init("dataWithContentsOfURL:");
      pub fn dataWithContentsOfURL(__url:  * NSURL, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithContentsOfURL_.get(), __url, );
 }}
var sel_initWithBytes_length_ = CachedSelector.init("initWithBytes:length:");
      pub fn initWithByteslength(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBytes_length_.get(), __bytes, __length, );
 }}
var sel_initWithBytesNoCopy_length_ = CachedSelector.init("initWithBytesNoCopy:length:");
      pub fn initWithBytesNoCopylength(self: *Self, __bytes:  [*c] void, __length: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBytesNoCopy_length_.get(), __bytes, __length, );
 }}
var sel_initWithBytesNoCopy_length_freeWhenDone_ = CachedSelector.init("initWithBytesNoCopy:length:freeWhenDone:");
      pub fn initWithBytesNoCopylengthfreeWhenDone(self: *Self, __bytes:  [*c] void, __length: c_ulong, __b: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBytesNoCopy_length_freeWhenDone_.get(), __bytes, __length, __b, );
 }}
var sel_initWithBytesNoCopy_length_deallocator_ = CachedSelector.init("initWithBytesNoCopy:length:deallocator:");
      pub fn initWithBytesNoCopylengthdeallocator(self: *Self, __bytes:  [*c] void, __length: c_ulong, __deallocator: ?*u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, ?*u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBytesNoCopy_length_deallocator_.get(), __bytes, __length, __deallocator, );
 }}
var sel_initWithContentsOfFile_options_error_ = CachedSelector.init("initWithContentsOfFile:options:error:");
      pub fn initWithContentsOfFileoptionserror(self: *Self, __path:  * NSString, __readOptionsMask: NSDataReadingOptions, __errorPtr:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, NSDataReadingOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfFile_options_error_.get(), __path, __readOptionsMask, __errorPtr, );
 }}
var sel_initWithContentsOfURL_options_error_ = CachedSelector.init("initWithContentsOfURL:options:error:");
      pub fn initWithContentsOfURLoptionserror(self: *Self, __url:  * NSURL, __readOptionsMask: NSDataReadingOptions, __errorPtr:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSDataReadingOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_options_error_.get(), __url, __readOptionsMask, __errorPtr, );
 }}
var sel_initWithContentsOfFile_ = CachedSelector.init("initWithContentsOfFile:");
      pub fn initWithContentsOfFile(self: *Self, __path:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfFile_.get(), __path, );
 }}
var sel_initWithContentsOfURL_ = CachedSelector.init("initWithContentsOfURL:");
      pub fn initWithContentsOfURL(self: *Self, __url:  * NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_.get(), __url, );
 }}
var sel_initWithData_ = CachedSelector.init("initWithData:");
      pub fn initWithData(self: *Self, __data:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithData_.get(), __data, );
 }}
var sel_dataWithData_ = CachedSelector.init("dataWithData:");
      pub fn dataWithData(__data:  * NSData, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithData_.get(), __data, );
 }}
var sel_initWithBase64EncodedString_options_ = CachedSelector.init("initWithBase64EncodedString:options:");
      pub fn initWithBase64EncodedStringoptions(self: *Self, __base64String:  * NSString, __options: NSDataBase64DecodingOptions, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, NSDataBase64DecodingOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBase64EncodedString_options_.get(), __base64String, __options, );
 }}
var sel_base64EncodedStringWithOptions_ = CachedSelector.init("base64EncodedStringWithOptions:");
      pub fn base64EncodedStringWithOptions(self: *Self, __options: NSDataBase64EncodingOptions, )  * NSString {{
           return @as(*const fn(*Self, SEL, NSDataBase64EncodingOptions, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_base64EncodedStringWithOptions_.get(), __options, );
 }}
var sel_initWithBase64EncodedData_options_ = CachedSelector.init("initWithBase64EncodedData:options:");
      pub fn initWithBase64EncodedDataoptions(self: *Self, __base64Data:  * NSData, __options: NSDataBase64DecodingOptions, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, NSDataBase64DecodingOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBase64EncodedData_options_.get(), __base64Data, __options, );
 }}
var sel_base64EncodedDataWithOptions_ = CachedSelector.init("base64EncodedDataWithOptions:");
      pub fn base64EncodedDataWithOptions(self: *Self, __options: NSDataBase64EncodingOptions, )  * NSData {{
           return @as(*const fn(*Self, SEL, NSDataBase64EncodingOptions, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_base64EncodedDataWithOptions_.get(), __options, );
 }}
var sel_decompressedDataUsingAlgorithm_error_ = CachedSelector.init("decompressedDataUsingAlgorithm:error:");
      pub fn decompressedDataUsingAlgorithmerror(self: *Self, __algorithm: NSDataCompressionAlgorithm, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL, NSDataCompressionAlgorithm,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decompressedDataUsingAlgorithm_error_.get(), __algorithm, __an_error, );
 }}
var sel_compressedDataUsingAlgorithm_error_ = CachedSelector.init("compressedDataUsingAlgorithm:error:");
      pub fn compressedDataUsingAlgorithmerror(self: *Self, __algorithm: NSDataCompressionAlgorithm, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL, NSDataCompressionAlgorithm,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compressedDataUsingAlgorithm_error_.get(), __algorithm, __an_error, );
 }}
var sel_getBytes_ = CachedSelector.init("getBytes:");
      pub fn getBytes(self: *Self, __buffer:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getBytes_.get(), __buffer, );
 }}
var sel_dataWithContentsOfMappedFile_ = CachedSelector.init("dataWithContentsOfMappedFile:");
      pub fn dataWithContentsOfMappedFile(__path:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithContentsOfMappedFile_.get(), __path, );
 }}
var sel_initWithContentsOfMappedFile_ = CachedSelector.init("initWithContentsOfMappedFile:");
      pub fn initWithContentsOfMappedFile(self: *Self, __path:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfMappedFile_.get(), __path, );
 }}
var sel_initWithBase64Encoding_ = CachedSelector.init("initWithBase64Encoding:");
      pub fn initWithBase64Encoding(self: *Self, __base64String:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBase64Encoding_.get(), __base64String, );
 }}
var sel_base64Encoding = CachedSelector.init("base64Encoding");
      pub fn base64Encoding(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_base64Encoding.get(), );
 }}
  };
}

pub const NSData = opaque {
  const Self = @This();
  pub usingnamespace NSDataInterfaceMixin(Self, "NSData");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSData");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSData");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSData");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSData");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSData");
};

pub fn MTLAccelerationStructurePassSampleBufferAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sampleBuffer = CachedSelector.init("sampleBuffer");
      pub fn sampleBuffer(self: *Self, )  ?* MTLCounterSampleBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCounterSampleBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBuffer.get(), );
 }}
var sel_setSampleBuffer_ = CachedSelector.init("setSampleBuffer:");
      pub fn setSampleBuffer(self: *Self, __sampleBuffer:  ?* MTLCounterSampleBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLCounterSampleBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSampleBuffer_.get(), __sampleBuffer, );
 }}
var sel_startOfEncoderSampleIndex = CachedSelector.init("startOfEncoderSampleIndex");
      pub fn startOfEncoderSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startOfEncoderSampleIndex.get(), );
 }}
var sel_setStartOfEncoderSampleIndex_ = CachedSelector.init("setStartOfEncoderSampleIndex:");
      pub fn setStartOfEncoderSampleIndex(self: *Self, __startOfEncoderSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStartOfEncoderSampleIndex_.get(), __startOfEncoderSampleIndex, );
 }}
var sel_endOfEncoderSampleIndex = CachedSelector.init("endOfEncoderSampleIndex");
      pub fn endOfEncoderSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endOfEncoderSampleIndex.get(), );
 }}
var sel_setEndOfEncoderSampleIndex_ = CachedSelector.init("setEndOfEncoderSampleIndex:");
      pub fn setEndOfEncoderSampleIndex(self: *Self, __endOfEncoderSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEndOfEncoderSampleIndex_.get(), __endOfEncoderSampleIndex, );
 }}
  };
}

pub const MTLAccelerationStructurePassSampleBufferAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructurePassSampleBufferAttachmentDescriptorInterfaceMixin(Self, "MTLAccelerationStructurePassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLAccelerationStructurePassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructurePassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLAccelerationStructurePassSampleBufferAttachmentDescriptor");
};

pub fn NSURLHandleInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_registerURLHandleClass_ = CachedSelector.init("registerURLHandleClass:");
      pub fn registerURLHandleClass(__anURLHandleSubclass: Class, ) void {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_registerURLHandleClass_.get(), __anURLHandleSubclass, );
 }}
var sel_URLHandleClassForURL_ = CachedSelector.init("URLHandleClassForURL:");
      pub fn URLHandleClassForURL(__anURL:  * NSURL, ) Class {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(class.get(), sel_URLHandleClassForURL_.get(), __anURL, );
 }}
var sel_status = CachedSelector.init("status");
      pub fn status(self: *Self, ) NSURLHandleStatus {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLHandleStatus, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_status.get(), );
 }}
var sel_failureReason = CachedSelector.init("failureReason");
      pub fn failureReason(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_failureReason.get(), );
 }}
var sel_addClient_ = CachedSelector.init("addClient:");
      pub fn addClient(self: *Self, __client:  * NSURLHandleClient, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLHandleClient, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addClient_.get(), __client, );
 }}
var sel_removeClient_ = CachedSelector.init("removeClient:");
      pub fn removeClient(self: *Self, __client:  * NSURLHandleClient, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLHandleClient, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeClient_.get(), __client, );
 }}
var sel_loadInBackground = CachedSelector.init("loadInBackground");
      pub fn loadInBackground(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadInBackground.get(), );
 }}
var sel_cancelLoadInBackground = CachedSelector.init("cancelLoadInBackground");
      pub fn cancelLoadInBackground(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancelLoadInBackground.get(), );
 }}
var sel_resourceData = CachedSelector.init("resourceData");
      pub fn resourceData(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceData.get(), );
 }}
var sel_availableResourceData = CachedSelector.init("availableResourceData");
      pub fn availableResourceData(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_availableResourceData.get(), );
 }}
var sel_expectedResourceDataSize = CachedSelector.init("expectedResourceDataSize");
      pub fn expectedResourceDataSize(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_expectedResourceDataSize.get(), );
 }}
var sel_flushCachedData = CachedSelector.init("flushCachedData");
      pub fn flushCachedData(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_flushCachedData.get(), );
 }}
var sel_backgroundLoadDidFailWithReason_ = CachedSelector.init("backgroundLoadDidFailWithReason:");
      pub fn backgroundLoadDidFailWithReason(self: *Self, __reason:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_backgroundLoadDidFailWithReason_.get(), __reason, );
 }}
var sel_didLoadBytes_loadComplete_ = CachedSelector.init("didLoadBytes:loadComplete:");
      pub fn didLoadBytesloadComplete(self: *Self, __newBytes:  * NSData, __yorn: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSData, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_didLoadBytes_loadComplete_.get(), __newBytes, __yorn, );
 }}
var sel_canInitWithURL_ = CachedSelector.init("canInitWithURL:");
      pub fn canInitWithURL(__anURL:  * NSURL, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_canInitWithURL_.get(), __anURL, );
 }}
var sel_cachedHandleForURL_ = CachedSelector.init("cachedHandleForURL:");
      pub fn cachedHandleForURL(__anURL:  * NSURL, )  * NSURLHandle {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  * NSURLHandle, @ptrCast(&objc_msgSend))(class.get(), sel_cachedHandleForURL_.get(), __anURL, );
 }}
var sel_initWithURL_cached_ = CachedSelector.init("initWithURL:cached:");
      pub fn initWithURLcached(self: *Self, __anURL:  * NSURL, __willCache: c_int, ) id {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_int, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_cached_.get(), __anURL, __willCache, );
 }}
var sel_propertyForKey_ = CachedSelector.init("propertyForKey:");
      pub fn propertyForKey(self: *Self, __propertyKey:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_propertyForKey_.get(), __propertyKey, );
 }}
var sel_propertyForKeyIfAvailable_ = CachedSelector.init("propertyForKeyIfAvailable:");
      pub fn propertyForKeyIfAvailable(self: *Self, __propertyKey:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_propertyForKeyIfAvailable_.get(), __propertyKey, );
 }}
var sel_writeProperty_forKey_ = CachedSelector.init("writeProperty:forKey:");
      pub fn writePropertyforKey(self: *Self, __propertyValue: id, __propertyKey:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeProperty_forKey_.get(), __propertyValue, __propertyKey, );
 }}
var sel_writeData_ = CachedSelector.init("writeData:");
      pub fn writeData(self: *Self, __data:  * NSData, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeData_.get(), __data, );
 }}
var sel_loadInForeground = CachedSelector.init("loadInForeground");
      pub fn loadInForeground(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadInForeground.get(), );
 }}
var sel_beginLoadInBackground = CachedSelector.init("beginLoadInBackground");
      pub fn beginLoadInBackground(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_beginLoadInBackground.get(), );
 }}
var sel_endLoadInBackground = CachedSelector.init("endLoadInBackground");
      pub fn endLoadInBackground(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endLoadInBackground.get(), );
 }}
  };
}

pub const NSURLHandle = opaque {
  const Self = @This();
  pub usingnamespace NSURLHandleInterfaceMixin(Self, "NSURLHandle");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLHandle");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLHandle");
};

pub fn NSAttributedStringMarkdownParsingOptionsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_allowsExtendedAttributes = CachedSelector.init("allowsExtendedAttributes");
      pub fn allowsExtendedAttributes(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsExtendedAttributes.get(), );
 }}
var sel_setAllowsExtendedAttributes_ = CachedSelector.init("setAllowsExtendedAttributes:");
      pub fn setAllowsExtendedAttributes(self: *Self, __allowsExtendedAttributes: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsExtendedAttributes_.get(), __allowsExtendedAttributes, );
 }}
var sel_interpretedSyntax = CachedSelector.init("interpretedSyntax");
      pub fn interpretedSyntax(self: *Self, ) NSAttributedStringMarkdownInterpretedSyntax {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSAttributedStringMarkdownInterpretedSyntax, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_interpretedSyntax.get(), );
 }}
var sel_setInterpretedSyntax_ = CachedSelector.init("setInterpretedSyntax:");
      pub fn setInterpretedSyntax(self: *Self, __interpretedSyntax: NSAttributedStringMarkdownInterpretedSyntax, ) void {{
           return @as(*const fn(*Self, SEL, NSAttributedStringMarkdownInterpretedSyntax, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInterpretedSyntax_.get(), __interpretedSyntax, );
 }}
var sel_failurePolicy = CachedSelector.init("failurePolicy");
      pub fn failurePolicy(self: *Self, ) NSAttributedStringMarkdownParsingFailurePolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSAttributedStringMarkdownParsingFailurePolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_failurePolicy.get(), );
 }}
var sel_setFailurePolicy_ = CachedSelector.init("setFailurePolicy:");
      pub fn setFailurePolicy(self: *Self, __failurePolicy: NSAttributedStringMarkdownParsingFailurePolicy, ) void {{
           return @as(*const fn(*Self, SEL, NSAttributedStringMarkdownParsingFailurePolicy, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFailurePolicy_.get(), __failurePolicy, );
 }}
var sel_languageCode = CachedSelector.init("languageCode");
      pub fn languageCode(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_languageCode.get(), );
 }}
var sel_setLanguageCode_ = CachedSelector.init("setLanguageCode:");
      pub fn setLanguageCode(self: *Self, __languageCode:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLanguageCode_.get(), __languageCode, );
 }}
var sel_appliesSourcePositionAttributes = CachedSelector.init("appliesSourcePositionAttributes");
      pub fn appliesSourcePositionAttributes(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appliesSourcePositionAttributes.get(), );
 }}
var sel_setAppliesSourcePositionAttributes_ = CachedSelector.init("setAppliesSourcePositionAttributes:");
      pub fn setAppliesSourcePositionAttributes(self: *Self, __appliesSourcePositionAttributes: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAppliesSourcePositionAttributes_.get(), __appliesSourcePositionAttributes, );
 }}
  };
}

pub const NSAttributedStringMarkdownParsingOptions = opaque {
  const Self = @This();
  pub usingnamespace NSAttributedStringMarkdownParsingOptionsInterfaceMixin(Self, "NSAttributedStringMarkdownParsingOptions");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSAttributedStringMarkdownParsingOptions");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSAttributedStringMarkdownParsingOptions");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSAttributedStringMarkdownParsingOptions");
};

pub fn NSXPCCoderInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_encodeXPCObject_forKey_ = CachedSelector.init("encodeXPCObject:forKey:");
      pub fn encodeXPCObjectforKey(self: *Self, __xpcObject:  * NSObject, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeXPCObject_forKey_.get(), __xpcObject, __key, );
 }}
var sel_decodeXPCObjectOfType_forKey_ = CachedSelector.init("decodeXPCObjectOfType:forKey:");
      pub fn decodeXPCObjectOfTypeforKey(self: *Self, __a_type:  [*c] _xpc_type_s, __key:  * NSString, )  ?* NSObject {{
           return @as(*const fn(*Self, SEL,  [*c] _xpc_type_s,  * NSString, ) callconv(.C)  ?* NSObject, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeXPCObjectOfType_forKey_.get(), __a_type, __key, );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, )  ?* NSObject {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSObject, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
var sel_setUserInfo_ = CachedSelector.init("setUserInfo:");
      pub fn setUserInfo(self: *Self, __userInfo:  ?* NSObject, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSObject, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUserInfo_.get(), __userInfo, );
 }}
var sel_connection = CachedSelector.init("connection");
      pub fn connection(self: *Self, )  ?* NSXPCConnection {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXPCConnection, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection.get(), );
 }}
  };
}

pub const NSXPCCoder = opaque {
  const Self = @This();
  pub usingnamespace NSXPCCoderInterfaceMixin(Self, "NSXPCCoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXPCCoder");
  pub usingnamespace NSCoderInterfaceMixin(Self, "NSXPCCoder");
};

pub fn NSSetCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setReceiversSpecifier_ = CachedSelector.init("setReceiversSpecifier:");
      pub fn setReceiversSpecifier(self: *Self, __receiversRef:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReceiversSpecifier_.get(), __receiversRef, );
 }}
var sel_keySpecifier = CachedSelector.init("keySpecifier");
      pub fn keySpecifier(self: *Self, )  * NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keySpecifier.get(), );
 }}
  };
}

pub const NSSetCommand = opaque {
  const Self = @This();
  pub usingnamespace NSSetCommandInterfaceMixin(Self, "NSSetCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSetCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSSetCommand");
};

pub fn NSSimpleCStringInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSSimpleCString = opaque {
  const Self = @This();
  pub usingnamespace NSSimpleCStringInterfaceMixin(Self, "NSSimpleCString");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSimpleCString");
  pub usingnamespace NSStringInterfaceMixin(Self, "NSSimpleCString");
};

pub fn MTLStructMemberInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_structType = CachedSelector.init("structType");
      pub fn structType(self: *Self, )  ?* MTLStructType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLStructType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_structType.get(), );
 }}
var sel_arrayType = CachedSelector.init("arrayType");
      pub fn arrayType(self: *Self, )  ?* MTLArrayType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLArrayType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayType.get(), );
 }}
var sel_textureReferenceType = CachedSelector.init("textureReferenceType");
      pub fn textureReferenceType(self: *Self, )  ?* MTLTextureReferenceType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLTextureReferenceType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureReferenceType.get(), );
 }}
var sel_pointerType = CachedSelector.init("pointerType");
      pub fn pointerType(self: *Self, )  ?* MTLPointerType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLPointerType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pointerType.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_offset = CachedSelector.init("offset");
      pub fn offset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_offset.get(), );
 }}
var sel_dataType = CachedSelector.init("dataType");
      pub fn dataType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataType.get(), );
 }}
var sel_argumentIndex = CachedSelector.init("argumentIndex");
      pub fn argumentIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_argumentIndex.get(), );
 }}
  };
}

pub const MTLStructMember = opaque {
  const Self = @This();
  pub usingnamespace MTLStructMemberInterfaceMixin(Self, "MTLStructMember");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLStructMember");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLStructMember");
};

pub fn NSProgressInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_currentProgress = CachedSelector.init("currentProgress");
      pub fn currentProgress()  ?* NSProgress {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  ?* NSProgress, @ptrCast(&objc_msgSend))(class.get(), sel_currentProgress.get(), );
 }}
var sel_progressWithTotalUnitCount_ = CachedSelector.init("progressWithTotalUnitCount:");
      pub fn progressWithTotalUnitCount(__unitCount: c_longlong, )  * NSProgress {{
           return @as(*const fn(Class, SEL, c_longlong, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(class.get(), sel_progressWithTotalUnitCount_.get(), __unitCount, );
 }}
var sel_discreteProgressWithTotalUnitCount_ = CachedSelector.init("discreteProgressWithTotalUnitCount:");
      pub fn discreteProgressWithTotalUnitCount(__unitCount: c_longlong, )  * NSProgress {{
           return @as(*const fn(Class, SEL, c_longlong, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(class.get(), sel_discreteProgressWithTotalUnitCount_.get(), __unitCount, );
 }}
var sel_progressWithTotalUnitCount_parent_pendingUnitCount_ = CachedSelector.init("progressWithTotalUnitCount:parent:pendingUnitCount:");
      pub fn progressWithTotalUnitCountparentpendingUnitCount(__unitCount: c_longlong, __parent:  * NSProgress, __portionOfParentTotalUnitCount: c_longlong, )  * NSProgress {{
           return @as(*const fn(Class, SEL, c_longlong,  * NSProgress, c_longlong, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(class.get(), sel_progressWithTotalUnitCount_parent_pendingUnitCount_.get(), __unitCount, __parent, __portionOfParentTotalUnitCount, );
 }}
var sel_initWithParent_userInfo_ = CachedSelector.init("initWithParent:userInfo:");
      pub fn initWithParentuserInfo(self: *Self, __parentProgressOrNil:  ?* NSProgress, __userInfoOrNil:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSProgress,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithParent_userInfo_.get(), __parentProgressOrNil, __userInfoOrNil, );
 }}
var sel_becomeCurrentWithPendingUnitCount_ = CachedSelector.init("becomeCurrentWithPendingUnitCount:");
      pub fn becomeCurrentWithPendingUnitCount(self: *Self, __unitCount: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_becomeCurrentWithPendingUnitCount_.get(), __unitCount, );
 }}
var sel_performAsCurrentWithPendingUnitCount_usingBlock_ = CachedSelector.init("performAsCurrentWithPendingUnitCount:usingBlock:");
      pub fn performAsCurrentWithPendingUnitCountusingBlock(self: *Self, __unitCount: c_longlong, __work: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, c_longlong, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performAsCurrentWithPendingUnitCount_usingBlock_.get(), __unitCount, __work, );
 }}
var sel_resignCurrent = CachedSelector.init("resignCurrent");
      pub fn resignCurrent(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resignCurrent.get(), );
 }}
var sel_addChild_withPendingUnitCount_ = CachedSelector.init("addChild:withPendingUnitCount:");
      pub fn addChildwithPendingUnitCount(self: *Self, __child:  * NSProgress, __inUnitCount: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSProgress, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addChild_withPendingUnitCount_.get(), __child, __inUnitCount, );
 }}
var sel_setUserInfoObject_forKey_ = CachedSelector.init("setUserInfoObject:forKey:");
      pub fn setUserInfoObjectforKey(self: *Self, __objectOrNil: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUserInfoObject_forKey_.get(), __objectOrNil, __key, );
 }}
var sel_cancel = CachedSelector.init("cancel");
      pub fn cancel(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancel.get(), );
 }}
var sel_pause = CachedSelector.init("pause");
      pub fn pause(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pause.get(), );
 }}
var sel_resume = CachedSelector.init("resume");
      pub fn _resume(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resume.get(), );
 }}
var sel_publish = CachedSelector.init("publish");
      pub fn publish(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_publish.get(), );
 }}
var sel_unpublish = CachedSelector.init("unpublish");
      pub fn unpublish(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unpublish.get(), );
 }}
var sel_addSubscriberForFileURL_withPublishingHandler_ = CachedSelector.init("addSubscriberForFileURL:withPublishingHandler:");
      pub fn addSubscriberForFileURLwithPublishingHandler(__url:  * NSURL, __publishingHandler: ?*u8, ) id {{
           return @as(*const fn(Class, SEL,  * NSURL, ?*u8, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_addSubscriberForFileURL_withPublishingHandler_.get(), __url, __publishingHandler, );
 }}
var sel_removeSubscriber_ = CachedSelector.init("removeSubscriber:");
      pub fn removeSubscriber(__subscriber: id, ) void {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_removeSubscriber_.get(), __subscriber, );
 }}
var sel_totalUnitCount = CachedSelector.init("totalUnitCount");
      pub fn totalUnitCount(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_totalUnitCount.get(), );
 }}
var sel_setTotalUnitCount_ = CachedSelector.init("setTotalUnitCount:");
      pub fn setTotalUnitCount(self: *Self, __totalUnitCount: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTotalUnitCount_.get(), __totalUnitCount, );
 }}
var sel_completedUnitCount = CachedSelector.init("completedUnitCount");
      pub fn completedUnitCount(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_completedUnitCount.get(), );
 }}
var sel_setCompletedUnitCount_ = CachedSelector.init("setCompletedUnitCount:");
      pub fn setCompletedUnitCount(self: *Self, __completedUnitCount: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCompletedUnitCount_.get(), __completedUnitCount, );
 }}
var sel_localizedDescription = CachedSelector.init("localizedDescription");
      pub fn localizedDescription(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedDescription.get(), );
 }}
var sel_setLocalizedDescription_ = CachedSelector.init("setLocalizedDescription:");
      pub fn setLocalizedDescription(self: *Self, __localizedDescription:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocalizedDescription_.get(), __localizedDescription, );
 }}
var sel_localizedAdditionalDescription = CachedSelector.init("localizedAdditionalDescription");
      pub fn localizedAdditionalDescription(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedAdditionalDescription.get(), );
 }}
var sel_setLocalizedAdditionalDescription_ = CachedSelector.init("setLocalizedAdditionalDescription:");
      pub fn setLocalizedAdditionalDescription(self: *Self, __localizedAdditionalDescription:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocalizedAdditionalDescription_.get(), __localizedAdditionalDescription, );
 }}
var sel_isCancellable = CachedSelector.init("isCancellable");
      pub fn isCancellable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isCancellable.get(), );
 }}
var sel_setCancellable_ = CachedSelector.init("setCancellable:");
      pub fn setCancellable(self: *Self, __cancellable: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCancellable_.get(), __cancellable, );
 }}
var sel_isPausable = CachedSelector.init("isPausable");
      pub fn isPausable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPausable.get(), );
 }}
var sel_setPausable_ = CachedSelector.init("setPausable:");
      pub fn setPausable(self: *Self, __pausable: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPausable_.get(), __pausable, );
 }}
var sel_isCancelled = CachedSelector.init("isCancelled");
      pub fn isCancelled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isCancelled.get(), );
 }}
var sel_isPaused = CachedSelector.init("isPaused");
      pub fn isPaused(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPaused.get(), );
 }}
var sel_cancellationHandler = CachedSelector.init("cancellationHandler");
      pub fn cancellationHandler(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancellationHandler.get(), );
 }}
var sel_setCancellationHandler_ = CachedSelector.init("setCancellationHandler:");
      pub fn setCancellationHandler(self: *Self, __cancellationHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCancellationHandler_.get(), __cancellationHandler, );
 }}
var sel_pausingHandler = CachedSelector.init("pausingHandler");
      pub fn pausingHandler(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pausingHandler.get(), );
 }}
var sel_setPausingHandler_ = CachedSelector.init("setPausingHandler:");
      pub fn setPausingHandler(self: *Self, __pausingHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPausingHandler_.get(), __pausingHandler, );
 }}
var sel_resumingHandler = CachedSelector.init("resumingHandler");
      pub fn resumingHandler(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resumingHandler.get(), );
 }}
var sel_setResumingHandler_ = CachedSelector.init("setResumingHandler:");
      pub fn setResumingHandler(self: *Self, __resumingHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResumingHandler_.get(), __resumingHandler, );
 }}
var sel_isIndeterminate = CachedSelector.init("isIndeterminate");
      pub fn isIndeterminate(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isIndeterminate.get(), );
 }}
var sel_fractionCompleted = CachedSelector.init("fractionCompleted");
      pub fn fractionCompleted(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fractionCompleted.get(), );
 }}
var sel_isFinished = CachedSelector.init("isFinished");
      pub fn isFinished(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isFinished.get(), );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
var sel_kind = CachedSelector.init("kind");
      pub fn kind(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_kind.get(), );
 }}
var sel_setKind_ = CachedSelector.init("setKind:");
      pub fn setKind(self: *Self, __kind:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setKind_.get(), __kind, );
 }}
var sel_estimatedTimeRemaining = CachedSelector.init("estimatedTimeRemaining");
      pub fn estimatedTimeRemaining(self: *Self, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_estimatedTimeRemaining.get(), );
 }}
var sel_setEstimatedTimeRemaining_ = CachedSelector.init("setEstimatedTimeRemaining:");
      pub fn setEstimatedTimeRemaining(self: *Self, __estimatedTimeRemaining:  * NSNumber, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEstimatedTimeRemaining_.get(), __estimatedTimeRemaining, );
 }}
var sel_throughput = CachedSelector.init("throughput");
      pub fn throughput(self: *Self, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_throughput.get(), );
 }}
var sel_setThroughput_ = CachedSelector.init("setThroughput:");
      pub fn setThroughput(self: *Self, __throughput:  * NSNumber, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setThroughput_.get(), __throughput, );
 }}
var sel_fileOperationKind = CachedSelector.init("fileOperationKind");
      pub fn fileOperationKind(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileOperationKind.get(), );
 }}
var sel_setFileOperationKind_ = CachedSelector.init("setFileOperationKind:");
      pub fn setFileOperationKind(self: *Self, __fileOperationKind:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFileOperationKind_.get(), __fileOperationKind, );
 }}
var sel_fileURL = CachedSelector.init("fileURL");
      pub fn fileURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileURL.get(), );
 }}
var sel_setFileURL_ = CachedSelector.init("setFileURL:");
      pub fn setFileURL(self: *Self, __fileURL:  ?* NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFileURL_.get(), __fileURL, );
 }}
var sel_fileTotalCount = CachedSelector.init("fileTotalCount");
      pub fn fileTotalCount(self: *Self, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileTotalCount.get(), );
 }}
var sel_setFileTotalCount_ = CachedSelector.init("setFileTotalCount:");
      pub fn setFileTotalCount(self: *Self, __fileTotalCount:  * NSNumber, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFileTotalCount_.get(), __fileTotalCount, );
 }}
var sel_fileCompletedCount = CachedSelector.init("fileCompletedCount");
      pub fn fileCompletedCount(self: *Self, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileCompletedCount.get(), );
 }}
var sel_setFileCompletedCount_ = CachedSelector.init("setFileCompletedCount:");
      pub fn setFileCompletedCount(self: *Self, __fileCompletedCount:  * NSNumber, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFileCompletedCount_.get(), __fileCompletedCount, );
 }}
var sel_isOld = CachedSelector.init("isOld");
      pub fn isOld(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isOld.get(), );
 }}
  };
}

pub const NSProgress = opaque {
  const Self = @This();
  pub usingnamespace NSProgressInterfaceMixin(Self, "NSProgress");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSProgress");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSProgress");
};

pub fn NSScannerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithString_ = CachedSelector.init("initWithString:");
      pub fn initWithString(self: *Self, __string:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_.get(), __string, );
 }}
var sel_string = CachedSelector.init("string");
      pub fn string(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_string.get(), );
 }}
var sel_scanLocation = CachedSelector.init("scanLocation");
      pub fn scanLocation(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanLocation.get(), );
 }}
var sel_setScanLocation_ = CachedSelector.init("setScanLocation:");
      pub fn setScanLocation(self: *Self, __scanLocation: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScanLocation_.get(), __scanLocation, );
 }}
var sel_charactersToBeSkipped = CachedSelector.init("charactersToBeSkipped");
      pub fn charactersToBeSkipped(self: *Self, )  ?* NSCharacterSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSCharacterSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_charactersToBeSkipped.get(), );
 }}
var sel_setCharactersToBeSkipped_ = CachedSelector.init("setCharactersToBeSkipped:");
      pub fn setCharactersToBeSkipped(self: *Self, __charactersToBeSkipped:  ?* NSCharacterSet, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSCharacterSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCharactersToBeSkipped_.get(), __charactersToBeSkipped, );
 }}
var sel_caseSensitive = CachedSelector.init("caseSensitive");
      pub fn caseSensitive(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_caseSensitive.get(), );
 }}
var sel_setCaseSensitive_ = CachedSelector.init("setCaseSensitive:");
      pub fn setCaseSensitive(self: *Self, __caseSensitive: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCaseSensitive_.get(), __caseSensitive, );
 }}
var sel_locale = CachedSelector.init("locale");
      pub fn locale(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locale.get(), );
 }}
var sel_setLocale_ = CachedSelector.init("setLocale:");
      pub fn setLocale(self: *Self, __locale: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocale_.get(), __locale, );
 }}
var sel_scanInt_ = CachedSelector.init("scanInt:");
      pub fn scanInt(self: *Self, __result:  [*c] c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanInt_.get(), __result, );
 }}
var sel_scanInteger_ = CachedSelector.init("scanInteger:");
      pub fn scanInteger(self: *Self, __result:  [*c] c_long, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] c_long, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanInteger_.get(), __result, );
 }}
var sel_scanLongLong_ = CachedSelector.init("scanLongLong:");
      pub fn scanLongLong(self: *Self, __result:  [*c] c_longlong, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] c_longlong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanLongLong_.get(), __result, );
 }}
var sel_scanUnsignedLongLong_ = CachedSelector.init("scanUnsignedLongLong:");
      pub fn scanUnsignedLongLong(self: *Self, __result:  [*c] c_ulonglong, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulonglong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanUnsignedLongLong_.get(), __result, );
 }}
var sel_scanFloat_ = CachedSelector.init("scanFloat:");
      pub fn scanFloat(self: *Self, __result:  [*c] f32, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] f32, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanFloat_.get(), __result, );
 }}
var sel_scanDouble_ = CachedSelector.init("scanDouble:");
      pub fn scanDouble(self: *Self, __result:  [*c] f64, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] f64, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanDouble_.get(), __result, );
 }}
var sel_scanHexInt_ = CachedSelector.init("scanHexInt:");
      pub fn scanHexInt(self: *Self, __result:  [*c] c_uint, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] c_uint, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanHexInt_.get(), __result, );
 }}
var sel_scanHexLongLong_ = CachedSelector.init("scanHexLongLong:");
      pub fn scanHexLongLong(self: *Self, __result:  [*c] c_ulonglong, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulonglong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanHexLongLong_.get(), __result, );
 }}
var sel_scanHexFloat_ = CachedSelector.init("scanHexFloat:");
      pub fn scanHexFloat(self: *Self, __result:  [*c] f32, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] f32, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanHexFloat_.get(), __result, );
 }}
var sel_scanHexDouble_ = CachedSelector.init("scanHexDouble:");
      pub fn scanHexDouble(self: *Self, __result:  [*c] f64, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] f64, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanHexDouble_.get(), __result, );
 }}
var sel_scanString_intoString_ = CachedSelector.init("scanString:intoString:");
      pub fn scanStringintoString(self: *Self, __string:  * NSString, __result:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanString_intoString_.get(), __string, __result, );
 }}
var sel_scanCharactersFromSet_intoString_ = CachedSelector.init("scanCharactersFromSet:intoString:");
      pub fn scanCharactersFromSetintoString(self: *Self, __set:  * NSCharacterSet, __result:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanCharactersFromSet_intoString_.get(), __set, __result, );
 }}
var sel_scanUpToString_intoString_ = CachedSelector.init("scanUpToString:intoString:");
      pub fn scanUpToStringintoString(self: *Self, __string:  * NSString, __result:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanUpToString_intoString_.get(), __string, __result, );
 }}
var sel_scanUpToCharactersFromSet_intoString_ = CachedSelector.init("scanUpToCharactersFromSet:intoString:");
      pub fn scanUpToCharactersFromSetintoString(self: *Self, __set:  * NSCharacterSet, __result:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanUpToCharactersFromSet_intoString_.get(), __set, __result, );
 }}
var sel_scannerWithString_ = CachedSelector.init("scannerWithString:");
      pub fn scannerWithString(__string:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_scannerWithString_.get(), __string, );
 }}
var sel_localizedScannerWithString_ = CachedSelector.init("localizedScannerWithString:");
      pub fn localizedScannerWithString(__string:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_localizedScannerWithString_.get(), __string, );
 }}
var sel_isAtEnd = CachedSelector.init("isAtEnd");
      pub fn isAtEnd(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAtEnd.get(), );
 }}
var sel_scanDecimal_ = CachedSelector.init("scanDecimal:");
      pub fn scanDecimal(self: *Self, __dcm:  [*c] NSDecimal, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] NSDecimal, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scanDecimal_.get(), __dcm, );
 }}
  };
}

pub const NSScanner = opaque {
  const Self = @This();
  pub usingnamespace NSScannerInterfaceMixin(Self, "NSScanner");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSScanner");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSScanner");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSScanner");
};

pub fn NSExtensionContextInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_completeRequestReturningItems_completionHandler_ = CachedSelector.init("completeRequestReturningItems:completionHandler:");
      pub fn completeRequestReturningItemscompletionHandler(self: *Self, __items:  ?* NSArray, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_completeRequestReturningItems_completionHandler_.get(), __items, __completionHandler, );
 }}
var sel_cancelRequestWithError_ = CachedSelector.init("cancelRequestWithError:");
      pub fn cancelRequestWithError(self: *Self, __an_error:  * NSError, ) void {{
           return @as(*const fn(*Self, SEL,  * NSError, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancelRequestWithError_.get(), __an_error, );
 }}
var sel_openURL_completionHandler_ = CachedSelector.init("openURL:completionHandler:");
      pub fn openURLcompletionHandler(self: *Self, __URL:  * NSURL, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_openURL_completionHandler_.get(), __URL, __completionHandler, );
 }}
var sel_inputItems = CachedSelector.init("inputItems");
      pub fn inputItems(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_inputItems.get(), );
 }}
  };
}

pub const NSExtensionContext = opaque {
  const Self = @This();
  pub usingnamespace NSExtensionContextInterfaceMixin(Self, "NSExtensionContext");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSExtensionContext");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSExtensionContext");
};

pub fn NSProcessInfoInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_operatingSystem = CachedSelector.init("operatingSystem");
      pub fn operatingSystem(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_operatingSystem.get(), );
 }}
var sel_operatingSystemName = CachedSelector.init("operatingSystemName");
      pub fn operatingSystemName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_operatingSystemName.get(), );
 }}
var sel_isOperatingSystemAtLeastVersion_ = CachedSelector.init("isOperatingSystemAtLeastVersion:");
      pub fn isOperatingSystemAtLeastVersion(self: *Self, __version: NSOperatingSystemVersion, ) c_int {{
           return @as(*const fn(*Self, SEL, NSOperatingSystemVersion, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isOperatingSystemAtLeastVersion_.get(), __version, );
 }}
var sel_disableSuddenTermination = CachedSelector.init("disableSuddenTermination");
      pub fn disableSuddenTermination(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_disableSuddenTermination.get(), );
 }}
var sel_enableSuddenTermination = CachedSelector.init("enableSuddenTermination");
      pub fn enableSuddenTermination(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enableSuddenTermination.get(), );
 }}
var sel_disableAutomaticTermination_ = CachedSelector.init("disableAutomaticTermination:");
      pub fn disableAutomaticTermination(self: *Self, __reason:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_disableAutomaticTermination_.get(), __reason, );
 }}
var sel_enableAutomaticTermination_ = CachedSelector.init("enableAutomaticTermination:");
      pub fn enableAutomaticTermination(self: *Self, __reason:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enableAutomaticTermination_.get(), __reason, );
 }}
var sel_processInfo = CachedSelector.init("processInfo");
      pub fn processInfo()  * NSProcessInfo {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSProcessInfo, @ptrCast(&objc_msgSend))(class.get(), sel_processInfo.get(), );
 }}
var sel_environment = CachedSelector.init("environment");
      pub fn environment(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_environment.get(), );
 }}
var sel_arguments = CachedSelector.init("arguments");
      pub fn arguments(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arguments.get(), );
 }}
var sel_hostName = CachedSelector.init("hostName");
      pub fn hostName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hostName.get(), );
 }}
var sel_processName = CachedSelector.init("processName");
      pub fn processName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_processName.get(), );
 }}
var sel_setProcessName_ = CachedSelector.init("setProcessName:");
      pub fn setProcessName(self: *Self, __processName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setProcessName_.get(), __processName, );
 }}
var sel_processIdentifier = CachedSelector.init("processIdentifier");
      pub fn processIdentifier(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_processIdentifier.get(), );
 }}
var sel_globallyUniqueString = CachedSelector.init("globallyUniqueString");
      pub fn globallyUniqueString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_globallyUniqueString.get(), );
 }}
var sel_operatingSystemVersionString = CachedSelector.init("operatingSystemVersionString");
      pub fn operatingSystemVersionString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_operatingSystemVersionString.get(), );
 }}
var sel_operatingSystemVersion = CachedSelector.init("operatingSystemVersion");
      pub fn operatingSystemVersion(self: *Self, ) NSOperatingSystemVersion {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSOperatingSystemVersion, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_operatingSystemVersion.get(), );
 }}
var sel_processorCount = CachedSelector.init("processorCount");
      pub fn processorCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_processorCount.get(), );
 }}
var sel_activeProcessorCount = CachedSelector.init("activeProcessorCount");
      pub fn activeProcessorCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_activeProcessorCount.get(), );
 }}
var sel_physicalMemory = CachedSelector.init("physicalMemory");
      pub fn physicalMemory(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_physicalMemory.get(), );
 }}
var sel_systemUptime = CachedSelector.init("systemUptime");
      pub fn systemUptime(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_systemUptime.get(), );
 }}
var sel_automaticTerminationSupportEnabled = CachedSelector.init("automaticTerminationSupportEnabled");
      pub fn automaticTerminationSupportEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_automaticTerminationSupportEnabled.get(), );
 }}
var sel_setAutomaticTerminationSupportEnabled_ = CachedSelector.init("setAutomaticTerminationSupportEnabled:");
      pub fn setAutomaticTerminationSupportEnabled(self: *Self, __automaticTerminationSupportEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAutomaticTerminationSupportEnabled_.get(), __automaticTerminationSupportEnabled, );
 }}
var sel_beginActivityWithOptions_reason_ = CachedSelector.init("beginActivityWithOptions:reason:");
      pub fn beginActivityWithOptionsreason(self: *Self, __options: NSActivityOptions, __reason:  * NSString, )  * NSObject {{
           return @as(*const fn(*Self, SEL, NSActivityOptions,  * NSString, ) callconv(.C)  * NSObject, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_beginActivityWithOptions_reason_.get(), __options, __reason, );
 }}
var sel_endActivity_ = CachedSelector.init("endActivity:");
      pub fn endActivity(self: *Self, __activity:  * NSObject, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endActivity_.get(), __activity, );
 }}
var sel_performActivityWithOptions_reason_usingBlock_ = CachedSelector.init("performActivityWithOptions:reason:usingBlock:");
      pub fn performActivityWithOptionsreasonusingBlock(self: *Self, __options: NSActivityOptions, __reason:  * NSString, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSActivityOptions,  * NSString, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performActivityWithOptions_reason_usingBlock_.get(), __options, __reason, __block, );
 }}
var sel_performExpiringActivityWithReason_usingBlock_ = CachedSelector.init("performExpiringActivityWithReason:usingBlock:");
      pub fn performExpiringActivityWithReasonusingBlock(self: *Self, __reason:  * NSString, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performExpiringActivityWithReason_usingBlock_.get(), __reason, __block, );
 }}
var sel_userName = CachedSelector.init("userName");
      pub fn userName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userName.get(), );
 }}
var sel_fullUserName = CachedSelector.init("fullUserName");
      pub fn fullUserName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fullUserName.get(), );
 }}
var sel_thermalState = CachedSelector.init("thermalState");
      pub fn thermalState(self: *Self, ) NSProcessInfoThermalState {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSProcessInfoThermalState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_thermalState.get(), );
 }}
var sel_isLowPowerModeEnabled = CachedSelector.init("isLowPowerModeEnabled");
      pub fn isLowPowerModeEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLowPowerModeEnabled.get(), );
 }}
var sel_isMacCatalystApp = CachedSelector.init("isMacCatalystApp");
      pub fn isMacCatalystApp(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isMacCatalystApp.get(), );
 }}
var sel_isiOSAppOnMac = CachedSelector.init("isiOSAppOnMac");
      pub fn isiOSAppOnMac(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isiOSAppOnMac.get(), );
 }}
  };
}

pub const NSProcessInfo = opaque {
  const Self = @This();
  pub usingnamespace NSProcessInfoInterfaceMixin(Self, "NSProcessInfo");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSProcessInfo");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSProcessInfo");
};

pub fn MTLPipelineBufferDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_mutability = CachedSelector.init("mutability");
      pub fn mutability(self: *Self, ) MTLMutability {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLMutability, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutability.get(), );
 }}
var sel_setMutability_ = CachedSelector.init("setMutability:");
      pub fn setMutability(self: *Self, __mutability: MTLMutability, ) void {{
           return @as(*const fn(*Self, SEL, MTLMutability, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMutability_.get(), __mutability, );
 }}
  };
}

pub const MTLPipelineBufferDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLPipelineBufferDescriptorInterfaceMixin(Self, "MTLPipelineBufferDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLPipelineBufferDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLPipelineBufferDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLPipelineBufferDescriptor");
};

pub fn MTLBlitPassSampleBufferAttachmentDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __attachmentIndex: c_ulong, )  * MTLBlitPassSampleBufferAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLBlitPassSampleBufferAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __attachmentIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attachment:  ?* MTLBlitPassSampleBufferAttachmentDescriptor, __attachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBlitPassSampleBufferAttachmentDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attachment, __attachmentIndex, );
 }}
  };
}

pub const MTLBlitPassSampleBufferAttachmentDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLBlitPassSampleBufferAttachmentDescriptorArrayInterfaceMixin(Self, "MTLBlitPassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBlitPassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLBlitPassSampleBufferAttachmentDescriptorArray");
};

pub fn MTLTextureDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_ = CachedSelector.init("texture2DDescriptorWithPixelFormat:width:height:mipmapped:");
      pub fn texture2DDescriptorWithPixelFormatwidthheightmipmapped(__pixelFormat: MTLPixelFormat, __width: c_ulong, __height: c_ulong, __mipmapped: c_int, )  * MTLTextureDescriptor {{
           return @as(*const fn(Class, SEL, MTLPixelFormat, c_ulong, c_ulong, c_int, ) callconv(.C)  * MTLTextureDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_.get(), __pixelFormat, __width, __height, __mipmapped, );
 }}
var sel_textureCubeDescriptorWithPixelFormat_size_mipmapped_ = CachedSelector.init("textureCubeDescriptorWithPixelFormat:size:mipmapped:");
      pub fn textureCubeDescriptorWithPixelFormatsizemipmapped(__pixelFormat: MTLPixelFormat, __size: c_ulong, __mipmapped: c_int, )  * MTLTextureDescriptor {{
           return @as(*const fn(Class, SEL, MTLPixelFormat, c_ulong, c_int, ) callconv(.C)  * MTLTextureDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_textureCubeDescriptorWithPixelFormat_size_mipmapped_.get(), __pixelFormat, __size, __mipmapped, );
 }}
var sel_textureBufferDescriptorWithPixelFormat_width_resourceOptions_usage_ = CachedSelector.init("textureBufferDescriptorWithPixelFormat:width:resourceOptions:usage:");
      pub fn textureBufferDescriptorWithPixelFormatwidthresourceOptionsusage(__pixelFormat: MTLPixelFormat, __width: c_ulong, __resourceOptions: MTLResourceOptions, __usage: MTLTextureUsage, )  * MTLTextureDescriptor {{
           return @as(*const fn(Class, SEL, MTLPixelFormat, c_ulong, MTLResourceOptions, MTLTextureUsage, ) callconv(.C)  * MTLTextureDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_textureBufferDescriptorWithPixelFormat_width_resourceOptions_usage_.get(), __pixelFormat, __width, __resourceOptions, __usage, );
 }}
var sel_textureType = CachedSelector.init("textureType");
      pub fn textureType(self: *Self, ) MTLTextureType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureType.get(), );
 }}
var sel_setTextureType_ = CachedSelector.init("setTextureType:");
      pub fn setTextureType(self: *Self, __textureType: MTLTextureType, ) void {{
           return @as(*const fn(*Self, SEL, MTLTextureType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextureType_.get(), __textureType, );
 }}
var sel_pixelFormat = CachedSelector.init("pixelFormat");
      pub fn pixelFormat(self: *Self, ) MTLPixelFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPixelFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pixelFormat.get(), );
 }}
var sel_setPixelFormat_ = CachedSelector.init("setPixelFormat:");
      pub fn setPixelFormat(self: *Self, __pixelFormat: MTLPixelFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPixelFormat_.get(), __pixelFormat, );
 }}
var sel_width = CachedSelector.init("width");
      pub fn width(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_width.get(), );
 }}
var sel_setWidth_ = CachedSelector.init("setWidth:");
      pub fn setWidth(self: *Self, __width: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWidth_.get(), __width, );
 }}
var sel_height = CachedSelector.init("height");
      pub fn height(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_height.get(), );
 }}
var sel_setHeight_ = CachedSelector.init("setHeight:");
      pub fn setHeight(self: *Self, __height: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHeight_.get(), __height, );
 }}
var sel_depth = CachedSelector.init("depth");
      pub fn depth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depth.get(), );
 }}
var sel_setDepth_ = CachedSelector.init("setDepth:");
      pub fn setDepth(self: *Self, __depth: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepth_.get(), __depth, );
 }}
var sel_mipmapLevelCount = CachedSelector.init("mipmapLevelCount");
      pub fn mipmapLevelCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mipmapLevelCount.get(), );
 }}
var sel_setMipmapLevelCount_ = CachedSelector.init("setMipmapLevelCount:");
      pub fn setMipmapLevelCount(self: *Self, __mipmapLevelCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMipmapLevelCount_.get(), __mipmapLevelCount, );
 }}
var sel_sampleCount = CachedSelector.init("sampleCount");
      pub fn sampleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCount.get(), );
 }}
var sel_setSampleCount_ = CachedSelector.init("setSampleCount:");
      pub fn setSampleCount(self: *Self, __sampleCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSampleCount_.get(), __sampleCount, );
 }}
var sel_arrayLength = CachedSelector.init("arrayLength");
      pub fn arrayLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayLength.get(), );
 }}
var sel_setArrayLength_ = CachedSelector.init("setArrayLength:");
      pub fn setArrayLength(self: *Self, __arrayLength: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArrayLength_.get(), __arrayLength, );
 }}
var sel_resourceOptions = CachedSelector.init("resourceOptions");
      pub fn resourceOptions(self: *Self, ) MTLResourceOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceOptions.get(), );
 }}
var sel_setResourceOptions_ = CachedSelector.init("setResourceOptions:");
      pub fn setResourceOptions(self: *Self, __resourceOptions: MTLResourceOptions, ) void {{
           return @as(*const fn(*Self, SEL, MTLResourceOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResourceOptions_.get(), __resourceOptions, );
 }}
var sel_cpuCacheMode = CachedSelector.init("cpuCacheMode");
      pub fn cpuCacheMode(self: *Self, ) MTLCPUCacheMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCPUCacheMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cpuCacheMode.get(), );
 }}
var sel_setCpuCacheMode_ = CachedSelector.init("setCpuCacheMode:");
      pub fn setCpuCacheMode(self: *Self, __cpuCacheMode: MTLCPUCacheMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLCPUCacheMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCpuCacheMode_.get(), __cpuCacheMode, );
 }}
var sel_storageMode = CachedSelector.init("storageMode");
      pub fn storageMode(self: *Self, ) MTLStorageMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStorageMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storageMode.get(), );
 }}
var sel_setStorageMode_ = CachedSelector.init("setStorageMode:");
      pub fn setStorageMode(self: *Self, __storageMode: MTLStorageMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLStorageMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStorageMode_.get(), __storageMode, );
 }}
var sel_hazardTrackingMode = CachedSelector.init("hazardTrackingMode");
      pub fn hazardTrackingMode(self: *Self, ) MTLHazardTrackingMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLHazardTrackingMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hazardTrackingMode.get(), );
 }}
var sel_setHazardTrackingMode_ = CachedSelector.init("setHazardTrackingMode:");
      pub fn setHazardTrackingMode(self: *Self, __hazardTrackingMode: MTLHazardTrackingMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLHazardTrackingMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHazardTrackingMode_.get(), __hazardTrackingMode, );
 }}
var sel_usage = CachedSelector.init("usage");
      pub fn usage(self: *Self, ) MTLTextureUsage {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureUsage, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_usage.get(), );
 }}
var sel_setUsage_ = CachedSelector.init("setUsage:");
      pub fn setUsage(self: *Self, __usage: MTLTextureUsage, ) void {{
           return @as(*const fn(*Self, SEL, MTLTextureUsage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUsage_.get(), __usage, );
 }}
var sel_allowGPUOptimizedContents = CachedSelector.init("allowGPUOptimizedContents");
      pub fn allowGPUOptimizedContents(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowGPUOptimizedContents.get(), );
 }}
var sel_setAllowGPUOptimizedContents_ = CachedSelector.init("setAllowGPUOptimizedContents:");
      pub fn setAllowGPUOptimizedContents(self: *Self, __allowGPUOptimizedContents: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowGPUOptimizedContents_.get(), __allowGPUOptimizedContents, );
 }}
var sel_compressionType = CachedSelector.init("compressionType");
      pub fn compressionType(self: *Self, ) MTLTextureCompressionType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureCompressionType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compressionType.get(), );
 }}
var sel_setCompressionType_ = CachedSelector.init("setCompressionType:");
      pub fn setCompressionType(self: *Self, __compressionType: MTLTextureCompressionType, ) void {{
           return @as(*const fn(*Self, SEL, MTLTextureCompressionType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCompressionType_.get(), __compressionType, );
 }}
var sel_swizzle = CachedSelector.init("swizzle");
      pub fn swizzle(self: *Self, ) MTLTextureSwizzleChannels {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureSwizzleChannels, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_swizzle.get(), );
 }}
var sel_setSwizzle_ = CachedSelector.init("setSwizzle:");
      pub fn setSwizzle(self: *Self, __swizzle: MTLTextureSwizzleChannels, ) void {{
           return @as(*const fn(*Self, SEL, MTLTextureSwizzleChannels, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSwizzle_.get(), __swizzle, );
 }}
  };
}

pub const MTLTextureDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLTextureDescriptorInterfaceMixin(Self, "MTLTextureDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLTextureDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLTextureDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLTextureDescriptor");
};

pub fn NSMutableCharacterSetInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addCharactersInRange_ = CachedSelector.init("addCharactersInRange:");
      pub fn addCharactersInRange(self: *Self, __aRange: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addCharactersInRange_.get(), __aRange, );
 }}
var sel_removeCharactersInRange_ = CachedSelector.init("removeCharactersInRange:");
      pub fn removeCharactersInRange(self: *Self, __aRange: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCharactersInRange_.get(), __aRange, );
 }}
var sel_addCharactersInString_ = CachedSelector.init("addCharactersInString:");
      pub fn addCharactersInString(self: *Self, __aString:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addCharactersInString_.get(), __aString, );
 }}
var sel_removeCharactersInString_ = CachedSelector.init("removeCharactersInString:");
      pub fn removeCharactersInString(self: *Self, __aString:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCharactersInString_.get(), __aString, );
 }}
var sel_formUnionWithCharacterSet_ = CachedSelector.init("formUnionWithCharacterSet:");
      pub fn formUnionWithCharacterSet(self: *Self, __otherSet:  * NSCharacterSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formUnionWithCharacterSet_.get(), __otherSet, );
 }}
var sel_formIntersectionWithCharacterSet_ = CachedSelector.init("formIntersectionWithCharacterSet:");
      pub fn formIntersectionWithCharacterSet(self: *Self, __otherSet:  * NSCharacterSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSCharacterSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formIntersectionWithCharacterSet_.get(), __otherSet, );
 }}
var sel_invert = CachedSelector.init("invert");
      pub fn invert(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invert.get(), );
 }}
var sel_controlCharacterSet = CachedSelector.init("controlCharacterSet");
      pub fn controlCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_controlCharacterSet.get(), );
 }}
var sel_whitespaceCharacterSet = CachedSelector.init("whitespaceCharacterSet");
      pub fn whitespaceCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_whitespaceCharacterSet.get(), );
 }}
var sel_whitespaceAndNewlineCharacterSet = CachedSelector.init("whitespaceAndNewlineCharacterSet");
      pub fn whitespaceAndNewlineCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_whitespaceAndNewlineCharacterSet.get(), );
 }}
var sel_decimalDigitCharacterSet = CachedSelector.init("decimalDigitCharacterSet");
      pub fn decimalDigitCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_decimalDigitCharacterSet.get(), );
 }}
var sel_letterCharacterSet = CachedSelector.init("letterCharacterSet");
      pub fn letterCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_letterCharacterSet.get(), );
 }}
var sel_lowercaseLetterCharacterSet = CachedSelector.init("lowercaseLetterCharacterSet");
      pub fn lowercaseLetterCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_lowercaseLetterCharacterSet.get(), );
 }}
var sel_uppercaseLetterCharacterSet = CachedSelector.init("uppercaseLetterCharacterSet");
      pub fn uppercaseLetterCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_uppercaseLetterCharacterSet.get(), );
 }}
var sel_nonBaseCharacterSet = CachedSelector.init("nonBaseCharacterSet");
      pub fn nonBaseCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_nonBaseCharacterSet.get(), );
 }}
var sel_alphanumericCharacterSet = CachedSelector.init("alphanumericCharacterSet");
      pub fn alphanumericCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_alphanumericCharacterSet.get(), );
 }}
var sel_decomposableCharacterSet = CachedSelector.init("decomposableCharacterSet");
      pub fn decomposableCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_decomposableCharacterSet.get(), );
 }}
var sel_illegalCharacterSet = CachedSelector.init("illegalCharacterSet");
      pub fn illegalCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_illegalCharacterSet.get(), );
 }}
var sel_punctuationCharacterSet = CachedSelector.init("punctuationCharacterSet");
      pub fn punctuationCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_punctuationCharacterSet.get(), );
 }}
var sel_capitalizedLetterCharacterSet = CachedSelector.init("capitalizedLetterCharacterSet");
      pub fn capitalizedLetterCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_capitalizedLetterCharacterSet.get(), );
 }}
var sel_symbolCharacterSet = CachedSelector.init("symbolCharacterSet");
      pub fn symbolCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_symbolCharacterSet.get(), );
 }}
var sel_newlineCharacterSet = CachedSelector.init("newlineCharacterSet");
      pub fn newlineCharacterSet()  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_newlineCharacterSet.get(), );
 }}
var sel_characterSetWithRange_ = CachedSelector.init("characterSetWithRange:");
      pub fn characterSetWithRange(__aRange: _NSRange, )  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL, _NSRange, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_characterSetWithRange_.get(), __aRange, );
 }}
var sel_characterSetWithCharactersInString_ = CachedSelector.init("characterSetWithCharactersInString:");
      pub fn characterSetWithCharactersInString(__aString:  * NSString, )  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_characterSetWithCharactersInString_.get(), __aString, );
 }}
var sel_characterSetWithBitmapRepresentation_ = CachedSelector.init("characterSetWithBitmapRepresentation:");
      pub fn characterSetWithBitmapRepresentation(__data:  * NSData, )  * NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL,  * NSData, ) callconv(.C)  * NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_characterSetWithBitmapRepresentation_.get(), __data, );
 }}
var sel_characterSetWithContentsOfFile_ = CachedSelector.init("characterSetWithContentsOfFile:");
      pub fn characterSetWithContentsOfFile(__fName:  * NSString, )  ?* NSMutableCharacterSet {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSMutableCharacterSet, @ptrCast(&objc_msgSend))(class.get(), sel_characterSetWithContentsOfFile_.get(), __fName, );
 }}
  };
}

pub const NSMutableCharacterSet = opaque {
  const Self = @This();
  pub usingnamespace NSMutableCharacterSetInterfaceMixin(Self, "NSMutableCharacterSet");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSMutableCharacterSet");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSMutableCharacterSet");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSMutableCharacterSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableCharacterSet");
  pub usingnamespace NSCharacterSetInterfaceMixin(Self, "NSMutableCharacterSet");
};

pub fn NSUbiquitousKeyValueStoreInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectForKey_ = CachedSelector.init("objectForKey:");
      pub fn objectForKey(self: *Self, __aKey:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectForKey_.get(), __aKey, );
 }}
var sel_setObject_forKey_ = CachedSelector.init("setObject:forKey:");
      pub fn setObjectforKey(self: *Self, __anObject: id, __aKey:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_forKey_.get(), __anObject, __aKey, );
 }}
var sel_removeObjectForKey_ = CachedSelector.init("removeObjectForKey:");
      pub fn removeObjectForKey(self: *Self, __aKey:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectForKey_.get(), __aKey, );
 }}
var sel_stringForKey_ = CachedSelector.init("stringForKey:");
      pub fn stringForKey(self: *Self, __aKey:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringForKey_.get(), __aKey, );
 }}
var sel_arrayForKey_ = CachedSelector.init("arrayForKey:");
      pub fn arrayForKey(self: *Self, __aKey:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayForKey_.get(), __aKey, );
 }}
var sel_dictionaryForKey_ = CachedSelector.init("dictionaryForKey:");
      pub fn dictionaryForKey(self: *Self, __aKey:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dictionaryForKey_.get(), __aKey, );
 }}
var sel_dataForKey_ = CachedSelector.init("dataForKey:");
      pub fn dataForKey(self: *Self, __aKey:  * NSString, )  ?* NSData {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataForKey_.get(), __aKey, );
 }}
var sel_longLongForKey_ = CachedSelector.init("longLongForKey:");
      pub fn longLongForKey(self: *Self, __aKey:  * NSString, ) c_longlong {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_longLongForKey_.get(), __aKey, );
 }}
var sel_doubleForKey_ = CachedSelector.init("doubleForKey:");
      pub fn doubleForKey(self: *Self, __aKey:  * NSString, ) f64 {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doubleForKey_.get(), __aKey, );
 }}
var sel_boolForKey_ = CachedSelector.init("boolForKey:");
      pub fn boolForKey(self: *Self, __aKey:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boolForKey_.get(), __aKey, );
 }}
var sel_setString_forKey_ = CachedSelector.init("setString:forKey:");
      pub fn setStringforKey(self: *Self, __aString:  ?* NSString, __aKey:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setString_forKey_.get(), __aString, __aKey, );
 }}
var sel_setData_forKey_ = CachedSelector.init("setData:forKey:");
      pub fn setDataforKey(self: *Self, __aData:  ?* NSData, __aKey:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSData,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setData_forKey_.get(), __aData, __aKey, );
 }}
var sel_setArray_forKey_ = CachedSelector.init("setArray:forKey:");
      pub fn setArrayforKey(self: *Self, __anArray:  ?* NSArray, __aKey:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArray_forKey_.get(), __anArray, __aKey, );
 }}
var sel_setDictionary_forKey_ = CachedSelector.init("setDictionary:forKey:");
      pub fn setDictionaryforKey(self: *Self, __aDictionary:  ?* NSDictionary, __aKey:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDictionary_forKey_.get(), __aDictionary, __aKey, );
 }}
var sel_setLongLong_forKey_ = CachedSelector.init("setLongLong:forKey:");
      pub fn setLongLongforKey(self: *Self, __value: c_longlong, __aKey:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_longlong,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLongLong_forKey_.get(), __value, __aKey, );
 }}
var sel_setDouble_forKey_ = CachedSelector.init("setDouble:forKey:");
      pub fn setDoubleforKey(self: *Self, __value: f64, __aKey:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, f64,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDouble_forKey_.get(), __value, __aKey, );
 }}
var sel_setBool_forKey_ = CachedSelector.init("setBool:forKey:");
      pub fn setBoolforKey(self: *Self, __value: c_int, __aKey:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_int,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBool_forKey_.get(), __value, __aKey, );
 }}
var sel_synchronize = CachedSelector.init("synchronize");
      pub fn synchronize(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_synchronize.get(), );
 }}
var sel_defaultStore = CachedSelector.init("defaultStore");
      pub fn defaultStore()  * NSUbiquitousKeyValueStore {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUbiquitousKeyValueStore, @ptrCast(&objc_msgSend))(class.get(), sel_defaultStore.get(), );
 }}
var sel_dictionaryRepresentation = CachedSelector.init("dictionaryRepresentation");
      pub fn dictionaryRepresentation(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dictionaryRepresentation.get(), );
 }}
  };
}

pub const NSUbiquitousKeyValueStore = opaque {
  const Self = @This();
  pub usingnamespace NSUbiquitousKeyValueStoreInterfaceMixin(Self, "NSUbiquitousKeyValueStore");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUbiquitousKeyValueStore");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUbiquitousKeyValueStore");
};

pub fn MTLVisibleFunctionTableDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_visibleFunctionTableDescriptor = CachedSelector.init("visibleFunctionTableDescriptor");
      pub fn visibleFunctionTableDescriptor()  * MTLVisibleFunctionTableDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLVisibleFunctionTableDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_visibleFunctionTableDescriptor.get(), );
 }}
var sel_functionCount = CachedSelector.init("functionCount");
      pub fn functionCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionCount.get(), );
 }}
var sel_setFunctionCount_ = CachedSelector.init("setFunctionCount:");
      pub fn setFunctionCount(self: *Self, __functionCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunctionCount_.get(), __functionCount, );
 }}
  };
}

pub const MTLVisibleFunctionTableDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLVisibleFunctionTableDescriptorInterfaceMixin(Self, "MTLVisibleFunctionTableDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLVisibleFunctionTableDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLVisibleFunctionTableDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLVisibleFunctionTableDescriptor");
};

pub fn NSTermOfAddressInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_neutral = CachedSelector.init("neutral");
      pub fn neutral() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_neutral.get(), );
 }}
var sel_feminine = CachedSelector.init("feminine");
      pub fn feminine() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_feminine.get(), );
 }}
var sel_masculine = CachedSelector.init("masculine");
      pub fn masculine() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_masculine.get(), );
 }}
var sel_localizedForLanguageIdentifier_withPronouns_ = CachedSelector.init("localizedForLanguageIdentifier:withPronouns:");
      pub fn localizedForLanguageIdentifierwithPronouns(__language:  * NSString, __pronouns:  * NSArray, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_localizedForLanguageIdentifier_withPronouns_.get(), __language, __pronouns, );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_languageIdentifier = CachedSelector.init("languageIdentifier");
      pub fn languageIdentifier(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_languageIdentifier.get(), );
 }}
var sel_pronouns = CachedSelector.init("pronouns");
      pub fn pronouns(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pronouns.get(), );
 }}
  };
}

pub const NSTermOfAddress = opaque {
  const Self = @This();
  pub usingnamespace NSTermOfAddressInterfaceMixin(Self, "NSTermOfAddress");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSTermOfAddress");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSTermOfAddress");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSTermOfAddress");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSTermOfAddress");
};

pub fn NSNotificationQueueInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithNotificationCenter_ = CachedSelector.init("initWithNotificationCenter:");
      pub fn initWithNotificationCenter(self: *Self, __notificationCenter:  * NSNotificationCenter, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSNotificationCenter, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithNotificationCenter_.get(), __notificationCenter, );
 }}
var sel_enqueueNotification_postingStyle_ = CachedSelector.init("enqueueNotification:postingStyle:");
      pub fn enqueueNotificationpostingStyle(self: *Self, __notification:  * NSNotification, __postingStyle: NSPostingStyle, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNotification, NSPostingStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enqueueNotification_postingStyle_.get(), __notification, __postingStyle, );
 }}
var sel_enqueueNotification_postingStyle_coalesceMask_forModes_ = CachedSelector.init("enqueueNotification:postingStyle:coalesceMask:forModes:");
      pub fn enqueueNotificationpostingStylecoalesceMaskforModes(self: *Self, __notification:  * NSNotification, __postingStyle: NSPostingStyle, __coalesceMask: NSNotificationCoalescing, __modes:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNotification, NSPostingStyle, NSNotificationCoalescing,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enqueueNotification_postingStyle_coalesceMask_forModes_.get(), __notification, __postingStyle, __coalesceMask, __modes, );
 }}
var sel_dequeueNotificationsMatching_coalesceMask_ = CachedSelector.init("dequeueNotificationsMatching:coalesceMask:");
      pub fn dequeueNotificationsMatchingcoalesceMask(self: *Self, __notification:  * NSNotification, __coalesceMask: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNotification, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dequeueNotificationsMatching_coalesceMask_.get(), __notification, __coalesceMask, );
 }}
var sel_defaultQueue = CachedSelector.init("defaultQueue");
      pub fn defaultQueue()  * NSNotificationQueue {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSNotificationQueue, @ptrCast(&objc_msgSend))(class.get(), sel_defaultQueue.get(), );
 }}
  };
}

pub const NSNotificationQueue = opaque {
  const Self = @This();
  pub usingnamespace NSNotificationQueueInterfaceMixin(Self, "NSNotificationQueue");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNotificationQueue");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSNotificationQueue");
};

pub fn NSMutableDataInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_mutableBytes = CachedSelector.init("mutableBytes");
      pub fn mutableBytes(self: *Self, )  [*c] void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableBytes.get(), );
 }}
var sel_length = CachedSelector.init("length");
      pub fn length(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_length.get(), );
 }}
var sel_setLength_ = CachedSelector.init("setLength:");
      pub fn setLength(self: *Self, __length: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLength_.get(), __length, );
 }}
var sel_appendBytes_length_ = CachedSelector.init("appendBytes:length:");
      pub fn appendByteslength(self: *Self, __bytes:  [*c]  const void, __length: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appendBytes_length_.get(), __bytes, __length, );
 }}
var sel_appendData_ = CachedSelector.init("appendData:");
      pub fn appendData(self: *Self, __other:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appendData_.get(), __other, );
 }}
var sel_increaseLengthBy_ = CachedSelector.init("increaseLengthBy:");
      pub fn increaseLengthBy(self: *Self, __extraLength: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_increaseLengthBy_.get(), __extraLength, );
 }}
var sel_replaceBytesInRange_withBytes_ = CachedSelector.init("replaceBytesInRange:withBytes:");
      pub fn replaceBytesInRangewithBytes(self: *Self, __range: _NSRange, __bytes:  [*c]  const void, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange,  [*c]  const void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceBytesInRange_withBytes_.get(), __range, __bytes, );
 }}
var sel_resetBytesInRange_ = CachedSelector.init("resetBytesInRange:");
      pub fn resetBytesInRange(self: *Self, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resetBytesInRange_.get(), __range, );
 }}
var sel_setData_ = CachedSelector.init("setData:");
      pub fn setData(self: *Self, __data:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setData_.get(), __data, );
 }}
var sel_replaceBytesInRange_withBytes_length_ = CachedSelector.init("replaceBytesInRange:withBytes:length:");
      pub fn replaceBytesInRangewithByteslength(self: *Self, __range: _NSRange, __replacementBytes:  [*c]  const void, __replacementLength: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange,  [*c]  const void, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceBytesInRange_withBytes_length_.get(), __range, __replacementBytes, __replacementLength, );
 }}
var sel_dataWithCapacity_ = CachedSelector.init("dataWithCapacity:");
      pub fn dataWithCapacity(__aNumItems: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithCapacity_.get(), __aNumItems, );
 }}
var sel_dataWithLength_ = CachedSelector.init("dataWithLength:");
      pub fn dataWithLength(__length: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithLength_.get(), __length, );
 }}
var sel_initWithCapacity_ = CachedSelector.init("initWithCapacity:");
      pub fn initWithCapacity(self: *Self, __capacity: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCapacity_.get(), __capacity, );
 }}
var sel_initWithLength_ = CachedSelector.init("initWithLength:");
      pub fn initWithLength(self: *Self, __length: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithLength_.get(), __length, );
 }}
var sel_decompressUsingAlgorithm_error_ = CachedSelector.init("decompressUsingAlgorithm:error:");
      pub fn decompressUsingAlgorithmerror(self: *Self, __algorithm: NSDataCompressionAlgorithm, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL, NSDataCompressionAlgorithm,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decompressUsingAlgorithm_error_.get(), __algorithm, __an_error, );
 }}
var sel_compressUsingAlgorithm_error_ = CachedSelector.init("compressUsingAlgorithm:error:");
      pub fn compressUsingAlgorithmerror(self: *Self, __algorithm: NSDataCompressionAlgorithm, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL, NSDataCompressionAlgorithm,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compressUsingAlgorithm_error_.get(), __algorithm, __an_error, );
 }}
  };
}

pub const NSMutableData = opaque {
  const Self = @This();
  pub usingnamespace NSMutableDataInterfaceMixin(Self, "NSMutableData");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableData");
  pub usingnamespace NSDataInterfaceMixin(Self, "NSMutableData");
};

pub fn MTLAccelerationStructureTriangleGeometryDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_descriptor.get(), );
 }}
var sel_vertexBuffer = CachedSelector.init("vertexBuffer");
      pub fn vertexBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexBuffer.get(), );
 }}
var sel_setVertexBuffer_ = CachedSelector.init("setVertexBuffer:");
      pub fn setVertexBuffer(self: *Self, __vertexBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBuffer_.get(), __vertexBuffer, );
 }}
var sel_vertexBufferOffset = CachedSelector.init("vertexBufferOffset");
      pub fn vertexBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexBufferOffset.get(), );
 }}
var sel_setVertexBufferOffset_ = CachedSelector.init("setVertexBufferOffset:");
      pub fn setVertexBufferOffset(self: *Self, __vertexBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBufferOffset_.get(), __vertexBufferOffset, );
 }}
var sel_vertexFormat = CachedSelector.init("vertexFormat");
      pub fn vertexFormat(self: *Self, ) MTLAttributeFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAttributeFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexFormat.get(), );
 }}
var sel_setVertexFormat_ = CachedSelector.init("setVertexFormat:");
      pub fn setVertexFormat(self: *Self, __vertexFormat: MTLAttributeFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLAttributeFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexFormat_.get(), __vertexFormat, );
 }}
var sel_vertexStride = CachedSelector.init("vertexStride");
      pub fn vertexStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexStride.get(), );
 }}
var sel_setVertexStride_ = CachedSelector.init("setVertexStride:");
      pub fn setVertexStride(self: *Self, __vertexStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexStride_.get(), __vertexStride, );
 }}
var sel_indexBuffer = CachedSelector.init("indexBuffer");
      pub fn indexBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexBuffer.get(), );
 }}
var sel_setIndexBuffer_ = CachedSelector.init("setIndexBuffer:");
      pub fn setIndexBuffer(self: *Self, __indexBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexBuffer_.get(), __indexBuffer, );
 }}
var sel_indexBufferOffset = CachedSelector.init("indexBufferOffset");
      pub fn indexBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexBufferOffset.get(), );
 }}
var sel_setIndexBufferOffset_ = CachedSelector.init("setIndexBufferOffset:");
      pub fn setIndexBufferOffset(self: *Self, __indexBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexBufferOffset_.get(), __indexBufferOffset, );
 }}
var sel_indexType = CachedSelector.init("indexType");
      pub fn indexType(self: *Self, ) MTLIndexType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLIndexType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexType.get(), );
 }}
var sel_setIndexType_ = CachedSelector.init("setIndexType:");
      pub fn setIndexType(self: *Self, __indexType: MTLIndexType, ) void {{
           return @as(*const fn(*Self, SEL, MTLIndexType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexType_.get(), __indexType, );
 }}
var sel_triangleCount = CachedSelector.init("triangleCount");
      pub fn triangleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_triangleCount.get(), );
 }}
var sel_setTriangleCount_ = CachedSelector.init("setTriangleCount:");
      pub fn setTriangleCount(self: *Self, __triangleCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTriangleCount_.get(), __triangleCount, );
 }}
var sel_transformationMatrixBuffer = CachedSelector.init("transformationMatrixBuffer");
      pub fn transformationMatrixBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transformationMatrixBuffer.get(), );
 }}
var sel_setTransformationMatrixBuffer_ = CachedSelector.init("setTransformationMatrixBuffer:");
      pub fn setTransformationMatrixBuffer(self: *Self, __transformationMatrixBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTransformationMatrixBuffer_.get(), __transformationMatrixBuffer, );
 }}
var sel_transformationMatrixBufferOffset = CachedSelector.init("transformationMatrixBufferOffset");
      pub fn transformationMatrixBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transformationMatrixBufferOffset.get(), );
 }}
var sel_setTransformationMatrixBufferOffset_ = CachedSelector.init("setTransformationMatrixBufferOffset:");
      pub fn setTransformationMatrixBufferOffset(self: *Self, __transformationMatrixBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTransformationMatrixBufferOffset_.get(), __transformationMatrixBufferOffset, );
 }}
  };
}

pub const MTLAccelerationStructureTriangleGeometryDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureTriangleGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureTriangleGeometryDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructureTriangleGeometryDescriptor");
  pub usingnamespace MTLAccelerationStructureGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureTriangleGeometryDescriptor");
};

pub fn NSUnitFrequencyInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_terahertz = CachedSelector.init("terahertz");
      pub fn terahertz()  * NSUnitFrequency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFrequency, @ptrCast(&objc_msgSend))(class.get(), sel_terahertz.get(), );
 }}
var sel_gigahertz = CachedSelector.init("gigahertz");
      pub fn gigahertz()  * NSUnitFrequency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFrequency, @ptrCast(&objc_msgSend))(class.get(), sel_gigahertz.get(), );
 }}
var sel_megahertz = CachedSelector.init("megahertz");
      pub fn megahertz()  * NSUnitFrequency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFrequency, @ptrCast(&objc_msgSend))(class.get(), sel_megahertz.get(), );
 }}
var sel_kilohertz = CachedSelector.init("kilohertz");
      pub fn kilohertz()  * NSUnitFrequency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFrequency, @ptrCast(&objc_msgSend))(class.get(), sel_kilohertz.get(), );
 }}
var sel_hertz = CachedSelector.init("hertz");
      pub fn hertz()  * NSUnitFrequency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFrequency, @ptrCast(&objc_msgSend))(class.get(), sel_hertz.get(), );
 }}
var sel_millihertz = CachedSelector.init("millihertz");
      pub fn millihertz()  * NSUnitFrequency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFrequency, @ptrCast(&objc_msgSend))(class.get(), sel_millihertz.get(), );
 }}
var sel_microhertz = CachedSelector.init("microhertz");
      pub fn microhertz()  * NSUnitFrequency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFrequency, @ptrCast(&objc_msgSend))(class.get(), sel_microhertz.get(), );
 }}
var sel_nanohertz = CachedSelector.init("nanohertz");
      pub fn nanohertz()  * NSUnitFrequency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFrequency, @ptrCast(&objc_msgSend))(class.get(), sel_nanohertz.get(), );
 }}
var sel_framesPerSecond = CachedSelector.init("framesPerSecond");
      pub fn framesPerSecond()  * NSUnitFrequency {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitFrequency, @ptrCast(&objc_msgSend))(class.get(), sel_framesPerSecond.get(), );
 }}
  };
}

pub const NSUnitFrequency = opaque {
  const Self = @This();
  pub usingnamespace NSUnitFrequencyInterfaceMixin(Self, "NSUnitFrequency");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitFrequency");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitFrequency");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitFrequency");
};

pub fn NSUnitSpeedInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_metersPerSecond = CachedSelector.init("metersPerSecond");
      pub fn metersPerSecond()  * NSUnitSpeed {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitSpeed, @ptrCast(&objc_msgSend))(class.get(), sel_metersPerSecond.get(), );
 }}
var sel_kilometersPerHour = CachedSelector.init("kilometersPerHour");
      pub fn kilometersPerHour()  * NSUnitSpeed {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitSpeed, @ptrCast(&objc_msgSend))(class.get(), sel_kilometersPerHour.get(), );
 }}
var sel_milesPerHour = CachedSelector.init("milesPerHour");
      pub fn milesPerHour()  * NSUnitSpeed {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitSpeed, @ptrCast(&objc_msgSend))(class.get(), sel_milesPerHour.get(), );
 }}
var sel_knots = CachedSelector.init("knots");
      pub fn knots()  * NSUnitSpeed {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitSpeed, @ptrCast(&objc_msgSend))(class.get(), sel_knots.get(), );
 }}
  };
}

pub const NSUnitSpeed = opaque {
  const Self = @This();
  pub usingnamespace NSUnitSpeedInterfaceMixin(Self, "NSUnitSpeed");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitSpeed");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitSpeed");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitSpeed");
};

pub fn NSUnitVolumeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_megaliters = CachedSelector.init("megaliters");
      pub fn megaliters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_megaliters.get(), );
 }}
var sel_kiloliters = CachedSelector.init("kiloliters");
      pub fn kiloliters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_kiloliters.get(), );
 }}
var sel_liters = CachedSelector.init("liters");
      pub fn liters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_liters.get(), );
 }}
var sel_deciliters = CachedSelector.init("deciliters");
      pub fn deciliters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_deciliters.get(), );
 }}
var sel_centiliters = CachedSelector.init("centiliters");
      pub fn centiliters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_centiliters.get(), );
 }}
var sel_milliliters = CachedSelector.init("milliliters");
      pub fn milliliters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_milliliters.get(), );
 }}
var sel_cubicKilometers = CachedSelector.init("cubicKilometers");
      pub fn cubicKilometers()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cubicKilometers.get(), );
 }}
var sel_cubicMeters = CachedSelector.init("cubicMeters");
      pub fn cubicMeters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cubicMeters.get(), );
 }}
var sel_cubicDecimeters = CachedSelector.init("cubicDecimeters");
      pub fn cubicDecimeters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cubicDecimeters.get(), );
 }}
var sel_cubicCentimeters = CachedSelector.init("cubicCentimeters");
      pub fn cubicCentimeters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cubicCentimeters.get(), );
 }}
var sel_cubicMillimeters = CachedSelector.init("cubicMillimeters");
      pub fn cubicMillimeters()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cubicMillimeters.get(), );
 }}
var sel_cubicInches = CachedSelector.init("cubicInches");
      pub fn cubicInches()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cubicInches.get(), );
 }}
var sel_cubicFeet = CachedSelector.init("cubicFeet");
      pub fn cubicFeet()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cubicFeet.get(), );
 }}
var sel_cubicYards = CachedSelector.init("cubicYards");
      pub fn cubicYards()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cubicYards.get(), );
 }}
var sel_cubicMiles = CachedSelector.init("cubicMiles");
      pub fn cubicMiles()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cubicMiles.get(), );
 }}
var sel_acreFeet = CachedSelector.init("acreFeet");
      pub fn acreFeet()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_acreFeet.get(), );
 }}
var sel_bushels = CachedSelector.init("bushels");
      pub fn bushels()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_bushels.get(), );
 }}
var sel_teaspoons = CachedSelector.init("teaspoons");
      pub fn teaspoons()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_teaspoons.get(), );
 }}
var sel_tablespoons = CachedSelector.init("tablespoons");
      pub fn tablespoons()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_tablespoons.get(), );
 }}
var sel_fluidOunces = CachedSelector.init("fluidOunces");
      pub fn fluidOunces()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_fluidOunces.get(), );
 }}
var sel_cups = CachedSelector.init("cups");
      pub fn cups()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_cups.get(), );
 }}
var sel_pints = CachedSelector.init("pints");
      pub fn pints()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_pints.get(), );
 }}
var sel_quarts = CachedSelector.init("quarts");
      pub fn quarts()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_quarts.get(), );
 }}
var sel_gallons = CachedSelector.init("gallons");
      pub fn gallons()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_gallons.get(), );
 }}
var sel_imperialTeaspoons = CachedSelector.init("imperialTeaspoons");
      pub fn imperialTeaspoons()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_imperialTeaspoons.get(), );
 }}
var sel_imperialTablespoons = CachedSelector.init("imperialTablespoons");
      pub fn imperialTablespoons()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_imperialTablespoons.get(), );
 }}
var sel_imperialFluidOunces = CachedSelector.init("imperialFluidOunces");
      pub fn imperialFluidOunces()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_imperialFluidOunces.get(), );
 }}
var sel_imperialPints = CachedSelector.init("imperialPints");
      pub fn imperialPints()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_imperialPints.get(), );
 }}
var sel_imperialQuarts = CachedSelector.init("imperialQuarts");
      pub fn imperialQuarts()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_imperialQuarts.get(), );
 }}
var sel_imperialGallons = CachedSelector.init("imperialGallons");
      pub fn imperialGallons()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_imperialGallons.get(), );
 }}
var sel_metricCups = CachedSelector.init("metricCups");
      pub fn metricCups()  * NSUnitVolume {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitVolume, @ptrCast(&objc_msgSend))(class.get(), sel_metricCups.get(), );
 }}
  };
}

pub const NSUnitVolume = opaque {
  const Self = @This();
  pub usingnamespace NSUnitVolumeInterfaceMixin(Self, "NSUnitVolume");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitVolume");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitVolume");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitVolume");
};

pub fn MTLArchitectureInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
  };
}

pub const MTLArchitecture = opaque {
  const Self = @This();
  pub usingnamespace MTLArchitectureInterfaceMixin(Self, "MTLArchitecture");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLArchitecture");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLArchitecture");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLArchitecture");
};

pub fn NSEnumeratorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_nextObject = CachedSelector.init("nextObject");
      pub fn nextObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nextObject.get(), );
 }}
var sel_allObjects = CachedSelector.init("allObjects");
      pub fn allObjects(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allObjects.get(), );
 }}
  };
}

pub const NSEnumerator = opaque {
  const Self = @This();
  pub usingnamespace NSEnumeratorInterfaceMixin(Self, "NSEnumerator");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSEnumerator");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSEnumerator");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSEnumerator");
};

pub fn NSHTTPCookieStorageInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sharedCookieStorageForGroupContainerIdentifier_ = CachedSelector.init("sharedCookieStorageForGroupContainerIdentifier:");
      pub fn sharedCookieStorageForGroupContainerIdentifier(__identifier:  * NSString, )  * NSHTTPCookieStorage {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSHTTPCookieStorage, @ptrCast(&objc_msgSend))(class.get(), sel_sharedCookieStorageForGroupContainerIdentifier_.get(), __identifier, );
 }}
var sel_setCookie_ = CachedSelector.init("setCookie:");
      pub fn setCookie(self: *Self, __cookie:  * NSHTTPCookie, ) void {{
           return @as(*const fn(*Self, SEL,  * NSHTTPCookie, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCookie_.get(), __cookie, );
 }}
var sel_deleteCookie_ = CachedSelector.init("deleteCookie:");
      pub fn deleteCookie(self: *Self, __cookie:  * NSHTTPCookie, ) void {{
           return @as(*const fn(*Self, SEL,  * NSHTTPCookie, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_deleteCookie_.get(), __cookie, );
 }}
var sel_removeCookiesSinceDate_ = CachedSelector.init("removeCookiesSinceDate:");
      pub fn removeCookiesSinceDate(self: *Self, __date:  * NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCookiesSinceDate_.get(), __date, );
 }}
var sel_cookiesForURL_ = CachedSelector.init("cookiesForURL:");
      pub fn cookiesForURL(self: *Self, __URL:  * NSURL, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cookiesForURL_.get(), __URL, );
 }}
var sel_setCookies_forURL_mainDocumentURL_ = CachedSelector.init("setCookies:forURL:mainDocumentURL:");
      pub fn setCookiesforURLmainDocumentURL(self: *Self, __cookies:  * NSArray, __URL:  ?* NSURL, __mainDocumentURL:  ?* NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray,  ?* NSURL,  ?* NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCookies_forURL_mainDocumentURL_.get(), __cookies, __URL, __mainDocumentURL, );
 }}
var sel_sortedCookiesUsingDescriptors_ = CachedSelector.init("sortedCookiesUsingDescriptors:");
      pub fn sortedCookiesUsingDescriptors(self: *Self, __sortOrder:  * NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedCookiesUsingDescriptors_.get(), __sortOrder, );
 }}
var sel_sharedHTTPCookieStorage = CachedSelector.init("sharedHTTPCookieStorage");
      pub fn sharedHTTPCookieStorage()  * NSHTTPCookieStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSHTTPCookieStorage, @ptrCast(&objc_msgSend))(class.get(), sel_sharedHTTPCookieStorage.get(), );
 }}
var sel_cookies = CachedSelector.init("cookies");
      pub fn cookies(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cookies.get(), );
 }}
var sel_cookieAcceptPolicy = CachedSelector.init("cookieAcceptPolicy");
      pub fn cookieAcceptPolicy(self: *Self, ) NSHTTPCookieAcceptPolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSHTTPCookieAcceptPolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cookieAcceptPolicy.get(), );
 }}
var sel_setCookieAcceptPolicy_ = CachedSelector.init("setCookieAcceptPolicy:");
      pub fn setCookieAcceptPolicy(self: *Self, __cookieAcceptPolicy: NSHTTPCookieAcceptPolicy, ) void {{
           return @as(*const fn(*Self, SEL, NSHTTPCookieAcceptPolicy, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCookieAcceptPolicy_.get(), __cookieAcceptPolicy, );
 }}
var sel_storeCookies_forTask_ = CachedSelector.init("storeCookies:forTask:");
      pub fn storeCookiesforTask(self: *Self, __cookies:  * NSArray, __task:  * NSURLSessionTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray,  * NSURLSessionTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storeCookies_forTask_.get(), __cookies, __task, );
 }}
var sel_getCookiesForTask_completionHandler_ = CachedSelector.init("getCookiesForTask:completionHandler:");
      pub fn getCookiesForTaskcompletionHandler(self: *Self, __task:  * NSURLSessionTask, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSessionTask, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCookiesForTask_completionHandler_.get(), __task, __completionHandler, );
 }}
  };
}

pub const NSHTTPCookieStorage = opaque {
  const Self = @This();
  pub usingnamespace NSHTTPCookieStorageInterfaceMixin(Self, "NSHTTPCookieStorage");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSHTTPCookieStorage");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSHTTPCookieStorage");
};

pub fn NSDirectoryEnumeratorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_skipDescendents = CachedSelector.init("skipDescendents");
      pub fn skipDescendents(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_skipDescendents.get(), );
 }}
var sel_skipDescendants = CachedSelector.init("skipDescendants");
      pub fn skipDescendants(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_skipDescendants.get(), );
 }}
var sel_fileAttributes = CachedSelector.init("fileAttributes");
      pub fn fileAttributes(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileAttributes.get(), );
 }}
var sel_directoryAttributes = CachedSelector.init("directoryAttributes");
      pub fn directoryAttributes(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_directoryAttributes.get(), );
 }}
var sel_isEnumeratingDirectoryPostOrder = CachedSelector.init("isEnumeratingDirectoryPostOrder");
      pub fn isEnumeratingDirectoryPostOrder(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEnumeratingDirectoryPostOrder.get(), );
 }}
var sel_level = CachedSelector.init("level");
      pub fn level(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_level.get(), );
 }}
  };
}

pub const NSDirectoryEnumerator = opaque {
  const Self = @This();
  pub usingnamespace NSDirectoryEnumeratorInterfaceMixin(Self, "NSDirectoryEnumerator");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDirectoryEnumerator");
  pub usingnamespace NSEnumeratorInterfaceMixin(Self, "NSDirectoryEnumerator");
};

pub fn NSDateComponentsFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stringForObjectValue_ = CachedSelector.init("stringForObjectValue:");
      pub fn stringForObjectValue(self: *Self, __obj: id, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringForObjectValue_.get(), __obj, );
 }}
var sel_stringFromDateComponents_ = CachedSelector.init("stringFromDateComponents:");
      pub fn stringFromDateComponents(self: *Self, __components:  * NSDateComponents, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSDateComponents, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromDateComponents_.get(), __components, );
 }}
var sel_stringFromDate_toDate_ = CachedSelector.init("stringFromDate:toDate:");
      pub fn stringFromDatetoDate(self: *Self, __startDate:  * NSDate, __endDate:  * NSDate, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDate, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromDate_toDate_.get(), __startDate, __endDate, );
 }}
var sel_stringFromTimeInterval_ = CachedSelector.init("stringFromTimeInterval:");
      pub fn stringFromTimeInterval(self: *Self, __ti: f64, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromTimeInterval_.get(), __ti, );
 }}
var sel_localizedStringFromDateComponents_unitsStyle_ = CachedSelector.init("localizedStringFromDateComponents:unitsStyle:");
      pub fn localizedStringFromDateComponentsunitsStyle(__components:  * NSDateComponents, __unitsStyle: NSDateComponentsFormatterUnitsStyle, )  ?* NSString {{
           return @as(*const fn(Class, SEL,  * NSDateComponents, NSDateComponentsFormatterUnitsStyle, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localizedStringFromDateComponents_unitsStyle_.get(), __components, __unitsStyle, );
 }}
var sel_getObjectValue_forString_errorDescription_ = CachedSelector.init("getObjectValue:forString:errorDescription:");
      pub fn getObjectValueforStringerrorDescription(self: *Self, __obj:  ?* id, __string:  * NSString, __an_error:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* id,  * NSString,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjectValue_forString_errorDescription_.get(), __obj, __string, __an_error, );
 }}
var sel_unitsStyle = CachedSelector.init("unitsStyle");
      pub fn unitsStyle(self: *Self, ) NSDateComponentsFormatterUnitsStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDateComponentsFormatterUnitsStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitsStyle.get(), );
 }}
var sel_setUnitsStyle_ = CachedSelector.init("setUnitsStyle:");
      pub fn setUnitsStyle(self: *Self, __unitsStyle: NSDateComponentsFormatterUnitsStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSDateComponentsFormatterUnitsStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUnitsStyle_.get(), __unitsStyle, );
 }}
var sel_allowedUnits = CachedSelector.init("allowedUnits");
      pub fn allowedUnits(self: *Self, ) NSCalendarUnit {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSCalendarUnit, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowedUnits.get(), );
 }}
var sel_setAllowedUnits_ = CachedSelector.init("setAllowedUnits:");
      pub fn setAllowedUnits(self: *Self, __allowedUnits: NSCalendarUnit, ) void {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowedUnits_.get(), __allowedUnits, );
 }}
var sel_zeroFormattingBehavior = CachedSelector.init("zeroFormattingBehavior");
      pub fn zeroFormattingBehavior(self: *Self, ) NSDateComponentsFormatterZeroFormattingBehavior {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDateComponentsFormatterZeroFormattingBehavior, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_zeroFormattingBehavior.get(), );
 }}
var sel_setZeroFormattingBehavior_ = CachedSelector.init("setZeroFormattingBehavior:");
      pub fn setZeroFormattingBehavior(self: *Self, __zeroFormattingBehavior: NSDateComponentsFormatterZeroFormattingBehavior, ) void {{
           return @as(*const fn(*Self, SEL, NSDateComponentsFormatterZeroFormattingBehavior, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setZeroFormattingBehavior_.get(), __zeroFormattingBehavior, );
 }}
var sel_calendar = CachedSelector.init("calendar");
      pub fn calendar(self: *Self, )  ?* NSCalendar {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSCalendar, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_calendar.get(), );
 }}
var sel_setCalendar_ = CachedSelector.init("setCalendar:");
      pub fn setCalendar(self: *Self, __calendar:  ?* NSCalendar, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSCalendar, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCalendar_.get(), __calendar, );
 }}
var sel_referenceDate = CachedSelector.init("referenceDate");
      pub fn referenceDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_referenceDate.get(), );
 }}
var sel_setReferenceDate_ = CachedSelector.init("setReferenceDate:");
      pub fn setReferenceDate(self: *Self, __referenceDate:  ?* NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReferenceDate_.get(), __referenceDate, );
 }}
var sel_allowsFractionalUnits = CachedSelector.init("allowsFractionalUnits");
      pub fn allowsFractionalUnits(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsFractionalUnits.get(), );
 }}
var sel_setAllowsFractionalUnits_ = CachedSelector.init("setAllowsFractionalUnits:");
      pub fn setAllowsFractionalUnits(self: *Self, __allowsFractionalUnits: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsFractionalUnits_.get(), __allowsFractionalUnits, );
 }}
var sel_maximumUnitCount = CachedSelector.init("maximumUnitCount");
      pub fn maximumUnitCount(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maximumUnitCount.get(), );
 }}
var sel_setMaximumUnitCount_ = CachedSelector.init("setMaximumUnitCount:");
      pub fn setMaximumUnitCount(self: *Self, __maximumUnitCount: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaximumUnitCount_.get(), __maximumUnitCount, );
 }}
var sel_collapsesLargestUnit = CachedSelector.init("collapsesLargestUnit");
      pub fn collapsesLargestUnit(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_collapsesLargestUnit.get(), );
 }}
var sel_setCollapsesLargestUnit_ = CachedSelector.init("setCollapsesLargestUnit:");
      pub fn setCollapsesLargestUnit(self: *Self, __collapsesLargestUnit: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCollapsesLargestUnit_.get(), __collapsesLargestUnit, );
 }}
var sel_includesApproximationPhrase = CachedSelector.init("includesApproximationPhrase");
      pub fn includesApproximationPhrase(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_includesApproximationPhrase.get(), );
 }}
var sel_setIncludesApproximationPhrase_ = CachedSelector.init("setIncludesApproximationPhrase:");
      pub fn setIncludesApproximationPhrase(self: *Self, __includesApproximationPhrase: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIncludesApproximationPhrase_.get(), __includesApproximationPhrase, );
 }}
var sel_includesTimeRemainingPhrase = CachedSelector.init("includesTimeRemainingPhrase");
      pub fn includesTimeRemainingPhrase(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_includesTimeRemainingPhrase.get(), );
 }}
var sel_setIncludesTimeRemainingPhrase_ = CachedSelector.init("setIncludesTimeRemainingPhrase:");
      pub fn setIncludesTimeRemainingPhrase(self: *Self, __includesTimeRemainingPhrase: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIncludesTimeRemainingPhrase_.get(), __includesTimeRemainingPhrase, );
 }}
var sel_formattingContext = CachedSelector.init("formattingContext");
      pub fn formattingContext(self: *Self, ) NSFormattingContext {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSFormattingContext, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formattingContext.get(), );
 }}
var sel_setFormattingContext_ = CachedSelector.init("setFormattingContext:");
      pub fn setFormattingContext(self: *Self, __formattingContext: NSFormattingContext, ) void {{
           return @as(*const fn(*Self, SEL, NSFormattingContext, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormattingContext_.get(), __formattingContext, );
 }}
  };
}

pub const NSDateComponentsFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSDateComponentsFormatterInterfaceMixin(Self, "NSDateComponentsFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDateComponentsFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSDateComponentsFormatter");
};

pub fn NSUserUnixTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_executeWithArguments_completionHandler_ = CachedSelector.init("executeWithArguments:completionHandler:");
      pub fn executeWithArgumentscompletionHandler(self: *Self, __arguments:  ?* NSArray, __handler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeWithArguments_completionHandler_.get(), __arguments, __handler, );
 }}
var sel_standardInput = CachedSelector.init("standardInput");
      pub fn standardInput(self: *Self, )  ?* NSFileHandle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSFileHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standardInput.get(), );
 }}
var sel_setStandardInput_ = CachedSelector.init("setStandardInput:");
      pub fn setStandardInput(self: *Self, __standardInput:  ?* NSFileHandle, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSFileHandle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandardInput_.get(), __standardInput, );
 }}
var sel_standardOutput = CachedSelector.init("standardOutput");
      pub fn standardOutput(self: *Self, )  ?* NSFileHandle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSFileHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standardOutput.get(), );
 }}
var sel_setStandardOutput_ = CachedSelector.init("setStandardOutput:");
      pub fn setStandardOutput(self: *Self, __standardOutput:  ?* NSFileHandle, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSFileHandle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandardOutput_.get(), __standardOutput, );
 }}
var sel_standardError = CachedSelector.init("standardError");
      pub fn standardError(self: *Self, )  ?* NSFileHandle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSFileHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standardError.get(), );
 }}
var sel_setStandardError_ = CachedSelector.init("setStandardError:");
      pub fn setStandardError(self: *Self, __standardError:  ?* NSFileHandle, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSFileHandle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandardError_.get(), __standardError, );
 }}
  };
}

pub const NSUserUnixTask = opaque {
  const Self = @This();
  pub usingnamespace NSUserUnixTaskInterfaceMixin(Self, "NSUserUnixTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserUnixTask");
  pub usingnamespace NSUserScriptTaskInterfaceMixin(Self, "NSUserUnixTask");
};

pub fn MTLTileRenderPipelineDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_reset = CachedSelector.init("reset");
      pub fn reset(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reset.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_tileFunction = CachedSelector.init("tileFunction");
      pub fn tileFunction(self: *Self, )  * MTLFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tileFunction.get(), );
 }}
var sel_setTileFunction_ = CachedSelector.init("setTileFunction:");
      pub fn setTileFunction(self: *Self, __tileFunction:  * MTLFunction, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileFunction_.get(), __tileFunction, );
 }}
var sel_rasterSampleCount = CachedSelector.init("rasterSampleCount");
      pub fn rasterSampleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rasterSampleCount.get(), );
 }}
var sel_setRasterSampleCount_ = CachedSelector.init("setRasterSampleCount:");
      pub fn setRasterSampleCount(self: *Self, __rasterSampleCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRasterSampleCount_.get(), __rasterSampleCount, );
 }}
var sel_colorAttachments = CachedSelector.init("colorAttachments");
      pub fn colorAttachments(self: *Self, )  * MTLTileRenderPipelineColorAttachmentDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLTileRenderPipelineColorAttachmentDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_colorAttachments.get(), );
 }}
var sel_threadgroupSizeMatchesTileSize = CachedSelector.init("threadgroupSizeMatchesTileSize");
      pub fn threadgroupSizeMatchesTileSize(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadgroupSizeMatchesTileSize.get(), );
 }}
var sel_setThreadgroupSizeMatchesTileSize_ = CachedSelector.init("setThreadgroupSizeMatchesTileSize:");
      pub fn setThreadgroupSizeMatchesTileSize(self: *Self, __threadgroupSizeMatchesTileSize: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setThreadgroupSizeMatchesTileSize_.get(), __threadgroupSizeMatchesTileSize, );
 }}
var sel_tileBuffers = CachedSelector.init("tileBuffers");
      pub fn tileBuffers(self: *Self, )  * MTLPipelineBufferDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLPipelineBufferDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tileBuffers.get(), );
 }}
var sel_maxTotalThreadsPerThreadgroup = CachedSelector.init("maxTotalThreadsPerThreadgroup");
      pub fn maxTotalThreadsPerThreadgroup(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadsPerThreadgroup.get(), );
 }}
var sel_setMaxTotalThreadsPerThreadgroup_ = CachedSelector.init("setMaxTotalThreadsPerThreadgroup:");
      pub fn setMaxTotalThreadsPerThreadgroup(self: *Self, __maxTotalThreadsPerThreadgroup: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxTotalThreadsPerThreadgroup_.get(), __maxTotalThreadsPerThreadgroup, );
 }}
var sel_binaryArchives = CachedSelector.init("binaryArchives");
      pub fn binaryArchives(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_binaryArchives.get(), );
 }}
var sel_setBinaryArchives_ = CachedSelector.init("setBinaryArchives:");
      pub fn setBinaryArchives(self: *Self, __binaryArchives:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBinaryArchives_.get(), __binaryArchives, );
 }}
var sel_preloadedLibraries = CachedSelector.init("preloadedLibraries");
      pub fn preloadedLibraries(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_preloadedLibraries.get(), );
 }}
var sel_setPreloadedLibraries_ = CachedSelector.init("setPreloadedLibraries:");
      pub fn setPreloadedLibraries(self: *Self, __preloadedLibraries:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPreloadedLibraries_.get(), __preloadedLibraries, );
 }}
var sel_linkedFunctions = CachedSelector.init("linkedFunctions");
      pub fn linkedFunctions(self: *Self, )  * MTLLinkedFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLLinkedFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_linkedFunctions.get(), );
 }}
var sel_setLinkedFunctions_ = CachedSelector.init("setLinkedFunctions:");
      pub fn setLinkedFunctions(self: *Self, __linkedFunctions:  ?* MTLLinkedFunctions, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLLinkedFunctions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLinkedFunctions_.get(), __linkedFunctions, );
 }}
var sel_supportAddingBinaryFunctions = CachedSelector.init("supportAddingBinaryFunctions");
      pub fn supportAddingBinaryFunctions(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportAddingBinaryFunctions.get(), );
 }}
var sel_setSupportAddingBinaryFunctions_ = CachedSelector.init("setSupportAddingBinaryFunctions:");
      pub fn setSupportAddingBinaryFunctions(self: *Self, __supportAddingBinaryFunctions: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportAddingBinaryFunctions_.get(), __supportAddingBinaryFunctions, );
 }}
var sel_maxCallStackDepth = CachedSelector.init("maxCallStackDepth");
      pub fn maxCallStackDepth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxCallStackDepth.get(), );
 }}
var sel_setMaxCallStackDepth_ = CachedSelector.init("setMaxCallStackDepth:");
      pub fn setMaxCallStackDepth(self: *Self, __maxCallStackDepth: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxCallStackDepth_.get(), __maxCallStackDepth, );
 }}
  };
}

pub const MTLTileRenderPipelineDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLTileRenderPipelineDescriptorInterfaceMixin(Self, "MTLTileRenderPipelineDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLTileRenderPipelineDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLTileRenderPipelineDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLTileRenderPipelineDescriptor");
};

pub fn MTLIndirectCommandBufferDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_commandTypes = CachedSelector.init("commandTypes");
      pub fn commandTypes(self: *Self, ) MTLIndirectCommandType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLIndirectCommandType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandTypes.get(), );
 }}
var sel_setCommandTypes_ = CachedSelector.init("setCommandTypes:");
      pub fn setCommandTypes(self: *Self, __commandTypes: MTLIndirectCommandType, ) void {{
           return @as(*const fn(*Self, SEL, MTLIndirectCommandType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCommandTypes_.get(), __commandTypes, );
 }}
var sel_inheritPipelineState = CachedSelector.init("inheritPipelineState");
      pub fn inheritPipelineState(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_inheritPipelineState.get(), );
 }}
var sel_setInheritPipelineState_ = CachedSelector.init("setInheritPipelineState:");
      pub fn setInheritPipelineState(self: *Self, __inheritPipelineState: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInheritPipelineState_.get(), __inheritPipelineState, );
 }}
var sel_inheritBuffers = CachedSelector.init("inheritBuffers");
      pub fn inheritBuffers(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_inheritBuffers.get(), );
 }}
var sel_setInheritBuffers_ = CachedSelector.init("setInheritBuffers:");
      pub fn setInheritBuffers(self: *Self, __inheritBuffers: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInheritBuffers_.get(), __inheritBuffers, );
 }}
var sel_maxVertexBufferBindCount = CachedSelector.init("maxVertexBufferBindCount");
      pub fn maxVertexBufferBindCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxVertexBufferBindCount.get(), );
 }}
var sel_setMaxVertexBufferBindCount_ = CachedSelector.init("setMaxVertexBufferBindCount:");
      pub fn setMaxVertexBufferBindCount(self: *Self, __maxVertexBufferBindCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxVertexBufferBindCount_.get(), __maxVertexBufferBindCount, );
 }}
var sel_maxFragmentBufferBindCount = CachedSelector.init("maxFragmentBufferBindCount");
      pub fn maxFragmentBufferBindCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxFragmentBufferBindCount.get(), );
 }}
var sel_setMaxFragmentBufferBindCount_ = CachedSelector.init("setMaxFragmentBufferBindCount:");
      pub fn setMaxFragmentBufferBindCount(self: *Self, __maxFragmentBufferBindCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxFragmentBufferBindCount_.get(), __maxFragmentBufferBindCount, );
 }}
var sel_maxKernelBufferBindCount = CachedSelector.init("maxKernelBufferBindCount");
      pub fn maxKernelBufferBindCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxKernelBufferBindCount.get(), );
 }}
var sel_setMaxKernelBufferBindCount_ = CachedSelector.init("setMaxKernelBufferBindCount:");
      pub fn setMaxKernelBufferBindCount(self: *Self, __maxKernelBufferBindCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxKernelBufferBindCount_.get(), __maxKernelBufferBindCount, );
 }}
var sel_maxKernelThreadgroupMemoryBindCount = CachedSelector.init("maxKernelThreadgroupMemoryBindCount");
      pub fn maxKernelThreadgroupMemoryBindCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxKernelThreadgroupMemoryBindCount.get(), );
 }}
var sel_setMaxKernelThreadgroupMemoryBindCount_ = CachedSelector.init("setMaxKernelThreadgroupMemoryBindCount:");
      pub fn setMaxKernelThreadgroupMemoryBindCount(self: *Self, __maxKernelThreadgroupMemoryBindCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxKernelThreadgroupMemoryBindCount_.get(), __maxKernelThreadgroupMemoryBindCount, );
 }}
var sel_supportRayTracing = CachedSelector.init("supportRayTracing");
      pub fn supportRayTracing(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportRayTracing.get(), );
 }}
var sel_setSupportRayTracing_ = CachedSelector.init("setSupportRayTracing:");
      pub fn setSupportRayTracing(self: *Self, __supportRayTracing: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportRayTracing_.get(), __supportRayTracing, );
 }}
var sel_supportDynamicAttributeStride = CachedSelector.init("supportDynamicAttributeStride");
      pub fn supportDynamicAttributeStride(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportDynamicAttributeStride.get(), );
 }}
var sel_setSupportDynamicAttributeStride_ = CachedSelector.init("setSupportDynamicAttributeStride:");
      pub fn setSupportDynamicAttributeStride(self: *Self, __supportDynamicAttributeStride: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportDynamicAttributeStride_.get(), __supportDynamicAttributeStride, );
 }}
  };
}

pub const MTLIndirectCommandBufferDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLIndirectCommandBufferDescriptorInterfaceMixin(Self, "MTLIndirectCommandBufferDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLIndirectCommandBufferDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIndirectCommandBufferDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLIndirectCommandBufferDescriptor");
};

pub fn NSByteCountFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stringFromByteCount_countStyle_ = CachedSelector.init("stringFromByteCount:countStyle:");
      pub fn stringFromByteCountcountStyle(__byteCount: c_longlong, __countStyle: NSByteCountFormatterCountStyle, )  * NSString {{
           return @as(*const fn(Class, SEL, c_longlong, NSByteCountFormatterCountStyle, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_stringFromByteCount_countStyle_.get(), __byteCount, __countStyle, );
 }}
var sel_stringFromByteCount_ = CachedSelector.init("stringFromByteCount:");
      pub fn stringFromByteCount(self: *Self, __byteCount: c_longlong, )  * NSString {{
           return @as(*const fn(*Self, SEL, c_longlong, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromByteCount_.get(), __byteCount, );
 }}
var sel_stringFromMeasurement_countStyle_ = CachedSelector.init("stringFromMeasurement:countStyle:");
      pub fn stringFromMeasurementcountStyle(__measurement:  * NSMeasurement, __countStyle: NSByteCountFormatterCountStyle, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSMeasurement, NSByteCountFormatterCountStyle, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_stringFromMeasurement_countStyle_.get(), __measurement, __countStyle, );
 }}
var sel_stringFromMeasurement_ = CachedSelector.init("stringFromMeasurement:");
      pub fn stringFromMeasurement(self: *Self, __measurement:  * NSMeasurement, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSMeasurement, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromMeasurement_.get(), __measurement, );
 }}
var sel_stringForObjectValue_ = CachedSelector.init("stringForObjectValue:");
      pub fn stringForObjectValue(self: *Self, __obj: id, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringForObjectValue_.get(), __obj, );
 }}
var sel_allowedUnits = CachedSelector.init("allowedUnits");
      pub fn allowedUnits(self: *Self, ) NSByteCountFormatterUnits {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSByteCountFormatterUnits, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowedUnits.get(), );
 }}
var sel_setAllowedUnits_ = CachedSelector.init("setAllowedUnits:");
      pub fn setAllowedUnits(self: *Self, __allowedUnits: NSByteCountFormatterUnits, ) void {{
           return @as(*const fn(*Self, SEL, NSByteCountFormatterUnits, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowedUnits_.get(), __allowedUnits, );
 }}
var sel_countStyle = CachedSelector.init("countStyle");
      pub fn countStyle(self: *Self, ) NSByteCountFormatterCountStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSByteCountFormatterCountStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countStyle.get(), );
 }}
var sel_setCountStyle_ = CachedSelector.init("setCountStyle:");
      pub fn setCountStyle(self: *Self, __countStyle: NSByteCountFormatterCountStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSByteCountFormatterCountStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCountStyle_.get(), __countStyle, );
 }}
var sel_allowsNonnumericFormatting = CachedSelector.init("allowsNonnumericFormatting");
      pub fn allowsNonnumericFormatting(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsNonnumericFormatting.get(), );
 }}
var sel_setAllowsNonnumericFormatting_ = CachedSelector.init("setAllowsNonnumericFormatting:");
      pub fn setAllowsNonnumericFormatting(self: *Self, __allowsNonnumericFormatting: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsNonnumericFormatting_.get(), __allowsNonnumericFormatting, );
 }}
var sel_includesUnit = CachedSelector.init("includesUnit");
      pub fn includesUnit(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_includesUnit.get(), );
 }}
var sel_setIncludesUnit_ = CachedSelector.init("setIncludesUnit:");
      pub fn setIncludesUnit(self: *Self, __includesUnit: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIncludesUnit_.get(), __includesUnit, );
 }}
var sel_includesCount = CachedSelector.init("includesCount");
      pub fn includesCount(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_includesCount.get(), );
 }}
var sel_setIncludesCount_ = CachedSelector.init("setIncludesCount:");
      pub fn setIncludesCount(self: *Self, __includesCount: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIncludesCount_.get(), __includesCount, );
 }}
var sel_includesActualByteCount = CachedSelector.init("includesActualByteCount");
      pub fn includesActualByteCount(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_includesActualByteCount.get(), );
 }}
var sel_setIncludesActualByteCount_ = CachedSelector.init("setIncludesActualByteCount:");
      pub fn setIncludesActualByteCount(self: *Self, __includesActualByteCount: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIncludesActualByteCount_.get(), __includesActualByteCount, );
 }}
var sel_isAdaptive = CachedSelector.init("isAdaptive");
      pub fn isAdaptive(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAdaptive.get(), );
 }}
var sel_setAdaptive_ = CachedSelector.init("setAdaptive:");
      pub fn setAdaptive(self: *Self, __adaptive: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAdaptive_.get(), __adaptive, );
 }}
var sel_zeroPadsFractionDigits = CachedSelector.init("zeroPadsFractionDigits");
      pub fn zeroPadsFractionDigits(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_zeroPadsFractionDigits.get(), );
 }}
var sel_setZeroPadsFractionDigits_ = CachedSelector.init("setZeroPadsFractionDigits:");
      pub fn setZeroPadsFractionDigits(self: *Self, __zeroPadsFractionDigits: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setZeroPadsFractionDigits_.get(), __zeroPadsFractionDigits, );
 }}
var sel_formattingContext = CachedSelector.init("formattingContext");
      pub fn formattingContext(self: *Self, ) NSFormattingContext {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSFormattingContext, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formattingContext.get(), );
 }}
var sel_setFormattingContext_ = CachedSelector.init("setFormattingContext:");
      pub fn setFormattingContext(self: *Self, __formattingContext: NSFormattingContext, ) void {{
           return @as(*const fn(*Self, SEL, NSFormattingContext, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormattingContext_.get(), __formattingContext, );
 }}
  };
}

pub const NSByteCountFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSByteCountFormatterInterfaceMixin(Self, "NSByteCountFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSByteCountFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSByteCountFormatter");
};

pub fn NSUnarchiverInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initForReadingWithData_ = CachedSelector.init("initForReadingWithData:");
      pub fn initForReadingWithData(self: *Self, __data:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initForReadingWithData_.get(), __data, );
 }}
var sel_setObjectZone_ = CachedSelector.init("setObjectZone:");
      pub fn setObjectZone(self: *Self, __zone:  [*c] _NSZone, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] _NSZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectZone_.get(), __zone, );
 }}
var sel_objectZone = CachedSelector.init("objectZone");
      pub fn objectZone(self: *Self, )  [*c] _NSZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] _NSZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectZone.get(), );
 }}
var sel_unarchiveObjectWithData_ = CachedSelector.init("unarchiveObjectWithData:");
      pub fn unarchiveObjectWithData(__data:  * NSData, ) id {{
           return @as(*const fn(Class, SEL,  * NSData, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_unarchiveObjectWithData_.get(), __data, );
 }}
var sel_unarchiveObjectWithFile_ = CachedSelector.init("unarchiveObjectWithFile:");
      pub fn unarchiveObjectWithFile(__path:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_unarchiveObjectWithFile_.get(), __path, );
 }}
var sel_decodeClassName_asClassName_ = CachedSelector.init("decodeClassName:asClassName:");
      pub fn decodeClassNameasClassName(__inArchiveName:  * NSString, __trueName:  * NSString, ) void {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_decodeClassName_asClassName_.get(), __inArchiveName, __trueName, );
 }}
var sel_classNameDecodedForArchiveClassName_ = CachedSelector.init("classNameDecodedForArchiveClassName:");
      pub fn classNameDecodedForArchiveClassName(__inArchiveName:  * NSString, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_classNameDecodedForArchiveClassName_.get(), __inArchiveName, );
 }}
var sel_replaceObject_withObject_ = CachedSelector.init("replaceObject:withObject:");
      pub fn replaceObjectwithObject(self: *Self, __object: id, __newObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceObject_withObject_.get(), __object, __newObject, );
 }}
var sel_isAtEnd = CachedSelector.init("isAtEnd");
      pub fn isAtEnd(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAtEnd.get(), );
 }}
var sel_systemVersion = CachedSelector.init("systemVersion");
      pub fn systemVersion(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_systemVersion.get(), );
 }}
  };
}

pub const NSUnarchiver = opaque {
  const Self = @This();
  pub usingnamespace NSUnarchiverInterfaceMixin(Self, "NSUnarchiver");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnarchiver");
  pub usingnamespace NSCoderInterfaceMixin(Self, "NSUnarchiver");
};

pub fn MTLCompileOptionsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_preprocessorMacros = CachedSelector.init("preprocessorMacros");
      pub fn preprocessorMacros(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_preprocessorMacros.get(), );
 }}
var sel_setPreprocessorMacros_ = CachedSelector.init("setPreprocessorMacros:");
      pub fn setPreprocessorMacros(self: *Self, __preprocessorMacros:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPreprocessorMacros_.get(), __preprocessorMacros, );
 }}
var sel_fastMathEnabled = CachedSelector.init("fastMathEnabled");
      pub fn fastMathEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fastMathEnabled.get(), );
 }}
var sel_setFastMathEnabled_ = CachedSelector.init("setFastMathEnabled:");
      pub fn setFastMathEnabled(self: *Self, __fastMathEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFastMathEnabled_.get(), __fastMathEnabled, );
 }}
var sel_languageVersion = CachedSelector.init("languageVersion");
      pub fn languageVersion(self: *Self, ) MTLLanguageVersion {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLLanguageVersion, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_languageVersion.get(), );
 }}
var sel_setLanguageVersion_ = CachedSelector.init("setLanguageVersion:");
      pub fn setLanguageVersion(self: *Self, __languageVersion: MTLLanguageVersion, ) void {{
           return @as(*const fn(*Self, SEL, MTLLanguageVersion, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLanguageVersion_.get(), __languageVersion, );
 }}
var sel_libraryType = CachedSelector.init("libraryType");
      pub fn libraryType(self: *Self, ) MTLLibraryType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLLibraryType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_libraryType.get(), );
 }}
var sel_setLibraryType_ = CachedSelector.init("setLibraryType:");
      pub fn setLibraryType(self: *Self, __libraryType: MTLLibraryType, ) void {{
           return @as(*const fn(*Self, SEL, MTLLibraryType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLibraryType_.get(), __libraryType, );
 }}
var sel_installName = CachedSelector.init("installName");
      pub fn installName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_installName.get(), );
 }}
var sel_setInstallName_ = CachedSelector.init("setInstallName:");
      pub fn setInstallName(self: *Self, __installName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstallName_.get(), __installName, );
 }}
var sel_libraries = CachedSelector.init("libraries");
      pub fn libraries(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_libraries.get(), );
 }}
var sel_setLibraries_ = CachedSelector.init("setLibraries:");
      pub fn setLibraries(self: *Self, __libraries:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLibraries_.get(), __libraries, );
 }}
var sel_preserveInvariance = CachedSelector.init("preserveInvariance");
      pub fn preserveInvariance(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_preserveInvariance.get(), );
 }}
var sel_setPreserveInvariance_ = CachedSelector.init("setPreserveInvariance:");
      pub fn setPreserveInvariance(self: *Self, __preserveInvariance: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPreserveInvariance_.get(), __preserveInvariance, );
 }}
var sel_optimizationLevel = CachedSelector.init("optimizationLevel");
      pub fn optimizationLevel(self: *Self, ) MTLLibraryOptimizationLevel {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLLibraryOptimizationLevel, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_optimizationLevel.get(), );
 }}
var sel_setOptimizationLevel_ = CachedSelector.init("setOptimizationLevel:");
      pub fn setOptimizationLevel(self: *Self, __optimizationLevel: MTLLibraryOptimizationLevel, ) void {{
           return @as(*const fn(*Self, SEL, MTLLibraryOptimizationLevel, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOptimizationLevel_.get(), __optimizationLevel, );
 }}
var sel_compileSymbolVisibility = CachedSelector.init("compileSymbolVisibility");
      pub fn compileSymbolVisibility(self: *Self, ) MTLCompileSymbolVisibility {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCompileSymbolVisibility, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compileSymbolVisibility.get(), );
 }}
var sel_setCompileSymbolVisibility_ = CachedSelector.init("setCompileSymbolVisibility:");
      pub fn setCompileSymbolVisibility(self: *Self, __compileSymbolVisibility: MTLCompileSymbolVisibility, ) void {{
           return @as(*const fn(*Self, SEL, MTLCompileSymbolVisibility, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCompileSymbolVisibility_.get(), __compileSymbolVisibility, );
 }}
var sel_allowReferencingUndefinedSymbols = CachedSelector.init("allowReferencingUndefinedSymbols");
      pub fn allowReferencingUndefinedSymbols(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowReferencingUndefinedSymbols.get(), );
 }}
var sel_setAllowReferencingUndefinedSymbols_ = CachedSelector.init("setAllowReferencingUndefinedSymbols:");
      pub fn setAllowReferencingUndefinedSymbols(self: *Self, __allowReferencingUndefinedSymbols: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowReferencingUndefinedSymbols_.get(), __allowReferencingUndefinedSymbols, );
 }}
var sel_maxTotalThreadsPerThreadgroup = CachedSelector.init("maxTotalThreadsPerThreadgroup");
      pub fn maxTotalThreadsPerThreadgroup(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadsPerThreadgroup.get(), );
 }}
var sel_setMaxTotalThreadsPerThreadgroup_ = CachedSelector.init("setMaxTotalThreadsPerThreadgroup:");
      pub fn setMaxTotalThreadsPerThreadgroup(self: *Self, __maxTotalThreadsPerThreadgroup: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxTotalThreadsPerThreadgroup_.get(), __maxTotalThreadsPerThreadgroup, );
 }}
  };
}

pub const MTLCompileOptions = opaque {
  const Self = @This();
  pub usingnamespace MTLCompileOptionsInterfaceMixin(Self, "MTLCompileOptions");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLCompileOptions");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCompileOptions");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLCompileOptions");
};

pub fn NSNullInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_null = CachedSelector.init("null");
      pub fn _null()  * NSNull {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSNull, @ptrCast(&objc_msgSend))(class.get(), sel_null.get(), );
 }}
  };
}

pub const NSNull = opaque {
  const Self = @This();
  pub usingnamespace NSNullInterfaceMixin(Self, "NSNull");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSNull");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSNull");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNull");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSNull");
};

pub fn NSFileManagerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_ = CachedSelector.init("mountedVolumeURLsIncludingResourceValuesForKeys:options:");
      pub fn mountedVolumeURLsIncludingResourceValuesForKeysoptions(self: *Self, __propertyKeys:  ?* NSArray, __options: NSVolumeEnumerationOptions, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, NSVolumeEnumerationOptions, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_.get(), __propertyKeys, __options, );
 }}
var sel_unmountVolumeAtURL_options_completionHandler_ = CachedSelector.init("unmountVolumeAtURL:options:completionHandler:");
      pub fn unmountVolumeAtURLoptionscompletionHandler(self: *Self, __url:  * NSURL, __mask: NSFileManagerUnmountOptions, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSFileManagerUnmountOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unmountVolumeAtURL_options_completionHandler_.get(), __url, __mask, __completionHandler, );
 }}
var sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_ = CachedSelector.init("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
      pub fn contentsOfDirectoryAtURLincludingPropertiesForKeysoptionserror(self: *Self, __url:  * NSURL, __keys:  ?* NSArray, __mask: NSDirectoryEnumerationOptions, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSURL,  ?* NSArray, NSDirectoryEnumerationOptions,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_.get(), __url, __keys, __mask, __an_error, );
 }}
var sel_URLsForDirectory_inDomains_ = CachedSelector.init("URLsForDirectory:inDomains:");
      pub fn URLsForDirectoryinDomains(self: *Self, __directory: NSSearchPathDirectory, __domainMask: NSSearchPathDomainMask, )  * NSArray {{
           return @as(*const fn(*Self, SEL, NSSearchPathDirectory, NSSearchPathDomainMask, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLsForDirectory_inDomains_.get(), __directory, __domainMask, );
 }}
var sel_URLForDirectory_inDomain_appropriateForURL_create_error_ = CachedSelector.init("URLForDirectory:inDomain:appropriateForURL:create:error:");
      pub fn URLForDirectoryinDomainappropriateForURLcreateerror(self: *Self, __directory: NSSearchPathDirectory, __domain: NSSearchPathDomainMask, __url:  ?* NSURL, __shouldCreate: c_int, __an_error:  [*c]  ?* NSError, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, NSSearchPathDirectory, NSSearchPathDomainMask,  ?* NSURL, c_int,  [*c]  ?* NSError, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLForDirectory_inDomain_appropriateForURL_create_error_.get(), __directory, __domain, __url, __shouldCreate, __an_error, );
 }}
var sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_ = CachedSelector.init("getRelationship:ofDirectoryAtURL:toItemAtURL:error:");
      pub fn getRelationshipofDirectoryAtURLtoItemAtURLerror(self: *Self, __outRelationship:  [*c] NSURLRelationship, __directoryURL:  * NSURL, __otherURL:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] NSURLRelationship,  * NSURL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_.get(), __outRelationship, __directoryURL, __otherURL, __an_error, );
 }}
var sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_ = CachedSelector.init("getRelationship:ofDirectory:inDomain:toItemAtURL:error:");
      pub fn getRelationshipofDirectoryinDomaintoItemAtURLerror(self: *Self, __outRelationship:  [*c] NSURLRelationship, __directory: NSSearchPathDirectory, __domainMask: NSSearchPathDomainMask, __url:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] NSURLRelationship, NSSearchPathDirectory, NSSearchPathDomainMask,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_.get(), __outRelationship, __directory, __domainMask, __url, __an_error, );
 }}
var sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_ = CachedSelector.init("createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
      pub fn createDirectoryAtURLwithIntermediateDirectoriesattributeserror(self: *Self, __url:  * NSURL, __createIntermediates: c_int, __attributes:  ?* NSDictionary, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_int,  ?* NSDictionary,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_.get(), __url, __createIntermediates, __attributes, __an_error, );
 }}
var sel_createSymbolicLinkAtURL_withDestinationURL_error_ = CachedSelector.init("createSymbolicLinkAtURL:withDestinationURL:error:");
      pub fn createSymbolicLinkAtURLwithDestinationURLerror(self: *Self, __url:  * NSURL, __destURL:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createSymbolicLinkAtURL_withDestinationURL_error_.get(), __url, __destURL, __an_error, );
 }}
var sel_setAttributes_ofItemAtPath_error_ = CachedSelector.init("setAttributes:ofItemAtPath:error:");
      pub fn setAttributesofItemAtPatherror(self: *Self, __attributes:  * NSDictionary, __path:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDictionary,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributes_ofItemAtPath_error_.get(), __attributes, __path, __an_error, );
 }}
var sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_ = CachedSelector.init("createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
      pub fn createDirectoryAtPathwithIntermediateDirectoriesattributeserror(self: *Self, __path:  * NSString, __createIntermediates: c_int, __attributes:  ?* NSDictionary, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int,  ?* NSDictionary,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_.get(), __path, __createIntermediates, __attributes, __an_error, );
 }}
var sel_contentsOfDirectoryAtPath_error_ = CachedSelector.init("contentsOfDirectoryAtPath:error:");
      pub fn contentsOfDirectoryAtPatherror(self: *Self, __path:  * NSString, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_contentsOfDirectoryAtPath_error_.get(), __path, __an_error, );
 }}
var sel_subpathsOfDirectoryAtPath_error_ = CachedSelector.init("subpathsOfDirectoryAtPath:error:");
      pub fn subpathsOfDirectoryAtPatherror(self: *Self, __path:  * NSString, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_subpathsOfDirectoryAtPath_error_.get(), __path, __an_error, );
 }}
var sel_attributesOfItemAtPath_error_ = CachedSelector.init("attributesOfItemAtPath:error:");
      pub fn attributesOfItemAtPatherror(self: *Self, __path:  * NSString, __an_error:  [*c]  ?* NSError, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributesOfItemAtPath_error_.get(), __path, __an_error, );
 }}
var sel_attributesOfFileSystemForPath_error_ = CachedSelector.init("attributesOfFileSystemForPath:error:");
      pub fn attributesOfFileSystemForPatherror(self: *Self, __path:  * NSString, __an_error:  [*c]  ?* NSError, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributesOfFileSystemForPath_error_.get(), __path, __an_error, );
 }}
var sel_createSymbolicLinkAtPath_withDestinationPath_error_ = CachedSelector.init("createSymbolicLinkAtPath:withDestinationPath:error:");
      pub fn createSymbolicLinkAtPathwithDestinationPatherror(self: *Self, __path:  * NSString, __destPath:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createSymbolicLinkAtPath_withDestinationPath_error_.get(), __path, __destPath, __an_error, );
 }}
var sel_destinationOfSymbolicLinkAtPath_error_ = CachedSelector.init("destinationOfSymbolicLinkAtPath:error:");
      pub fn destinationOfSymbolicLinkAtPatherror(self: *Self, __path:  * NSString, __an_error:  [*c]  ?* NSError, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_destinationOfSymbolicLinkAtPath_error_.get(), __path, __an_error, );
 }}
var sel_copyItemAtPath_toPath_error_ = CachedSelector.init("copyItemAtPath:toPath:error:");
      pub fn copyItemAtPathtoPatherror(self: *Self, __srcPath:  * NSString, __dstPath:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyItemAtPath_toPath_error_.get(), __srcPath, __dstPath, __an_error, );
 }}
var sel_moveItemAtPath_toPath_error_ = CachedSelector.init("moveItemAtPath:toPath:error:");
      pub fn moveItemAtPathtoPatherror(self: *Self, __srcPath:  * NSString, __dstPath:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_moveItemAtPath_toPath_error_.get(), __srcPath, __dstPath, __an_error, );
 }}
var sel_linkItemAtPath_toPath_error_ = CachedSelector.init("linkItemAtPath:toPath:error:");
      pub fn linkItemAtPathtoPatherror(self: *Self, __srcPath:  * NSString, __dstPath:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_linkItemAtPath_toPath_error_.get(), __srcPath, __dstPath, __an_error, );
 }}
var sel_removeItemAtPath_error_ = CachedSelector.init("removeItemAtPath:error:");
      pub fn removeItemAtPatherror(self: *Self, __path:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeItemAtPath_error_.get(), __path, __an_error, );
 }}
var sel_copyItemAtURL_toURL_error_ = CachedSelector.init("copyItemAtURL:toURL:error:");
      pub fn copyItemAtURLtoURLerror(self: *Self, __srcURL:  * NSURL, __dstURL:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyItemAtURL_toURL_error_.get(), __srcURL, __dstURL, __an_error, );
 }}
var sel_moveItemAtURL_toURL_error_ = CachedSelector.init("moveItemAtURL:toURL:error:");
      pub fn moveItemAtURLtoURLerror(self: *Self, __srcURL:  * NSURL, __dstURL:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_moveItemAtURL_toURL_error_.get(), __srcURL, __dstURL, __an_error, );
 }}
var sel_linkItemAtURL_toURL_error_ = CachedSelector.init("linkItemAtURL:toURL:error:");
      pub fn linkItemAtURLtoURLerror(self: *Self, __srcURL:  * NSURL, __dstURL:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_linkItemAtURL_toURL_error_.get(), __srcURL, __dstURL, __an_error, );
 }}
var sel_removeItemAtURL_error_ = CachedSelector.init("removeItemAtURL:error:");
      pub fn removeItemAtURLerror(self: *Self, __URL:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeItemAtURL_error_.get(), __URL, __an_error, );
 }}
var sel_trashItemAtURL_resultingItemURL_error_ = CachedSelector.init("trashItemAtURL:resultingItemURL:error:");
      pub fn trashItemAtURLresultingItemURLerror(self: *Self, __url:  * NSURL, __outResultingURL:  [*c]  ?* NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_trashItemAtURL_resultingItemURL_error_.get(), __url, __outResultingURL, __an_error, );
 }}
var sel_fileAttributesAtPath_traverseLink_ = CachedSelector.init("fileAttributesAtPath:traverseLink:");
      pub fn fileAttributesAtPathtraverseLink(self: *Self, __path:  * NSString, __yorn: c_int, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileAttributesAtPath_traverseLink_.get(), __path, __yorn, );
 }}
var sel_changeFileAttributes_atPath_ = CachedSelector.init("changeFileAttributes:atPath:");
      pub fn changeFileAttributesatPath(self: *Self, __attributes:  * NSDictionary, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDictionary,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_changeFileAttributes_atPath_.get(), __attributes, __path, );
 }}
var sel_directoryContentsAtPath_ = CachedSelector.init("directoryContentsAtPath:");
      pub fn directoryContentsAtPath(self: *Self, __path:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_directoryContentsAtPath_.get(), __path, );
 }}
var sel_fileSystemAttributesAtPath_ = CachedSelector.init("fileSystemAttributesAtPath:");
      pub fn fileSystemAttributesAtPath(self: *Self, __path:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileSystemAttributesAtPath_.get(), __path, );
 }}
var sel_pathContentOfSymbolicLinkAtPath_ = CachedSelector.init("pathContentOfSymbolicLinkAtPath:");
      pub fn pathContentOfSymbolicLinkAtPath(self: *Self, __path:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathContentOfSymbolicLinkAtPath_.get(), __path, );
 }}
var sel_createSymbolicLinkAtPath_pathContent_ = CachedSelector.init("createSymbolicLinkAtPath:pathContent:");
      pub fn createSymbolicLinkAtPathpathContent(self: *Self, __path:  * NSString, __otherpath:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createSymbolicLinkAtPath_pathContent_.get(), __path, __otherpath, );
 }}
var sel_createDirectoryAtPath_attributes_ = CachedSelector.init("createDirectoryAtPath:attributes:");
      pub fn createDirectoryAtPathattributes(self: *Self, __path:  * NSString, __attributes:  * NSDictionary, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSDictionary, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createDirectoryAtPath_attributes_.get(), __path, __attributes, );
 }}
var sel_linkPath_toPath_handler_ = CachedSelector.init("linkPath:toPath:handler:");
      pub fn linkPathtoPathhandler(self: *Self, __src:  * NSString, __dest:  * NSString, __handler: id, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_linkPath_toPath_handler_.get(), __src, __dest, __handler, );
 }}
var sel_copyPath_toPath_handler_ = CachedSelector.init("copyPath:toPath:handler:");
      pub fn copyPathtoPathhandler(self: *Self, __src:  * NSString, __dest:  * NSString, __handler: id, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyPath_toPath_handler_.get(), __src, __dest, __handler, );
 }}
var sel_movePath_toPath_handler_ = CachedSelector.init("movePath:toPath:handler:");
      pub fn movePathtoPathhandler(self: *Self, __src:  * NSString, __dest:  * NSString, __handler: id, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_movePath_toPath_handler_.get(), __src, __dest, __handler, );
 }}
var sel_removeFileAtPath_handler_ = CachedSelector.init("removeFileAtPath:handler:");
      pub fn removeFileAtPathhandler(self: *Self, __path:  * NSString, __handler: id, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeFileAtPath_handler_.get(), __path, __handler, );
 }}
var sel_changeCurrentDirectoryPath_ = CachedSelector.init("changeCurrentDirectoryPath:");
      pub fn changeCurrentDirectoryPath(self: *Self, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_changeCurrentDirectoryPath_.get(), __path, );
 }}
var sel_fileExistsAtPath_ = CachedSelector.init("fileExistsAtPath:");
      pub fn fileExistsAtPath(self: *Self, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileExistsAtPath_.get(), __path, );
 }}
var sel_fileExistsAtPath_isDirectory_ = CachedSelector.init("fileExistsAtPath:isDirectory:");
      pub fn fileExistsAtPathisDirectory(self: *Self, __path:  * NSString, __isDirectory:  [*c] c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c] c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileExistsAtPath_isDirectory_.get(), __path, __isDirectory, );
 }}
var sel_isReadableFileAtPath_ = CachedSelector.init("isReadableFileAtPath:");
      pub fn isReadableFileAtPath(self: *Self, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isReadableFileAtPath_.get(), __path, );
 }}
var sel_isWritableFileAtPath_ = CachedSelector.init("isWritableFileAtPath:");
      pub fn isWritableFileAtPath(self: *Self, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isWritableFileAtPath_.get(), __path, );
 }}
var sel_isExecutableFileAtPath_ = CachedSelector.init("isExecutableFileAtPath:");
      pub fn isExecutableFileAtPath(self: *Self, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isExecutableFileAtPath_.get(), __path, );
 }}
var sel_isDeletableFileAtPath_ = CachedSelector.init("isDeletableFileAtPath:");
      pub fn isDeletableFileAtPath(self: *Self, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDeletableFileAtPath_.get(), __path, );
 }}
var sel_contentsEqualAtPath_andPath_ = CachedSelector.init("contentsEqualAtPath:andPath:");
      pub fn contentsEqualAtPathandPath(self: *Self, __path1:  * NSString, __path2:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_contentsEqualAtPath_andPath_.get(), __path1, __path2, );
 }}
var sel_displayNameAtPath_ = CachedSelector.init("displayNameAtPath:");
      pub fn displayNameAtPath(self: *Self, __path:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_displayNameAtPath_.get(), __path, );
 }}
var sel_componentsToDisplayForPath_ = CachedSelector.init("componentsToDisplayForPath:");
      pub fn componentsToDisplayForPath(self: *Self, __path:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_componentsToDisplayForPath_.get(), __path, );
 }}
var sel_enumeratorAtPath_ = CachedSelector.init("enumeratorAtPath:");
      pub fn enumeratorAtPath(self: *Self, __path:  * NSString, )  ?* NSDirectoryEnumerator {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDirectoryEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumeratorAtPath_.get(), __path, );
 }}
var sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_ = CachedSelector.init("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
      pub fn enumeratorAtURLincludingPropertiesForKeysoptionserrorHandler(self: *Self, __url:  * NSURL, __keys:  ?* NSArray, __mask: NSDirectoryEnumerationOptions, __handler: ?*u8, )  ?* NSDirectoryEnumerator {{
           return @as(*const fn(*Self, SEL,  * NSURL,  ?* NSArray, NSDirectoryEnumerationOptions, ?*u8, ) callconv(.C)  ?* NSDirectoryEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_.get(), __url, __keys, __mask, __handler, );
 }}
var sel_subpathsAtPath_ = CachedSelector.init("subpathsAtPath:");
      pub fn subpathsAtPath(self: *Self, __path:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_subpathsAtPath_.get(), __path, );
 }}
var sel_contentsAtPath_ = CachedSelector.init("contentsAtPath:");
      pub fn contentsAtPath(self: *Self, __path:  * NSString, )  ?* NSData {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_contentsAtPath_.get(), __path, );
 }}
var sel_createFileAtPath_contents_attributes_ = CachedSelector.init("createFileAtPath:contents:attributes:");
      pub fn createFileAtPathcontentsattributes(self: *Self, __path:  * NSString, __data:  ?* NSData, __attr:  ?* NSDictionary, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSData,  ?* NSDictionary, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createFileAtPath_contents_attributes_.get(), __path, __data, __attr, );
 }}
var sel_fileSystemRepresentationWithPath_ = CachedSelector.init("fileSystemRepresentationWithPath:");
      pub fn fileSystemRepresentationWithPath(self: *Self, __path:  * NSString, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileSystemRepresentationWithPath_.get(), __path, );
 }}
var sel_stringWithFileSystemRepresentation_length_ = CachedSelector.init("stringWithFileSystemRepresentation:length:");
      pub fn stringWithFileSystemRepresentationlength(self: *Self, __str:  [*c]  const u8, __len: c_ulong, )  * NSString {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, c_ulong, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringWithFileSystemRepresentation_length_.get(), __str, __len, );
 }}
var sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_ = CachedSelector.init("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:");
      pub fn replaceItemAtURLwithItemAtURLbackupItemNameoptionsresultingItemURLerror(self: *Self, __originalItemURL:  * NSURL, __newItemURL:  * NSURL, __backupItemName:  ?* NSString, __options: NSFileManagerItemReplacementOptions, __resultingURL:  [*c]  ?* NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSURL,  ?* NSString, NSFileManagerItemReplacementOptions,  [*c]  ?* NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_.get(), __originalItemURL, __newItemURL, __backupItemName, __options, __resultingURL, __an_error, );
 }}
var sel_setUbiquitous_itemAtURL_destinationURL_error_ = CachedSelector.init("setUbiquitous:itemAtURL:destinationURL:error:");
      pub fn setUbiquitousitemAtURLdestinationURLerror(self: *Self, __flag: c_int, __url:  * NSURL, __destinationURL:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL, c_int,  * NSURL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUbiquitous_itemAtURL_destinationURL_error_.get(), __flag, __url, __destinationURL, __an_error, );
 }}
var sel_isUbiquitousItemAtURL_ = CachedSelector.init("isUbiquitousItemAtURL:");
      pub fn isUbiquitousItemAtURL(self: *Self, __url:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isUbiquitousItemAtURL_.get(), __url, );
 }}
var sel_startDownloadingUbiquitousItemAtURL_error_ = CachedSelector.init("startDownloadingUbiquitousItemAtURL:error:");
      pub fn startDownloadingUbiquitousItemAtURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startDownloadingUbiquitousItemAtURL_error_.get(), __url, __an_error, );
 }}
var sel_evictUbiquitousItemAtURL_error_ = CachedSelector.init("evictUbiquitousItemAtURL:error:");
      pub fn evictUbiquitousItemAtURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_evictUbiquitousItemAtURL_error_.get(), __url, __an_error, );
 }}
var sel_URLForUbiquityContainerIdentifier_ = CachedSelector.init("URLForUbiquityContainerIdentifier:");
      pub fn URLForUbiquityContainerIdentifier(self: *Self, __containerIdentifier:  ?* NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLForUbiquityContainerIdentifier_.get(), __containerIdentifier, );
 }}
var sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_ = CachedSelector.init("URLForPublishingUbiquitousItemAtURL:expirationDate:error:");
      pub fn URLForPublishingUbiquitousItemAtURLexpirationDateerror(self: *Self, __url:  * NSURL, __outDate:  [*c]  ?* NSDate, __an_error:  [*c]  ?* NSError, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSDate,  [*c]  ?* NSError, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_.get(), __url, __outDate, __an_error, );
 }}
var sel_getFileProviderServicesForItemAtURL_completionHandler_ = CachedSelector.init("getFileProviderServicesForItemAtURL:completionHandler:");
      pub fn getFileProviderServicesForItemAtURLcompletionHandler(self: *Self, __url:  * NSURL, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getFileProviderServicesForItemAtURL_completionHandler_.get(), __url, __completionHandler, );
 }}
var sel_containerURLForSecurityApplicationGroupIdentifier_ = CachedSelector.init("containerURLForSecurityApplicationGroupIdentifier:");
      pub fn containerURLForSecurityApplicationGroupIdentifier(self: *Self, __groupIdentifier:  * NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containerURLForSecurityApplicationGroupIdentifier_.get(), __groupIdentifier, );
 }}
var sel_defaultManager = CachedSelector.init("defaultManager");
      pub fn defaultManager()  * NSFileManager {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSFileManager, @ptrCast(&objc_msgSend))(class.get(), sel_defaultManager.get(), );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSFileManagerDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSFileManagerDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSFileManagerDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSFileManagerDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_currentDirectoryPath = CachedSelector.init("currentDirectoryPath");
      pub fn currentDirectoryPath(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentDirectoryPath.get(), );
 }}
var sel_ubiquityIdentityToken = CachedSelector.init("ubiquityIdentityToken");
      pub fn ubiquityIdentityToken(self: *Self, )  ?* id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_ubiquityIdentityToken.get(), );
 }}
var sel_homeDirectoryForUser_ = CachedSelector.init("homeDirectoryForUser:");
      pub fn homeDirectoryForUser(self: *Self, __userName:  * NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_homeDirectoryForUser_.get(), __userName, );
 }}
var sel_homeDirectoryForCurrentUser = CachedSelector.init("homeDirectoryForCurrentUser");
      pub fn homeDirectoryForCurrentUser(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_homeDirectoryForCurrentUser.get(), );
 }}
var sel_temporaryDirectory = CachedSelector.init("temporaryDirectory");
      pub fn temporaryDirectory(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_temporaryDirectory.get(), );
 }}
  };
}

pub const NSFileManager = opaque {
  const Self = @This();
  pub usingnamespace NSFileManagerInterfaceMixin(Self, "NSFileManager");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileManager");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSFileManager");
};

pub fn NSRunLoopInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_getCFRunLoop = CachedSelector.init("getCFRunLoop");
      pub fn getCFRunLoop(self: *Self, )  [*c] __CFRunLoop {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] __CFRunLoop, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCFRunLoop.get(), );
 }}
var sel_addTimer_forMode_ = CachedSelector.init("addTimer:forMode:");
      pub fn addTimerforMode(self: *Self, __timer:  * NSTimer, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSTimer,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addTimer_forMode_.get(), __timer, __mode, );
 }}
var sel_addPort_forMode_ = CachedSelector.init("addPort:forMode:");
      pub fn addPortforMode(self: *Self, __aPort:  * NSPort, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSPort,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addPort_forMode_.get(), __aPort, __mode, );
 }}
var sel_removePort_forMode_ = CachedSelector.init("removePort:forMode:");
      pub fn removePortforMode(self: *Self, __aPort:  * NSPort, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSPort,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removePort_forMode_.get(), __aPort, __mode, );
 }}
var sel_limitDateForMode_ = CachedSelector.init("limitDateForMode:");
      pub fn limitDateForMode(self: *Self, __mode:  * NSString, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_limitDateForMode_.get(), __mode, );
 }}
var sel_acceptInputForMode_beforeDate_ = CachedSelector.init("acceptInputForMode:beforeDate:");
      pub fn acceptInputForModebeforeDate(self: *Self, __mode:  * NSString, __limitDate:  * NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_acceptInputForMode_beforeDate_.get(), __mode, __limitDate, );
 }}
var sel_currentRunLoop = CachedSelector.init("currentRunLoop");
      pub fn currentRunLoop()  * NSRunLoop {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSRunLoop, @ptrCast(&objc_msgSend))(class.get(), sel_currentRunLoop.get(), );
 }}
var sel_mainRunLoop = CachedSelector.init("mainRunLoop");
      pub fn mainRunLoop()  * NSRunLoop {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSRunLoop, @ptrCast(&objc_msgSend))(class.get(), sel_mainRunLoop.get(), );
 }}
var sel_currentMode = CachedSelector.init("currentMode");
      pub fn currentMode(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentMode.get(), );
 }}
var sel_run = CachedSelector.init("run");
      pub fn run(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_run.get(), );
 }}
var sel_runUntilDate_ = CachedSelector.init("runUntilDate:");
      pub fn runUntilDate(self: *Self, __limitDate:  * NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_runUntilDate_.get(), __limitDate, );
 }}
var sel_runMode_beforeDate_ = CachedSelector.init("runMode:beforeDate:");
      pub fn runModebeforeDate(self: *Self, __mode:  * NSString, __limitDate:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_runMode_beforeDate_.get(), __mode, __limitDate, );
 }}
var sel_configureAsServer = CachedSelector.init("configureAsServer");
      pub fn configureAsServer(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_configureAsServer.get(), );
 }}
var sel_performInModes_block_ = CachedSelector.init("performInModes:block:");
      pub fn performInModesblock(self: *Self, __modes:  * NSArray, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performInModes_block_.get(), __modes, __block, );
 }}
var sel_performBlock_ = CachedSelector.init("performBlock:");
      pub fn performBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performBlock_.get(), __block, );
 }}
var sel_performSelector_target_argument_order_modes_ = CachedSelector.init("performSelector:target:argument:order:modes:");
      pub fn performSelectortargetargumentordermodes(self: *Self, __aSelector: SEL, __target: id, __arg: id, __order: c_ulong, __modes:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id, id, c_ulong,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelector_target_argument_order_modes_.get(), __aSelector, __target, __arg, __order, __modes, );
 }}
var sel_cancelPerformSelector_target_argument_ = CachedSelector.init("cancelPerformSelector:target:argument:");
      pub fn cancelPerformSelectortargetargument(self: *Self, __aSelector: SEL, __target: id, __arg: id, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancelPerformSelector_target_argument_.get(), __aSelector, __target, __arg, );
 }}
var sel_cancelPerformSelectorsWithTarget_ = CachedSelector.init("cancelPerformSelectorsWithTarget:");
      pub fn cancelPerformSelectorsWithTarget(self: *Self, __target: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancelPerformSelectorsWithTarget_.get(), __target, );
 }}
  };
}

pub const NSRunLoop = opaque {
  const Self = @This();
  pub usingnamespace NSRunLoopInterfaceMixin(Self, "NSRunLoop");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSRunLoop");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSRunLoop");
};

pub fn MTLArgumentInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, ) MTLArgumentType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLArgumentType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
var sel_access = CachedSelector.init("access");
      pub fn access(self: *Self, ) MTLBindingAccess {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBindingAccess, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_access.get(), );
 }}
var sel_index = CachedSelector.init("index");
      pub fn index(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_index.get(), );
 }}
var sel_isActive = CachedSelector.init("isActive");
      pub fn isActive(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isActive.get(), );
 }}
var sel_bufferAlignment = CachedSelector.init("bufferAlignment");
      pub fn bufferAlignment(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferAlignment.get(), );
 }}
var sel_bufferDataSize = CachedSelector.init("bufferDataSize");
      pub fn bufferDataSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferDataSize.get(), );
 }}
var sel_bufferDataType = CachedSelector.init("bufferDataType");
      pub fn bufferDataType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferDataType.get(), );
 }}
var sel_bufferStructType = CachedSelector.init("bufferStructType");
      pub fn bufferStructType(self: *Self, )  ?* MTLStructType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLStructType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferStructType.get(), );
 }}
var sel_bufferPointerType = CachedSelector.init("bufferPointerType");
      pub fn bufferPointerType(self: *Self, )  ?* MTLPointerType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLPointerType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferPointerType.get(), );
 }}
var sel_threadgroupMemoryAlignment = CachedSelector.init("threadgroupMemoryAlignment");
      pub fn threadgroupMemoryAlignment(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadgroupMemoryAlignment.get(), );
 }}
var sel_threadgroupMemoryDataSize = CachedSelector.init("threadgroupMemoryDataSize");
      pub fn threadgroupMemoryDataSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadgroupMemoryDataSize.get(), );
 }}
var sel_textureType = CachedSelector.init("textureType");
      pub fn textureType(self: *Self, ) MTLTextureType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureType.get(), );
 }}
var sel_textureDataType = CachedSelector.init("textureDataType");
      pub fn textureDataType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureDataType.get(), );
 }}
var sel_isDepthTexture = CachedSelector.init("isDepthTexture");
      pub fn isDepthTexture(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDepthTexture.get(), );
 }}
var sel_arrayLength = CachedSelector.init("arrayLength");
      pub fn arrayLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayLength.get(), );
 }}
  };
}

pub const MTLArgument = opaque {
  const Self = @This();
  pub usingnamespace MTLArgumentInterfaceMixin(Self, "MTLArgument");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLArgument");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLArgument");
};

pub fn MTLRasterizationRateSampleArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __index: c_ulong, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __index, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __value:  * NSNumber, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNumber, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __value, __index, );
 }}
  };
}

pub const MTLRasterizationRateSampleArray = opaque {
  const Self = @This();
  pub usingnamespace MTLRasterizationRateSampleArrayInterfaceMixin(Self, "MTLRasterizationRateSampleArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRasterizationRateSampleArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRasterizationRateSampleArray");
};

pub fn NSUnitConverterLinearInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCoefficient_ = CachedSelector.init("initWithCoefficient:");
      pub fn initWithCoefficient(self: *Self, __coefficient: f64, ) *Self {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoefficient_.get(), __coefficient, );
 }}
var sel_initWithCoefficient_constant_ = CachedSelector.init("initWithCoefficient:constant:");
      pub fn initWithCoefficientconstant(self: *Self, __coefficient: f64, __constant: f64, ) *Self {{
           return @as(*const fn(*Self, SEL, f64, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoefficient_constant_.get(), __coefficient, __constant, );
 }}
var sel_coefficient = CachedSelector.init("coefficient");
      pub fn coefficient(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_coefficient.get(), );
 }}
var sel_constant = CachedSelector.init("constant");
      pub fn constant(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_constant.get(), );
 }}
  };
}

pub const NSUnitConverterLinear = opaque {
  const Self = @This();
  pub usingnamespace NSUnitConverterLinearInterfaceMixin(Self, "NSUnitConverterLinear");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitConverterLinear");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitConverterLinear");
  pub usingnamespace NSUnitConverterInterfaceMixin(Self, "NSUnitConverterLinear");
};

pub fn NSIndexPathInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_indexPathWithIndex_ = CachedSelector.init("indexPathWithIndex:");
      pub fn indexPathWithIndex(__index: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_indexPathWithIndex_.get(), __index, );
 }}
var sel_indexPathWithIndexes_length_ = CachedSelector.init("indexPathWithIndexes:length:");
      pub fn indexPathWithIndexeslength(__indexes: [*c]c_ulong, __length: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, [*c]c_ulong, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_indexPathWithIndexes_length_.get(), __indexes, __length, );
 }}
var sel_initWithIndexes_length_ = CachedSelector.init("initWithIndexes:length:");
      pub fn initWithIndexeslength(self: *Self, __indexes: [*c]c_ulong, __length: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, [*c]c_ulong, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithIndexes_length_.get(), __indexes, __length, );
 }}
var sel_initWithIndex_ = CachedSelector.init("initWithIndex:");
      pub fn initWithIndex(self: *Self, __index: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithIndex_.get(), __index, );
 }}
var sel_indexPathByAddingIndex_ = CachedSelector.init("indexPathByAddingIndex:");
      pub fn indexPathByAddingIndex(self: *Self, __index: c_ulong, )  * NSIndexPath {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * NSIndexPath, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexPathByAddingIndex_.get(), __index, );
 }}
var sel_indexPathByRemovingLastIndex = CachedSelector.init("indexPathByRemovingLastIndex");
      pub fn indexPathByRemovingLastIndex(self: *Self, )  * NSIndexPath {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSIndexPath, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexPathByRemovingLastIndex.get(), );
 }}
var sel_indexAtPosition_ = CachedSelector.init("indexAtPosition:");
      pub fn indexAtPosition(self: *Self, __position: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexAtPosition_.get(), __position, );
 }}
var sel_getIndexes_range_ = CachedSelector.init("getIndexes:range:");
      pub fn getIndexesrange(self: *Self, __indexes:  [*c] c_ulong, __positionRange: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulong, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getIndexes_range_.get(), __indexes, __positionRange, );
 }}
var sel_compare_ = CachedSelector.init("compare:");
      pub fn compare(self: *Self, __otherObject:  * NSIndexPath, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSIndexPath, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_.get(), __otherObject, );
 }}
var sel_length = CachedSelector.init("length");
      pub fn length(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_length.get(), );
 }}
var sel_getIndexes_ = CachedSelector.init("getIndexes:");
      pub fn getIndexes(self: *Self, __indexes:  [*c] c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getIndexes_.get(), __indexes, );
 }}
  };
}

pub const NSIndexPath = opaque {
  const Self = @This();
  pub usingnamespace NSIndexPathInterfaceMixin(Self, "NSIndexPath");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSIndexPath");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSIndexPath");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSIndexPath");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSIndexPath");
};

pub fn NSDataDetectorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_dataDetectorWithTypes_error_ = CachedSelector.init("dataDetectorWithTypes:error:");
      pub fn dataDetectorWithTypeserror(__checkingTypes: c_ulonglong, __an_error:  [*c]  ?* NSError, )  ?* NSDataDetector {{
           return @as(*const fn(Class, SEL, c_ulonglong,  [*c]  ?* NSError, ) callconv(.C)  ?* NSDataDetector, @ptrCast(&objc_msgSend))(class.get(), sel_dataDetectorWithTypes_error_.get(), __checkingTypes, __an_error, );
 }}
var sel_initWithTypes_error_ = CachedSelector.init("initWithTypes:error:");
      pub fn initWithTypeserror(self: *Self, __checkingTypes: c_ulonglong, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulonglong,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTypes_error_.get(), __checkingTypes, __an_error, );
 }}
var sel_checkingTypes = CachedSelector.init("checkingTypes");
      pub fn checkingTypes(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_checkingTypes.get(), );
 }}
  };
}

pub const NSDataDetector = opaque {
  const Self = @This();
  pub usingnamespace NSDataDetectorInterfaceMixin(Self, "NSDataDetector");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDataDetector");
  pub usingnamespace NSRegularExpressionInterfaceMixin(Self, "NSDataDetector");
};

pub fn NSBlockOperationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_blockOperationWithBlock_ = CachedSelector.init("blockOperationWithBlock:");
      pub fn blockOperationWithBlock(__block: ?*u8, ) *Self {{
           return @as(*const fn(Class, SEL, ?*u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_blockOperationWithBlock_.get(), __block, );
 }}
var sel_addExecutionBlock_ = CachedSelector.init("addExecutionBlock:");
      pub fn addExecutionBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addExecutionBlock_.get(), __block, );
 }}
var sel_executionBlocks = CachedSelector.init("executionBlocks");
      pub fn executionBlocks(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executionBlocks.get(), );
 }}
  };
}

pub const NSBlockOperation = opaque {
  const Self = @This();
  pub usingnamespace NSBlockOperationInterfaceMixin(Self, "NSBlockOperation");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSBlockOperation");
  pub usingnamespace NSOperationInterfaceMixin(Self, "NSBlockOperation");
};

pub fn MTLRenderPassAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_texture = CachedSelector.init("texture");
      pub fn texture(self: *Self, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_texture.get(), );
 }}
var sel_setTexture_ = CachedSelector.init("setTexture:");
      pub fn setTexture(self: *Self, __texture:  ?* MTLTexture, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLTexture, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTexture_.get(), __texture, );
 }}
var sel_level = CachedSelector.init("level");
      pub fn level(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_level.get(), );
 }}
var sel_setLevel_ = CachedSelector.init("setLevel:");
      pub fn setLevel(self: *Self, __level: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLevel_.get(), __level, );
 }}
var sel_slice = CachedSelector.init("slice");
      pub fn slice(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_slice.get(), );
 }}
var sel_setSlice_ = CachedSelector.init("setSlice:");
      pub fn setSlice(self: *Self, __slice: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSlice_.get(), __slice, );
 }}
var sel_depthPlane = CachedSelector.init("depthPlane");
      pub fn depthPlane(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depthPlane.get(), );
 }}
var sel_setDepthPlane_ = CachedSelector.init("setDepthPlane:");
      pub fn setDepthPlane(self: *Self, __depthPlane: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthPlane_.get(), __depthPlane, );
 }}
var sel_resolveTexture = CachedSelector.init("resolveTexture");
      pub fn resolveTexture(self: *Self, )  ?* MTLTexture {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLTexture, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolveTexture.get(), );
 }}
var sel_setResolveTexture_ = CachedSelector.init("setResolveTexture:");
      pub fn setResolveTexture(self: *Self, __resolveTexture:  ?* MTLTexture, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLTexture, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResolveTexture_.get(), __resolveTexture, );
 }}
var sel_resolveLevel = CachedSelector.init("resolveLevel");
      pub fn resolveLevel(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolveLevel.get(), );
 }}
var sel_setResolveLevel_ = CachedSelector.init("setResolveLevel:");
      pub fn setResolveLevel(self: *Self, __resolveLevel: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResolveLevel_.get(), __resolveLevel, );
 }}
var sel_resolveSlice = CachedSelector.init("resolveSlice");
      pub fn resolveSlice(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolveSlice.get(), );
 }}
var sel_setResolveSlice_ = CachedSelector.init("setResolveSlice:");
      pub fn setResolveSlice(self: *Self, __resolveSlice: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResolveSlice_.get(), __resolveSlice, );
 }}
var sel_resolveDepthPlane = CachedSelector.init("resolveDepthPlane");
      pub fn resolveDepthPlane(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolveDepthPlane.get(), );
 }}
var sel_setResolveDepthPlane_ = CachedSelector.init("setResolveDepthPlane:");
      pub fn setResolveDepthPlane(self: *Self, __resolveDepthPlane: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResolveDepthPlane_.get(), __resolveDepthPlane, );
 }}
var sel_loadAction = CachedSelector.init("loadAction");
      pub fn loadAction(self: *Self, ) MTLLoadAction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLLoadAction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadAction.get(), );
 }}
var sel_setLoadAction_ = CachedSelector.init("setLoadAction:");
      pub fn setLoadAction(self: *Self, __loadAction: MTLLoadAction, ) void {{
           return @as(*const fn(*Self, SEL, MTLLoadAction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLoadAction_.get(), __loadAction, );
 }}
var sel_storeAction = CachedSelector.init("storeAction");
      pub fn storeAction(self: *Self, ) MTLStoreAction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStoreAction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storeAction.get(), );
 }}
var sel_setStoreAction_ = CachedSelector.init("setStoreAction:");
      pub fn setStoreAction(self: *Self, __storeAction: MTLStoreAction, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreAction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStoreAction_.get(), __storeAction, );
 }}
var sel_storeActionOptions = CachedSelector.init("storeActionOptions");
      pub fn storeActionOptions(self: *Self, ) MTLStoreActionOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStoreActionOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storeActionOptions.get(), );
 }}
var sel_setStoreActionOptions_ = CachedSelector.init("setStoreActionOptions:");
      pub fn setStoreActionOptions(self: *Self, __storeActionOptions: MTLStoreActionOptions, ) void {{
           return @as(*const fn(*Self, SEL, MTLStoreActionOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStoreActionOptions_.get(), __storeActionOptions, );
 }}
  };
}

pub const MTLRenderPassAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPassAttachmentDescriptorInterfaceMixin(Self, "MTLRenderPassAttachmentDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLRenderPassAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPassAttachmentDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPassAttachmentDescriptor");
};

pub fn NSMutableDictionaryInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_removeObjectForKey_ = CachedSelector.init("removeObjectForKey:");
      pub fn removeObjectForKey(self: *Self, __aKey: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectForKey_.get(), __aKey, );
 }}
var sel_setObject_forKey_ = CachedSelector.init("setObject:forKey:");
      pub fn setObjectforKey(self: *Self, __anObject: id, __aKey: id, ) void {{
           return @as(*const fn(*Self, SEL, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_forKey_.get(), __anObject, __aKey, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithCapacity_ = CachedSelector.init("initWithCapacity:");
      pub fn initWithCapacity(self: *Self, __numItems: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCapacity_.get(), __numItems, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_addEntriesFromDictionary_ = CachedSelector.init("addEntriesFromDictionary:");
      pub fn addEntriesFromDictionary(self: *Self, __otherDictionary:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addEntriesFromDictionary_.get(), __otherDictionary, );
 }}
var sel_removeAllObjects = CachedSelector.init("removeAllObjects");
      pub fn removeAllObjects(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllObjects.get(), );
 }}
var sel_removeObjectsForKeys_ = CachedSelector.init("removeObjectsForKeys:");
      pub fn removeObjectsForKeys(self: *Self, __keyArray:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectsForKeys_.get(), __keyArray, );
 }}
var sel_setDictionary_ = CachedSelector.init("setDictionary:");
      pub fn setDictionary(self: *Self, __otherDictionary:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDictionary_.get(), __otherDictionary, );
 }}
var sel_setObject_forKeyedSubscript_ = CachedSelector.init("setObject:forKeyedSubscript:");
      pub fn setObjectforKeyedSubscript(self: *Self, __obj: id, __key: id, ) void {{
           return @as(*const fn(*Self, SEL, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_forKeyedSubscript_.get(), __obj, __key, );
 }}
var sel_dictionaryWithCapacity_ = CachedSelector.init("dictionaryWithCapacity:");
      pub fn dictionaryWithCapacity(__numItems: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithCapacity_.get(), __numItems, );
 }}
var sel_dictionaryWithContentsOfFile_ = CachedSelector.init("dictionaryWithContentsOfFile:");
      pub fn dictionaryWithContentsOfFile(__path:  * NSString, )  ?* NSMutableDictionary {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSMutableDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithContentsOfFile_.get(), __path, );
 }}
var sel_dictionaryWithContentsOfURL_ = CachedSelector.init("dictionaryWithContentsOfURL:");
      pub fn dictionaryWithContentsOfURL(__url:  * NSURL, )  ?* NSMutableDictionary {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  ?* NSMutableDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithContentsOfURL_.get(), __url, );
 }}
var sel_initWithContentsOfFile_ = CachedSelector.init("initWithContentsOfFile:");
      pub fn initWithContentsOfFile(self: *Self, __path:  * NSString, )  ?* NSMutableDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSMutableDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfFile_.get(), __path, );
 }}
var sel_initWithContentsOfURL_ = CachedSelector.init("initWithContentsOfURL:");
      pub fn initWithContentsOfURL(self: *Self, __url:  * NSURL, )  ?* NSMutableDictionary {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C)  ?* NSMutableDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_.get(), __url, );
 }}
var sel_dictionaryWithSharedKeySet_ = CachedSelector.init("dictionaryWithSharedKeySet:");
      pub fn dictionaryWithSharedKeySet(__keyset: id, )  * NSMutableDictionary {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C)  * NSMutableDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithSharedKeySet_.get(), __keyset, );
 }}
var sel_setValue_forKey_ = CachedSelector.init("setValue:forKey:");
      pub fn setValueforKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValue_forKey_.get(), __value, __key, );
 }}
  };
}

pub const NSMutableDictionary = opaque {
  const Self = @This();
  pub usingnamespace NSMutableDictionaryInterfaceMixin(Self, "NSMutableDictionary");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableDictionary");
  pub usingnamespace NSDictionaryInterfaceMixin(Self, "NSMutableDictionary");
};

pub fn NSSetInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_member_ = CachedSelector.init("member:");
      pub fn member(self: *Self, __object: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_member_.get(), __object, );
 }}
var sel_objectEnumerator = CachedSelector.init("objectEnumerator");
      pub fn objectEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectEnumerator.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithObjects_count_ = CachedSelector.init("initWithObjects:count:");
      pub fn initWithObjectscount(self: *Self, __objects: [*c]id, __cnt: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, [*c]id, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjects_count_.get(), __objects, __cnt, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_count = CachedSelector.init("count");
      pub fn count(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_count.get(), );
 }}
var sel_anyObject = CachedSelector.init("anyObject");
      pub fn anyObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_anyObject.get(), );
 }}
var sel_containsObject_ = CachedSelector.init("containsObject:");
      pub fn containsObject(self: *Self, __anObject: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsObject_.get(), __anObject, );
 }}
var sel_descriptionWithLocale_ = CachedSelector.init("descriptionWithLocale:");
      pub fn descriptionWithLocale(self: *Self, __locale: id, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_.get(), __locale, );
 }}
var sel_intersectsSet_ = CachedSelector.init("intersectsSet:");
      pub fn intersectsSet(self: *Self, __otherSet:  * NSSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectsSet_.get(), __otherSet, );
 }}
var sel_isEqualToSet_ = CachedSelector.init("isEqualToSet:");
      pub fn isEqualToSet(self: *Self, __otherSet:  * NSSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToSet_.get(), __otherSet, );
 }}
var sel_isSubsetOfSet_ = CachedSelector.init("isSubsetOfSet:");
      pub fn isSubsetOfSet(self: *Self, __otherSet:  * NSSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSubsetOfSet_.get(), __otherSet, );
 }}
var sel_makeObjectsPerformSelector_ = CachedSelector.init("makeObjectsPerformSelector:");
      pub fn makeObjectsPerformSelector(self: *Self, __aSelector: SEL, ) void {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_makeObjectsPerformSelector_.get(), __aSelector, );
 }}
var sel_makeObjectsPerformSelector_withObject_ = CachedSelector.init("makeObjectsPerformSelector:withObject:");
      pub fn makeObjectsPerformSelectorwithObject(self: *Self, __aSelector: SEL, __argument: id, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_makeObjectsPerformSelector_withObject_.get(), __aSelector, __argument, );
 }}
var sel_setByAddingObject_ = CachedSelector.init("setByAddingObject:");
      pub fn setByAddingObject(self: *Self, __anObject: id, )  * NSSet {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setByAddingObject_.get(), __anObject, );
 }}
var sel_setByAddingObjectsFromSet_ = CachedSelector.init("setByAddingObjectsFromSet:");
      pub fn setByAddingObjectsFromSet(self: *Self, __other:  * NSSet, )  * NSSet {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setByAddingObjectsFromSet_.get(), __other, );
 }}
var sel_setByAddingObjectsFromArray_ = CachedSelector.init("setByAddingObjectsFromArray:");
      pub fn setByAddingObjectsFromArray(self: *Self, __other:  * NSArray, )  * NSSet {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setByAddingObjectsFromArray_.get(), __other, );
 }}
var sel_enumerateObjectsUsingBlock_ = CachedSelector.init("enumerateObjectsUsingBlock:");
      pub fn enumerateObjectsUsingBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateObjectsUsingBlock_.get(), __block, );
 }}
var sel_enumerateObjectsWithOptions_usingBlock_ = CachedSelector.init("enumerateObjectsWithOptions:usingBlock:");
      pub fn enumerateObjectsWithOptionsusingBlock(self: *Self, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateObjectsWithOptions_usingBlock_.get(), __opts, __block, );
 }}
var sel_objectsPassingTest_ = CachedSelector.init("objectsPassingTest:");
      pub fn objectsPassingTest(self: *Self, __predicate: ?*u8, )  * NSSet {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectsPassingTest_.get(), __predicate, );
 }}
var sel_objectsWithOptions_passingTest_ = CachedSelector.init("objectsWithOptions:passingTest:");
      pub fn objectsWithOptionspassingTest(self: *Self, __opts: NSEnumerationOptions, __predicate: ?*u8, )  * NSSet {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectsWithOptions_passingTest_.get(), __opts, __predicate, );
 }}
var sel_allObjects = CachedSelector.init("allObjects");
      pub fn allObjects(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allObjects.get(), );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_set = CachedSelector.init("set");
      pub fn set() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_set.get(), );
 }}
var sel_setWithObject_ = CachedSelector.init("setWithObject:");
      pub fn setWithObject(__object: id, ) *Self {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_setWithObject_.get(), __object, );
 }}
var sel_setWithObjects_count_ = CachedSelector.init("setWithObjects:count:");
      pub fn setWithObjectscount(__objects: [*c]id, __cnt: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, [*c]id, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_setWithObjects_count_.get(), __objects, __cnt, );
 }}
var sel_setWithObjects_ = CachedSelector.init("setWithObjects:");
      pub fn setWithObjects(__firstObj: id, ) *Self {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_setWithObjects_.get(), __firstObj, );
 }}
var sel_setWithSet_ = CachedSelector.init("setWithSet:");
      pub fn setWithSet(__set:  * NSSet, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSSet, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_setWithSet_.get(), __set, );
 }}
var sel_setWithArray_ = CachedSelector.init("setWithArray:");
      pub fn setWithArray(__array:  * NSArray, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_setWithArray_.get(), __array, );
 }}
var sel_initWithObjects_ = CachedSelector.init("initWithObjects:");
      pub fn initWithObjects(self: *Self, __firstObj: id, ) *Self {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjects_.get(), __firstObj, );
 }}
var sel_initWithSet_ = CachedSelector.init("initWithSet:");
      pub fn initWithSet(self: *Self, __set:  * NSSet, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSet_.get(), __set, );
 }}
var sel_initWithSet_copyItems_ = CachedSelector.init("initWithSet:copyItems:");
      pub fn initWithSetcopyItems(self: *Self, __set:  * NSSet, __flag: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSSet, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSet_copyItems_.get(), __set, __flag, );
 }}
var sel_initWithArray_ = CachedSelector.init("initWithArray:");
      pub fn initWithArray(self: *Self, __array:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithArray_.get(), __array, );
 }}
var sel_valueForKey_ = CachedSelector.init("valueForKey:");
      pub fn valueForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForKey_.get(), __key, );
 }}
var sel_setValue_forKey_ = CachedSelector.init("setValue:forKey:");
      pub fn setValueforKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValue_forKey_.get(), __value, __key, );
 }}
var sel_addObserver_forKeyPath_options_context_ = CachedSelector.init("addObserver:forKeyPath:options:context:");
      pub fn addObserverforKeyPathoptionscontext(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, __options: NSKeyValueObservingOptions, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString, NSKeyValueObservingOptions,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObserver_forKeyPath_options_context_.get(), __observer, __keyPath, __options, __context, );
 }}
var sel_removeObserver_forKeyPath_context_ = CachedSelector.init("removeObserver:forKeyPath:context:");
      pub fn removeObserverforKeyPathcontext(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_forKeyPath_context_.get(), __observer, __keyPath, __context, );
 }}
var sel_removeObserver_forKeyPath_ = CachedSelector.init("removeObserver:forKeyPath:");
      pub fn removeObserverforKeyPath(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_forKeyPath_.get(), __observer, __keyPath, );
 }}
var sel_sortedArrayUsingDescriptors_ = CachedSelector.init("sortedArrayUsingDescriptors:");
      pub fn sortedArrayUsingDescriptors(self: *Self, __sortDescriptors:  * NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayUsingDescriptors_.get(), __sortDescriptors, );
 }}
var sel_filteredSetUsingPredicate_ = CachedSelector.init("filteredSetUsingPredicate:");
      pub fn filteredSetUsingPredicate(self: *Self, __predicate:  * NSPredicate, )  * NSSet {{
           return @as(*const fn(*Self, SEL,  * NSPredicate, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_filteredSetUsingPredicate_.get(), __predicate, );
 }}
  };
}

pub const NSSet = opaque {
  const Self = @This();
  pub usingnamespace NSSetInterfaceMixin(Self, "NSSet");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSSet");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSSet");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSSet");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSet");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSSet");
};

pub fn NSISO8601DateFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_stringFromDate_ = CachedSelector.init("stringFromDate:");
      pub fn stringFromDate(self: *Self, __date:  * NSDate, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromDate_.get(), __date, );
 }}
var sel_dateFromString_ = CachedSelector.init("dateFromString:");
      pub fn dateFromString(self: *Self, __string:  * NSString, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateFromString_.get(), __string, );
 }}
var sel_stringFromDate_timeZone_formatOptions_ = CachedSelector.init("stringFromDate:timeZone:formatOptions:");
      pub fn stringFromDatetimeZoneformatOptions(__date:  * NSDate, __timeZone:  * NSTimeZone, __formatOptions: NSISO8601DateFormatOptions, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSDate,  * NSTimeZone, NSISO8601DateFormatOptions, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_stringFromDate_timeZone_formatOptions_.get(), __date, __timeZone, __formatOptions, );
 }}
var sel_timeZone = CachedSelector.init("timeZone");
      pub fn timeZone(self: *Self, )  * NSTimeZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSTimeZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeZone.get(), );
 }}
var sel_setTimeZone_ = CachedSelector.init("setTimeZone:");
      pub fn setTimeZone(self: *Self, __timeZone:  ?* NSTimeZone, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSTimeZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeZone_.get(), __timeZone, );
 }}
var sel_formatOptions = CachedSelector.init("formatOptions");
      pub fn formatOptions(self: *Self, ) NSISO8601DateFormatOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSISO8601DateFormatOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formatOptions.get(), );
 }}
var sel_setFormatOptions_ = CachedSelector.init("setFormatOptions:");
      pub fn setFormatOptions(self: *Self, __formatOptions: NSISO8601DateFormatOptions, ) void {{
           return @as(*const fn(*Self, SEL, NSISO8601DateFormatOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormatOptions_.get(), __formatOptions, );
 }}
  };
}

pub const NSISO8601DateFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSISO8601DateFormatterInterfaceMixin(Self, "NSISO8601DateFormatter");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSISO8601DateFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSISO8601DateFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSISO8601DateFormatter");
};

pub fn MTLSharedEventListenerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithDispatchQueue_ = CachedSelector.init("initWithDispatchQueue:");
      pub fn initWithDispatchQueue(self: *Self, __dispatchQueue:  * NSObject, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSObject, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDispatchQueue_.get(), __dispatchQueue, );
 }}
var sel_dispatchQueue = CachedSelector.init("dispatchQueue");
      pub fn dispatchQueue(self: *Self, )  * NSObject {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSObject, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatchQueue.get(), );
 }}
  };
}

pub const MTLSharedEventListener = opaque {
  const Self = @This();
  pub usingnamespace MTLSharedEventListenerInterfaceMixin(Self, "MTLSharedEventListener");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLSharedEventListener");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLSharedEventListener");
};

pub fn MTLStitchedLibraryDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_functionGraphs = CachedSelector.init("functionGraphs");
      pub fn functionGraphs(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionGraphs.get(), );
 }}
var sel_setFunctionGraphs_ = CachedSelector.init("setFunctionGraphs:");
      pub fn setFunctionGraphs(self: *Self, __functionGraphs:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunctionGraphs_.get(), __functionGraphs, );
 }}
var sel_functions = CachedSelector.init("functions");
      pub fn functions(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functions.get(), );
 }}
var sel_setFunctions_ = CachedSelector.init("setFunctions:");
      pub fn setFunctions(self: *Self, __functions:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunctions_.get(), __functions, );
 }}
  };
}

pub const MTLStitchedLibraryDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLStitchedLibraryDescriptorInterfaceMixin(Self, "MTLStitchedLibraryDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLStitchedLibraryDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLStitchedLibraryDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLStitchedLibraryDescriptor");
};

pub fn NSURLProtocolInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithRequest_cachedResponse_client_ = CachedSelector.init("initWithRequest:cachedResponse:client:");
      pub fn initWithRequestcachedResponseclient(self: *Self, __request:  * NSURLRequest, __cachedResponse:  ?* NSCachedURLResponse, __client:  ?* NSURLProtocolClient, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest,  ?* NSCachedURLResponse,  ?* NSURLProtocolClient, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithRequest_cachedResponse_client_.get(), __request, __cachedResponse, __client, );
 }}
var sel_canInitWithRequest_ = CachedSelector.init("canInitWithRequest:");
      pub fn canInitWithRequest(__request:  * NSURLRequest, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSURLRequest, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_canInitWithRequest_.get(), __request, );
 }}
var sel_canonicalRequestForRequest_ = CachedSelector.init("canonicalRequestForRequest:");
      pub fn canonicalRequestForRequest(__request:  * NSURLRequest, )  * NSURLRequest {{
           return @as(*const fn(Class, SEL,  * NSURLRequest, ) callconv(.C)  * NSURLRequest, @ptrCast(&objc_msgSend))(class.get(), sel_canonicalRequestForRequest_.get(), __request, );
 }}
var sel_requestIsCacheEquivalent_toRequest_ = CachedSelector.init("requestIsCacheEquivalent:toRequest:");
      pub fn requestIsCacheEquivalenttoRequest(__a:  * NSURLRequest, __b:  * NSURLRequest, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSURLRequest,  * NSURLRequest, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_requestIsCacheEquivalent_toRequest_.get(), __a, __b, );
 }}
var sel_startLoading = CachedSelector.init("startLoading");
      pub fn startLoading(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startLoading.get(), );
 }}
var sel_stopLoading = CachedSelector.init("stopLoading");
      pub fn stopLoading(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stopLoading.get(), );
 }}
var sel_propertyForKey_inRequest_ = CachedSelector.init("propertyForKey:inRequest:");
      pub fn propertyForKeyinRequest(__key:  * NSString, __request:  * NSURLRequest, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSURLRequest, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_propertyForKey_inRequest_.get(), __key, __request, );
 }}
var sel_setProperty_forKey_inRequest_ = CachedSelector.init("setProperty:forKey:inRequest:");
      pub fn setPropertyforKeyinRequest(__value: id, __key:  * NSString, __request:  * NSMutableURLRequest, ) void {{
           return @as(*const fn(Class, SEL, id,  * NSString,  * NSMutableURLRequest, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setProperty_forKey_inRequest_.get(), __value, __key, __request, );
 }}
var sel_removePropertyForKey_inRequest_ = CachedSelector.init("removePropertyForKey:inRequest:");
      pub fn removePropertyForKeyinRequest(__key:  * NSString, __request:  * NSMutableURLRequest, ) void {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSMutableURLRequest, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_removePropertyForKey_inRequest_.get(), __key, __request, );
 }}
var sel_registerClass_ = CachedSelector.init("registerClass:");
      pub fn registerClass(__protocolClass: Class, ) c_int {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_registerClass_.get(), __protocolClass, );
 }}
var sel_unregisterClass_ = CachedSelector.init("unregisterClass:");
      pub fn unregisterClass(__protocolClass: Class, ) void {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_unregisterClass_.get(), __protocolClass, );
 }}
var sel_client = CachedSelector.init("client");
      pub fn client(self: *Self, )  ?* NSURLProtocolClient {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLProtocolClient, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_client.get(), );
 }}
var sel_request = CachedSelector.init("request");
      pub fn request(self: *Self, )  * NSURLRequest {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURLRequest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_request.get(), );
 }}
var sel_cachedResponse = CachedSelector.init("cachedResponse");
      pub fn cachedResponse(self: *Self, )  ?* NSCachedURLResponse {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSCachedURLResponse, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cachedResponse.get(), );
 }}
var sel_canInitWithTask_ = CachedSelector.init("canInitWithTask:");
      pub fn canInitWithTask(__task:  * NSURLSessionTask, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSURLSessionTask, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_canInitWithTask_.get(), __task, );
 }}
var sel_initWithTask_cachedResponse_client_ = CachedSelector.init("initWithTask:cachedResponse:client:");
      pub fn initWithTaskcachedResponseclient(self: *Self, __task:  * NSURLSessionTask, __cachedResponse:  ?* NSCachedURLResponse, __client:  ?* NSURLProtocolClient, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURLSessionTask,  ?* NSCachedURLResponse,  ?* NSURLProtocolClient, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTask_cachedResponse_client_.get(), __task, __cachedResponse, __client, );
 }}
var sel_task = CachedSelector.init("task");
      pub fn task(self: *Self, )  ?* NSURLSessionTask {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLSessionTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_task.get(), );
 }}
  };
}

pub const NSURLProtocol = opaque {
  const Self = @This();
  pub usingnamespace NSURLProtocolInterfaceMixin(Self, "NSURLProtocol");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLProtocol");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLProtocol");
};

pub fn NSNotificationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithName_object_userInfo_ = CachedSelector.init("initWithName:object:userInfo:");
      pub fn initWithNameobjectuserInfo(self: *Self, __name:  * NSString, __object: id, __userInfo:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, id,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithName_object_userInfo_.get(), __name, __object, __userInfo, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_object = CachedSelector.init("object");
      pub fn object(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_object.get(), );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
var sel_notificationWithName_object_ = CachedSelector.init("notificationWithName:object:");
      pub fn notificationWithNameobject(__aName:  * NSString, __anObject: id, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_notificationWithName_object_.get(), __aName, __anObject, );
 }}
var sel_notificationWithName_object_userInfo_ = CachedSelector.init("notificationWithName:object:userInfo:");
      pub fn notificationWithNameobjectuserInfo(__aName:  * NSString, __anObject: id, __aUserInfo:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, id,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_notificationWithName_object_userInfo_.get(), __aName, __anObject, __aUserInfo, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
  };
}

pub const NSNotification = opaque {
  const Self = @This();
  pub usingnamespace NSNotificationInterfaceMixin(Self, "NSNotification");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSNotification");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSNotification");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNotification");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSNotification");
};

pub fn MTLArrayTypeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_elementStructType = CachedSelector.init("elementStructType");
      pub fn elementStructType(self: *Self, )  ?* MTLStructType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLStructType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementStructType.get(), );
 }}
var sel_elementArrayType = CachedSelector.init("elementArrayType");
      pub fn elementArrayType(self: *Self, )  ?* MTLArrayType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLArrayType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementArrayType.get(), );
 }}
var sel_elementTextureReferenceType = CachedSelector.init("elementTextureReferenceType");
      pub fn elementTextureReferenceType(self: *Self, )  ?* MTLTextureReferenceType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLTextureReferenceType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementTextureReferenceType.get(), );
 }}
var sel_elementPointerType = CachedSelector.init("elementPointerType");
      pub fn elementPointerType(self: *Self, )  ?* MTLPointerType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLPointerType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementPointerType.get(), );
 }}
var sel_elementType = CachedSelector.init("elementType");
      pub fn elementType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementType.get(), );
 }}
var sel_arrayLength = CachedSelector.init("arrayLength");
      pub fn arrayLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayLength.get(), );
 }}
var sel_stride = CachedSelector.init("stride");
      pub fn stride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stride.get(), );
 }}
var sel_argumentIndexStride = CachedSelector.init("argumentIndexStride");
      pub fn argumentIndexStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_argumentIndexStride.get(), );
 }}
  };
}

pub const MTLArrayType = opaque {
  const Self = @This();
  pub usingnamespace MTLArrayTypeInterfaceMixin(Self, "MTLArrayType");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLArrayType");
  pub usingnamespace MTLTypeInterfaceMixin(Self, "MTLArrayType");
};

pub fn NSCachedURLResponseInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithResponse_data_ = CachedSelector.init("initWithResponse:data:");
      pub fn initWithResponsedata(self: *Self, __response:  * NSURLResponse, __data:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURLResponse,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithResponse_data_.get(), __response, __data, );
 }}
var sel_initWithResponse_data_userInfo_storagePolicy_ = CachedSelector.init("initWithResponse:data:userInfo:storagePolicy:");
      pub fn initWithResponsedatauserInfostoragePolicy(self: *Self, __response:  * NSURLResponse, __data:  * NSData, __userInfo:  ?* NSDictionary, __storagePolicy: NSURLCacheStoragePolicy, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURLResponse,  * NSData,  ?* NSDictionary, NSURLCacheStoragePolicy, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithResponse_data_userInfo_storagePolicy_.get(), __response, __data, __userInfo, __storagePolicy, );
 }}
var sel_response = CachedSelector.init("response");
      pub fn response(self: *Self, )  * NSURLResponse {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURLResponse, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_response.get(), );
 }}
var sel_data = CachedSelector.init("data");
      pub fn data(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_data.get(), );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
var sel_storagePolicy = CachedSelector.init("storagePolicy");
      pub fn storagePolicy(self: *Self, ) NSURLCacheStoragePolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLCacheStoragePolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storagePolicy.get(), );
 }}
  };
}

pub const NSCachedURLResponse = opaque {
  const Self = @This();
  pub usingnamespace NSCachedURLResponseInterfaceMixin(Self, "NSCachedURLResponse");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSCachedURLResponse");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSCachedURLResponse");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCachedURLResponse");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSCachedURLResponse");
};

pub fn NSURLResponseInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_ = CachedSelector.init("initWithURL:MIMEType:expectedContentLength:textEncodingName:");
      pub fn initWithURLMIMETypeexpectedContentLengthtextEncodingName(self: *Self, __URL:  * NSURL, __MIMEType:  ?* NSString, __length: c_long, __name:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL,  ?* NSString, c_long,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_.get(), __URL, __MIMEType, __length, __name, );
 }}
var sel_URL = CachedSelector.init("URL");
      pub fn URL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL.get(), );
 }}
var sel_MIMEType = CachedSelector.init("MIMEType");
      pub fn MIMEType(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_MIMEType.get(), );
 }}
var sel_expectedContentLength = CachedSelector.init("expectedContentLength");
      pub fn expectedContentLength(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_expectedContentLength.get(), );
 }}
var sel_textEncodingName = CachedSelector.init("textEncodingName");
      pub fn textEncodingName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textEncodingName.get(), );
 }}
var sel_suggestedFilename = CachedSelector.init("suggestedFilename");
      pub fn suggestedFilename(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suggestedFilename.get(), );
 }}
  };
}

pub const NSURLResponse = opaque {
  const Self = @This();
  pub usingnamespace NSURLResponseInterfaceMixin(Self, "NSURLResponse");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSURLResponse");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSURLResponse");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLResponse");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLResponse");
};

pub fn MTLArgumentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_argumentDescriptor = CachedSelector.init("argumentDescriptor");
      pub fn argumentDescriptor()  * MTLArgumentDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLArgumentDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_argumentDescriptor.get(), );
 }}
var sel_dataType = CachedSelector.init("dataType");
      pub fn dataType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataType.get(), );
 }}
var sel_setDataType_ = CachedSelector.init("setDataType:");
      pub fn setDataType(self: *Self, __dataType: MTLDataType, ) void {{
           return @as(*const fn(*Self, SEL, MTLDataType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDataType_.get(), __dataType, );
 }}
var sel_index = CachedSelector.init("index");
      pub fn index(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_index.get(), );
 }}
var sel_setIndex_ = CachedSelector.init("setIndex:");
      pub fn setIndex(self: *Self, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndex_.get(), __index, );
 }}
var sel_arrayLength = CachedSelector.init("arrayLength");
      pub fn arrayLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayLength.get(), );
 }}
var sel_setArrayLength_ = CachedSelector.init("setArrayLength:");
      pub fn setArrayLength(self: *Self, __arrayLength: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArrayLength_.get(), __arrayLength, );
 }}
var sel_access = CachedSelector.init("access");
      pub fn access(self: *Self, ) MTLBindingAccess {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBindingAccess, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_access.get(), );
 }}
var sel_setAccess_ = CachedSelector.init("setAccess:");
      pub fn setAccess(self: *Self, __access: MTLBindingAccess, ) void {{
           return @as(*const fn(*Self, SEL, MTLBindingAccess, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAccess_.get(), __access, );
 }}
var sel_textureType = CachedSelector.init("textureType");
      pub fn textureType(self: *Self, ) MTLTextureType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureType.get(), );
 }}
var sel_setTextureType_ = CachedSelector.init("setTextureType:");
      pub fn setTextureType(self: *Self, __textureType: MTLTextureType, ) void {{
           return @as(*const fn(*Self, SEL, MTLTextureType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextureType_.get(), __textureType, );
 }}
var sel_constantBlockAlignment = CachedSelector.init("constantBlockAlignment");
      pub fn constantBlockAlignment(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_constantBlockAlignment.get(), );
 }}
var sel_setConstantBlockAlignment_ = CachedSelector.init("setConstantBlockAlignment:");
      pub fn setConstantBlockAlignment(self: *Self, __constantBlockAlignment: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setConstantBlockAlignment_.get(), __constantBlockAlignment, );
 }}
  };
}

pub const MTLArgumentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLArgumentDescriptorInterfaceMixin(Self, "MTLArgumentDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLArgumentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLArgumentDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLArgumentDescriptor");
};

pub fn NSNetServiceBrowserInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_scheduleInRunLoop_forMode_ = CachedSelector.init("scheduleInRunLoop:forMode:");
      pub fn scheduleInRunLoopforMode(self: *Self, __aRunLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduleInRunLoop_forMode_.get(), __aRunLoop, __mode, );
 }}
var sel_removeFromRunLoop_forMode_ = CachedSelector.init("removeFromRunLoop:forMode:");
      pub fn removeFromRunLoopforMode(self: *Self, __aRunLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeFromRunLoop_forMode_.get(), __aRunLoop, __mode, );
 }}
var sel_searchForBrowsableDomains = CachedSelector.init("searchForBrowsableDomains");
      pub fn searchForBrowsableDomains(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_searchForBrowsableDomains.get(), );
 }}
var sel_searchForRegistrationDomains = CachedSelector.init("searchForRegistrationDomains");
      pub fn searchForRegistrationDomains(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_searchForRegistrationDomains.get(), );
 }}
var sel_searchForServicesOfType_inDomain_ = CachedSelector.init("searchForServicesOfType:inDomain:");
      pub fn searchForServicesOfTypeinDomain(self: *Self, __a_type:  * NSString, __domainString:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_searchForServicesOfType_inDomain_.get(), __a_type, __domainString, );
 }}
var sel_stop = CachedSelector.init("stop");
      pub fn stop(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stop.get(), );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSNetServiceBrowserDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNetServiceBrowserDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSNetServiceBrowserDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNetServiceBrowserDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_includesPeerToPeer = CachedSelector.init("includesPeerToPeer");
      pub fn includesPeerToPeer(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_includesPeerToPeer.get(), );
 }}
var sel_setIncludesPeerToPeer_ = CachedSelector.init("setIncludesPeerToPeer:");
      pub fn setIncludesPeerToPeer(self: *Self, __includesPeerToPeer: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIncludesPeerToPeer_.get(), __includesPeerToPeer, );
 }}
  };
}

pub const NSNetServiceBrowser = opaque {
  const Self = @This();
  pub usingnamespace NSNetServiceBrowserInterfaceMixin(Self, "NSNetServiceBrowser");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNetServiceBrowser");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSNetServiceBrowser");
};

pub fn NSMachBootstrapServerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sharedInstance = CachedSelector.init("sharedInstance");
      pub fn sharedInstance() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_sharedInstance.get(), );
 }}
var sel_portForName_ = CachedSelector.init("portForName:");
      pub fn portForName(self: *Self, __name:  * NSString, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portForName_.get(), __name, );
 }}
var sel_portForName_host_ = CachedSelector.init("portForName:host:");
      pub fn portForNamehost(self: *Self, __name:  * NSString, __host:  ?* NSString, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portForName_host_.get(), __name, __host, );
 }}
var sel_registerPort_name_ = CachedSelector.init("registerPort:name:");
      pub fn registerPortname(self: *Self, __port:  * NSPort, __name:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSPort,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerPort_name_.get(), __port, __name, );
 }}
var sel_servicePortWithName_ = CachedSelector.init("servicePortWithName:");
      pub fn servicePortWithName(self: *Self, __name:  * NSString, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_servicePortWithName_.get(), __name, );
 }}
  };
}

pub const NSMachBootstrapServer = opaque {
  const Self = @This();
  pub usingnamespace NSMachBootstrapServerInterfaceMixin(Self, "NSMachBootstrapServer");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMachBootstrapServer");
  pub usingnamespace NSPortNameServerInterfaceMixin(Self, "NSMachBootstrapServer");
};

pub fn MTLAccelerationStructureMotionBoundingBoxGeometryDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_descriptor.get(), );
 }}
var sel_boundingBoxBuffers = CachedSelector.init("boundingBoxBuffers");
      pub fn boundingBoxBuffers(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boundingBoxBuffers.get(), );
 }}
var sel_setBoundingBoxBuffers_ = CachedSelector.init("setBoundingBoxBuffers:");
      pub fn setBoundingBoxBuffers(self: *Self, __boundingBoxBuffers:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBoundingBoxBuffers_.get(), __boundingBoxBuffers, );
 }}
var sel_boundingBoxStride = CachedSelector.init("boundingBoxStride");
      pub fn boundingBoxStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boundingBoxStride.get(), );
 }}
var sel_setBoundingBoxStride_ = CachedSelector.init("setBoundingBoxStride:");
      pub fn setBoundingBoxStride(self: *Self, __boundingBoxStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBoundingBoxStride_.get(), __boundingBoxStride, );
 }}
var sel_boundingBoxCount = CachedSelector.init("boundingBoxCount");
      pub fn boundingBoxCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boundingBoxCount.get(), );
 }}
var sel_setBoundingBoxCount_ = CachedSelector.init("setBoundingBoxCount:");
      pub fn setBoundingBoxCount(self: *Self, __boundingBoxCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBoundingBoxCount_.get(), __boundingBoxCount, );
 }}
  };
}

pub const MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureMotionBoundingBoxGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor");
  pub usingnamespace MTLAccelerationStructureGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor");
};

pub fn NSXMLParserInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithContentsOfURL_ = CachedSelector.init("initWithContentsOfURL:");
      pub fn initWithContentsOfURL(self: *Self, __url:  * NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_.get(), __url, );
 }}
var sel_initWithData_ = CachedSelector.init("initWithData:");
      pub fn initWithData(self: *Self, __data:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithData_.get(), __data, );
 }}
var sel_initWithStream_ = CachedSelector.init("initWithStream:");
      pub fn initWithStream(self: *Self, __stream:  * NSInputStream, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSInputStream, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithStream_.get(), __stream, );
 }}
var sel_parse = CachedSelector.init("parse");
      pub fn parse(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parse.get(), );
 }}
var sel_abortParsing = CachedSelector.init("abortParsing");
      pub fn abortParsing(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_abortParsing.get(), );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSXMLParserDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXMLParserDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSXMLParserDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSXMLParserDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_shouldProcessNamespaces = CachedSelector.init("shouldProcessNamespaces");
      pub fn shouldProcessNamespaces(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shouldProcessNamespaces.get(), );
 }}
var sel_setShouldProcessNamespaces_ = CachedSelector.init("setShouldProcessNamespaces:");
      pub fn setShouldProcessNamespaces(self: *Self, __shouldProcessNamespaces: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShouldProcessNamespaces_.get(), __shouldProcessNamespaces, );
 }}
var sel_shouldReportNamespacePrefixes = CachedSelector.init("shouldReportNamespacePrefixes");
      pub fn shouldReportNamespacePrefixes(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shouldReportNamespacePrefixes.get(), );
 }}
var sel_setShouldReportNamespacePrefixes_ = CachedSelector.init("setShouldReportNamespacePrefixes:");
      pub fn setShouldReportNamespacePrefixes(self: *Self, __shouldReportNamespacePrefixes: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShouldReportNamespacePrefixes_.get(), __shouldReportNamespacePrefixes, );
 }}
var sel_externalEntityResolvingPolicy = CachedSelector.init("externalEntityResolvingPolicy");
      pub fn externalEntityResolvingPolicy(self: *Self, ) NSXMLParserExternalEntityResolvingPolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSXMLParserExternalEntityResolvingPolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_externalEntityResolvingPolicy.get(), );
 }}
var sel_setExternalEntityResolvingPolicy_ = CachedSelector.init("setExternalEntityResolvingPolicy:");
      pub fn setExternalEntityResolvingPolicy(self: *Self, __externalEntityResolvingPolicy: NSXMLParserExternalEntityResolvingPolicy, ) void {{
           return @as(*const fn(*Self, SEL, NSXMLParserExternalEntityResolvingPolicy, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setExternalEntityResolvingPolicy_.get(), __externalEntityResolvingPolicy, );
 }}
var sel_allowedExternalEntityURLs = CachedSelector.init("allowedExternalEntityURLs");
      pub fn allowedExternalEntityURLs(self: *Self, )  ?* NSSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowedExternalEntityURLs.get(), );
 }}
var sel_setAllowedExternalEntityURLs_ = CachedSelector.init("setAllowedExternalEntityURLs:");
      pub fn setAllowedExternalEntityURLs(self: *Self, __allowedExternalEntityURLs:  ?* NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowedExternalEntityURLs_.get(), __allowedExternalEntityURLs, );
 }}
var sel_parserError = CachedSelector.init("parserError");
      pub fn parserError(self: *Self, )  ?* NSError {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSError, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parserError.get(), );
 }}
var sel_shouldResolveExternalEntities = CachedSelector.init("shouldResolveExternalEntities");
      pub fn shouldResolveExternalEntities(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shouldResolveExternalEntities.get(), );
 }}
var sel_setShouldResolveExternalEntities_ = CachedSelector.init("setShouldResolveExternalEntities:");
      pub fn setShouldResolveExternalEntities(self: *Self, __shouldResolveExternalEntities: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShouldResolveExternalEntities_.get(), __shouldResolveExternalEntities, );
 }}
var sel_publicID = CachedSelector.init("publicID");
      pub fn publicID(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_publicID.get(), );
 }}
var sel_systemID = CachedSelector.init("systemID");
      pub fn systemID(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_systemID.get(), );
 }}
var sel_lineNumber = CachedSelector.init("lineNumber");
      pub fn lineNumber(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lineNumber.get(), );
 }}
var sel_columnNumber = CachedSelector.init("columnNumber");
      pub fn columnNumber(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_columnNumber.get(), );
 }}
  };
}

pub const NSXMLParser = opaque {
  const Self = @This();
  pub usingnamespace NSXMLParserInterfaceMixin(Self, "NSXMLParser");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXMLParser");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSXMLParser");
};

pub fn NSFileHandleInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithFileDescriptor_closeOnDealloc_ = CachedSelector.init("initWithFileDescriptor:closeOnDealloc:");
      pub fn initWithFileDescriptorcloseOnDealloc(self: *Self, __fd: c_int, __closeopt: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL, c_int, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFileDescriptor_closeOnDealloc_.get(), __fd, __closeopt, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_readDataToEndOfFileAndReturnError_ = CachedSelector.init("readDataToEndOfFileAndReturnError:");
      pub fn readDataToEndOfFileAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, )  ?* NSData {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readDataToEndOfFileAndReturnError_.get(), __an_error, );
 }}
var sel_readDataUpToLength_error_ = CachedSelector.init("readDataUpToLength:error:");
      pub fn readDataUpToLengtherror(self: *Self, __length: c_ulong, __an_error:  [*c]  ?* NSError, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, c_ulong,  [*c]  ?* NSError, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readDataUpToLength_error_.get(), __length, __an_error, );
 }}
var sel_writeData_error_ = CachedSelector.init("writeData:error:");
      pub fn writeDataerror(self: *Self, __data:  * NSData, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSData,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeData_error_.get(), __data, __an_error, );
 }}
var sel_getOffset_error_ = CachedSelector.init("getOffset:error:");
      pub fn getOffseterror(self: *Self, __offsetInFile:  [*c] c_ulonglong, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulonglong,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getOffset_error_.get(), __offsetInFile, __an_error, );
 }}
var sel_seekToEndReturningOffset_error_ = CachedSelector.init("seekToEndReturningOffset:error:");
      pub fn seekToEndReturningOffseterror(self: *Self, __offsetInFile:  [*c] c_ulonglong, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulonglong,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_seekToEndReturningOffset_error_.get(), __offsetInFile, __an_error, );
 }}
var sel_seekToOffset_error_ = CachedSelector.init("seekToOffset:error:");
      pub fn seekToOffseterror(self: *Self, __offset: c_ulonglong, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL, c_ulonglong,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_seekToOffset_error_.get(), __offset, __an_error, );
 }}
var sel_truncateAtOffset_error_ = CachedSelector.init("truncateAtOffset:error:");
      pub fn truncateAtOffseterror(self: *Self, __offset: c_ulonglong, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL, c_ulonglong,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_truncateAtOffset_error_.get(), __offset, __an_error, );
 }}
var sel_synchronizeAndReturnError_ = CachedSelector.init("synchronizeAndReturnError:");
      pub fn synchronizeAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_synchronizeAndReturnError_.get(), __an_error, );
 }}
var sel_closeAndReturnError_ = CachedSelector.init("closeAndReturnError:");
      pub fn closeAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_closeAndReturnError_.get(), __an_error, );
 }}
var sel_availableData = CachedSelector.init("availableData");
      pub fn availableData(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_availableData.get(), );
 }}
var sel_fileHandleForReadingAtPath_ = CachedSelector.init("fileHandleForReadingAtPath:");
      pub fn fileHandleForReadingAtPath(__path:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleForReadingAtPath_.get(), __path, );
 }}
var sel_fileHandleForWritingAtPath_ = CachedSelector.init("fileHandleForWritingAtPath:");
      pub fn fileHandleForWritingAtPath(__path:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleForWritingAtPath_.get(), __path, );
 }}
var sel_fileHandleForUpdatingAtPath_ = CachedSelector.init("fileHandleForUpdatingAtPath:");
      pub fn fileHandleForUpdatingAtPath(__path:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleForUpdatingAtPath_.get(), __path, );
 }}
var sel_fileHandleForReadingFromURL_error_ = CachedSelector.init("fileHandleForReadingFromURL:error:");
      pub fn fileHandleForReadingFromURLerror(__url:  * NSURL, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleForReadingFromURL_error_.get(), __url, __an_error, );
 }}
var sel_fileHandleForWritingToURL_error_ = CachedSelector.init("fileHandleForWritingToURL:error:");
      pub fn fileHandleForWritingToURLerror(__url:  * NSURL, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleForWritingToURL_error_.get(), __url, __an_error, );
 }}
var sel_fileHandleForUpdatingURL_error_ = CachedSelector.init("fileHandleForUpdatingURL:error:");
      pub fn fileHandleForUpdatingURLerror(__url:  * NSURL, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleForUpdatingURL_error_.get(), __url, __an_error, );
 }}
var sel_fileHandleWithStandardInput = CachedSelector.init("fileHandleWithStandardInput");
      pub fn fileHandleWithStandardInput()  * NSFileHandle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSFileHandle, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleWithStandardInput.get(), );
 }}
var sel_fileHandleWithStandardOutput = CachedSelector.init("fileHandleWithStandardOutput");
      pub fn fileHandleWithStandardOutput()  * NSFileHandle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSFileHandle, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleWithStandardOutput.get(), );
 }}
var sel_fileHandleWithStandardError = CachedSelector.init("fileHandleWithStandardError");
      pub fn fileHandleWithStandardError()  * NSFileHandle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSFileHandle, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleWithStandardError.get(), );
 }}
var sel_fileHandleWithNullDevice = CachedSelector.init("fileHandleWithNullDevice");
      pub fn fileHandleWithNullDevice()  * NSFileHandle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSFileHandle, @ptrCast(&objc_msgSend))(class.get(), sel_fileHandleWithNullDevice.get(), );
 }}
var sel_readInBackgroundAndNotifyForModes_ = CachedSelector.init("readInBackgroundAndNotifyForModes:");
      pub fn readInBackgroundAndNotifyForModes(self: *Self, __modes:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readInBackgroundAndNotifyForModes_.get(), __modes, );
 }}
var sel_readInBackgroundAndNotify = CachedSelector.init("readInBackgroundAndNotify");
      pub fn readInBackgroundAndNotify(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readInBackgroundAndNotify.get(), );
 }}
var sel_readToEndOfFileInBackgroundAndNotifyForModes_ = CachedSelector.init("readToEndOfFileInBackgroundAndNotifyForModes:");
      pub fn readToEndOfFileInBackgroundAndNotifyForModes(self: *Self, __modes:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readToEndOfFileInBackgroundAndNotifyForModes_.get(), __modes, );
 }}
var sel_readToEndOfFileInBackgroundAndNotify = CachedSelector.init("readToEndOfFileInBackgroundAndNotify");
      pub fn readToEndOfFileInBackgroundAndNotify(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readToEndOfFileInBackgroundAndNotify.get(), );
 }}
var sel_acceptConnectionInBackgroundAndNotifyForModes_ = CachedSelector.init("acceptConnectionInBackgroundAndNotifyForModes:");
      pub fn acceptConnectionInBackgroundAndNotifyForModes(self: *Self, __modes:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_acceptConnectionInBackgroundAndNotifyForModes_.get(), __modes, );
 }}
var sel_acceptConnectionInBackgroundAndNotify = CachedSelector.init("acceptConnectionInBackgroundAndNotify");
      pub fn acceptConnectionInBackgroundAndNotify(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_acceptConnectionInBackgroundAndNotify.get(), );
 }}
var sel_waitForDataInBackgroundAndNotifyForModes_ = CachedSelector.init("waitForDataInBackgroundAndNotifyForModes:");
      pub fn waitForDataInBackgroundAndNotifyForModes(self: *Self, __modes:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitForDataInBackgroundAndNotifyForModes_.get(), __modes, );
 }}
var sel_waitForDataInBackgroundAndNotify = CachedSelector.init("waitForDataInBackgroundAndNotify");
      pub fn waitForDataInBackgroundAndNotify(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitForDataInBackgroundAndNotify.get(), );
 }}
var sel_readabilityHandler = CachedSelector.init("readabilityHandler");
      pub fn readabilityHandler(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readabilityHandler.get(), );
 }}
var sel_setReadabilityHandler_ = CachedSelector.init("setReadabilityHandler:");
      pub fn setReadabilityHandler(self: *Self, __readabilityHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReadabilityHandler_.get(), __readabilityHandler, );
 }}
var sel_writeabilityHandler = CachedSelector.init("writeabilityHandler");
      pub fn writeabilityHandler(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeabilityHandler.get(), );
 }}
var sel_setWriteabilityHandler_ = CachedSelector.init("setWriteabilityHandler:");
      pub fn setWriteabilityHandler(self: *Self, __writeabilityHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWriteabilityHandler_.get(), __writeabilityHandler, );
 }}
var sel_initWithFileDescriptor_ = CachedSelector.init("initWithFileDescriptor:");
      pub fn initWithFileDescriptor(self: *Self, __fd: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFileDescriptor_.get(), __fd, );
 }}
var sel_fileDescriptor = CachedSelector.init("fileDescriptor");
      pub fn fileDescriptor(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileDescriptor.get(), );
 }}
var sel_readDataToEndOfFile = CachedSelector.init("readDataToEndOfFile");
      pub fn readDataToEndOfFile(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readDataToEndOfFile.get(), );
 }}
var sel_readDataOfLength_ = CachedSelector.init("readDataOfLength:");
      pub fn readDataOfLength(self: *Self, __length: c_ulong, )  * NSData {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readDataOfLength_.get(), __length, );
 }}
var sel_writeData_ = CachedSelector.init("writeData:");
      pub fn writeData(self: *Self, __data:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeData_.get(), __data, );
 }}
var sel_offsetInFile = CachedSelector.init("offsetInFile");
      pub fn offsetInFile(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_offsetInFile.get(), );
 }}
var sel_seekToEndOfFile = CachedSelector.init("seekToEndOfFile");
      pub fn seekToEndOfFile(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_seekToEndOfFile.get(), );
 }}
var sel_seekToFileOffset_ = CachedSelector.init("seekToFileOffset:");
      pub fn seekToFileOffset(self: *Self, __offset: c_ulonglong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulonglong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_seekToFileOffset_.get(), __offset, );
 }}
var sel_truncateFileAtOffset_ = CachedSelector.init("truncateFileAtOffset:");
      pub fn truncateFileAtOffset(self: *Self, __offset: c_ulonglong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulonglong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_truncateFileAtOffset_.get(), __offset, );
 }}
var sel_synchronizeFile = CachedSelector.init("synchronizeFile");
      pub fn synchronizeFile(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_synchronizeFile.get(), );
 }}
var sel_closeFile = CachedSelector.init("closeFile");
      pub fn closeFile(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_closeFile.get(), );
 }}
  };
}

pub const NSFileHandle = opaque {
  const Self = @This();
  pub usingnamespace NSFileHandleInterfaceMixin(Self, "NSFileHandle");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSFileHandle");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileHandle");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSFileHandle");
};

pub fn NSUnitElectricResistanceInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_megaohms = CachedSelector.init("megaohms");
      pub fn megaohms()  * NSUnitElectricResistance {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricResistance, @ptrCast(&objc_msgSend))(class.get(), sel_megaohms.get(), );
 }}
var sel_kiloohms = CachedSelector.init("kiloohms");
      pub fn kiloohms()  * NSUnitElectricResistance {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricResistance, @ptrCast(&objc_msgSend))(class.get(), sel_kiloohms.get(), );
 }}
var sel_ohms = CachedSelector.init("ohms");
      pub fn ohms()  * NSUnitElectricResistance {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricResistance, @ptrCast(&objc_msgSend))(class.get(), sel_ohms.get(), );
 }}
var sel_milliohms = CachedSelector.init("milliohms");
      pub fn milliohms()  * NSUnitElectricResistance {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricResistance, @ptrCast(&objc_msgSend))(class.get(), sel_milliohms.get(), );
 }}
var sel_microohms = CachedSelector.init("microohms");
      pub fn microohms()  * NSUnitElectricResistance {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricResistance, @ptrCast(&objc_msgSend))(class.get(), sel_microohms.get(), );
 }}
  };
}

pub const NSUnitElectricResistance = opaque {
  const Self = @This();
  pub usingnamespace NSUnitElectricResistanceInterfaceMixin(Self, "NSUnitElectricResistance");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitElectricResistance");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitElectricResistance");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitElectricResistance");
};

pub fn NSUnitMassInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_kilograms = CachedSelector.init("kilograms");
      pub fn kilograms()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_kilograms.get(), );
 }}
var sel_grams = CachedSelector.init("grams");
      pub fn grams()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_grams.get(), );
 }}
var sel_decigrams = CachedSelector.init("decigrams");
      pub fn decigrams()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_decigrams.get(), );
 }}
var sel_centigrams = CachedSelector.init("centigrams");
      pub fn centigrams()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_centigrams.get(), );
 }}
var sel_milligrams = CachedSelector.init("milligrams");
      pub fn milligrams()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_milligrams.get(), );
 }}
var sel_micrograms = CachedSelector.init("micrograms");
      pub fn micrograms()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_micrograms.get(), );
 }}
var sel_nanograms = CachedSelector.init("nanograms");
      pub fn nanograms()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_nanograms.get(), );
 }}
var sel_picograms = CachedSelector.init("picograms");
      pub fn picograms()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_picograms.get(), );
 }}
var sel_ounces = CachedSelector.init("ounces");
      pub fn ounces()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_ounces.get(), );
 }}
var sel_poundsMass = CachedSelector.init("poundsMass");
      pub fn poundsMass()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_poundsMass.get(), );
 }}
var sel_stones = CachedSelector.init("stones");
      pub fn stones()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_stones.get(), );
 }}
var sel_metricTons = CachedSelector.init("metricTons");
      pub fn metricTons()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_metricTons.get(), );
 }}
var sel_shortTons = CachedSelector.init("shortTons");
      pub fn shortTons()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_shortTons.get(), );
 }}
var sel_carats = CachedSelector.init("carats");
      pub fn carats()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_carats.get(), );
 }}
var sel_ouncesTroy = CachedSelector.init("ouncesTroy");
      pub fn ouncesTroy()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_ouncesTroy.get(), );
 }}
var sel_slugs = CachedSelector.init("slugs");
      pub fn slugs()  * NSUnitMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitMass, @ptrCast(&objc_msgSend))(class.get(), sel_slugs.get(), );
 }}
  };
}

pub const NSUnitMass = opaque {
  const Self = @This();
  pub usingnamespace NSUnitMassInterfaceMixin(Self, "NSUnitMass");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitMass");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitMass");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitMass");
};

pub fn NSFileCoordinatorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addFilePresenter_ = CachedSelector.init("addFilePresenter:");
      pub fn addFilePresenter(__filePresenter:  * NSFilePresenter, ) void {{
           return @as(*const fn(Class, SEL,  * NSFilePresenter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_addFilePresenter_.get(), __filePresenter, );
 }}
var sel_removeFilePresenter_ = CachedSelector.init("removeFilePresenter:");
      pub fn removeFilePresenter(__filePresenter:  * NSFilePresenter, ) void {{
           return @as(*const fn(Class, SEL,  * NSFilePresenter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_removeFilePresenter_.get(), __filePresenter, );
 }}
var sel_initWithFilePresenter_ = CachedSelector.init("initWithFilePresenter:");
      pub fn initWithFilePresenter(self: *Self, __filePresenterOrNil:  ?* NSFilePresenter, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSFilePresenter, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFilePresenter_.get(), __filePresenterOrNil, );
 }}
var sel_coordinateAccessWithIntents_queue_byAccessor_ = CachedSelector.init("coordinateAccessWithIntents:queue:byAccessor:");
      pub fn coordinateAccessWithIntentsqueuebyAccessor(self: *Self, __intents:  * NSArray, __queue:  * NSOperationQueue, __accessor: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray,  * NSOperationQueue, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_coordinateAccessWithIntents_queue_byAccessor_.get(), __intents, __queue, __accessor, );
 }}
var sel_coordinateReadingItemAtURL_options_error_byAccessor_ = CachedSelector.init("coordinateReadingItemAtURL:options:error:byAccessor:");
      pub fn coordinateReadingItemAtURLoptionserrorbyAccessor(self: *Self, __url:  * NSURL, __options: NSFileCoordinatorReadingOptions, __outError:  [*c]  ?* NSError, __reader: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSFileCoordinatorReadingOptions,  [*c]  ?* NSError, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_coordinateReadingItemAtURL_options_error_byAccessor_.get(), __url, __options, __outError, __reader, );
 }}
var sel_coordinateWritingItemAtURL_options_error_byAccessor_ = CachedSelector.init("coordinateWritingItemAtURL:options:error:byAccessor:");
      pub fn coordinateWritingItemAtURLoptionserrorbyAccessor(self: *Self, __url:  * NSURL, __options: NSFileCoordinatorWritingOptions, __outError:  [*c]  ?* NSError, __writer: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSFileCoordinatorWritingOptions,  [*c]  ?* NSError, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_coordinateWritingItemAtURL_options_error_byAccessor_.get(), __url, __options, __outError, __writer, );
 }}
var sel_coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor_ = CachedSelector.init("coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:");
      pub fn coordinateReadingItemAtURLoptionswritingItemAtURLoptionserrorbyAccessor(self: *Self, __readingURL:  * NSURL, __readingOptions: NSFileCoordinatorReadingOptions, __writingURL:  * NSURL, __writingOptions: NSFileCoordinatorWritingOptions, __outError:  [*c]  ?* NSError, __readerWriter: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSFileCoordinatorReadingOptions,  * NSURL, NSFileCoordinatorWritingOptions,  [*c]  ?* NSError, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor_.get(), __readingURL, __readingOptions, __writingURL, __writingOptions, __outError, __readerWriter, );
 }}
var sel_coordinateWritingItemAtURL_options_writingItemAtURL_options_error_byAccessor_ = CachedSelector.init("coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:");
      pub fn coordinateWritingItemAtURLoptionswritingItemAtURLoptionserrorbyAccessor(self: *Self, __url1:  * NSURL, __options1: NSFileCoordinatorWritingOptions, __url2:  * NSURL, __options2: NSFileCoordinatorWritingOptions, __outError:  [*c]  ?* NSError, __writer: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSFileCoordinatorWritingOptions,  * NSURL, NSFileCoordinatorWritingOptions,  [*c]  ?* NSError, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_coordinateWritingItemAtURL_options_writingItemAtURL_options_error_byAccessor_.get(), __url1, __options1, __url2, __options2, __outError, __writer, );
 }}
var sel_prepareForReadingItemsAtURLs_options_writingItemsAtURLs_options_error_byAccessor_ = CachedSelector.init("prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:");
      pub fn prepareForReadingItemsAtURLsoptionswritingItemsAtURLsoptionserrorbyAccessor(self: *Self, __readingURLs:  * NSArray, __readingOptions: NSFileCoordinatorReadingOptions, __writingURLs:  * NSArray, __writingOptions: NSFileCoordinatorWritingOptions, __outError:  [*c]  ?* NSError, __batchAccessor: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, NSFileCoordinatorReadingOptions,  * NSArray, NSFileCoordinatorWritingOptions,  [*c]  ?* NSError, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_prepareForReadingItemsAtURLs_options_writingItemsAtURLs_options_error_byAccessor_.get(), __readingURLs, __readingOptions, __writingURLs, __writingOptions, __outError, __batchAccessor, );
 }}
var sel_itemAtURL_willMoveToURL_ = CachedSelector.init("itemAtURL:willMoveToURL:");
      pub fn itemAtURLwillMoveToURL(self: *Self, __oldURL:  * NSURL, __newURL:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_itemAtURL_willMoveToURL_.get(), __oldURL, __newURL, );
 }}
var sel_itemAtURL_didMoveToURL_ = CachedSelector.init("itemAtURL:didMoveToURL:");
      pub fn itemAtURLdidMoveToURL(self: *Self, __oldURL:  * NSURL, __newURL:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_itemAtURL_didMoveToURL_.get(), __oldURL, __newURL, );
 }}
var sel_itemAtURL_didChangeUbiquityAttributes_ = CachedSelector.init("itemAtURL:didChangeUbiquityAttributes:");
      pub fn itemAtURLdidChangeUbiquityAttributes(self: *Self, __url:  * NSURL, __attributes:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_itemAtURL_didChangeUbiquityAttributes_.get(), __url, __attributes, );
 }}
var sel_cancel = CachedSelector.init("cancel");
      pub fn cancel(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancel.get(), );
 }}
var sel_filePresenters = CachedSelector.init("filePresenters");
      pub fn filePresenters()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_filePresenters.get(), );
 }}
var sel_purposeIdentifier = CachedSelector.init("purposeIdentifier");
      pub fn purposeIdentifier(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_purposeIdentifier.get(), );
 }}
var sel_setPurposeIdentifier_ = CachedSelector.init("setPurposeIdentifier:");
      pub fn setPurposeIdentifier(self: *Self, __purposeIdentifier:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPurposeIdentifier_.get(), __purposeIdentifier, );
 }}
  };
}

pub const NSFileCoordinator = opaque {
  const Self = @This();
  pub usingnamespace NSFileCoordinatorInterfaceMixin(Self, "NSFileCoordinator");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileCoordinator");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSFileCoordinator");
};

pub fn NSUserNotificationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_title = CachedSelector.init("title");
      pub fn title(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_title.get(), );
 }}
var sel_setTitle_ = CachedSelector.init("setTitle:");
      pub fn setTitle(self: *Self, __title:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTitle_.get(), __title, );
 }}
var sel_subtitle = CachedSelector.init("subtitle");
      pub fn subtitle(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_subtitle.get(), );
 }}
var sel_setSubtitle_ = CachedSelector.init("setSubtitle:");
      pub fn setSubtitle(self: *Self, __subtitle:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSubtitle_.get(), __subtitle, );
 }}
var sel_informativeText = CachedSelector.init("informativeText");
      pub fn informativeText(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_informativeText.get(), );
 }}
var sel_setInformativeText_ = CachedSelector.init("setInformativeText:");
      pub fn setInformativeText(self: *Self, __informativeText:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInformativeText_.get(), __informativeText, );
 }}
var sel_actionButtonTitle = CachedSelector.init("actionButtonTitle");
      pub fn actionButtonTitle(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_actionButtonTitle.get(), );
 }}
var sel_setActionButtonTitle_ = CachedSelector.init("setActionButtonTitle:");
      pub fn setActionButtonTitle(self: *Self, __actionButtonTitle:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setActionButtonTitle_.get(), __actionButtonTitle, );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
var sel_setUserInfo_ = CachedSelector.init("setUserInfo:");
      pub fn setUserInfo(self: *Self, __userInfo:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUserInfo_.get(), __userInfo, );
 }}
var sel_deliveryDate = CachedSelector.init("deliveryDate");
      pub fn deliveryDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_deliveryDate.get(), );
 }}
var sel_setDeliveryDate_ = CachedSelector.init("setDeliveryDate:");
      pub fn setDeliveryDate(self: *Self, __deliveryDate:  ?* NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDeliveryDate_.get(), __deliveryDate, );
 }}
var sel_deliveryTimeZone = CachedSelector.init("deliveryTimeZone");
      pub fn deliveryTimeZone(self: *Self, )  ?* NSTimeZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSTimeZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_deliveryTimeZone.get(), );
 }}
var sel_setDeliveryTimeZone_ = CachedSelector.init("setDeliveryTimeZone:");
      pub fn setDeliveryTimeZone(self: *Self, __deliveryTimeZone:  ?* NSTimeZone, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSTimeZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDeliveryTimeZone_.get(), __deliveryTimeZone, );
 }}
var sel_deliveryRepeatInterval = CachedSelector.init("deliveryRepeatInterval");
      pub fn deliveryRepeatInterval(self: *Self, )  ?* NSDateComponents {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDateComponents, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_deliveryRepeatInterval.get(), );
 }}
var sel_setDeliveryRepeatInterval_ = CachedSelector.init("setDeliveryRepeatInterval:");
      pub fn setDeliveryRepeatInterval(self: *Self, __deliveryRepeatInterval:  ?* NSDateComponents, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDateComponents, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDeliveryRepeatInterval_.get(), __deliveryRepeatInterval, );
 }}
var sel_actualDeliveryDate = CachedSelector.init("actualDeliveryDate");
      pub fn actualDeliveryDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_actualDeliveryDate.get(), );
 }}
var sel_isPresented = CachedSelector.init("isPresented");
      pub fn isPresented(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPresented.get(), );
 }}
var sel_isRemote = CachedSelector.init("isRemote");
      pub fn isRemote(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isRemote.get(), );
 }}
var sel_soundName = CachedSelector.init("soundName");
      pub fn soundName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_soundName.get(), );
 }}
var sel_setSoundName_ = CachedSelector.init("setSoundName:");
      pub fn setSoundName(self: *Self, __soundName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSoundName_.get(), __soundName, );
 }}
var sel_hasActionButton = CachedSelector.init("hasActionButton");
      pub fn hasActionButton(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasActionButton.get(), );
 }}
var sel_setHasActionButton_ = CachedSelector.init("setHasActionButton:");
      pub fn setHasActionButton(self: *Self, __hasActionButton: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHasActionButton_.get(), __hasActionButton, );
 }}
var sel_activationType = CachedSelector.init("activationType");
      pub fn activationType(self: *Self, ) NSUserNotificationActivationType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSUserNotificationActivationType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_activationType.get(), );
 }}
var sel_otherButtonTitle = CachedSelector.init("otherButtonTitle");
      pub fn otherButtonTitle(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_otherButtonTitle.get(), );
 }}
var sel_setOtherButtonTitle_ = CachedSelector.init("setOtherButtonTitle:");
      pub fn setOtherButtonTitle(self: *Self, __otherButtonTitle:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOtherButtonTitle_.get(), __otherButtonTitle, );
 }}
var sel_identifier = CachedSelector.init("identifier");
      pub fn identifier(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_identifier.get(), );
 }}
var sel_setIdentifier_ = CachedSelector.init("setIdentifier:");
      pub fn setIdentifier(self: *Self, __identifier:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIdentifier_.get(), __identifier, );
 }}
var sel_contentImage = CachedSelector.init("contentImage");
      pub fn contentImage(self: *Self, )  * NSImage {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSImage, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_contentImage.get(), );
 }}
var sel_setContentImage_ = CachedSelector.init("setContentImage:");
      pub fn setContentImage(self: *Self, __contentImage:  * NSImage, ) void {{
           return @as(*const fn(*Self, SEL,  * NSImage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setContentImage_.get(), __contentImage, );
 }}
var sel_hasReplyButton = CachedSelector.init("hasReplyButton");
      pub fn hasReplyButton(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasReplyButton.get(), );
 }}
var sel_setHasReplyButton_ = CachedSelector.init("setHasReplyButton:");
      pub fn setHasReplyButton(self: *Self, __hasReplyButton: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHasReplyButton_.get(), __hasReplyButton, );
 }}
var sel_responsePlaceholder = CachedSelector.init("responsePlaceholder");
      pub fn responsePlaceholder(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_responsePlaceholder.get(), );
 }}
var sel_setResponsePlaceholder_ = CachedSelector.init("setResponsePlaceholder:");
      pub fn setResponsePlaceholder(self: *Self, __responsePlaceholder:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResponsePlaceholder_.get(), __responsePlaceholder, );
 }}
var sel_response = CachedSelector.init("response");
      pub fn response(self: *Self, )  * NSAttributedString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_response.get(), );
 }}
var sel_additionalActions = CachedSelector.init("additionalActions");
      pub fn additionalActions(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_additionalActions.get(), );
 }}
var sel_setAdditionalActions_ = CachedSelector.init("setAdditionalActions:");
      pub fn setAdditionalActions(self: *Self, __additionalActions:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAdditionalActions_.get(), __additionalActions, );
 }}
var sel_additionalActivationAction = CachedSelector.init("additionalActivationAction");
      pub fn additionalActivationAction(self: *Self, )  * NSUserNotificationAction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSUserNotificationAction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_additionalActivationAction.get(), );
 }}
  };
}

pub const NSUserNotification = opaque {
  const Self = @This();
  pub usingnamespace NSUserNotificationInterfaceMixin(Self, "NSUserNotification");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSUserNotification");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserNotification");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUserNotification");
};

pub fn NSURLRequestInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_requestWithURL_ = CachedSelector.init("requestWithURL:");
      pub fn requestWithURL(__URL:  * NSURL, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_requestWithURL_.get(), __URL, );
 }}
var sel_requestWithURL_cachePolicy_timeoutInterval_ = CachedSelector.init("requestWithURL:cachePolicy:timeoutInterval:");
      pub fn requestWithURLcachePolicytimeoutInterval(__URL:  * NSURL, __cachePolicy: NSURLRequestCachePolicy, __timeoutInterval: f64, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, NSURLRequestCachePolicy, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_requestWithURL_cachePolicy_timeoutInterval_.get(), __URL, __cachePolicy, __timeoutInterval, );
 }}
var sel_initWithURL_ = CachedSelector.init("initWithURL:");
      pub fn initWithURL(self: *Self, __URL:  * NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_.get(), __URL, );
 }}
var sel_initWithURL_cachePolicy_timeoutInterval_ = CachedSelector.init("initWithURL:cachePolicy:timeoutInterval:");
      pub fn initWithURLcachePolicytimeoutInterval(self: *Self, __URL:  * NSURL, __cachePolicy: NSURLRequestCachePolicy, __timeoutInterval: f64, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSURLRequestCachePolicy, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_cachePolicy_timeoutInterval_.get(), __URL, __cachePolicy, __timeoutInterval, );
 }}
var sel_supportsSecureCoding = CachedSelector.init("supportsSecureCoding");
      pub fn supportsSecureCoding() c_int {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_supportsSecureCoding.get(), );
 }}
var sel_URL = CachedSelector.init("URL");
      pub fn URL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL.get(), );
 }}
var sel_cachePolicy = CachedSelector.init("cachePolicy");
      pub fn cachePolicy(self: *Self, ) NSURLRequestCachePolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLRequestCachePolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cachePolicy.get(), );
 }}
var sel_timeoutInterval = CachedSelector.init("timeoutInterval");
      pub fn timeoutInterval(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeoutInterval.get(), );
 }}
var sel_mainDocumentURL = CachedSelector.init("mainDocumentURL");
      pub fn mainDocumentURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mainDocumentURL.get(), );
 }}
var sel_networkServiceType = CachedSelector.init("networkServiceType");
      pub fn networkServiceType(self: *Self, ) NSURLRequestNetworkServiceType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLRequestNetworkServiceType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_networkServiceType.get(), );
 }}
var sel_allowsCellularAccess = CachedSelector.init("allowsCellularAccess");
      pub fn allowsCellularAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsCellularAccess.get(), );
 }}
var sel_allowsExpensiveNetworkAccess = CachedSelector.init("allowsExpensiveNetworkAccess");
      pub fn allowsExpensiveNetworkAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsExpensiveNetworkAccess.get(), );
 }}
var sel_allowsConstrainedNetworkAccess = CachedSelector.init("allowsConstrainedNetworkAccess");
      pub fn allowsConstrainedNetworkAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsConstrainedNetworkAccess.get(), );
 }}
var sel_assumesHTTP3Capable = CachedSelector.init("assumesHTTP3Capable");
      pub fn assumesHTTP3Capable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_assumesHTTP3Capable.get(), );
 }}
var sel_attribution = CachedSelector.init("attribution");
      pub fn attribution(self: *Self, ) NSURLRequestAttribution {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLRequestAttribution, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attribution.get(), );
 }}
var sel_requiresDNSSECValidation = CachedSelector.init("requiresDNSSECValidation");
      pub fn requiresDNSSECValidation(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requiresDNSSECValidation.get(), );
 }}
var sel_valueForHTTPHeaderField_ = CachedSelector.init("valueForHTTPHeaderField:");
      pub fn valueForHTTPHeaderField(self: *Self, __field:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForHTTPHeaderField_.get(), __field, );
 }}
var sel_HTTPMethod = CachedSelector.init("HTTPMethod");
      pub fn HTTPMethod(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPMethod.get(), );
 }}
var sel_allHTTPHeaderFields = CachedSelector.init("allHTTPHeaderFields");
      pub fn allHTTPHeaderFields(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allHTTPHeaderFields.get(), );
 }}
var sel_HTTPBody = CachedSelector.init("HTTPBody");
      pub fn HTTPBody(self: *Self, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPBody.get(), );
 }}
var sel_HTTPBodyStream = CachedSelector.init("HTTPBodyStream");
      pub fn HTTPBodyStream(self: *Self, )  ?* NSInputStream {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSInputStream, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPBodyStream.get(), );
 }}
var sel_HTTPShouldHandleCookies = CachedSelector.init("HTTPShouldHandleCookies");
      pub fn HTTPShouldHandleCookies(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPShouldHandleCookies.get(), );
 }}
var sel_HTTPShouldUsePipelining = CachedSelector.init("HTTPShouldUsePipelining");
      pub fn HTTPShouldUsePipelining(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPShouldUsePipelining.get(), );
 }}
  };
}

pub const NSURLRequest = opaque {
  const Self = @This();
  pub usingnamespace NSURLRequestInterfaceMixin(Self, "NSURLRequest");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSURLRequest");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSURLRequest");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSURLRequest");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLRequest");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLRequest");
};

pub fn NSNameSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_initWithContainerClassDescription_containerSpecifier_key_name_ = CachedSelector.init("initWithContainerClassDescription:containerSpecifier:key:name:");
      pub fn initWithContainerClassDescriptioncontainerSpecifierkeyname(self: *Self, __classDesc:  * NSScriptClassDescription, __container:  ?* NSScriptObjectSpecifier, __property:  * NSString, __name:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptClassDescription,  ?* NSScriptObjectSpecifier,  * NSString,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContainerClassDescription_containerSpecifier_key_name_.get(), __classDesc, __container, __property, __name, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
  };
}

pub const NSNameSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSNameSpecifierInterfaceMixin(Self, "NSNameSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNameSpecifier");
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSNameSpecifier");
};

pub fn MTLStencilDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stencilCompareFunction = CachedSelector.init("stencilCompareFunction");
      pub fn stencilCompareFunction(self: *Self, ) MTLCompareFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCompareFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stencilCompareFunction.get(), );
 }}
var sel_setStencilCompareFunction_ = CachedSelector.init("setStencilCompareFunction:");
      pub fn setStencilCompareFunction(self: *Self, __stencilCompareFunction: MTLCompareFunction, ) void {{
           return @as(*const fn(*Self, SEL, MTLCompareFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilCompareFunction_.get(), __stencilCompareFunction, );
 }}
var sel_stencilFailureOperation = CachedSelector.init("stencilFailureOperation");
      pub fn stencilFailureOperation(self: *Self, ) MTLStencilOperation {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStencilOperation, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stencilFailureOperation.get(), );
 }}
var sel_setStencilFailureOperation_ = CachedSelector.init("setStencilFailureOperation:");
      pub fn setStencilFailureOperation(self: *Self, __stencilFailureOperation: MTLStencilOperation, ) void {{
           return @as(*const fn(*Self, SEL, MTLStencilOperation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilFailureOperation_.get(), __stencilFailureOperation, );
 }}
var sel_depthFailureOperation = CachedSelector.init("depthFailureOperation");
      pub fn depthFailureOperation(self: *Self, ) MTLStencilOperation {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStencilOperation, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depthFailureOperation.get(), );
 }}
var sel_setDepthFailureOperation_ = CachedSelector.init("setDepthFailureOperation:");
      pub fn setDepthFailureOperation(self: *Self, __depthFailureOperation: MTLStencilOperation, ) void {{
           return @as(*const fn(*Self, SEL, MTLStencilOperation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthFailureOperation_.get(), __depthFailureOperation, );
 }}
var sel_depthStencilPassOperation = CachedSelector.init("depthStencilPassOperation");
      pub fn depthStencilPassOperation(self: *Self, ) MTLStencilOperation {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStencilOperation, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depthStencilPassOperation.get(), );
 }}
var sel_setDepthStencilPassOperation_ = CachedSelector.init("setDepthStencilPassOperation:");
      pub fn setDepthStencilPassOperation(self: *Self, __depthStencilPassOperation: MTLStencilOperation, ) void {{
           return @as(*const fn(*Self, SEL, MTLStencilOperation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthStencilPassOperation_.get(), __depthStencilPassOperation, );
 }}
var sel_readMask = CachedSelector.init("readMask");
      pub fn readMask(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readMask.get(), );
 }}
var sel_setReadMask_ = CachedSelector.init("setReadMask:");
      pub fn setReadMask(self: *Self, __readMask: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReadMask_.get(), __readMask, );
 }}
var sel_writeMask = CachedSelector.init("writeMask");
      pub fn writeMask(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeMask.get(), );
 }}
var sel_setWriteMask_ = CachedSelector.init("setWriteMask:");
      pub fn setWriteMask(self: *Self, __writeMask: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWriteMask_.get(), __writeMask, );
 }}
  };
}

pub const MTLStencilDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLStencilDescriptorInterfaceMixin(Self, "MTLStencilDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLStencilDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLStencilDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLStencilDescriptor");
};

pub fn NSPresentationIntentInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_paragraphIntentWithIdentity_nestedInsideIntent_ = CachedSelector.init("paragraphIntentWithIdentity:nestedInsideIntent:");
      pub fn paragraphIntentWithIdentitynestedInsideIntent(__identity: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_paragraphIntentWithIdentity_nestedInsideIntent_.get(), __identity, __parent, );
 }}
var sel_headerIntentWithIdentity_level_nestedInsideIntent_ = CachedSelector.init("headerIntentWithIdentity:level:nestedInsideIntent:");
      pub fn headerIntentWithIdentitylevelnestedInsideIntent(__identity: c_long, __level: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_headerIntentWithIdentity_level_nestedInsideIntent_.get(), __identity, __level, __parent, );
 }}
var sel_codeBlockIntentWithIdentity_languageHint_nestedInsideIntent_ = CachedSelector.init("codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:");
      pub fn codeBlockIntentWithIdentitylanguageHintnestedInsideIntent(__identity: c_long, __languageHint:  ?* NSString, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long,  ?* NSString,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_codeBlockIntentWithIdentity_languageHint_nestedInsideIntent_.get(), __identity, __languageHint, __parent, );
 }}
var sel_thematicBreakIntentWithIdentity_nestedInsideIntent_ = CachedSelector.init("thematicBreakIntentWithIdentity:nestedInsideIntent:");
      pub fn thematicBreakIntentWithIdentitynestedInsideIntent(__identity: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_thematicBreakIntentWithIdentity_nestedInsideIntent_.get(), __identity, __parent, );
 }}
var sel_orderedListIntentWithIdentity_nestedInsideIntent_ = CachedSelector.init("orderedListIntentWithIdentity:nestedInsideIntent:");
      pub fn orderedListIntentWithIdentitynestedInsideIntent(__identity: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_orderedListIntentWithIdentity_nestedInsideIntent_.get(), __identity, __parent, );
 }}
var sel_unorderedListIntentWithIdentity_nestedInsideIntent_ = CachedSelector.init("unorderedListIntentWithIdentity:nestedInsideIntent:");
      pub fn unorderedListIntentWithIdentitynestedInsideIntent(__identity: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_unorderedListIntentWithIdentity_nestedInsideIntent_.get(), __identity, __parent, );
 }}
var sel_listItemIntentWithIdentity_ordinal_nestedInsideIntent_ = CachedSelector.init("listItemIntentWithIdentity:ordinal:nestedInsideIntent:");
      pub fn listItemIntentWithIdentityordinalnestedInsideIntent(__identity: c_long, __ordinal: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_listItemIntentWithIdentity_ordinal_nestedInsideIntent_.get(), __identity, __ordinal, __parent, );
 }}
var sel_blockQuoteIntentWithIdentity_nestedInsideIntent_ = CachedSelector.init("blockQuoteIntentWithIdentity:nestedInsideIntent:");
      pub fn blockQuoteIntentWithIdentitynestedInsideIntent(__identity: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_blockQuoteIntentWithIdentity_nestedInsideIntent_.get(), __identity, __parent, );
 }}
var sel_tableIntentWithIdentity_columnCount_alignments_nestedInsideIntent_ = CachedSelector.init("tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:");
      pub fn tableIntentWithIdentitycolumnCountalignmentsnestedInsideIntent(__identity: c_long, __columnCount: c_long, __alignments:  * NSArray, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long, c_long,  * NSArray,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_tableIntentWithIdentity_columnCount_alignments_nestedInsideIntent_.get(), __identity, __columnCount, __alignments, __parent, );
 }}
var sel_tableHeaderRowIntentWithIdentity_nestedInsideIntent_ = CachedSelector.init("tableHeaderRowIntentWithIdentity:nestedInsideIntent:");
      pub fn tableHeaderRowIntentWithIdentitynestedInsideIntent(__identity: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_tableHeaderRowIntentWithIdentity_nestedInsideIntent_.get(), __identity, __parent, );
 }}
var sel_tableRowIntentWithIdentity_row_nestedInsideIntent_ = CachedSelector.init("tableRowIntentWithIdentity:row:nestedInsideIntent:");
      pub fn tableRowIntentWithIdentityrownestedInsideIntent(__identity: c_long, __row: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_tableRowIntentWithIdentity_row_nestedInsideIntent_.get(), __identity, __row, __parent, );
 }}
var sel_tableCellIntentWithIdentity_column_nestedInsideIntent_ = CachedSelector.init("tableCellIntentWithIdentity:column:nestedInsideIntent:");
      pub fn tableCellIntentWithIdentitycolumnnestedInsideIntent(__identity: c_long, __column: c_long, __parent:  ?* NSPresentationIntent, )  * NSPresentationIntent {{
           return @as(*const fn(Class, SEL, c_long, c_long,  ?* NSPresentationIntent, ) callconv(.C)  * NSPresentationIntent, @ptrCast(&objc_msgSend))(class.get(), sel_tableCellIntentWithIdentity_column_nestedInsideIntent_.get(), __identity, __column, __parent, );
 }}
var sel_isEquivalentToPresentationIntent_ = CachedSelector.init("isEquivalentToPresentationIntent:");
      pub fn isEquivalentToPresentationIntent(self: *Self, __other:  * NSPresentationIntent, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSPresentationIntent, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEquivalentToPresentationIntent_.get(), __other, );
 }}
var sel_intentKind = CachedSelector.init("intentKind");
      pub fn intentKind(self: *Self, ) NSPresentationIntentKind {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSPresentationIntentKind, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intentKind.get(), );
 }}
var sel_parentIntent = CachedSelector.init("parentIntent");
      pub fn parentIntent(self: *Self, )  ?* NSPresentationIntent {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSPresentationIntent, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parentIntent.get(), );
 }}
var sel_identity = CachedSelector.init("identity");
      pub fn identity(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_identity.get(), );
 }}
var sel_ordinal = CachedSelector.init("ordinal");
      pub fn ordinal(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_ordinal.get(), );
 }}
var sel_columnAlignments = CachedSelector.init("columnAlignments");
      pub fn columnAlignments(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_columnAlignments.get(), );
 }}
var sel_columnCount = CachedSelector.init("columnCount");
      pub fn columnCount(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_columnCount.get(), );
 }}
var sel_headerLevel = CachedSelector.init("headerLevel");
      pub fn headerLevel(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_headerLevel.get(), );
 }}
var sel_languageHint = CachedSelector.init("languageHint");
      pub fn languageHint(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_languageHint.get(), );
 }}
var sel_column = CachedSelector.init("column");
      pub fn column(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_column.get(), );
 }}
var sel_row = CachedSelector.init("row");
      pub fn row(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_row.get(), );
 }}
var sel_indentationLevel = CachedSelector.init("indentationLevel");
      pub fn indentationLevel(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indentationLevel.get(), );
 }}
  };
}

pub const NSPresentationIntent = opaque {
  const Self = @This();
  pub usingnamespace NSPresentationIntentInterfaceMixin(Self, "NSPresentationIntent");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSPresentationIntent");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSPresentationIntent");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPresentationIntent");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPresentationIntent");
};

pub fn NSPersonNameComponentsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_namePrefix = CachedSelector.init("namePrefix");
      pub fn namePrefix(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_namePrefix.get(), );
 }}
var sel_setNamePrefix_ = CachedSelector.init("setNamePrefix:");
      pub fn setNamePrefix(self: *Self, __namePrefix:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNamePrefix_.get(), __namePrefix, );
 }}
var sel_givenName = CachedSelector.init("givenName");
      pub fn givenName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_givenName.get(), );
 }}
var sel_setGivenName_ = CachedSelector.init("setGivenName:");
      pub fn setGivenName(self: *Self, __givenName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGivenName_.get(), __givenName, );
 }}
var sel_middleName = CachedSelector.init("middleName");
      pub fn middleName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_middleName.get(), );
 }}
var sel_setMiddleName_ = CachedSelector.init("setMiddleName:");
      pub fn setMiddleName(self: *Self, __middleName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMiddleName_.get(), __middleName, );
 }}
var sel_familyName = CachedSelector.init("familyName");
      pub fn familyName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_familyName.get(), );
 }}
var sel_setFamilyName_ = CachedSelector.init("setFamilyName:");
      pub fn setFamilyName(self: *Self, __familyName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFamilyName_.get(), __familyName, );
 }}
var sel_nameSuffix = CachedSelector.init("nameSuffix");
      pub fn nameSuffix(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nameSuffix.get(), );
 }}
var sel_setNameSuffix_ = CachedSelector.init("setNameSuffix:");
      pub fn setNameSuffix(self: *Self, __nameSuffix:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNameSuffix_.get(), __nameSuffix, );
 }}
var sel_nickname = CachedSelector.init("nickname");
      pub fn nickname(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nickname.get(), );
 }}
var sel_setNickname_ = CachedSelector.init("setNickname:");
      pub fn setNickname(self: *Self, __nickname:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNickname_.get(), __nickname, );
 }}
var sel_phoneticRepresentation = CachedSelector.init("phoneticRepresentation");
      pub fn phoneticRepresentation(self: *Self, )  ?* NSPersonNameComponents {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSPersonNameComponents, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_phoneticRepresentation.get(), );
 }}
var sel_setPhoneticRepresentation_ = CachedSelector.init("setPhoneticRepresentation:");
      pub fn setPhoneticRepresentation(self: *Self, __phoneticRepresentation:  ?* NSPersonNameComponents, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSPersonNameComponents, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPhoneticRepresentation_.get(), __phoneticRepresentation, );
 }}
  };
}

pub const NSPersonNameComponents = opaque {
  const Self = @This();
  pub usingnamespace NSPersonNameComponentsInterfaceMixin(Self, "NSPersonNameComponents");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSPersonNameComponents");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSPersonNameComponents");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPersonNameComponents");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPersonNameComponents");
};

pub fn NSLogicalTestInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initAndTestWithTests_ = CachedSelector.init("initAndTestWithTests:");
      pub fn initAndTestWithTests(self: *Self, __subTests:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initAndTestWithTests_.get(), __subTests, );
 }}
var sel_initOrTestWithTests_ = CachedSelector.init("initOrTestWithTests:");
      pub fn initOrTestWithTests(self: *Self, __subTests:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initOrTestWithTests_.get(), __subTests, );
 }}
var sel_initNotTestWithTest_ = CachedSelector.init("initNotTestWithTest:");
      pub fn initNotTestWithTest(self: *Self, __subTest:  * NSScriptWhoseTest, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptWhoseTest, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initNotTestWithTest_.get(), __subTest, );
 }}
  };
}

pub const NSLogicalTest = opaque {
  const Self = @This();
  pub usingnamespace NSLogicalTestInterfaceMixin(Self, "NSLogicalTest");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSLogicalTest");
  pub usingnamespace NSScriptWhoseTestInterfaceMixin(Self, "NSLogicalTest");
};

pub fn NSMutableAttributedStringInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_replaceCharactersInRange_withString_ = CachedSelector.init("replaceCharactersInRange:withString:");
      pub fn replaceCharactersInRangewithString(self: *Self, __range: _NSRange, __str:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceCharactersInRange_withString_.get(), __range, __str, );
 }}
var sel_setAttributes_range_ = CachedSelector.init("setAttributes:range:");
      pub fn setAttributesrange(self: *Self, __attrs:  ?* NSDictionary, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributes_range_.get(), __attrs, __range, );
 }}
var sel_addAttribute_value_range_ = CachedSelector.init("addAttribute:value:range:");
      pub fn addAttributevaluerange(self: *Self, __name:  * NSString, __value: id, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, id, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addAttribute_value_range_.get(), __name, __value, __range, );
 }}
var sel_addAttributes_range_ = CachedSelector.init("addAttributes:range:");
      pub fn addAttributesrange(self: *Self, __attrs:  * NSDictionary, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addAttributes_range_.get(), __attrs, __range, );
 }}
var sel_removeAttribute_range_ = CachedSelector.init("removeAttribute:range:");
      pub fn removeAttributerange(self: *Self, __name:  * NSString, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAttribute_range_.get(), __name, __range, );
 }}
var sel_replaceCharactersInRange_withAttributedString_ = CachedSelector.init("replaceCharactersInRange:withAttributedString:");
      pub fn replaceCharactersInRangewithAttributedString(self: *Self, __range: _NSRange, __attrString:  * NSAttributedString, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSAttributedString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceCharactersInRange_withAttributedString_.get(), __range, __attrString, );
 }}
var sel_insertAttributedString_atIndex_ = CachedSelector.init("insertAttributedString:atIndex:");
      pub fn insertAttributedStringatIndex(self: *Self, __attrString:  * NSAttributedString, __loc: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertAttributedString_atIndex_.get(), __attrString, __loc, );
 }}
var sel_appendAttributedString_ = CachedSelector.init("appendAttributedString:");
      pub fn appendAttributedString(self: *Self, __attrString:  * NSAttributedString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appendAttributedString_.get(), __attrString, );
 }}
var sel_deleteCharactersInRange_ = CachedSelector.init("deleteCharactersInRange:");
      pub fn deleteCharactersInRange(self: *Self, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_deleteCharactersInRange_.get(), __range, );
 }}
var sel_setAttributedString_ = CachedSelector.init("setAttributedString:");
      pub fn setAttributedString(self: *Self, __attrString:  * NSAttributedString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributedString_.get(), __attrString, );
 }}
var sel_beginEditing = CachedSelector.init("beginEditing");
      pub fn beginEditing(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_beginEditing.get(), );
 }}
var sel_endEditing = CachedSelector.init("endEditing");
      pub fn endEditing(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endEditing.get(), );
 }}
var sel_mutableString = CachedSelector.init("mutableString");
      pub fn mutableString(self: *Self, )  * NSMutableString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSMutableString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableString.get(), );
 }}
var sel_appendLocalizedFormat_ = CachedSelector.init("appendLocalizedFormat:");
      pub fn appendLocalizedFormat(self: *Self, __format:  * NSAttributedString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appendLocalizedFormat_.get(), __format, );
 }}
  };
}

pub const NSMutableAttributedString = opaque {
  const Self = @This();
  pub usingnamespace NSMutableAttributedStringInterfaceMixin(Self, "NSMutableAttributedString");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableAttributedString");
  pub usingnamespace NSAttributedStringInterfaceMixin(Self, "NSMutableAttributedString");
};

pub fn NSNotificationCenterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addObserver_selector_name_object_ = CachedSelector.init("addObserver:selector:name:object:");
      pub fn addObserverselectornameobject(self: *Self, __observer: id, __aSelector: SEL, __aName:  ?* NSString, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, SEL,  ?* NSString, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObserver_selector_name_object_.get(), __observer, __aSelector, __aName, __anObject, );
 }}
var sel_postNotification_ = CachedSelector.init("postNotification:");
      pub fn postNotification(self: *Self, __notification:  * NSNotification, ) void {{
           return @as(*const fn(*Self, SEL,  * NSNotification, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_postNotification_.get(), __notification, );
 }}
var sel_postNotificationName_object_ = CachedSelector.init("postNotificationName:object:");
      pub fn postNotificationNameobject(self: *Self, __aName:  * NSString, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_postNotificationName_object_.get(), __aName, __anObject, );
 }}
var sel_postNotificationName_object_userInfo_ = CachedSelector.init("postNotificationName:object:userInfo:");
      pub fn postNotificationNameobjectuserInfo(self: *Self, __aName:  * NSString, __anObject: id, __aUserInfo:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, id,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_postNotificationName_object_userInfo_.get(), __aName, __anObject, __aUserInfo, );
 }}
var sel_removeObserver_ = CachedSelector.init("removeObserver:");
      pub fn removeObserver(self: *Self, __observer: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_.get(), __observer, );
 }}
var sel_removeObserver_name_object_ = CachedSelector.init("removeObserver:name:object:");
      pub fn removeObservernameobject(self: *Self, __observer: id, __aName:  ?* NSString, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id,  ?* NSString, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_name_object_.get(), __observer, __aName, __anObject, );
 }}
var sel_addObserverForName_object_queue_usingBlock_ = CachedSelector.init("addObserverForName:object:queue:usingBlock:");
      pub fn addObserverForNameobjectqueueusingBlock(self: *Self, __name:  ?* NSString, __obj: id, __queue:  ?* NSOperationQueue, __block: ?*u8, )  * NSObject {{
           return @as(*const fn(*Self, SEL,  ?* NSString, id,  ?* NSOperationQueue, ?*u8, ) callconv(.C)  * NSObject, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObserverForName_object_queue_usingBlock_.get(), __name, __obj, __queue, __block, );
 }}
var sel_defaultCenter = CachedSelector.init("defaultCenter");
      pub fn defaultCenter()  * NSNotificationCenter {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSNotificationCenter, @ptrCast(&objc_msgSend))(class.get(), sel_defaultCenter.get(), );
 }}
  };
}

pub const NSNotificationCenter = opaque {
  const Self = @This();
  pub usingnamespace NSNotificationCenterInterfaceMixin(Self, "NSNotificationCenter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNotificationCenter");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSNotificationCenter");
};

pub fn NSHashTableInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithOptions_capacity_ = CachedSelector.init("initWithOptions:capacity:");
      pub fn initWithOptionscapacity(self: *Self, __options: NSPointerFunctionsOptions, __initialCapacity: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, NSPointerFunctionsOptions, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithOptions_capacity_.get(), __options, __initialCapacity, );
 }}
var sel_initWithPointerFunctions_capacity_ = CachedSelector.init("initWithPointerFunctions:capacity:");
      pub fn initWithPointerFunctionscapacity(self: *Self, __functions:  * NSPointerFunctions, __initialCapacity: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSPointerFunctions, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithPointerFunctions_capacity_.get(), __functions, __initialCapacity, );
 }}
var sel_hashTableWithOptions_ = CachedSelector.init("hashTableWithOptions:");
      pub fn hashTableWithOptions(__options: NSPointerFunctionsOptions, )  * NSHashTable {{
           return @as(*const fn(Class, SEL, NSPointerFunctionsOptions, ) callconv(.C)  * NSHashTable, @ptrCast(&objc_msgSend))(class.get(), sel_hashTableWithOptions_.get(), __options, );
 }}
var sel_hashTableWithWeakObjects = CachedSelector.init("hashTableWithWeakObjects");
      pub fn hashTableWithWeakObjects() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_hashTableWithWeakObjects.get(), );
 }}
var sel_weakObjectsHashTable = CachedSelector.init("weakObjectsHashTable");
      pub fn weakObjectsHashTable()  * NSHashTable {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSHashTable, @ptrCast(&objc_msgSend))(class.get(), sel_weakObjectsHashTable.get(), );
 }}
var sel_member_ = CachedSelector.init("member:");
      pub fn member(self: *Self, __object: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_member_.get(), __object, );
 }}
var sel_objectEnumerator = CachedSelector.init("objectEnumerator");
      pub fn objectEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectEnumerator.get(), );
 }}
var sel_addObject_ = CachedSelector.init("addObject:");
      pub fn addObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObject_.get(), __object, );
 }}
var sel_removeObject_ = CachedSelector.init("removeObject:");
      pub fn removeObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObject_.get(), __object, );
 }}
var sel_removeAllObjects = CachedSelector.init("removeAllObjects");
      pub fn removeAllObjects(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllObjects.get(), );
 }}
var sel_containsObject_ = CachedSelector.init("containsObject:");
      pub fn containsObject(self: *Self, __anObject: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsObject_.get(), __anObject, );
 }}
var sel_intersectsHashTable_ = CachedSelector.init("intersectsHashTable:");
      pub fn intersectsHashTable(self: *Self, __other:  * NSHashTable, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSHashTable, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectsHashTable_.get(), __other, );
 }}
var sel_isEqualToHashTable_ = CachedSelector.init("isEqualToHashTable:");
      pub fn isEqualToHashTable(self: *Self, __other:  * NSHashTable, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSHashTable, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToHashTable_.get(), __other, );
 }}
var sel_isSubsetOfHashTable_ = CachedSelector.init("isSubsetOfHashTable:");
      pub fn isSubsetOfHashTable(self: *Self, __other:  * NSHashTable, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSHashTable, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSubsetOfHashTable_.get(), __other, );
 }}
var sel_intersectHashTable_ = CachedSelector.init("intersectHashTable:");
      pub fn intersectHashTable(self: *Self, __other:  * NSHashTable, ) void {{
           return @as(*const fn(*Self, SEL,  * NSHashTable, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectHashTable_.get(), __other, );
 }}
var sel_unionHashTable_ = CachedSelector.init("unionHashTable:");
      pub fn unionHashTable(self: *Self, __other:  * NSHashTable, ) void {{
           return @as(*const fn(*Self, SEL,  * NSHashTable, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unionHashTable_.get(), __other, );
 }}
var sel_minusHashTable_ = CachedSelector.init("minusHashTable:");
      pub fn minusHashTable(self: *Self, __other:  * NSHashTable, ) void {{
           return @as(*const fn(*Self, SEL,  * NSHashTable, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minusHashTable_.get(), __other, );
 }}
var sel_pointerFunctions = CachedSelector.init("pointerFunctions");
      pub fn pointerFunctions(self: *Self, )  * NSPointerFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSPointerFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pointerFunctions.get(), );
 }}
var sel_count = CachedSelector.init("count");
      pub fn count(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_count.get(), );
 }}
var sel_allObjects = CachedSelector.init("allObjects");
      pub fn allObjects(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allObjects.get(), );
 }}
var sel_anyObject = CachedSelector.init("anyObject");
      pub fn anyObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_anyObject.get(), );
 }}
var sel_setRepresentation = CachedSelector.init("setRepresentation");
      pub fn setRepresentation(self: *Self, )  * NSSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRepresentation.get(), );
 }}
  };
}

pub const NSHashTable = opaque {
  const Self = @This();
  pub usingnamespace NSHashTableInterfaceMixin(Self, "NSHashTable");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSHashTable");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSHashTable");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSHashTable");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSHashTable");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSHashTable");
};

pub fn NSLockInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_tryLock = CachedSelector.init("tryLock");
      pub fn tryLock(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tryLock.get(), );
 }}
var sel_lockBeforeDate_ = CachedSelector.init("lockBeforeDate:");
      pub fn lockBeforeDate(self: *Self, __limit:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lockBeforeDate_.get(), __limit, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
  };
}

pub const NSLock = opaque {
  const Self = @This();
  pub usingnamespace NSLockInterfaceMixin(Self, "NSLock");
  pub usingnamespace NSLockingProtocolMixin(Self, "NSLock");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSLock");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSLock");
};

pub fn NSMethodSignatureInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_signatureWithObjCTypes_ = CachedSelector.init("signatureWithObjCTypes:");
      pub fn signatureWithObjCTypes(__types:  [*c]  const u8, )  ?* NSMethodSignature {{
           return @as(*const fn(Class, SEL,  [*c]  const u8, ) callconv(.C)  ?* NSMethodSignature, @ptrCast(&objc_msgSend))(class.get(), sel_signatureWithObjCTypes_.get(), __types, );
 }}
var sel_getArgumentTypeAtIndex_ = CachedSelector.init("getArgumentTypeAtIndex:");
      pub fn getArgumentTypeAtIndex(self: *Self, __idx: c_ulong, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getArgumentTypeAtIndex_.get(), __idx, );
 }}
var sel_isOneway = CachedSelector.init("isOneway");
      pub fn isOneway(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isOneway.get(), );
 }}
var sel_numberOfArguments = CachedSelector.init("numberOfArguments");
      pub fn numberOfArguments(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberOfArguments.get(), );
 }}
var sel_frameLength = CachedSelector.init("frameLength");
      pub fn frameLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_frameLength.get(), );
 }}
var sel_methodReturnType = CachedSelector.init("methodReturnType");
      pub fn methodReturnType(self: *Self, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_methodReturnType.get(), );
 }}
var sel_methodReturnLength = CachedSelector.init("methodReturnLength");
      pub fn methodReturnLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_methodReturnLength.get(), );
 }}
  };
}

pub const NSMethodSignature = opaque {
  const Self = @This();
  pub usingnamespace NSMethodSignatureInterfaceMixin(Self, "NSMethodSignature");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMethodSignature");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMethodSignature");
};

pub fn MTLFunctionStitchingInputNodeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithArgumentIndex_ = CachedSelector.init("initWithArgumentIndex:");
      pub fn initWithArgumentIndex(self: *Self, __argument: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithArgumentIndex_.get(), __argument, );
 }}
var sel_argumentIndex = CachedSelector.init("argumentIndex");
      pub fn argumentIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_argumentIndex.get(), );
 }}
var sel_setArgumentIndex_ = CachedSelector.init("setArgumentIndex:");
      pub fn setArgumentIndex(self: *Self, __argumentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArgumentIndex_.get(), __argumentIndex, );
 }}
  };
}

pub const MTLFunctionStitchingInputNode = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionStitchingInputNodeInterfaceMixin(Self, "MTLFunctionStitchingInputNode");
  pub usingnamespace MTLFunctionStitchingNodeProtocolMixin(Self, "MTLFunctionStitchingInputNode");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionStitchingInputNode");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLFunctionStitchingInputNode");
};

pub fn MTLStageInputOutputDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stageInputOutputDescriptor = CachedSelector.init("stageInputOutputDescriptor");
      pub fn stageInputOutputDescriptor()  * MTLStageInputOutputDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLStageInputOutputDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_stageInputOutputDescriptor.get(), );
 }}
var sel_reset = CachedSelector.init("reset");
      pub fn reset(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reset.get(), );
 }}
var sel_layouts = CachedSelector.init("layouts");
      pub fn layouts(self: *Self, )  * MTLBufferLayoutDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLBufferLayoutDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_layouts.get(), );
 }}
var sel_attributes = CachedSelector.init("attributes");
      pub fn attributes(self: *Self, )  * MTLAttributeDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLAttributeDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributes.get(), );
 }}
var sel_indexType = CachedSelector.init("indexType");
      pub fn indexType(self: *Self, ) MTLIndexType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLIndexType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexType.get(), );
 }}
var sel_setIndexType_ = CachedSelector.init("setIndexType:");
      pub fn setIndexType(self: *Self, __indexType: MTLIndexType, ) void {{
           return @as(*const fn(*Self, SEL, MTLIndexType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexType_.get(), __indexType, );
 }}
var sel_indexBufferIndex = CachedSelector.init("indexBufferIndex");
      pub fn indexBufferIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexBufferIndex.get(), );
 }}
var sel_setIndexBufferIndex_ = CachedSelector.init("setIndexBufferIndex:");
      pub fn setIndexBufferIndex(self: *Self, __indexBufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexBufferIndex_.get(), __indexBufferIndex, );
 }}
  };
}

pub const MTLStageInputOutputDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLStageInputOutputDescriptorInterfaceMixin(Self, "MTLStageInputOutputDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLStageInputOutputDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLStageInputOutputDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLStageInputOutputDescriptor");
};

pub fn NSSocketPortInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithTCPPort_ = CachedSelector.init("initWithTCPPort:");
      pub fn initWithTCPPort(self: *Self, __port: c_ushort, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ushort, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTCPPort_.get(), __port, );
 }}
var sel_initWithProtocolFamily_socketType_protocol_address_ = CachedSelector.init("initWithProtocolFamily:socketType:protocol:address:");
      pub fn initWithProtocolFamilysocketTypeprotocoladdress(self: *Self, __family: c_int, __a_type: c_int, __protocol: c_int, __address:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL, c_int, c_int, c_int,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithProtocolFamily_socketType_protocol_address_.get(), __family, __a_type, __protocol, __address, );
 }}
var sel_initWithProtocolFamily_socketType_protocol_socket_ = CachedSelector.init("initWithProtocolFamily:socketType:protocol:socket:");
      pub fn initWithProtocolFamilysocketTypeprotocolsocket(self: *Self, __family: c_int, __a_type: c_int, __protocol: c_int, __sock: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL, c_int, c_int, c_int, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithProtocolFamily_socketType_protocol_socket_.get(), __family, __a_type, __protocol, __sock, );
 }}
var sel_initRemoteWithTCPPort_host_ = CachedSelector.init("initRemoteWithTCPPort:host:");
      pub fn initRemoteWithTCPPorthost(self: *Self, __port: c_ushort, __hostName:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ushort,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initRemoteWithTCPPort_host_.get(), __port, __hostName, );
 }}
var sel_initRemoteWithProtocolFamily_socketType_protocol_address_ = CachedSelector.init("initRemoteWithProtocolFamily:socketType:protocol:address:");
      pub fn initRemoteWithProtocolFamilysocketTypeprotocoladdress(self: *Self, __family: c_int, __a_type: c_int, __protocol: c_int, __address:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL, c_int, c_int, c_int,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initRemoteWithProtocolFamily_socketType_protocol_address_.get(), __family, __a_type, __protocol, __address, );
 }}
var sel_protocolFamily = CachedSelector.init("protocolFamily");
      pub fn protocolFamily(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_protocolFamily.get(), );
 }}
var sel_socketType = CachedSelector.init("socketType");
      pub fn socketType(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_socketType.get(), );
 }}
var sel_protocol = CachedSelector.init("protocol");
      pub fn protocol(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_protocol.get(), );
 }}
var sel_address = CachedSelector.init("address");
      pub fn address(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_address.get(), );
 }}
var sel_socket = CachedSelector.init("socket");
      pub fn socket(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_socket.get(), );
 }}
  };
}

pub const NSSocketPort = opaque {
  const Self = @This();
  pub usingnamespace NSSocketPortInterfaceMixin(Self, "NSSocketPort");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSocketPort");
  pub usingnamespace NSPortInterfaceMixin(Self, "NSSocketPort");
};

pub fn MTLVertexAttributeDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __index: c_ulong, )  * MTLVertexAttributeDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLVertexAttributeDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __index, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attributeDesc:  ?* MTLVertexAttributeDescriptor, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLVertexAttributeDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attributeDesc, __index, );
 }}
  };
}

pub const MTLVertexAttributeDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLVertexAttributeDescriptorArrayInterfaceMixin(Self, "MTLVertexAttributeDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLVertexAttributeDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLVertexAttributeDescriptorArray");
};

pub fn NSProxyInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_alloc = CachedSelector.init("alloc");
      pub fn alloc() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_alloc.get(), );
 }}
var sel_allocWithZone_ = CachedSelector.init("allocWithZone:");
      pub fn allocWithZone(__zone:  [*c] _NSZone, ) id {{
           return @as(*const fn(Class, SEL,  [*c] _NSZone, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_allocWithZone_.get(), __zone, );
 }}
var sel_class = CachedSelector.init("class");
      pub fn _class() Class {{
           return @as(*const fn(Class, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(class.get(), sel_class.get(), );
 }}
var sel_forwardInvocation_ = CachedSelector.init("forwardInvocation:");
      pub fn forwardInvocation(self: *Self, __invocation:  * NSInvocation, ) void {{
           return @as(*const fn(*Self, SEL,  * NSInvocation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_forwardInvocation_.get(), __invocation, );
 }}
var sel_methodSignatureForSelector_ = CachedSelector.init("methodSignatureForSelector:");
      pub fn methodSignatureForSelector(self: *Self, __sel: SEL, )  ?* NSMethodSignature {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C)  ?* NSMethodSignature, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_methodSignatureForSelector_.get(), __sel, );
 }}
var sel_dealloc = CachedSelector.init("dealloc");
      pub fn dealloc(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dealloc.get(), );
 }}
var sel_finalize = CachedSelector.init("finalize");
      pub fn finalize(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_finalize.get(), );
 }}
var sel_respondsToSelector_ = CachedSelector.init("respondsToSelector:");
      pub fn respondsToSelector(__aSelector: SEL, ) c_int {{
           return @as(*const fn(Class, SEL, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_respondsToSelector_.get(), __aSelector, );
 }}
var sel_allowsWeakReference = CachedSelector.init("allowsWeakReference");
      pub fn allowsWeakReference(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsWeakReference.get(), );
 }}
var sel_retainWeakReference = CachedSelector.init("retainWeakReference");
      pub fn retainWeakReference(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_retainWeakReference.get(), );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_debugDescription = CachedSelector.init("debugDescription");
      pub fn debugDescription(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_debugDescription.get(), );
 }}
  };
}

pub const NSProxy = opaque {
  const Self = @This();
  pub usingnamespace NSProxyInterfaceMixin(Self, "NSProxy");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSProxy");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSProxy");
};

pub fn MTLSharedEventHandleInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
  };
}

pub const MTLSharedEventHandle = opaque {
  const Self = @This();
  pub usingnamespace MTLSharedEventHandleInterfaceMixin(Self, "MTLSharedEventHandle");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "MTLSharedEventHandle");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLSharedEventHandle");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLSharedEventHandle");
};

pub fn NSXMLDTDInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithKind_options_ = CachedSelector.init("initWithKind:options:");
      pub fn initWithKindoptions(self: *Self, __kind: NSXMLNodeKind, __options: NSXMLNodeOptions, ) *Self {{
           return @as(*const fn(*Self, SEL, NSXMLNodeKind, NSXMLNodeOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKind_options_.get(), __kind, __options, );
 }}
var sel_initWithContentsOfURL_options_error_ = CachedSelector.init("initWithContentsOfURL:options:error:");
      pub fn initWithContentsOfURLoptionserror(self: *Self, __url:  * NSURL, __mask: NSXMLNodeOptions, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSXMLNodeOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_options_error_.get(), __url, __mask, __an_error, );
 }}
var sel_initWithData_options_error_ = CachedSelector.init("initWithData:options:error:");
      pub fn initWithDataoptionserror(self: *Self, __data:  * NSData, __mask: NSXMLNodeOptions, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, NSXMLNodeOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithData_options_error_.get(), __data, __mask, __an_error, );
 }}
var sel_insertChild_atIndex_ = CachedSelector.init("insertChild:atIndex:");
      pub fn insertChildatIndex(self: *Self, __child:  * NSXMLNode, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLNode, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertChild_atIndex_.get(), __child, __index, );
 }}
var sel_insertChildren_atIndex_ = CachedSelector.init("insertChildren:atIndex:");
      pub fn insertChildrenatIndex(self: *Self, __children:  * NSArray, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertChildren_atIndex_.get(), __children, __index, );
 }}
var sel_removeChildAtIndex_ = CachedSelector.init("removeChildAtIndex:");
      pub fn removeChildAtIndex(self: *Self, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeChildAtIndex_.get(), __index, );
 }}
var sel_setChildren_ = CachedSelector.init("setChildren:");
      pub fn setChildren(self: *Self, __children:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setChildren_.get(), __children, );
 }}
var sel_addChild_ = CachedSelector.init("addChild:");
      pub fn addChild(self: *Self, __child:  * NSXMLNode, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLNode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addChild_.get(), __child, );
 }}
var sel_replaceChildAtIndex_withNode_ = CachedSelector.init("replaceChildAtIndex:withNode:");
      pub fn replaceChildAtIndexwithNode(self: *Self, __index: c_ulong, __node:  * NSXMLNode, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong,  * NSXMLNode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceChildAtIndex_withNode_.get(), __index, __node, );
 }}
var sel_entityDeclarationForName_ = CachedSelector.init("entityDeclarationForName:");
      pub fn entityDeclarationForName(self: *Self, __name:  * NSString, )  ?* NSXMLDTDNode {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSXMLDTDNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_entityDeclarationForName_.get(), __name, );
 }}
var sel_notationDeclarationForName_ = CachedSelector.init("notationDeclarationForName:");
      pub fn notationDeclarationForName(self: *Self, __name:  * NSString, )  ?* NSXMLDTDNode {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSXMLDTDNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_notationDeclarationForName_.get(), __name, );
 }}
var sel_elementDeclarationForName_ = CachedSelector.init("elementDeclarationForName:");
      pub fn elementDeclarationForName(self: *Self, __name:  * NSString, )  ?* NSXMLDTDNode {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSXMLDTDNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementDeclarationForName_.get(), __name, );
 }}
var sel_attributeDeclarationForName_elementName_ = CachedSelector.init("attributeDeclarationForName:elementName:");
      pub fn attributeDeclarationForNameelementName(self: *Self, __name:  * NSString, __elementName:  * NSString, )  ?* NSXMLDTDNode {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C)  ?* NSXMLDTDNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeDeclarationForName_elementName_.get(), __name, __elementName, );
 }}
var sel_predefinedEntityDeclarationForName_ = CachedSelector.init("predefinedEntityDeclarationForName:");
      pub fn predefinedEntityDeclarationForName(__name:  * NSString, )  ?* NSXMLDTDNode {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSXMLDTDNode, @ptrCast(&objc_msgSend))(class.get(), sel_predefinedEntityDeclarationForName_.get(), __name, );
 }}
var sel_publicID = CachedSelector.init("publicID");
      pub fn publicID(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_publicID.get(), );
 }}
var sel_setPublicID_ = CachedSelector.init("setPublicID:");
      pub fn setPublicID(self: *Self, __publicID:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPublicID_.get(), __publicID, );
 }}
var sel_systemID = CachedSelector.init("systemID");
      pub fn systemID(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_systemID.get(), );
 }}
var sel_setSystemID_ = CachedSelector.init("setSystemID:");
      pub fn setSystemID(self: *Self, __systemID:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSystemID_.get(), __systemID, );
 }}
  };
}

pub const NSXMLDTD = opaque {
  const Self = @This();
  pub usingnamespace NSXMLDTDInterfaceMixin(Self, "NSXMLDTD");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXMLDTD");
  pub usingnamespace NSXMLNodeInterfaceMixin(Self, "NSXMLDTD");
};

pub fn NSClassDescriptionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_registerClassDescription_forClass_ = CachedSelector.init("registerClassDescription:forClass:");
      pub fn registerClassDescriptionforClass(__description:  * NSClassDescription, __aClass: Class, ) void {{
           return @as(*const fn(Class, SEL,  * NSClassDescription, Class, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_registerClassDescription_forClass_.get(), __description, __aClass, );
 }}
var sel_invalidateClassDescriptionCache = CachedSelector.init("invalidateClassDescriptionCache");
      pub fn invalidateClassDescriptionCache() void {{
           return @as(*const fn(Class, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_invalidateClassDescriptionCache.get(), );
 }}
var sel_classDescriptionForClass_ = CachedSelector.init("classDescriptionForClass:");
      pub fn classDescriptionForClass(__aClass: Class, )  ?* NSClassDescription {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C)  ?* NSClassDescription, @ptrCast(&objc_msgSend))(class.get(), sel_classDescriptionForClass_.get(), __aClass, );
 }}
var sel_inverseForRelationshipKey_ = CachedSelector.init("inverseForRelationshipKey:");
      pub fn inverseForRelationshipKey(self: *Self, __relationshipKey:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_inverseForRelationshipKey_.get(), __relationshipKey, );
 }}
var sel_attributeKeys = CachedSelector.init("attributeKeys");
      pub fn attributeKeys(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeKeys.get(), );
 }}
var sel_toOneRelationshipKeys = CachedSelector.init("toOneRelationshipKeys");
      pub fn toOneRelationshipKeys(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_toOneRelationshipKeys.get(), );
 }}
var sel_toManyRelationshipKeys = CachedSelector.init("toManyRelationshipKeys");
      pub fn toManyRelationshipKeys(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_toManyRelationshipKeys.get(), );
 }}
  };
}

pub const NSClassDescription = opaque {
  const Self = @This();
  pub usingnamespace NSClassDescriptionInterfaceMixin(Self, "NSClassDescription");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSClassDescription");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSClassDescription");
};

pub fn MTLCounterSampleBufferDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_counterSet = CachedSelector.init("counterSet");
      pub fn counterSet(self: *Self, )  ?* MTLCounterSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCounterSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_counterSet.get(), );
 }}
var sel_setCounterSet_ = CachedSelector.init("setCounterSet:");
      pub fn setCounterSet(self: *Self, __counterSet:  ?* MTLCounterSet, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLCounterSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCounterSet_.get(), __counterSet, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_storageMode = CachedSelector.init("storageMode");
      pub fn storageMode(self: *Self, ) MTLStorageMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStorageMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storageMode.get(), );
 }}
var sel_setStorageMode_ = CachedSelector.init("setStorageMode:");
      pub fn setStorageMode(self: *Self, __storageMode: MTLStorageMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLStorageMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStorageMode_.get(), __storageMode, );
 }}
var sel_sampleCount = CachedSelector.init("sampleCount");
      pub fn sampleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCount.get(), );
 }}
var sel_setSampleCount_ = CachedSelector.init("setSampleCount:");
      pub fn setSampleCount(self: *Self, __sampleCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSampleCount_.get(), __sampleCount, );
 }}
  };
}

pub const MTLCounterSampleBufferDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLCounterSampleBufferDescriptorInterfaceMixin(Self, "MTLCounterSampleBufferDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLCounterSampleBufferDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCounterSampleBufferDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLCounterSampleBufferDescriptor");
};

pub fn MTLRenderPassDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_renderPassDescriptor = CachedSelector.init("renderPassDescriptor");
      pub fn renderPassDescriptor()  * MTLRenderPassDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLRenderPassDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_renderPassDescriptor.get(), );
 }}
var sel_setSamplePositions_count_ = CachedSelector.init("setSamplePositions:count:");
      pub fn setSamplePositionscount(self: *Self, __positions:  [*c] MTLSamplePosition, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] MTLSamplePosition, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSamplePositions_count_.get(), __positions, __count, );
 }}
var sel_getSamplePositions_count_ = CachedSelector.init("getSamplePositions:count:");
      pub fn getSamplePositionscount(self: *Self, __positions:  [*c] MTLSamplePosition, __count: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  [*c] MTLSamplePosition, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getSamplePositions_count_.get(), __positions, __count, );
 }}
var sel_colorAttachments = CachedSelector.init("colorAttachments");
      pub fn colorAttachments(self: *Self, )  * MTLRenderPassColorAttachmentDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLRenderPassColorAttachmentDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_colorAttachments.get(), );
 }}
var sel_depthAttachment = CachedSelector.init("depthAttachment");
      pub fn depthAttachment(self: *Self, )  * MTLRenderPassDepthAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLRenderPassDepthAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depthAttachment.get(), );
 }}
var sel_setDepthAttachment_ = CachedSelector.init("setDepthAttachment:");
      pub fn setDepthAttachment(self: *Self, __depthAttachment:  ?* MTLRenderPassDepthAttachmentDescriptor, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLRenderPassDepthAttachmentDescriptor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthAttachment_.get(), __depthAttachment, );
 }}
var sel_stencilAttachment = CachedSelector.init("stencilAttachment");
      pub fn stencilAttachment(self: *Self, )  * MTLRenderPassStencilAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLRenderPassStencilAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stencilAttachment.get(), );
 }}
var sel_setStencilAttachment_ = CachedSelector.init("setStencilAttachment:");
      pub fn setStencilAttachment(self: *Self, __stencilAttachment:  ?* MTLRenderPassStencilAttachmentDescriptor, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLRenderPassStencilAttachmentDescriptor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilAttachment_.get(), __stencilAttachment, );
 }}
var sel_visibilityResultBuffer = CachedSelector.init("visibilityResultBuffer");
      pub fn visibilityResultBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_visibilityResultBuffer.get(), );
 }}
var sel_setVisibilityResultBuffer_ = CachedSelector.init("setVisibilityResultBuffer:");
      pub fn setVisibilityResultBuffer(self: *Self, __visibilityResultBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVisibilityResultBuffer_.get(), __visibilityResultBuffer, );
 }}
var sel_renderTargetArrayLength = CachedSelector.init("renderTargetArrayLength");
      pub fn renderTargetArrayLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_renderTargetArrayLength.get(), );
 }}
var sel_setRenderTargetArrayLength_ = CachedSelector.init("setRenderTargetArrayLength:");
      pub fn setRenderTargetArrayLength(self: *Self, __renderTargetArrayLength: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRenderTargetArrayLength_.get(), __renderTargetArrayLength, );
 }}
var sel_imageblockSampleLength = CachedSelector.init("imageblockSampleLength");
      pub fn imageblockSampleLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_imageblockSampleLength.get(), );
 }}
var sel_setImageblockSampleLength_ = CachedSelector.init("setImageblockSampleLength:");
      pub fn setImageblockSampleLength(self: *Self, __imageblockSampleLength: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setImageblockSampleLength_.get(), __imageblockSampleLength, );
 }}
var sel_threadgroupMemoryLength = CachedSelector.init("threadgroupMemoryLength");
      pub fn threadgroupMemoryLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadgroupMemoryLength.get(), );
 }}
var sel_setThreadgroupMemoryLength_ = CachedSelector.init("setThreadgroupMemoryLength:");
      pub fn setThreadgroupMemoryLength(self: *Self, __threadgroupMemoryLength: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setThreadgroupMemoryLength_.get(), __threadgroupMemoryLength, );
 }}
var sel_tileWidth = CachedSelector.init("tileWidth");
      pub fn tileWidth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tileWidth.get(), );
 }}
var sel_setTileWidth_ = CachedSelector.init("setTileWidth:");
      pub fn setTileWidth(self: *Self, __tileWidth: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileWidth_.get(), __tileWidth, );
 }}
var sel_tileHeight = CachedSelector.init("tileHeight");
      pub fn tileHeight(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tileHeight.get(), );
 }}
var sel_setTileHeight_ = CachedSelector.init("setTileHeight:");
      pub fn setTileHeight(self: *Self, __tileHeight: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileHeight_.get(), __tileHeight, );
 }}
var sel_defaultRasterSampleCount = CachedSelector.init("defaultRasterSampleCount");
      pub fn defaultRasterSampleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_defaultRasterSampleCount.get(), );
 }}
var sel_setDefaultRasterSampleCount_ = CachedSelector.init("setDefaultRasterSampleCount:");
      pub fn setDefaultRasterSampleCount(self: *Self, __defaultRasterSampleCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDefaultRasterSampleCount_.get(), __defaultRasterSampleCount, );
 }}
var sel_renderTargetWidth = CachedSelector.init("renderTargetWidth");
      pub fn renderTargetWidth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_renderTargetWidth.get(), );
 }}
var sel_setRenderTargetWidth_ = CachedSelector.init("setRenderTargetWidth:");
      pub fn setRenderTargetWidth(self: *Self, __renderTargetWidth: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRenderTargetWidth_.get(), __renderTargetWidth, );
 }}
var sel_renderTargetHeight = CachedSelector.init("renderTargetHeight");
      pub fn renderTargetHeight(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_renderTargetHeight.get(), );
 }}
var sel_setRenderTargetHeight_ = CachedSelector.init("setRenderTargetHeight:");
      pub fn setRenderTargetHeight(self: *Self, __renderTargetHeight: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRenderTargetHeight_.get(), __renderTargetHeight, );
 }}
var sel_rasterizationRateMap = CachedSelector.init("rasterizationRateMap");
      pub fn rasterizationRateMap(self: *Self, )  ?* MTLRasterizationRateMap {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLRasterizationRateMap, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rasterizationRateMap.get(), );
 }}
var sel_setRasterizationRateMap_ = CachedSelector.init("setRasterizationRateMap:");
      pub fn setRasterizationRateMap(self: *Self, __rasterizationRateMap:  ?* MTLRasterizationRateMap, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLRasterizationRateMap, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRasterizationRateMap_.get(), __rasterizationRateMap, );
 }}
var sel_sampleBufferAttachments = CachedSelector.init("sampleBufferAttachments");
      pub fn sampleBufferAttachments(self: *Self, )  * MTLRenderPassSampleBufferAttachmentDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLRenderPassSampleBufferAttachmentDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBufferAttachments.get(), );
 }}
  };
}

pub const MTLRenderPassDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPassDescriptorInterfaceMixin(Self, "MTLRenderPassDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLRenderPassDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPassDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPassDescriptor");
};

pub fn MTLInstanceAccelerationStructureDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_descriptor.get(), );
 }}
var sel_instanceDescriptorBuffer = CachedSelector.init("instanceDescriptorBuffer");
      pub fn instanceDescriptorBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceDescriptorBuffer.get(), );
 }}
var sel_setInstanceDescriptorBuffer_ = CachedSelector.init("setInstanceDescriptorBuffer:");
      pub fn setInstanceDescriptorBuffer(self: *Self, __instanceDescriptorBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceDescriptorBuffer_.get(), __instanceDescriptorBuffer, );
 }}
var sel_instanceDescriptorBufferOffset = CachedSelector.init("instanceDescriptorBufferOffset");
      pub fn instanceDescriptorBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceDescriptorBufferOffset.get(), );
 }}
var sel_setInstanceDescriptorBufferOffset_ = CachedSelector.init("setInstanceDescriptorBufferOffset:");
      pub fn setInstanceDescriptorBufferOffset(self: *Self, __instanceDescriptorBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceDescriptorBufferOffset_.get(), __instanceDescriptorBufferOffset, );
 }}
var sel_instanceDescriptorStride = CachedSelector.init("instanceDescriptorStride");
      pub fn instanceDescriptorStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceDescriptorStride.get(), );
 }}
var sel_setInstanceDescriptorStride_ = CachedSelector.init("setInstanceDescriptorStride:");
      pub fn setInstanceDescriptorStride(self: *Self, __instanceDescriptorStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceDescriptorStride_.get(), __instanceDescriptorStride, );
 }}
var sel_instanceCount = CachedSelector.init("instanceCount");
      pub fn instanceCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceCount.get(), );
 }}
var sel_setInstanceCount_ = CachedSelector.init("setInstanceCount:");
      pub fn setInstanceCount(self: *Self, __instanceCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceCount_.get(), __instanceCount, );
 }}
var sel_instancedAccelerationStructures = CachedSelector.init("instancedAccelerationStructures");
      pub fn instancedAccelerationStructures(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instancedAccelerationStructures.get(), );
 }}
var sel_setInstancedAccelerationStructures_ = CachedSelector.init("setInstancedAccelerationStructures:");
      pub fn setInstancedAccelerationStructures(self: *Self, __instancedAccelerationStructures:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstancedAccelerationStructures_.get(), __instancedAccelerationStructures, );
 }}
var sel_instanceDescriptorType = CachedSelector.init("instanceDescriptorType");
      pub fn instanceDescriptorType(self: *Self, ) MTLAccelerationStructureInstanceDescriptorType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAccelerationStructureInstanceDescriptorType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceDescriptorType.get(), );
 }}
var sel_setInstanceDescriptorType_ = CachedSelector.init("setInstanceDescriptorType:");
      pub fn setInstanceDescriptorType(self: *Self, __instanceDescriptorType: MTLAccelerationStructureInstanceDescriptorType, ) void {{
           return @as(*const fn(*Self, SEL, MTLAccelerationStructureInstanceDescriptorType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceDescriptorType_.get(), __instanceDescriptorType, );
 }}
var sel_motionTransformBuffer = CachedSelector.init("motionTransformBuffer");
      pub fn motionTransformBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionTransformBuffer.get(), );
 }}
var sel_setMotionTransformBuffer_ = CachedSelector.init("setMotionTransformBuffer:");
      pub fn setMotionTransformBuffer(self: *Self, __motionTransformBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionTransformBuffer_.get(), __motionTransformBuffer, );
 }}
var sel_motionTransformBufferOffset = CachedSelector.init("motionTransformBufferOffset");
      pub fn motionTransformBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionTransformBufferOffset.get(), );
 }}
var sel_setMotionTransformBufferOffset_ = CachedSelector.init("setMotionTransformBufferOffset:");
      pub fn setMotionTransformBufferOffset(self: *Self, __motionTransformBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionTransformBufferOffset_.get(), __motionTransformBufferOffset, );
 }}
var sel_motionTransformCount = CachedSelector.init("motionTransformCount");
      pub fn motionTransformCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionTransformCount.get(), );
 }}
var sel_setMotionTransformCount_ = CachedSelector.init("setMotionTransformCount:");
      pub fn setMotionTransformCount(self: *Self, __motionTransformCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionTransformCount_.get(), __motionTransformCount, );
 }}
  };
}

pub const MTLInstanceAccelerationStructureDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLInstanceAccelerationStructureDescriptorInterfaceMixin(Self, "MTLInstanceAccelerationStructureDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLInstanceAccelerationStructureDescriptor");
  pub usingnamespace MTLAccelerationStructureDescriptorInterfaceMixin(Self, "MTLInstanceAccelerationStructureDescriptor");
};

pub fn NSUnitInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_initWithSymbol_ = CachedSelector.init("initWithSymbol:");
      pub fn initWithSymbol(self: *Self, __symbol:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSymbol_.get(), __symbol, );
 }}
var sel_symbol = CachedSelector.init("symbol");
      pub fn symbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_symbol.get(), );
 }}
  };
}

pub const NSUnit = opaque {
  const Self = @This();
  pub usingnamespace NSUnitInterfaceMixin(Self, "NSUnit");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSUnit");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnit");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnit");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUnit");
};

pub fn NSPipeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_pipe = CachedSelector.init("pipe");
      pub fn pipe()  * NSPipe {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSPipe, @ptrCast(&objc_msgSend))(class.get(), sel_pipe.get(), );
 }}
var sel_fileHandleForReading = CachedSelector.init("fileHandleForReading");
      pub fn fileHandleForReading(self: *Self, )  * NSFileHandle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSFileHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileHandleForReading.get(), );
 }}
var sel_fileHandleForWriting = CachedSelector.init("fileHandleForWriting");
      pub fn fileHandleForWriting(self: *Self, )  * NSFileHandle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSFileHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileHandleForWriting.get(), );
 }}
  };
}

pub const NSPipe = opaque {
  const Self = @This();
  pub usingnamespace NSPipeInterfaceMixin(Self, "NSPipe");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPipe");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPipe");
};

pub fn MTLPointerTypeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_elementStructType = CachedSelector.init("elementStructType");
      pub fn elementStructType(self: *Self, )  ?* MTLStructType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLStructType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementStructType.get(), );
 }}
var sel_elementArrayType = CachedSelector.init("elementArrayType");
      pub fn elementArrayType(self: *Self, )  ?* MTLArrayType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLArrayType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementArrayType.get(), );
 }}
var sel_elementType = CachedSelector.init("elementType");
      pub fn elementType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementType.get(), );
 }}
var sel_access = CachedSelector.init("access");
      pub fn access(self: *Self, ) MTLBindingAccess {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBindingAccess, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_access.get(), );
 }}
var sel_alignment = CachedSelector.init("alignment");
      pub fn alignment(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_alignment.get(), );
 }}
var sel_dataSize = CachedSelector.init("dataSize");
      pub fn dataSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataSize.get(), );
 }}
var sel_elementIsArgumentBuffer = CachedSelector.init("elementIsArgumentBuffer");
      pub fn elementIsArgumentBuffer(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementIsArgumentBuffer.get(), );
 }}
  };
}

pub const MTLPointerType = opaque {
  const Self = @This();
  pub usingnamespace MTLPointerTypeInterfaceMixin(Self, "MTLPointerType");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLPointerType");
  pub usingnamespace MTLTypeInterfaceMixin(Self, "MTLPointerType");
};

pub fn NSExpressionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_expressionWithFormat_argumentArray_ = CachedSelector.init("expressionWithFormat:argumentArray:");
      pub fn expressionWithFormatargumentArray(__expressionFormat:  * NSString, __arguments:  * NSArray, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSArray, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionWithFormat_argumentArray_.get(), __expressionFormat, __arguments, );
 }}
var sel_expressionWithFormat_ = CachedSelector.init("expressionWithFormat:");
      pub fn expressionWithFormat(__expressionFormat:  * NSString, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionWithFormat_.get(), __expressionFormat, );
 }}
var sel_expressionWithFormat_arguments_ = CachedSelector.init("expressionWithFormat:arguments:");
      pub fn expressionWithFormatarguments(__expressionFormat:  * NSString, __argList:  [*c] u8, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSString,  [*c] u8, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionWithFormat_arguments_.get(), __expressionFormat, __argList, );
 }}
var sel_expressionForConstantValue_ = CachedSelector.init("expressionForConstantValue:");
      pub fn expressionForConstantValue(__obj: id, )  * NSExpression {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForConstantValue_.get(), __obj, );
 }}
var sel_expressionForEvaluatedObject = CachedSelector.init("expressionForEvaluatedObject");
      pub fn expressionForEvaluatedObject()  * NSExpression {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForEvaluatedObject.get(), );
 }}
var sel_expressionForVariable_ = CachedSelector.init("expressionForVariable:");
      pub fn expressionForVariable(__string:  * NSString, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForVariable_.get(), __string, );
 }}
var sel_expressionForKeyPath_ = CachedSelector.init("expressionForKeyPath:");
      pub fn expressionForKeyPath(__keyPath:  * NSString, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForKeyPath_.get(), __keyPath, );
 }}
var sel_expressionForFunction_arguments_ = CachedSelector.init("expressionForFunction:arguments:");
      pub fn expressionForFunctionarguments(__name:  * NSString, __parameters:  * NSArray, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSArray, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForFunction_arguments_.get(), __name, __parameters, );
 }}
var sel_expressionForAggregate_ = CachedSelector.init("expressionForAggregate:");
      pub fn expressionForAggregate(__subexpressions:  * NSArray, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForAggregate_.get(), __subexpressions, );
 }}
var sel_expressionForUnionSet_with_ = CachedSelector.init("expressionForUnionSet:with:");
      pub fn expressionForUnionSetwith(__left:  * NSExpression, __right:  * NSExpression, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSExpression,  * NSExpression, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForUnionSet_with_.get(), __left, __right, );
 }}
var sel_expressionForIntersectSet_with_ = CachedSelector.init("expressionForIntersectSet:with:");
      pub fn expressionForIntersectSetwith(__left:  * NSExpression, __right:  * NSExpression, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSExpression,  * NSExpression, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForIntersectSet_with_.get(), __left, __right, );
 }}
var sel_expressionForMinusSet_with_ = CachedSelector.init("expressionForMinusSet:with:");
      pub fn expressionForMinusSetwith(__left:  * NSExpression, __right:  * NSExpression, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSExpression,  * NSExpression, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForMinusSet_with_.get(), __left, __right, );
 }}
var sel_expressionForSubquery_usingIteratorVariable_predicate_ = CachedSelector.init("expressionForSubquery:usingIteratorVariable:predicate:");
      pub fn expressionForSubqueryusingIteratorVariablepredicate(__expression:  * NSExpression, __variable:  * NSString, __predicate:  * NSPredicate, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSExpression,  * NSString,  * NSPredicate, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForSubquery_usingIteratorVariable_predicate_.get(), __expression, __variable, __predicate, );
 }}
var sel_expressionForFunction_selectorName_arguments_ = CachedSelector.init("expressionForFunction:selectorName:arguments:");
      pub fn expressionForFunctionselectorNamearguments(__target:  * NSExpression, __name:  * NSString, __parameters:  ?* NSArray, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSExpression,  * NSString,  ?* NSArray, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForFunction_selectorName_arguments_.get(), __target, __name, __parameters, );
 }}
var sel_expressionForAnyKey = CachedSelector.init("expressionForAnyKey");
      pub fn expressionForAnyKey()  * NSExpression {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForAnyKey.get(), );
 }}
var sel_expressionForBlock_arguments_ = CachedSelector.init("expressionForBlock:arguments:");
      pub fn expressionForBlockarguments(__block: ?*u8, __arguments:  ?* NSArray, )  * NSExpression {{
           return @as(*const fn(Class, SEL, ?*u8,  ?* NSArray, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForBlock_arguments_.get(), __block, __arguments, );
 }}
var sel_expressionForConditional_trueExpression_falseExpression_ = CachedSelector.init("expressionForConditional:trueExpression:falseExpression:");
      pub fn expressionForConditionaltrueExpressionfalseExpression(__predicate:  * NSPredicate, __trueExpression:  * NSExpression, __falseExpression:  * NSExpression, )  * NSExpression {{
           return @as(*const fn(Class, SEL,  * NSPredicate,  * NSExpression,  * NSExpression, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(class.get(), sel_expressionForConditional_trueExpression_falseExpression_.get(), __predicate, __trueExpression, __falseExpression, );
 }}
var sel_initWithExpressionType_ = CachedSelector.init("initWithExpressionType:");
      pub fn initWithExpressionType(self: *Self, __a_type: NSExpressionType, ) *Self {{
           return @as(*const fn(*Self, SEL, NSExpressionType, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithExpressionType_.get(), __a_type, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_expressionValueWithObject_context_ = CachedSelector.init("expressionValueWithObject:context:");
      pub fn expressionValueWithObjectcontext(self: *Self, __object: id, __context:  ?* NSMutableDictionary, ) id {{
           return @as(*const fn(*Self, SEL, id,  ?* NSMutableDictionary, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_expressionValueWithObject_context_.get(), __object, __context, );
 }}
var sel_allowEvaluation = CachedSelector.init("allowEvaluation");
      pub fn allowEvaluation(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowEvaluation.get(), );
 }}
var sel_expressionType = CachedSelector.init("expressionType");
      pub fn expressionType(self: *Self, ) NSExpressionType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSExpressionType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_expressionType.get(), );
 }}
var sel_constantValue = CachedSelector.init("constantValue");
      pub fn constantValue(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_constantValue.get(), );
 }}
var sel_keyPath = CachedSelector.init("keyPath");
      pub fn keyPath(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keyPath.get(), );
 }}
var sel_function = CachedSelector.init("function");
      pub fn function(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_function.get(), );
 }}
var sel_variable = CachedSelector.init("variable");
      pub fn variable(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_variable.get(), );
 }}
var sel_operand = CachedSelector.init("operand");
      pub fn operand(self: *Self, )  * NSExpression {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_operand.get(), );
 }}
var sel_arguments = CachedSelector.init("arguments");
      pub fn arguments(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arguments.get(), );
 }}
var sel_collection = CachedSelector.init("collection");
      pub fn collection(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_collection.get(), );
 }}
var sel_predicate = CachedSelector.init("predicate");
      pub fn predicate(self: *Self, )  * NSPredicate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSPredicate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_predicate.get(), );
 }}
var sel_leftExpression = CachedSelector.init("leftExpression");
      pub fn leftExpression(self: *Self, )  * NSExpression {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_leftExpression.get(), );
 }}
var sel_rightExpression = CachedSelector.init("rightExpression");
      pub fn rightExpression(self: *Self, )  * NSExpression {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rightExpression.get(), );
 }}
var sel_trueExpression = CachedSelector.init("trueExpression");
      pub fn trueExpression(self: *Self, )  * NSExpression {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_trueExpression.get(), );
 }}
var sel_falseExpression = CachedSelector.init("falseExpression");
      pub fn falseExpression(self: *Self, )  * NSExpression {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_falseExpression.get(), );
 }}
var sel_expressionBlock = CachedSelector.init("expressionBlock");
      pub fn expressionBlock(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_expressionBlock.get(), );
 }}
  };
}

pub const NSExpression = opaque {
  const Self = @This();
  pub usingnamespace NSExpressionInterfaceMixin(Self, "NSExpression");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSExpression");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSExpression");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSExpression");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSExpression");
};

pub fn NSUnitConcentrationMassInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_millimolesPerLiterWithGramsPerMole_ = CachedSelector.init("millimolesPerLiterWithGramsPerMole:");
      pub fn millimolesPerLiterWithGramsPerMole(__gramsPerMole: f64, )  * NSUnitConcentrationMass {{
           return @as(*const fn(Class, SEL, f64, ) callconv(.C)  * NSUnitConcentrationMass, @ptrCast(&objc_msgSend))(class.get(), sel_millimolesPerLiterWithGramsPerMole_.get(), __gramsPerMole, );
 }}
var sel_gramsPerLiter = CachedSelector.init("gramsPerLiter");
      pub fn gramsPerLiter()  * NSUnitConcentrationMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitConcentrationMass, @ptrCast(&objc_msgSend))(class.get(), sel_gramsPerLiter.get(), );
 }}
var sel_milligramsPerDeciliter = CachedSelector.init("milligramsPerDeciliter");
      pub fn milligramsPerDeciliter()  * NSUnitConcentrationMass {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitConcentrationMass, @ptrCast(&objc_msgSend))(class.get(), sel_milligramsPerDeciliter.get(), );
 }}
  };
}

pub const NSUnitConcentrationMass = opaque {
  const Self = @This();
  pub usingnamespace NSUnitConcentrationMassInterfaceMixin(Self, "NSUnitConcentrationMass");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitConcentrationMass");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitConcentrationMass");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitConcentrationMass");
};

pub fn NSMetadataQueryResultGroupInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_resultAtIndex_ = CachedSelector.init("resultAtIndex:");
      pub fn resultAtIndex(self: *Self, __idx: c_ulong, ) id {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resultAtIndex_.get(), __idx, );
 }}
var sel_attribute = CachedSelector.init("attribute");
      pub fn attribute(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attribute.get(), );
 }}
var sel_value = CachedSelector.init("value");
      pub fn value(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_value.get(), );
 }}
var sel_subgroups = CachedSelector.init("subgroups");
      pub fn subgroups(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_subgroups.get(), );
 }}
var sel_resultCount = CachedSelector.init("resultCount");
      pub fn resultCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resultCount.get(), );
 }}
var sel_results = CachedSelector.init("results");
      pub fn results(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_results.get(), );
 }}
  };
}

pub const NSMetadataQueryResultGroup = opaque {
  const Self = @This();
  pub usingnamespace NSMetadataQueryResultGroupInterfaceMixin(Self, "NSMetadataQueryResultGroup");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMetadataQueryResultGroup");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMetadataQueryResultGroup");
};

pub fn MTLTileRenderPipelineColorAttachmentDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __attachmentIndex: c_ulong, )  * MTLTileRenderPipelineColorAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLTileRenderPipelineColorAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __attachmentIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attachment:  * MTLTileRenderPipelineColorAttachmentDescriptor, __attachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLTileRenderPipelineColorAttachmentDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attachment, __attachmentIndex, );
 }}
  };
}

pub const MTLTileRenderPipelineColorAttachmentDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLTileRenderPipelineColorAttachmentDescriptorArrayInterfaceMixin(Self, "MTLTileRenderPipelineColorAttachmentDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLTileRenderPipelineColorAttachmentDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLTileRenderPipelineColorAttachmentDescriptorArray");
};

pub fn NSDistributedNotificationCenterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_notificationCenterForType_ = CachedSelector.init("notificationCenterForType:");
      pub fn notificationCenterForType(__notificationCenterType:  * NSString, )  * NSDistributedNotificationCenter {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSDistributedNotificationCenter, @ptrCast(&objc_msgSend))(class.get(), sel_notificationCenterForType_.get(), __notificationCenterType, );
 }}
var sel_defaultCenter = CachedSelector.init("defaultCenter");
      pub fn defaultCenter()  * NSDistributedNotificationCenter {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDistributedNotificationCenter, @ptrCast(&objc_msgSend))(class.get(), sel_defaultCenter.get(), );
 }}
var sel_addObserver_selector_name_object_suspensionBehavior_ = CachedSelector.init("addObserver:selector:name:object:suspensionBehavior:");
      pub fn addObserverselectornameobjectsuspensionBehavior(self: *Self, __observer: id, __selector: SEL, __name:  ?* NSString, __object:  ?* NSString, __suspensionBehavior: NSNotificationSuspensionBehavior, ) void {{
           return @as(*const fn(*Self, SEL, id, SEL,  ?* NSString,  ?* NSString, NSNotificationSuspensionBehavior, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObserver_selector_name_object_suspensionBehavior_.get(), __observer, __selector, __name, __object, __suspensionBehavior, );
 }}
var sel_postNotificationName_object_userInfo_deliverImmediately_ = CachedSelector.init("postNotificationName:object:userInfo:deliverImmediately:");
      pub fn postNotificationNameobjectuserInfodeliverImmediately(self: *Self, __name:  * NSString, __object:  ?* NSString, __userInfo:  ?* NSDictionary, __deliverImmediately: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString,  ?* NSDictionary, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_postNotificationName_object_userInfo_deliverImmediately_.get(), __name, __object, __userInfo, __deliverImmediately, );
 }}
var sel_postNotificationName_object_userInfo_options_ = CachedSelector.init("postNotificationName:object:userInfo:options:");
      pub fn postNotificationNameobjectuserInfooptions(self: *Self, __name:  * NSString, __object:  ?* NSString, __userInfo:  ?* NSDictionary, __options: NSDistributedNotificationOptions, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString,  ?* NSDictionary, NSDistributedNotificationOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_postNotificationName_object_userInfo_options_.get(), __name, __object, __userInfo, __options, );
 }}
var sel_addObserver_selector_name_object_ = CachedSelector.init("addObserver:selector:name:object:");
      pub fn addObserverselectornameobject(self: *Self, __observer: id, __aSelector: SEL, __aName:  ?* NSString, __anObject:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL, id, SEL,  ?* NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObserver_selector_name_object_.get(), __observer, __aSelector, __aName, __anObject, );
 }}
var sel_postNotificationName_object_ = CachedSelector.init("postNotificationName:object:");
      pub fn postNotificationNameobject(self: *Self, __aName:  * NSString, __anObject:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_postNotificationName_object_.get(), __aName, __anObject, );
 }}
var sel_postNotificationName_object_userInfo_ = CachedSelector.init("postNotificationName:object:userInfo:");
      pub fn postNotificationNameobjectuserInfo(self: *Self, __aName:  * NSString, __anObject:  ?* NSString, __aUserInfo:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_postNotificationName_object_userInfo_.get(), __aName, __anObject, __aUserInfo, );
 }}
var sel_removeObserver_name_object_ = CachedSelector.init("removeObserver:name:object:");
      pub fn removeObservernameobject(self: *Self, __observer: id, __aName:  ?* NSString, __anObject:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  ?* NSString,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_name_object_.get(), __observer, __aName, __anObject, );
 }}
var sel_suspended = CachedSelector.init("suspended");
      pub fn suspended(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suspended.get(), );
 }}
var sel_setSuspended_ = CachedSelector.init("setSuspended:");
      pub fn setSuspended(self: *Self, __suspended: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSuspended_.get(), __suspended, );
 }}
  };
}

pub const NSDistributedNotificationCenter = opaque {
  const Self = @This();
  pub usingnamespace NSDistributedNotificationCenterInterfaceMixin(Self, "NSDistributedNotificationCenter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDistributedNotificationCenter");
  pub usingnamespace NSNotificationCenterInterfaceMixin(Self, "NSDistributedNotificationCenter");
};

pub fn NSURLDownloadInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_canResumeDownloadDecodedWithEncodingMIMEType_ = CachedSelector.init("canResumeDownloadDecodedWithEncodingMIMEType:");
      pub fn canResumeDownloadDecodedWithEncodingMIMEType(__MIMEType:  * NSString, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_canResumeDownloadDecodedWithEncodingMIMEType_.get(), __MIMEType, );
 }}
var sel_initWithRequest_delegate_ = CachedSelector.init("initWithRequest:delegate:");
      pub fn initWithRequestdelegate(self: *Self, __request:  * NSURLRequest, __delegate:  ?* NSURLDownloadDelegate, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest,  ?* NSURLDownloadDelegate, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithRequest_delegate_.get(), __request, __delegate, );
 }}
var sel_initWithResumeData_delegate_path_ = CachedSelector.init("initWithResumeData:delegate:path:");
      pub fn initWithResumeDatadelegatepath(self: *Self, __resumeData:  * NSData, __delegate:  ?* NSURLDownloadDelegate, __path:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData,  ?* NSURLDownloadDelegate,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithResumeData_delegate_path_.get(), __resumeData, __delegate, __path, );
 }}
var sel_cancel = CachedSelector.init("cancel");
      pub fn cancel(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancel.get(), );
 }}
var sel_setDestination_allowOverwrite_ = CachedSelector.init("setDestination:allowOverwrite:");
      pub fn setDestinationallowOverwrite(self: *Self, __path:  * NSString, __allowOverwrite: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDestination_allowOverwrite_.get(), __path, __allowOverwrite, );
 }}
var sel_request = CachedSelector.init("request");
      pub fn request(self: *Self, )  * NSURLRequest {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURLRequest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_request.get(), );
 }}
var sel_resumeData = CachedSelector.init("resumeData");
      pub fn resumeData(self: *Self, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resumeData.get(), );
 }}
var sel_deletesFileUponFailure = CachedSelector.init("deletesFileUponFailure");
      pub fn deletesFileUponFailure(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_deletesFileUponFailure.get(), );
 }}
var sel_setDeletesFileUponFailure_ = CachedSelector.init("setDeletesFileUponFailure:");
      pub fn setDeletesFileUponFailure(self: *Self, __deletesFileUponFailure: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDeletesFileUponFailure_.get(), __deletesFileUponFailure, );
 }}
  };
}

pub const NSURLDownload = opaque {
  const Self = @This();
  pub usingnamespace NSURLDownloadInterfaceMixin(Self, "NSURLDownload");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLDownload");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLDownload");
};

pub fn MTLAccelerationStructureBoundingBoxGeometryDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_descriptor.get(), );
 }}
var sel_boundingBoxBuffer = CachedSelector.init("boundingBoxBuffer");
      pub fn boundingBoxBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boundingBoxBuffer.get(), );
 }}
var sel_setBoundingBoxBuffer_ = CachedSelector.init("setBoundingBoxBuffer:");
      pub fn setBoundingBoxBuffer(self: *Self, __boundingBoxBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBoundingBoxBuffer_.get(), __boundingBoxBuffer, );
 }}
var sel_boundingBoxBufferOffset = CachedSelector.init("boundingBoxBufferOffset");
      pub fn boundingBoxBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boundingBoxBufferOffset.get(), );
 }}
var sel_setBoundingBoxBufferOffset_ = CachedSelector.init("setBoundingBoxBufferOffset:");
      pub fn setBoundingBoxBufferOffset(self: *Self, __boundingBoxBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBoundingBoxBufferOffset_.get(), __boundingBoxBufferOffset, );
 }}
var sel_boundingBoxStride = CachedSelector.init("boundingBoxStride");
      pub fn boundingBoxStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boundingBoxStride.get(), );
 }}
var sel_setBoundingBoxStride_ = CachedSelector.init("setBoundingBoxStride:");
      pub fn setBoundingBoxStride(self: *Self, __boundingBoxStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBoundingBoxStride_.get(), __boundingBoxStride, );
 }}
var sel_boundingBoxCount = CachedSelector.init("boundingBoxCount");
      pub fn boundingBoxCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boundingBoxCount.get(), );
 }}
var sel_setBoundingBoxCount_ = CachedSelector.init("setBoundingBoxCount:");
      pub fn setBoundingBoxCount(self: *Self, __boundingBoxCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBoundingBoxCount_.get(), __boundingBoxCount, );
 }}
  };
}

pub const MTLAccelerationStructureBoundingBoxGeometryDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureBoundingBoxGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureBoundingBoxGeometryDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructureBoundingBoxGeometryDescriptor");
  pub usingnamespace MTLAccelerationStructureGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureBoundingBoxGeometryDescriptor");
};

pub fn MTLRenderPipelineDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_reset = CachedSelector.init("reset");
      pub fn reset(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reset.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_vertexFunction = CachedSelector.init("vertexFunction");
      pub fn vertexFunction(self: *Self, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexFunction.get(), );
 }}
var sel_setVertexFunction_ = CachedSelector.init("setVertexFunction:");
      pub fn setVertexFunction(self: *Self, __vertexFunction:  ?* MTLFunction, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexFunction_.get(), __vertexFunction, );
 }}
var sel_fragmentFunction = CachedSelector.init("fragmentFunction");
      pub fn fragmentFunction(self: *Self, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentFunction.get(), );
 }}
var sel_setFragmentFunction_ = CachedSelector.init("setFragmentFunction:");
      pub fn setFragmentFunction(self: *Self, __fragmentFunction:  ?* MTLFunction, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentFunction_.get(), __fragmentFunction, );
 }}
var sel_vertexDescriptor = CachedSelector.init("vertexDescriptor");
      pub fn vertexDescriptor(self: *Self, )  ?* MTLVertexDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLVertexDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexDescriptor.get(), );
 }}
var sel_setVertexDescriptor_ = CachedSelector.init("setVertexDescriptor:");
      pub fn setVertexDescriptor(self: *Self, __vertexDescriptor:  ?* MTLVertexDescriptor, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLVertexDescriptor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexDescriptor_.get(), __vertexDescriptor, );
 }}
var sel_sampleCount = CachedSelector.init("sampleCount");
      pub fn sampleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleCount.get(), );
 }}
var sel_setSampleCount_ = CachedSelector.init("setSampleCount:");
      pub fn setSampleCount(self: *Self, __sampleCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSampleCount_.get(), __sampleCount, );
 }}
var sel_rasterSampleCount = CachedSelector.init("rasterSampleCount");
      pub fn rasterSampleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rasterSampleCount.get(), );
 }}
var sel_setRasterSampleCount_ = CachedSelector.init("setRasterSampleCount:");
      pub fn setRasterSampleCount(self: *Self, __rasterSampleCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRasterSampleCount_.get(), __rasterSampleCount, );
 }}
var sel_isAlphaToCoverageEnabled = CachedSelector.init("isAlphaToCoverageEnabled");
      pub fn isAlphaToCoverageEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAlphaToCoverageEnabled.get(), );
 }}
var sel_setAlphaToCoverageEnabled_ = CachedSelector.init("setAlphaToCoverageEnabled:");
      pub fn setAlphaToCoverageEnabled(self: *Self, __alphaToCoverageEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAlphaToCoverageEnabled_.get(), __alphaToCoverageEnabled, );
 }}
var sel_isAlphaToOneEnabled = CachedSelector.init("isAlphaToOneEnabled");
      pub fn isAlphaToOneEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAlphaToOneEnabled.get(), );
 }}
var sel_setAlphaToOneEnabled_ = CachedSelector.init("setAlphaToOneEnabled:");
      pub fn setAlphaToOneEnabled(self: *Self, __alphaToOneEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAlphaToOneEnabled_.get(), __alphaToOneEnabled, );
 }}
var sel_isRasterizationEnabled = CachedSelector.init("isRasterizationEnabled");
      pub fn isRasterizationEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isRasterizationEnabled.get(), );
 }}
var sel_setRasterizationEnabled_ = CachedSelector.init("setRasterizationEnabled:");
      pub fn setRasterizationEnabled(self: *Self, __rasterizationEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRasterizationEnabled_.get(), __rasterizationEnabled, );
 }}
var sel_maxVertexAmplificationCount = CachedSelector.init("maxVertexAmplificationCount");
      pub fn maxVertexAmplificationCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxVertexAmplificationCount.get(), );
 }}
var sel_setMaxVertexAmplificationCount_ = CachedSelector.init("setMaxVertexAmplificationCount:");
      pub fn setMaxVertexAmplificationCount(self: *Self, __maxVertexAmplificationCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxVertexAmplificationCount_.get(), __maxVertexAmplificationCount, );
 }}
var sel_colorAttachments = CachedSelector.init("colorAttachments");
      pub fn colorAttachments(self: *Self, )  * MTLRenderPipelineColorAttachmentDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLRenderPipelineColorAttachmentDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_colorAttachments.get(), );
 }}
var sel_depthAttachmentPixelFormat = CachedSelector.init("depthAttachmentPixelFormat");
      pub fn depthAttachmentPixelFormat(self: *Self, ) MTLPixelFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPixelFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depthAttachmentPixelFormat.get(), );
 }}
var sel_setDepthAttachmentPixelFormat_ = CachedSelector.init("setDepthAttachmentPixelFormat:");
      pub fn setDepthAttachmentPixelFormat(self: *Self, __depthAttachmentPixelFormat: MTLPixelFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthAttachmentPixelFormat_.get(), __depthAttachmentPixelFormat, );
 }}
var sel_stencilAttachmentPixelFormat = CachedSelector.init("stencilAttachmentPixelFormat");
      pub fn stencilAttachmentPixelFormat(self: *Self, ) MTLPixelFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPixelFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stencilAttachmentPixelFormat.get(), );
 }}
var sel_setStencilAttachmentPixelFormat_ = CachedSelector.init("setStencilAttachmentPixelFormat:");
      pub fn setStencilAttachmentPixelFormat(self: *Self, __stencilAttachmentPixelFormat: MTLPixelFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilAttachmentPixelFormat_.get(), __stencilAttachmentPixelFormat, );
 }}
var sel_inputPrimitiveTopology = CachedSelector.init("inputPrimitiveTopology");
      pub fn inputPrimitiveTopology(self: *Self, ) MTLPrimitiveTopologyClass {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPrimitiveTopologyClass, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_inputPrimitiveTopology.get(), );
 }}
var sel_setInputPrimitiveTopology_ = CachedSelector.init("setInputPrimitiveTopology:");
      pub fn setInputPrimitiveTopology(self: *Self, __inputPrimitiveTopology: MTLPrimitiveTopologyClass, ) void {{
           return @as(*const fn(*Self, SEL, MTLPrimitiveTopologyClass, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInputPrimitiveTopology_.get(), __inputPrimitiveTopology, );
 }}
var sel_tessellationPartitionMode = CachedSelector.init("tessellationPartitionMode");
      pub fn tessellationPartitionMode(self: *Self, ) MTLTessellationPartitionMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTessellationPartitionMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tessellationPartitionMode.get(), );
 }}
var sel_setTessellationPartitionMode_ = CachedSelector.init("setTessellationPartitionMode:");
      pub fn setTessellationPartitionMode(self: *Self, __tessellationPartitionMode: MTLTessellationPartitionMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLTessellationPartitionMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTessellationPartitionMode_.get(), __tessellationPartitionMode, );
 }}
var sel_maxTessellationFactor = CachedSelector.init("maxTessellationFactor");
      pub fn maxTessellationFactor(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTessellationFactor.get(), );
 }}
var sel_setMaxTessellationFactor_ = CachedSelector.init("setMaxTessellationFactor:");
      pub fn setMaxTessellationFactor(self: *Self, __maxTessellationFactor: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxTessellationFactor_.get(), __maxTessellationFactor, );
 }}
var sel_isTessellationFactorScaleEnabled = CachedSelector.init("isTessellationFactorScaleEnabled");
      pub fn isTessellationFactorScaleEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isTessellationFactorScaleEnabled.get(), );
 }}
var sel_setTessellationFactorScaleEnabled_ = CachedSelector.init("setTessellationFactorScaleEnabled:");
      pub fn setTessellationFactorScaleEnabled(self: *Self, __tessellationFactorScaleEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTessellationFactorScaleEnabled_.get(), __tessellationFactorScaleEnabled, );
 }}
var sel_tessellationFactorFormat = CachedSelector.init("tessellationFactorFormat");
      pub fn tessellationFactorFormat(self: *Self, ) MTLTessellationFactorFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTessellationFactorFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tessellationFactorFormat.get(), );
 }}
var sel_setTessellationFactorFormat_ = CachedSelector.init("setTessellationFactorFormat:");
      pub fn setTessellationFactorFormat(self: *Self, __tessellationFactorFormat: MTLTessellationFactorFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLTessellationFactorFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTessellationFactorFormat_.get(), __tessellationFactorFormat, );
 }}
var sel_tessellationControlPointIndexType = CachedSelector.init("tessellationControlPointIndexType");
      pub fn tessellationControlPointIndexType(self: *Self, ) MTLTessellationControlPointIndexType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTessellationControlPointIndexType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tessellationControlPointIndexType.get(), );
 }}
var sel_setTessellationControlPointIndexType_ = CachedSelector.init("setTessellationControlPointIndexType:");
      pub fn setTessellationControlPointIndexType(self: *Self, __tessellationControlPointIndexType: MTLTessellationControlPointIndexType, ) void {{
           return @as(*const fn(*Self, SEL, MTLTessellationControlPointIndexType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTessellationControlPointIndexType_.get(), __tessellationControlPointIndexType, );
 }}
var sel_tessellationFactorStepFunction = CachedSelector.init("tessellationFactorStepFunction");
      pub fn tessellationFactorStepFunction(self: *Self, ) MTLTessellationFactorStepFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTessellationFactorStepFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tessellationFactorStepFunction.get(), );
 }}
var sel_setTessellationFactorStepFunction_ = CachedSelector.init("setTessellationFactorStepFunction:");
      pub fn setTessellationFactorStepFunction(self: *Self, __tessellationFactorStepFunction: MTLTessellationFactorStepFunction, ) void {{
           return @as(*const fn(*Self, SEL, MTLTessellationFactorStepFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTessellationFactorStepFunction_.get(), __tessellationFactorStepFunction, );
 }}
var sel_tessellationOutputWindingOrder = CachedSelector.init("tessellationOutputWindingOrder");
      pub fn tessellationOutputWindingOrder(self: *Self, ) MTLWinding {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLWinding, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tessellationOutputWindingOrder.get(), );
 }}
var sel_setTessellationOutputWindingOrder_ = CachedSelector.init("setTessellationOutputWindingOrder:");
      pub fn setTessellationOutputWindingOrder(self: *Self, __tessellationOutputWindingOrder: MTLWinding, ) void {{
           return @as(*const fn(*Self, SEL, MTLWinding, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTessellationOutputWindingOrder_.get(), __tessellationOutputWindingOrder, );
 }}
var sel_vertexBuffers = CachedSelector.init("vertexBuffers");
      pub fn vertexBuffers(self: *Self, )  * MTLPipelineBufferDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLPipelineBufferDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexBuffers.get(), );
 }}
var sel_fragmentBuffers = CachedSelector.init("fragmentBuffers");
      pub fn fragmentBuffers(self: *Self, )  * MTLPipelineBufferDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLPipelineBufferDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentBuffers.get(), );
 }}
var sel_supportIndirectCommandBuffers = CachedSelector.init("supportIndirectCommandBuffers");
      pub fn supportIndirectCommandBuffers(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportIndirectCommandBuffers.get(), );
 }}
var sel_setSupportIndirectCommandBuffers_ = CachedSelector.init("setSupportIndirectCommandBuffers:");
      pub fn setSupportIndirectCommandBuffers(self: *Self, __supportIndirectCommandBuffers: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportIndirectCommandBuffers_.get(), __supportIndirectCommandBuffers, );
 }}
var sel_binaryArchives = CachedSelector.init("binaryArchives");
      pub fn binaryArchives(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_binaryArchives.get(), );
 }}
var sel_setBinaryArchives_ = CachedSelector.init("setBinaryArchives:");
      pub fn setBinaryArchives(self: *Self, __binaryArchives:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBinaryArchives_.get(), __binaryArchives, );
 }}
var sel_vertexPreloadedLibraries = CachedSelector.init("vertexPreloadedLibraries");
      pub fn vertexPreloadedLibraries(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexPreloadedLibraries.get(), );
 }}
var sel_setVertexPreloadedLibraries_ = CachedSelector.init("setVertexPreloadedLibraries:");
      pub fn setVertexPreloadedLibraries(self: *Self, __vertexPreloadedLibraries:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexPreloadedLibraries_.get(), __vertexPreloadedLibraries, );
 }}
var sel_fragmentPreloadedLibraries = CachedSelector.init("fragmentPreloadedLibraries");
      pub fn fragmentPreloadedLibraries(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentPreloadedLibraries.get(), );
 }}
var sel_setFragmentPreloadedLibraries_ = CachedSelector.init("setFragmentPreloadedLibraries:");
      pub fn setFragmentPreloadedLibraries(self: *Self, __fragmentPreloadedLibraries:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentPreloadedLibraries_.get(), __fragmentPreloadedLibraries, );
 }}
var sel_vertexLinkedFunctions = CachedSelector.init("vertexLinkedFunctions");
      pub fn vertexLinkedFunctions(self: *Self, )  * MTLLinkedFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLLinkedFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexLinkedFunctions.get(), );
 }}
var sel_setVertexLinkedFunctions_ = CachedSelector.init("setVertexLinkedFunctions:");
      pub fn setVertexLinkedFunctions(self: *Self, __vertexLinkedFunctions:  ?* MTLLinkedFunctions, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLLinkedFunctions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexLinkedFunctions_.get(), __vertexLinkedFunctions, );
 }}
var sel_fragmentLinkedFunctions = CachedSelector.init("fragmentLinkedFunctions");
      pub fn fragmentLinkedFunctions(self: *Self, )  * MTLLinkedFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLLinkedFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentLinkedFunctions.get(), );
 }}
var sel_setFragmentLinkedFunctions_ = CachedSelector.init("setFragmentLinkedFunctions:");
      pub fn setFragmentLinkedFunctions(self: *Self, __fragmentLinkedFunctions:  ?* MTLLinkedFunctions, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLLinkedFunctions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentLinkedFunctions_.get(), __fragmentLinkedFunctions, );
 }}
var sel_supportAddingVertexBinaryFunctions = CachedSelector.init("supportAddingVertexBinaryFunctions");
      pub fn supportAddingVertexBinaryFunctions(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportAddingVertexBinaryFunctions.get(), );
 }}
var sel_setSupportAddingVertexBinaryFunctions_ = CachedSelector.init("setSupportAddingVertexBinaryFunctions:");
      pub fn setSupportAddingVertexBinaryFunctions(self: *Self, __supportAddingVertexBinaryFunctions: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportAddingVertexBinaryFunctions_.get(), __supportAddingVertexBinaryFunctions, );
 }}
var sel_supportAddingFragmentBinaryFunctions = CachedSelector.init("supportAddingFragmentBinaryFunctions");
      pub fn supportAddingFragmentBinaryFunctions(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportAddingFragmentBinaryFunctions.get(), );
 }}
var sel_setSupportAddingFragmentBinaryFunctions_ = CachedSelector.init("setSupportAddingFragmentBinaryFunctions:");
      pub fn setSupportAddingFragmentBinaryFunctions(self: *Self, __supportAddingFragmentBinaryFunctions: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportAddingFragmentBinaryFunctions_.get(), __supportAddingFragmentBinaryFunctions, );
 }}
var sel_maxVertexCallStackDepth = CachedSelector.init("maxVertexCallStackDepth");
      pub fn maxVertexCallStackDepth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxVertexCallStackDepth.get(), );
 }}
var sel_setMaxVertexCallStackDepth_ = CachedSelector.init("setMaxVertexCallStackDepth:");
      pub fn setMaxVertexCallStackDepth(self: *Self, __maxVertexCallStackDepth: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxVertexCallStackDepth_.get(), __maxVertexCallStackDepth, );
 }}
var sel_maxFragmentCallStackDepth = CachedSelector.init("maxFragmentCallStackDepth");
      pub fn maxFragmentCallStackDepth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxFragmentCallStackDepth.get(), );
 }}
var sel_setMaxFragmentCallStackDepth_ = CachedSelector.init("setMaxFragmentCallStackDepth:");
      pub fn setMaxFragmentCallStackDepth(self: *Self, __maxFragmentCallStackDepth: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxFragmentCallStackDepth_.get(), __maxFragmentCallStackDepth, );
 }}
  };
}

pub const MTLRenderPipelineDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPipelineDescriptorInterfaceMixin(Self, "MTLRenderPipelineDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLRenderPipelineDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPipelineDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPipelineDescriptor");
};

pub fn NSPortCoderInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_isBycopy = CachedSelector.init("isBycopy");
      pub fn isBycopy(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isBycopy.get(), );
 }}
var sel_isByref = CachedSelector.init("isByref");
      pub fn isByref(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isByref.get(), );
 }}
var sel_encodePortObject_ = CachedSelector.init("encodePortObject:");
      pub fn encodePortObject(self: *Self, __aport:  * NSPort, ) void {{
           return @as(*const fn(*Self, SEL,  * NSPort, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodePortObject_.get(), __aport, );
 }}
var sel_decodePortObject = CachedSelector.init("decodePortObject");
      pub fn decodePortObject(self: *Self, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodePortObject.get(), );
 }}
var sel_connection = CachedSelector.init("connection");
      pub fn connection(self: *Self, )  ?* NSConnection {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSConnection, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection.get(), );
 }}
var sel_portCoderWithReceivePort_sendPort_components_ = CachedSelector.init("portCoderWithReceivePort:sendPort:components:");
      pub fn portCoderWithReceivePortsendPortcomponents(__rcvPort:  ?* NSPort, __sndPort:  ?* NSPort, __comps:  ?* NSArray, ) id {{
           return @as(*const fn(Class, SEL,  ?* NSPort,  ?* NSPort,  ?* NSArray, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_portCoderWithReceivePort_sendPort_components_.get(), __rcvPort, __sndPort, __comps, );
 }}
var sel_initWithReceivePort_sendPort_components_ = CachedSelector.init("initWithReceivePort:sendPort:components:");
      pub fn initWithReceivePortsendPortcomponents(self: *Self, __rcvPort:  ?* NSPort, __sndPort:  ?* NSPort, __comps:  ?* NSArray, ) id {{
           return @as(*const fn(*Self, SEL,  ?* NSPort,  ?* NSPort,  ?* NSArray, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithReceivePort_sendPort_components_.get(), __rcvPort, __sndPort, __comps, );
 }}
var sel_dispatch = CachedSelector.init("dispatch");
      pub fn dispatch(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatch.get(), );
 }}
  };
}

pub const NSPortCoder = opaque {
  const Self = @This();
  pub usingnamespace NSPortCoderInterfaceMixin(Self, "NSPortCoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPortCoder");
  pub usingnamespace NSCoderInterfaceMixin(Self, "NSPortCoder");
};

pub fn NSMassFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stringFromValue_unit_ = CachedSelector.init("stringFromValue:unit:");
      pub fn stringFromValueunit(self: *Self, __value: f64, __unit: NSMassFormatterUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, NSMassFormatterUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromValue_unit_.get(), __value, __unit, );
 }}
var sel_stringFromKilograms_ = CachedSelector.init("stringFromKilograms:");
      pub fn stringFromKilograms(self: *Self, __numberInKilograms: f64, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromKilograms_.get(), __numberInKilograms, );
 }}
var sel_unitStringFromValue_unit_ = CachedSelector.init("unitStringFromValue:unit:");
      pub fn unitStringFromValueunit(self: *Self, __value: f64, __unit: NSMassFormatterUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, NSMassFormatterUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStringFromValue_unit_.get(), __value, __unit, );
 }}
var sel_unitStringFromKilograms_usedUnit_ = CachedSelector.init("unitStringFromKilograms:usedUnit:");
      pub fn unitStringFromKilogramsusedUnit(self: *Self, __numberInKilograms: f64, __unitp:  [*c] NSMassFormatterUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64,  [*c] NSMassFormatterUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStringFromKilograms_usedUnit_.get(), __numberInKilograms, __unitp, );
 }}
var sel_getObjectValue_forString_errorDescription_ = CachedSelector.init("getObjectValue:forString:errorDescription:");
      pub fn getObjectValueforStringerrorDescription(self: *Self, __obj:  ?* id, __string:  * NSString, __an_error:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* id,  * NSString,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjectValue_forString_errorDescription_.get(), __obj, __string, __an_error, );
 }}
var sel_numberFormatter = CachedSelector.init("numberFormatter");
      pub fn numberFormatter(self: *Self, )  * NSNumberFormatter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSNumberFormatter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberFormatter.get(), );
 }}
var sel_setNumberFormatter_ = CachedSelector.init("setNumberFormatter:");
      pub fn setNumberFormatter(self: *Self, __numberFormatter:  ?* NSNumberFormatter, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNumberFormatter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNumberFormatter_.get(), __numberFormatter, );
 }}
var sel_unitStyle = CachedSelector.init("unitStyle");
      pub fn unitStyle(self: *Self, ) NSFormattingUnitStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSFormattingUnitStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStyle.get(), );
 }}
var sel_setUnitStyle_ = CachedSelector.init("setUnitStyle:");
      pub fn setUnitStyle(self: *Self, __unitStyle: NSFormattingUnitStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSFormattingUnitStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUnitStyle_.get(), __unitStyle, );
 }}
var sel_isForPersonMassUse = CachedSelector.init("isForPersonMassUse");
      pub fn isForPersonMassUse(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isForPersonMassUse.get(), );
 }}
var sel_setForPersonMassUse_ = CachedSelector.init("setForPersonMassUse:");
      pub fn setForPersonMassUse(self: *Self, __forPersonMassUse: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setForPersonMassUse_.get(), __forPersonMassUse, );
 }}
  };
}

pub const NSMassFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSMassFormatterInterfaceMixin(Self, "NSMassFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMassFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSMassFormatter");
};

pub fn NSDictionaryInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectForKey_ = CachedSelector.init("objectForKey:");
      pub fn objectForKey(self: *Self, __aKey: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectForKey_.get(), __aKey, );
 }}
var sel_keyEnumerator = CachedSelector.init("keyEnumerator");
      pub fn keyEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keyEnumerator.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithObjects_forKeys_count_ = CachedSelector.init("initWithObjects:forKeys:count:");
      pub fn initWithObjectsforKeyscount(self: *Self, __objects: [*c]id, __keys: [*c]id, __cnt: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, [*c]id, [*c]id, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjects_forKeys_count_.get(), __objects, __keys, __cnt, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_count = CachedSelector.init("count");
      pub fn count(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_count.get(), );
 }}
var sel_allKeysForObject_ = CachedSelector.init("allKeysForObject:");
      pub fn allKeysForObject(self: *Self, __anObject: id, )  * NSArray {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allKeysForObject_.get(), __anObject, );
 }}
var sel_descriptionWithLocale_ = CachedSelector.init("descriptionWithLocale:");
      pub fn descriptionWithLocale(self: *Self, __locale: id, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_.get(), __locale, );
 }}
var sel_descriptionWithLocale_indent_ = CachedSelector.init("descriptionWithLocale:indent:");
      pub fn descriptionWithLocaleindent(self: *Self, __locale: id, __level: c_ulong, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, c_ulong, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_indent_.get(), __locale, __level, );
 }}
var sel_isEqualToDictionary_ = CachedSelector.init("isEqualToDictionary:");
      pub fn isEqualToDictionary(self: *Self, __otherDictionary:  * NSDictionary, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToDictionary_.get(), __otherDictionary, );
 }}
var sel_objectEnumerator = CachedSelector.init("objectEnumerator");
      pub fn objectEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectEnumerator.get(), );
 }}
var sel_objectsForKeys_notFoundMarker_ = CachedSelector.init("objectsForKeys:notFoundMarker:");
      pub fn objectsForKeysnotFoundMarker(self: *Self, __keys:  * NSArray, __marker: id, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSArray, id, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectsForKeys_notFoundMarker_.get(), __keys, __marker, );
 }}
var sel_writeToURL_error_ = CachedSelector.init("writeToURL:error:");
      pub fn writeToURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToURL_error_.get(), __url, __an_error, );
 }}
var sel_keysSortedByValueUsingSelector_ = CachedSelector.init("keysSortedByValueUsingSelector:");
      pub fn keysSortedByValueUsingSelector(self: *Self, __comparator: SEL, )  * NSArray {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keysSortedByValueUsingSelector_.get(), __comparator, );
 }}
var sel_getObjects_andKeys_count_ = CachedSelector.init("getObjects:andKeys:count:");
      pub fn getObjectsandKeyscount(self: *Self, __objects: [*c]id, __keys: [*c]id, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c]id, [*c]id, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjects_andKeys_count_.get(), __objects, __keys, __count, );
 }}
var sel_objectForKeyedSubscript_ = CachedSelector.init("objectForKeyedSubscript:");
      pub fn objectForKeyedSubscript(self: *Self, __key: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectForKeyedSubscript_.get(), __key, );
 }}
var sel_enumerateKeysAndObjectsUsingBlock_ = CachedSelector.init("enumerateKeysAndObjectsUsingBlock:");
      pub fn enumerateKeysAndObjectsUsingBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateKeysAndObjectsUsingBlock_.get(), __block, );
 }}
var sel_enumerateKeysAndObjectsWithOptions_usingBlock_ = CachedSelector.init("enumerateKeysAndObjectsWithOptions:usingBlock:");
      pub fn enumerateKeysAndObjectsWithOptionsusingBlock(self: *Self, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateKeysAndObjectsWithOptions_usingBlock_.get(), __opts, __block, );
 }}
var sel_keysSortedByValueUsingComparator_ = CachedSelector.init("keysSortedByValueUsingComparator:");
      pub fn keysSortedByValueUsingComparator(self: *Self, __cmptr: ?*u8, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keysSortedByValueUsingComparator_.get(), __cmptr, );
 }}
var sel_keysSortedByValueWithOptions_usingComparator_ = CachedSelector.init("keysSortedByValueWithOptions:usingComparator:");
      pub fn keysSortedByValueWithOptionsusingComparator(self: *Self, __opts: NSSortOptions, __cmptr: ?*u8, )  * NSArray {{
           return @as(*const fn(*Self, SEL, NSSortOptions, ?*u8, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keysSortedByValueWithOptions_usingComparator_.get(), __opts, __cmptr, );
 }}
var sel_keysOfEntriesPassingTest_ = CachedSelector.init("keysOfEntriesPassingTest:");
      pub fn keysOfEntriesPassingTest(self: *Self, __predicate: ?*u8, )  * NSSet {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keysOfEntriesPassingTest_.get(), __predicate, );
 }}
var sel_keysOfEntriesWithOptions_passingTest_ = CachedSelector.init("keysOfEntriesWithOptions:passingTest:");
      pub fn keysOfEntriesWithOptionspassingTest(self: *Self, __opts: NSEnumerationOptions, __predicate: ?*u8, )  * NSSet {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keysOfEntriesWithOptions_passingTest_.get(), __opts, __predicate, );
 }}
var sel_allKeys = CachedSelector.init("allKeys");
      pub fn allKeys(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allKeys.get(), );
 }}
var sel_allValues = CachedSelector.init("allValues");
      pub fn allValues(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allValues.get(), );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_descriptionInStringsFileFormat = CachedSelector.init("descriptionInStringsFileFormat");
      pub fn descriptionInStringsFileFormat(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionInStringsFileFormat.get(), );
 }}
var sel_getObjects_andKeys_ = CachedSelector.init("getObjects:andKeys:");
      pub fn getObjectsandKeys(self: *Self, __objects: [*c]id, __keys: [*c]id, ) void {{
           return @as(*const fn(*Self, SEL, [*c]id, [*c]id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjects_andKeys_.get(), __objects, __keys, );
 }}
var sel_dictionaryWithContentsOfFile_ = CachedSelector.init("dictionaryWithContentsOfFile:");
      pub fn dictionaryWithContentsOfFile(__path:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithContentsOfFile_.get(), __path, );
 }}
var sel_dictionaryWithContentsOfURL_ = CachedSelector.init("dictionaryWithContentsOfURL:");
      pub fn dictionaryWithContentsOfURL(__url:  * NSURL, )  ?* NSDictionary {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithContentsOfURL_.get(), __url, );
 }}
var sel_initWithContentsOfFile_ = CachedSelector.init("initWithContentsOfFile:");
      pub fn initWithContentsOfFile(self: *Self, __path:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfFile_.get(), __path, );
 }}
var sel_initWithContentsOfURL_ = CachedSelector.init("initWithContentsOfURL:");
      pub fn initWithContentsOfURL(self: *Self, __url:  * NSURL, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_.get(), __url, );
 }}
var sel_writeToFile_atomically_ = CachedSelector.init("writeToFile:atomically:");
      pub fn writeToFileatomically(self: *Self, __path:  * NSString, __useAuxiliaryFile: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToFile_atomically_.get(), __path, __useAuxiliaryFile, );
 }}
var sel_writeToURL_atomically_ = CachedSelector.init("writeToURL:atomically:");
      pub fn writeToURLatomically(self: *Self, __url:  * NSURL, __atomically: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToURL_atomically_.get(), __url, __atomically, );
 }}
var sel_dictionary = CachedSelector.init("dictionary");
      pub fn dictionary() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dictionary.get(), );
 }}
var sel_dictionaryWithObject_forKey_ = CachedSelector.init("dictionaryWithObject:forKey:");
      pub fn dictionaryWithObjectforKey(__object: id, __key: id, ) *Self {{
           return @as(*const fn(Class, SEL, id, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithObject_forKey_.get(), __object, __key, );
 }}
var sel_dictionaryWithObjects_forKeys_count_ = CachedSelector.init("dictionaryWithObjects:forKeys:count:");
      pub fn dictionaryWithObjectsforKeyscount(__objects: [*c]id, __keys: [*c]id, __cnt: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, [*c]id, [*c]id, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithObjects_forKeys_count_.get(), __objects, __keys, __cnt, );
 }}
var sel_dictionaryWithObjectsAndKeys_ = CachedSelector.init("dictionaryWithObjectsAndKeys:");
      pub fn dictionaryWithObjectsAndKeys(__firstObject: id, ) *Self {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithObjectsAndKeys_.get(), __firstObject, );
 }}
var sel_dictionaryWithDictionary_ = CachedSelector.init("dictionaryWithDictionary:");
      pub fn dictionaryWithDictionary(__dict:  * NSDictionary, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithDictionary_.get(), __dict, );
 }}
var sel_dictionaryWithObjects_forKeys_ = CachedSelector.init("dictionaryWithObjects:forKeys:");
      pub fn dictionaryWithObjectsforKeys(__objects:  * NSArray, __keys:  * NSArray, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSArray,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithObjects_forKeys_.get(), __objects, __keys, );
 }}
var sel_initWithObjectsAndKeys_ = CachedSelector.init("initWithObjectsAndKeys:");
      pub fn initWithObjectsAndKeys(self: *Self, __firstObject: id, ) *Self {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjectsAndKeys_.get(), __firstObject, );
 }}
var sel_initWithDictionary_ = CachedSelector.init("initWithDictionary:");
      pub fn initWithDictionary(self: *Self, __otherDictionary:  * NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDictionary_.get(), __otherDictionary, );
 }}
var sel_initWithDictionary_copyItems_ = CachedSelector.init("initWithDictionary:copyItems:");
      pub fn initWithDictionarycopyItems(self: *Self, __otherDictionary:  * NSDictionary, __flag: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDictionary_copyItems_.get(), __otherDictionary, __flag, );
 }}
var sel_initWithObjects_forKeys_ = CachedSelector.init("initWithObjects:forKeys:");
      pub fn initWithObjectsforKeys(self: *Self, __objects:  * NSArray, __keys:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjects_forKeys_.get(), __objects, __keys, );
 }}
var sel_initWithContentsOfURL_error_ = CachedSelector.init("initWithContentsOfURL:error:");
      pub fn initWithContentsOfURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_error_.get(), __url, __an_error, );
 }}
var sel_dictionaryWithContentsOfURL_error_ = CachedSelector.init("dictionaryWithContentsOfURL:error:");
      pub fn dictionaryWithContentsOfURLerror(__url:  * NSURL, __an_error:  [*c]  ?* NSError, )  ?* NSDictionary {{
           return @as(*const fn(Class, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryWithContentsOfURL_error_.get(), __url, __an_error, );
 }}
var sel_sharedKeySetForKeys_ = CachedSelector.init("sharedKeySetForKeys:");
      pub fn sharedKeySetForKeys(__keys:  * NSArray, ) id {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_sharedKeySetForKeys_.get(), __keys, );
 }}
var sel_countByEnumeratingWithState_objects_count_ = CachedSelector.init("countByEnumeratingWithState:objects:count:");
      pub fn countByEnumeratingWithStateobjectscount(self: *Self, __state:  [*c] NSFastEnumerationState, __buffer: [*c]id, __len: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  [*c] NSFastEnumerationState, [*c]id, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countByEnumeratingWithState_objects_count_.get(), __state, __buffer, __len, );
 }}
var sel_fileSize = CachedSelector.init("fileSize");
      pub fn fileSize(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileSize.get(), );
 }}
var sel_fileModificationDate = CachedSelector.init("fileModificationDate");
      pub fn fileModificationDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileModificationDate.get(), );
 }}
var sel_fileType = CachedSelector.init("fileType");
      pub fn fileType(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileType.get(), );
 }}
var sel_filePosixPermissions = CachedSelector.init("filePosixPermissions");
      pub fn filePosixPermissions(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_filePosixPermissions.get(), );
 }}
var sel_fileOwnerAccountName = CachedSelector.init("fileOwnerAccountName");
      pub fn fileOwnerAccountName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileOwnerAccountName.get(), );
 }}
var sel_fileGroupOwnerAccountName = CachedSelector.init("fileGroupOwnerAccountName");
      pub fn fileGroupOwnerAccountName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileGroupOwnerAccountName.get(), );
 }}
var sel_fileSystemNumber = CachedSelector.init("fileSystemNumber");
      pub fn fileSystemNumber(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileSystemNumber.get(), );
 }}
var sel_fileSystemFileNumber = CachedSelector.init("fileSystemFileNumber");
      pub fn fileSystemFileNumber(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileSystemFileNumber.get(), );
 }}
var sel_fileExtensionHidden = CachedSelector.init("fileExtensionHidden");
      pub fn fileExtensionHidden(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileExtensionHidden.get(), );
 }}
var sel_fileHFSCreatorCode = CachedSelector.init("fileHFSCreatorCode");
      pub fn fileHFSCreatorCode(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileHFSCreatorCode.get(), );
 }}
var sel_fileHFSTypeCode = CachedSelector.init("fileHFSTypeCode");
      pub fn fileHFSTypeCode(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileHFSTypeCode.get(), );
 }}
var sel_fileIsImmutable = CachedSelector.init("fileIsImmutable");
      pub fn fileIsImmutable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileIsImmutable.get(), );
 }}
var sel_fileIsAppendOnly = CachedSelector.init("fileIsAppendOnly");
      pub fn fileIsAppendOnly(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileIsAppendOnly.get(), );
 }}
var sel_fileCreationDate = CachedSelector.init("fileCreationDate");
      pub fn fileCreationDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileCreationDate.get(), );
 }}
var sel_fileOwnerAccountID = CachedSelector.init("fileOwnerAccountID");
      pub fn fileOwnerAccountID(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileOwnerAccountID.get(), );
 }}
var sel_fileGroupOwnerAccountID = CachedSelector.init("fileGroupOwnerAccountID");
      pub fn fileGroupOwnerAccountID(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileGroupOwnerAccountID.get(), );
 }}
var sel_valueForKey_ = CachedSelector.init("valueForKey:");
      pub fn valueForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForKey_.get(), __key, );
 }}
  };
}

pub const NSDictionary = opaque {
  const Self = @This();
  pub usingnamespace NSDictionaryInterfaceMixin(Self, "NSDictionary");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSDictionary");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSDictionary");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSDictionary");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSDictionary");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDictionary");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSDictionary");
};

pub fn NSAutoreleasePoolInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addObject_ = CachedSelector.init("addObject:");
      pub fn addObject(__anObject: id, ) void {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_addObject_.get(), __anObject, );
 }}
var sel_drain = CachedSelector.init("drain");
      pub fn drain(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_drain.get(), );
 }}
  };
}

pub const NSAutoreleasePool = opaque {
  const Self = @This();
  pub usingnamespace NSAutoreleasePoolInterfaceMixin(Self, "NSAutoreleasePool");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSAutoreleasePool");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSAutoreleasePool");
};

pub fn NSNetServiceInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithDomain_type_name_port_ = CachedSelector.init("initWithDomain:type:name:port:");
      pub fn initWithDomaintypenameport(self: *Self, __domain:  * NSString, __a_type:  * NSString, __name:  * NSString, __port: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  * NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDomain_type_name_port_.get(), __domain, __a_type, __name, __port, );
 }}
var sel_initWithDomain_type_name_ = CachedSelector.init("initWithDomain:type:name:");
      pub fn initWithDomaintypename(self: *Self, __domain:  * NSString, __a_type:  * NSString, __name:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDomain_type_name_.get(), __domain, __a_type, __name, );
 }}
var sel_scheduleInRunLoop_forMode_ = CachedSelector.init("scheduleInRunLoop:forMode:");
      pub fn scheduleInRunLoopforMode(self: *Self, __aRunLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduleInRunLoop_forMode_.get(), __aRunLoop, __mode, );
 }}
var sel_removeFromRunLoop_forMode_ = CachedSelector.init("removeFromRunLoop:forMode:");
      pub fn removeFromRunLoopforMode(self: *Self, __aRunLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeFromRunLoop_forMode_.get(), __aRunLoop, __mode, );
 }}
var sel_publish = CachedSelector.init("publish");
      pub fn publish(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_publish.get(), );
 }}
var sel_publishWithOptions_ = CachedSelector.init("publishWithOptions:");
      pub fn publishWithOptions(self: *Self, __options: NSNetServiceOptions, ) void {{
           return @as(*const fn(*Self, SEL, NSNetServiceOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_publishWithOptions_.get(), __options, );
 }}
var sel_resolve = CachedSelector.init("resolve");
      pub fn resolve(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolve.get(), );
 }}
var sel_stop = CachedSelector.init("stop");
      pub fn stop(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stop.get(), );
 }}
var sel_dictionaryFromTXTRecordData_ = CachedSelector.init("dictionaryFromTXTRecordData:");
      pub fn dictionaryFromTXTRecordData(__txtData:  * NSData, )  * NSDictionary {{
           return @as(*const fn(Class, SEL,  * NSData, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_dictionaryFromTXTRecordData_.get(), __txtData, );
 }}
var sel_dataFromTXTRecordDictionary_ = CachedSelector.init("dataFromTXTRecordDictionary:");
      pub fn dataFromTXTRecordDictionary(__txtDictionary:  * NSDictionary, )  * NSData {{
           return @as(*const fn(Class, SEL,  * NSDictionary, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(class.get(), sel_dataFromTXTRecordDictionary_.get(), __txtDictionary, );
 }}
var sel_resolveWithTimeout_ = CachedSelector.init("resolveWithTimeout:");
      pub fn resolveWithTimeout(self: *Self, __timeout: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolveWithTimeout_.get(), __timeout, );
 }}
var sel_getInputStream_outputStream_ = CachedSelector.init("getInputStream:outputStream:");
      pub fn getInputStreamoutputStream(self: *Self, __inputStream:  [*c]  ?* NSInputStream, __outputStream:  [*c]  ?* NSOutputStream, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSInputStream,  [*c]  ?* NSOutputStream, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getInputStream_outputStream_.get(), __inputStream, __outputStream, );
 }}
var sel_setTXTRecordData_ = CachedSelector.init("setTXTRecordData:");
      pub fn setTXTRecordData(self: *Self, __recordData:  ?* NSData, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* NSData, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTXTRecordData_.get(), __recordData, );
 }}
var sel_TXTRecordData = CachedSelector.init("TXTRecordData");
      pub fn TXTRecordData(self: *Self, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_TXTRecordData.get(), );
 }}
var sel_startMonitoring = CachedSelector.init("startMonitoring");
      pub fn startMonitoring(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startMonitoring.get(), );
 }}
var sel_stopMonitoring = CachedSelector.init("stopMonitoring");
      pub fn stopMonitoring(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stopMonitoring.get(), );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSNetServiceDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNetServiceDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSNetServiceDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNetServiceDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_includesPeerToPeer = CachedSelector.init("includesPeerToPeer");
      pub fn includesPeerToPeer(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_includesPeerToPeer.get(), );
 }}
var sel_setIncludesPeerToPeer_ = CachedSelector.init("setIncludesPeerToPeer:");
      pub fn setIncludesPeerToPeer(self: *Self, __includesPeerToPeer: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIncludesPeerToPeer_.get(), __includesPeerToPeer, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
var sel_domain = CachedSelector.init("domain");
      pub fn domain(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_domain.get(), );
 }}
var sel_hostName = CachedSelector.init("hostName");
      pub fn hostName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hostName.get(), );
 }}
var sel_addresses = CachedSelector.init("addresses");
      pub fn addresses(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addresses.get(), );
 }}
var sel_port = CachedSelector.init("port");
      pub fn port(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_port.get(), );
 }}
  };
}

pub const NSNetService = opaque {
  const Self = @This();
  pub usingnamespace NSNetServiceInterfaceMixin(Self, "NSNetService");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNetService");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSNetService");
};

pub fn NSDistantObjectRequestInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_replyWithException_ = CachedSelector.init("replyWithException:");
      pub fn replyWithException(self: *Self, __exception:  ?* NSException, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSException, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replyWithException_.get(), __exception, );
 }}
var sel_invocation = CachedSelector.init("invocation");
      pub fn invocation(self: *Self, )  * NSInvocation {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSInvocation, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invocation.get(), );
 }}
var sel_connection = CachedSelector.init("connection");
      pub fn connection(self: *Self, )  * NSConnection {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSConnection, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connection.get(), );
 }}
var sel_conversation = CachedSelector.init("conversation");
      pub fn conversation(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_conversation.get(), );
 }}
  };
}

pub const NSDistantObjectRequest = opaque {
  const Self = @This();
  pub usingnamespace NSDistantObjectRequestInterfaceMixin(Self, "NSDistantObjectRequest");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDistantObjectRequest");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSDistantObjectRequest");
};

pub fn NSScriptExecutionContextInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sharedScriptExecutionContext = CachedSelector.init("sharedScriptExecutionContext");
      pub fn sharedScriptExecutionContext()  * NSScriptExecutionContext {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSScriptExecutionContext, @ptrCast(&objc_msgSend))(class.get(), sel_sharedScriptExecutionContext.get(), );
 }}
var sel_topLevelObject = CachedSelector.init("topLevelObject");
      pub fn topLevelObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_topLevelObject.get(), );
 }}
var sel_setTopLevelObject_ = CachedSelector.init("setTopLevelObject:");
      pub fn setTopLevelObject(self: *Self, __topLevelObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTopLevelObject_.get(), __topLevelObject, );
 }}
var sel_objectBeingTested = CachedSelector.init("objectBeingTested");
      pub fn objectBeingTested(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectBeingTested.get(), );
 }}
var sel_setObjectBeingTested_ = CachedSelector.init("setObjectBeingTested:");
      pub fn setObjectBeingTested(self: *Self, __objectBeingTested: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectBeingTested_.get(), __objectBeingTested, );
 }}
var sel_rangeContainerObject = CachedSelector.init("rangeContainerObject");
      pub fn rangeContainerObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeContainerObject.get(), );
 }}
var sel_setRangeContainerObject_ = CachedSelector.init("setRangeContainerObject:");
      pub fn setRangeContainerObject(self: *Self, __rangeContainerObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRangeContainerObject_.get(), __rangeContainerObject, );
 }}
  };
}

pub const NSScriptExecutionContext = opaque {
  const Self = @This();
  pub usingnamespace NSScriptExecutionContextInterfaceMixin(Self, "NSScriptExecutionContext");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSScriptExecutionContext");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSScriptExecutionContext");
};

pub fn NSAttributedStringMarkdownSourcePositionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithStartLine_startColumn_endLine_endColumn_ = CachedSelector.init("initWithStartLine:startColumn:endLine:endColumn:");
      pub fn initWithStartLinestartColumnendLineendColumn(self: *Self, __startLine: c_long, __startColumn: c_long, __endLine: c_long, __endColumn: c_long, ) *Self {{
           return @as(*const fn(*Self, SEL, c_long, c_long, c_long, c_long, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithStartLine_startColumn_endLine_endColumn_.get(), __startLine, __startColumn, __endLine, __endColumn, );
 }}
var sel_rangeInString_ = CachedSelector.init("rangeInString:");
      pub fn rangeInString(self: *Self, __string:  * NSString, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeInString_.get(), __string, );
 }}
var sel_startLine = CachedSelector.init("startLine");
      pub fn startLine(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startLine.get(), );
 }}
var sel_startColumn = CachedSelector.init("startColumn");
      pub fn startColumn(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startColumn.get(), );
 }}
var sel_endLine = CachedSelector.init("endLine");
      pub fn endLine(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endLine.get(), );
 }}
var sel_endColumn = CachedSelector.init("endColumn");
      pub fn endColumn(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endColumn.get(), );
 }}
  };
}

pub const NSAttributedStringMarkdownSourcePosition = opaque {
  const Self = @This();
  pub usingnamespace NSAttributedStringMarkdownSourcePositionInterfaceMixin(Self, "NSAttributedStringMarkdownSourcePosition");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSAttributedStringMarkdownSourcePosition");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSAttributedStringMarkdownSourcePosition");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSAttributedStringMarkdownSourcePosition");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSAttributedStringMarkdownSourcePosition");
};

pub fn NSJSONSerializationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_isValidJSONObject_ = CachedSelector.init("isValidJSONObject:");
      pub fn isValidJSONObject(__obj: id, ) c_int {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_isValidJSONObject_.get(), __obj, );
 }}
var sel_dataWithJSONObject_options_error_ = CachedSelector.init("dataWithJSONObject:options:error:");
      pub fn dataWithJSONObjectoptionserror(__obj: id, __opt: NSJSONWritingOptions, __an_error:  [*c]  ?* NSError, )  ?* NSData {{
           return @as(*const fn(Class, SEL, id, NSJSONWritingOptions,  [*c]  ?* NSError, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithJSONObject_options_error_.get(), __obj, __opt, __an_error, );
 }}
var sel_JSONObjectWithData_options_error_ = CachedSelector.init("JSONObjectWithData:options:error:");
      pub fn JSONObjectWithDataoptionserror(__data:  * NSData, __opt: NSJSONReadingOptions, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(Class, SEL,  * NSData, NSJSONReadingOptions,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_JSONObjectWithData_options_error_.get(), __data, __opt, __an_error, );
 }}
var sel_writeJSONObject_toStream_options_error_ = CachedSelector.init("writeJSONObject:toStream:options:error:");
      pub fn writeJSONObjecttoStreamoptionserror(__obj: id, __stream:  * NSOutputStream, __opt: NSJSONWritingOptions, __an_error:  [*c]  ?* NSError, ) c_long {{
           return @as(*const fn(Class, SEL, id,  * NSOutputStream, NSJSONWritingOptions,  [*c]  ?* NSError, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(class.get(), sel_writeJSONObject_toStream_options_error_.get(), __obj, __stream, __opt, __an_error, );
 }}
var sel_JSONObjectWithStream_options_error_ = CachedSelector.init("JSONObjectWithStream:options:error:");
      pub fn JSONObjectWithStreamoptionserror(__stream:  * NSInputStream, __opt: NSJSONReadingOptions, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(Class, SEL,  * NSInputStream, NSJSONReadingOptions,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_JSONObjectWithStream_options_error_.get(), __stream, __opt, __an_error, );
 }}
  };
}

pub const NSJSONSerialization = opaque {
  const Self = @This();
  pub usingnamespace NSJSONSerializationInterfaceMixin(Self, "NSJSONSerialization");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSJSONSerialization");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSJSONSerialization");
};

pub fn NSPropertySpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSPropertySpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSPropertySpecifierInterfaceMixin(Self, "NSPropertySpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPropertySpecifier");
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSPropertySpecifier");
};

pub fn MTLRenderPassStencilAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_clearStencil = CachedSelector.init("clearStencil");
      pub fn clearStencil(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_clearStencil.get(), );
 }}
var sel_setClearStencil_ = CachedSelector.init("setClearStencil:");
      pub fn setClearStencil(self: *Self, __clearStencil: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setClearStencil_.get(), __clearStencil, );
 }}
var sel_stencilResolveFilter = CachedSelector.init("stencilResolveFilter");
      pub fn stencilResolveFilter(self: *Self, ) MTLMultisampleStencilResolveFilter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLMultisampleStencilResolveFilter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stencilResolveFilter.get(), );
 }}
var sel_setStencilResolveFilter_ = CachedSelector.init("setStencilResolveFilter:");
      pub fn setStencilResolveFilter(self: *Self, __stencilResolveFilter: MTLMultisampleStencilResolveFilter, ) void {{
           return @as(*const fn(*Self, SEL, MTLMultisampleStencilResolveFilter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilResolveFilter_.get(), __stencilResolveFilter, );
 }}
  };
}

pub const MTLRenderPassStencilAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPassStencilAttachmentDescriptorInterfaceMixin(Self, "MTLRenderPassStencilAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPassStencilAttachmentDescriptor");
  pub usingnamespace MTLRenderPassAttachmentDescriptorInterfaceMixin(Self, "MTLRenderPassStencilAttachmentDescriptor");
};

pub fn MTLComputePassDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_computePassDescriptor = CachedSelector.init("computePassDescriptor");
      pub fn computePassDescriptor()  * MTLComputePassDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLComputePassDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_computePassDescriptor.get(), );
 }}
var sel_dispatchType = CachedSelector.init("dispatchType");
      pub fn dispatchType(self: *Self, ) MTLDispatchType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDispatchType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatchType.get(), );
 }}
var sel_setDispatchType_ = CachedSelector.init("setDispatchType:");
      pub fn setDispatchType(self: *Self, __dispatchType: MTLDispatchType, ) void {{
           return @as(*const fn(*Self, SEL, MTLDispatchType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDispatchType_.get(), __dispatchType, );
 }}
var sel_sampleBufferAttachments = CachedSelector.init("sampleBufferAttachments");
      pub fn sampleBufferAttachments(self: *Self, )  * MTLComputePassSampleBufferAttachmentDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLComputePassSampleBufferAttachmentDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBufferAttachments.get(), );
 }}
  };
}

pub const MTLComputePassDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLComputePassDescriptorInterfaceMixin(Self, "MTLComputePassDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLComputePassDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLComputePassDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLComputePassDescriptor");
};

pub fn MTLAccelerationStructureMotionCurveGeometryDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_descriptor.get(), );
 }}
var sel_controlPointBuffers = CachedSelector.init("controlPointBuffers");
      pub fn controlPointBuffers(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlPointBuffers.get(), );
 }}
var sel_setControlPointBuffers_ = CachedSelector.init("setControlPointBuffers:");
      pub fn setControlPointBuffers(self: *Self, __controlPointBuffers:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlPointBuffers_.get(), __controlPointBuffers, );
 }}
var sel_controlPointCount = CachedSelector.init("controlPointCount");
      pub fn controlPointCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlPointCount.get(), );
 }}
var sel_setControlPointCount_ = CachedSelector.init("setControlPointCount:");
      pub fn setControlPointCount(self: *Self, __controlPointCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlPointCount_.get(), __controlPointCount, );
 }}
var sel_controlPointStride = CachedSelector.init("controlPointStride");
      pub fn controlPointStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlPointStride.get(), );
 }}
var sel_setControlPointStride_ = CachedSelector.init("setControlPointStride:");
      pub fn setControlPointStride(self: *Self, __controlPointStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlPointStride_.get(), __controlPointStride, );
 }}
var sel_controlPointFormat = CachedSelector.init("controlPointFormat");
      pub fn controlPointFormat(self: *Self, ) MTLAttributeFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAttributeFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlPointFormat.get(), );
 }}
var sel_setControlPointFormat_ = CachedSelector.init("setControlPointFormat:");
      pub fn setControlPointFormat(self: *Self, __controlPointFormat: MTLAttributeFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLAttributeFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlPointFormat_.get(), __controlPointFormat, );
 }}
var sel_radiusBuffers = CachedSelector.init("radiusBuffers");
      pub fn radiusBuffers(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_radiusBuffers.get(), );
 }}
var sel_setRadiusBuffers_ = CachedSelector.init("setRadiusBuffers:");
      pub fn setRadiusBuffers(self: *Self, __radiusBuffers:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRadiusBuffers_.get(), __radiusBuffers, );
 }}
var sel_radiusFormat = CachedSelector.init("radiusFormat");
      pub fn radiusFormat(self: *Self, ) MTLAttributeFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAttributeFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_radiusFormat.get(), );
 }}
var sel_setRadiusFormat_ = CachedSelector.init("setRadiusFormat:");
      pub fn setRadiusFormat(self: *Self, __radiusFormat: MTLAttributeFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLAttributeFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRadiusFormat_.get(), __radiusFormat, );
 }}
var sel_radiusStride = CachedSelector.init("radiusStride");
      pub fn radiusStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_radiusStride.get(), );
 }}
var sel_setRadiusStride_ = CachedSelector.init("setRadiusStride:");
      pub fn setRadiusStride(self: *Self, __radiusStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRadiusStride_.get(), __radiusStride, );
 }}
var sel_indexBuffer = CachedSelector.init("indexBuffer");
      pub fn indexBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexBuffer.get(), );
 }}
var sel_setIndexBuffer_ = CachedSelector.init("setIndexBuffer:");
      pub fn setIndexBuffer(self: *Self, __indexBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexBuffer_.get(), __indexBuffer, );
 }}
var sel_indexBufferOffset = CachedSelector.init("indexBufferOffset");
      pub fn indexBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexBufferOffset.get(), );
 }}
var sel_setIndexBufferOffset_ = CachedSelector.init("setIndexBufferOffset:");
      pub fn setIndexBufferOffset(self: *Self, __indexBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexBufferOffset_.get(), __indexBufferOffset, );
 }}
var sel_indexType = CachedSelector.init("indexType");
      pub fn indexType(self: *Self, ) MTLIndexType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLIndexType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexType.get(), );
 }}
var sel_setIndexType_ = CachedSelector.init("setIndexType:");
      pub fn setIndexType(self: *Self, __indexType: MTLIndexType, ) void {{
           return @as(*const fn(*Self, SEL, MTLIndexType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexType_.get(), __indexType, );
 }}
var sel_segmentCount = CachedSelector.init("segmentCount");
      pub fn segmentCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_segmentCount.get(), );
 }}
var sel_setSegmentCount_ = CachedSelector.init("setSegmentCount:");
      pub fn setSegmentCount(self: *Self, __segmentCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSegmentCount_.get(), __segmentCount, );
 }}
var sel_segmentControlPointCount = CachedSelector.init("segmentControlPointCount");
      pub fn segmentControlPointCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_segmentControlPointCount.get(), );
 }}
var sel_setSegmentControlPointCount_ = CachedSelector.init("setSegmentControlPointCount:");
      pub fn setSegmentControlPointCount(self: *Self, __segmentControlPointCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSegmentControlPointCount_.get(), __segmentControlPointCount, );
 }}
var sel_curveType = CachedSelector.init("curveType");
      pub fn curveType(self: *Self, ) MTLCurveType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCurveType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_curveType.get(), );
 }}
var sel_setCurveType_ = CachedSelector.init("setCurveType:");
      pub fn setCurveType(self: *Self, __curveType: MTLCurveType, ) void {{
           return @as(*const fn(*Self, SEL, MTLCurveType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurveType_.get(), __curveType, );
 }}
var sel_curveBasis = CachedSelector.init("curveBasis");
      pub fn curveBasis(self: *Self, ) MTLCurveBasis {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCurveBasis, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_curveBasis.get(), );
 }}
var sel_setCurveBasis_ = CachedSelector.init("setCurveBasis:");
      pub fn setCurveBasis(self: *Self, __curveBasis: MTLCurveBasis, ) void {{
           return @as(*const fn(*Self, SEL, MTLCurveBasis, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurveBasis_.get(), __curveBasis, );
 }}
var sel_curveEndCaps = CachedSelector.init("curveEndCaps");
      pub fn curveEndCaps(self: *Self, ) MTLCurveEndCaps {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCurveEndCaps, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_curveEndCaps.get(), );
 }}
var sel_setCurveEndCaps_ = CachedSelector.init("setCurveEndCaps:");
      pub fn setCurveEndCaps(self: *Self, __curveEndCaps: MTLCurveEndCaps, ) void {{
           return @as(*const fn(*Self, SEL, MTLCurveEndCaps, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurveEndCaps_.get(), __curveEndCaps, );
 }}
  };
}

pub const MTLAccelerationStructureMotionCurveGeometryDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureMotionCurveGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureMotionCurveGeometryDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructureMotionCurveGeometryDescriptor");
  pub usingnamespace MTLAccelerationStructureGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureMotionCurveGeometryDescriptor");
};

pub fn NSMutableSetInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addObject_ = CachedSelector.init("addObject:");
      pub fn addObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObject_.get(), __object, );
 }}
var sel_removeObject_ = CachedSelector.init("removeObject:");
      pub fn removeObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObject_.get(), __object, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithCapacity_ = CachedSelector.init("initWithCapacity:");
      pub fn initWithCapacity(self: *Self, __numItems: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCapacity_.get(), __numItems, );
 }}
var sel_addObjectsFromArray_ = CachedSelector.init("addObjectsFromArray:");
      pub fn addObjectsFromArray(self: *Self, __array:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObjectsFromArray_.get(), __array, );
 }}
var sel_intersectSet_ = CachedSelector.init("intersectSet:");
      pub fn intersectSet(self: *Self, __otherSet:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectSet_.get(), __otherSet, );
 }}
var sel_minusSet_ = CachedSelector.init("minusSet:");
      pub fn minusSet(self: *Self, __otherSet:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minusSet_.get(), __otherSet, );
 }}
var sel_removeAllObjects = CachedSelector.init("removeAllObjects");
      pub fn removeAllObjects(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllObjects.get(), );
 }}
var sel_unionSet_ = CachedSelector.init("unionSet:");
      pub fn unionSet(self: *Self, __otherSet:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unionSet_.get(), __otherSet, );
 }}
var sel_setSet_ = CachedSelector.init("setSet:");
      pub fn setSet(self: *Self, __otherSet:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSet_.get(), __otherSet, );
 }}
var sel_setWithCapacity_ = CachedSelector.init("setWithCapacity:");
      pub fn setWithCapacity(__numItems: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_setWithCapacity_.get(), __numItems, );
 }}
var sel_filterUsingPredicate_ = CachedSelector.init("filterUsingPredicate:");
      pub fn filterUsingPredicate(self: *Self, __predicate:  * NSPredicate, ) void {{
           return @as(*const fn(*Self, SEL,  * NSPredicate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_filterUsingPredicate_.get(), __predicate, );
 }}
  };
}

pub const NSMutableSet = opaque {
  const Self = @This();
  pub usingnamespace NSMutableSetInterfaceMixin(Self, "NSMutableSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableSet");
  pub usingnamespace NSSetInterfaceMixin(Self, "NSMutableSet");
};

pub fn NSItemProviderInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_ = CachedSelector.init("registerDataRepresentationForTypeIdentifier:visibility:loadHandler:");
      pub fn registerDataRepresentationForTypeIdentifiervisibilityloadHandler(self: *Self, __typeIdentifier:  * NSString, __visibility: NSItemProviderRepresentationVisibility, __loadHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, NSItemProviderRepresentationVisibility, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_.get(), __typeIdentifier, __visibility, __loadHandler, );
 }}
var sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_ = CachedSelector.init("registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:");
      pub fn registerFileRepresentationForTypeIdentifierfileOptionsvisibilityloadHandler(self: *Self, __typeIdentifier:  * NSString, __fileOptions: NSItemProviderFileOptions, __visibility: NSItemProviderRepresentationVisibility, __loadHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, NSItemProviderFileOptions, NSItemProviderRepresentationVisibility, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_.get(), __typeIdentifier, __fileOptions, __visibility, __loadHandler, );
 }}
var sel_registeredTypeIdentifiersWithFileOptions_ = CachedSelector.init("registeredTypeIdentifiersWithFileOptions:");
      pub fn registeredTypeIdentifiersWithFileOptions(self: *Self, __fileOptions: NSItemProviderFileOptions, )  * NSArray {{
           return @as(*const fn(*Self, SEL, NSItemProviderFileOptions, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registeredTypeIdentifiersWithFileOptions_.get(), __fileOptions, );
 }}
var sel_hasItemConformingToTypeIdentifier_ = CachedSelector.init("hasItemConformingToTypeIdentifier:");
      pub fn hasItemConformingToTypeIdentifier(self: *Self, __typeIdentifier:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasItemConformingToTypeIdentifier_.get(), __typeIdentifier, );
 }}
var sel_hasRepresentationConformingToTypeIdentifier_fileOptions_ = CachedSelector.init("hasRepresentationConformingToTypeIdentifier:fileOptions:");
      pub fn hasRepresentationConformingToTypeIdentifierfileOptions(self: *Self, __typeIdentifier:  * NSString, __fileOptions: NSItemProviderFileOptions, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, NSItemProviderFileOptions, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasRepresentationConformingToTypeIdentifier_fileOptions_.get(), __typeIdentifier, __fileOptions, );
 }}
var sel_loadDataRepresentationForTypeIdentifier_completionHandler_ = CachedSelector.init("loadDataRepresentationForTypeIdentifier:completionHandler:");
      pub fn loadDataRepresentationForTypeIdentifiercompletionHandler(self: *Self, __typeIdentifier:  * NSString, __completionHandler: ?*u8, )  * NSProgress {{
           return @as(*const fn(*Self, SEL,  * NSString, ?*u8, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadDataRepresentationForTypeIdentifier_completionHandler_.get(), __typeIdentifier, __completionHandler, );
 }}
var sel_loadFileRepresentationForTypeIdentifier_completionHandler_ = CachedSelector.init("loadFileRepresentationForTypeIdentifier:completionHandler:");
      pub fn loadFileRepresentationForTypeIdentifiercompletionHandler(self: *Self, __typeIdentifier:  * NSString, __completionHandler: ?*u8, )  * NSProgress {{
           return @as(*const fn(*Self, SEL,  * NSString, ?*u8, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadFileRepresentationForTypeIdentifier_completionHandler_.get(), __typeIdentifier, __completionHandler, );
 }}
var sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_ = CachedSelector.init("loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:");
      pub fn loadInPlaceFileRepresentationForTypeIdentifiercompletionHandler(self: *Self, __typeIdentifier:  * NSString, __completionHandler: ?*u8, )  * NSProgress {{
           return @as(*const fn(*Self, SEL,  * NSString, ?*u8, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_.get(), __typeIdentifier, __completionHandler, );
 }}
var sel_initWithObject_ = CachedSelector.init("initWithObject:");
      pub fn initWithObject(self: *Self, __object:  * NSItemProviderWriting, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSItemProviderWriting, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObject_.get(), __object, );
 }}
var sel_registerObject_visibility_ = CachedSelector.init("registerObject:visibility:");
      pub fn registerObjectvisibility(self: *Self, __object:  * NSItemProviderWriting, __visibility: NSItemProviderRepresentationVisibility, ) void {{
           return @as(*const fn(*Self, SEL,  * NSItemProviderWriting, NSItemProviderRepresentationVisibility, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerObject_visibility_.get(), __object, __visibility, );
 }}
var sel_registerObjectOfClass_visibility_loadHandler_ = CachedSelector.init("registerObjectOfClass:visibility:loadHandler:");
      pub fn registerObjectOfClassvisibilityloadHandler(self: *Self, __aClass:  * Class, __visibility: NSItemProviderRepresentationVisibility, __loadHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * Class, NSItemProviderRepresentationVisibility, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerObjectOfClass_visibility_loadHandler_.get(), __aClass, __visibility, __loadHandler, );
 }}
var sel_canLoadObjectOfClass_ = CachedSelector.init("canLoadObjectOfClass:");
      pub fn canLoadObjectOfClass(self: *Self, __aClass:  * Class, ) c_int {{
           return @as(*const fn(*Self, SEL,  * Class, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_canLoadObjectOfClass_.get(), __aClass, );
 }}
var sel_loadObjectOfClass_completionHandler_ = CachedSelector.init("loadObjectOfClass:completionHandler:");
      pub fn loadObjectOfClasscompletionHandler(self: *Self, __aClass:  * Class, __completionHandler: ?*u8, )  * NSProgress {{
           return @as(*const fn(*Self, SEL,  * Class, ?*u8, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadObjectOfClass_completionHandler_.get(), __aClass, __completionHandler, );
 }}
var sel_initWithItem_typeIdentifier_ = CachedSelector.init("initWithItem:typeIdentifier:");
      pub fn initWithItemtypeIdentifier(self: *Self, __item:  ?* NSSecureCoding, __typeIdentifier:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSSecureCoding,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithItem_typeIdentifier_.get(), __item, __typeIdentifier, );
 }}
var sel_initWithContentsOfURL_ = CachedSelector.init("initWithContentsOfURL:");
      pub fn initWithContentsOfURL(self: *Self, __fileURL:  * NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_.get(), __fileURL, );
 }}
var sel_registerItemForTypeIdentifier_loadHandler_ = CachedSelector.init("registerItemForTypeIdentifier:loadHandler:");
      pub fn registerItemForTypeIdentifierloadHandler(self: *Self, __typeIdentifier:  * NSString, __loadHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerItemForTypeIdentifier_loadHandler_.get(), __typeIdentifier, __loadHandler, );
 }}
var sel_loadItemForTypeIdentifier_options_completionHandler_ = CachedSelector.init("loadItemForTypeIdentifier:options:completionHandler:");
      pub fn loadItemForTypeIdentifieroptionscompletionHandler(self: *Self, __typeIdentifier:  * NSString, __options:  ?* NSDictionary, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSDictionary, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadItemForTypeIdentifier_options_completionHandler_.get(), __typeIdentifier, __options, __completionHandler, );
 }}
var sel_registeredTypeIdentifiers = CachedSelector.init("registeredTypeIdentifiers");
      pub fn registeredTypeIdentifiers(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registeredTypeIdentifiers.get(), );
 }}
var sel_suggestedName = CachedSelector.init("suggestedName");
      pub fn suggestedName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suggestedName.get(), );
 }}
var sel_setSuggestedName_ = CachedSelector.init("setSuggestedName:");
      pub fn setSuggestedName(self: *Self, __suggestedName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSuggestedName_.get(), __suggestedName, );
 }}
var sel_loadPreviewImageWithOptions_completionHandler_ = CachedSelector.init("loadPreviewImageWithOptions:completionHandler:");
      pub fn loadPreviewImageWithOptionscompletionHandler(self: *Self, __options:  * NSDictionary, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadPreviewImageWithOptions_completionHandler_.get(), __options, __completionHandler, );
 }}
var sel_previewImageHandler = CachedSelector.init("previewImageHandler");
      pub fn previewImageHandler(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_previewImageHandler.get(), );
 }}
var sel_setPreviewImageHandler_ = CachedSelector.init("setPreviewImageHandler:");
      pub fn setPreviewImageHandler(self: *Self, __previewImageHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPreviewImageHandler_.get(), __previewImageHandler, );
 }}
  };
}

pub const NSItemProvider = opaque {
  const Self = @This();
  pub usingnamespace NSItemProviderInterfaceMixin(Self, "NSItemProvider");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSItemProvider");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSItemProvider");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSItemProvider");
};

pub fn NSMorphologyPronounInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithPronoun_morphology_dependentMorphology_ = CachedSelector.init("initWithPronoun:morphology:dependentMorphology:");
      pub fn initWithPronounmorphologydependentMorphology(self: *Self, __pronoun:  * NSString, __morphology:  * NSMorphology, __dependentMorphology:  ?* NSMorphology, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSMorphology,  ?* NSMorphology, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithPronoun_morphology_dependentMorphology_.get(), __pronoun, __morphology, __dependentMorphology, );
 }}
var sel_pronoun = CachedSelector.init("pronoun");
      pub fn pronoun(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pronoun.get(), );
 }}
var sel_morphology = CachedSelector.init("morphology");
      pub fn morphology(self: *Self, )  * NSMorphology {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSMorphology, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_morphology.get(), );
 }}
var sel_dependentMorphology = CachedSelector.init("dependentMorphology");
      pub fn dependentMorphology(self: *Self, )  ?* NSMorphology {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSMorphology, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dependentMorphology.get(), );
 }}
  };
}

pub const NSMorphologyPronoun = opaque {
  const Self = @This();
  pub usingnamespace NSMorphologyPronounInterfaceMixin(Self, "NSMorphologyPronoun");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSMorphologyPronoun");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSMorphologyPronoun");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMorphologyPronoun");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMorphologyPronoun");
};

pub fn NSTimerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_timerWithTimeInterval_invocation_repeats_ = CachedSelector.init("timerWithTimeInterval:invocation:repeats:");
      pub fn timerWithTimeIntervalinvocationrepeats(__ti: f64, __invocation:  * NSInvocation, __yesOrNo: c_int, )  * NSTimer {{
           return @as(*const fn(Class, SEL, f64,  * NSInvocation, c_int, ) callconv(.C)  * NSTimer, @ptrCast(&objc_msgSend))(class.get(), sel_timerWithTimeInterval_invocation_repeats_.get(), __ti, __invocation, __yesOrNo, );
 }}
var sel_scheduledTimerWithTimeInterval_invocation_repeats_ = CachedSelector.init("scheduledTimerWithTimeInterval:invocation:repeats:");
      pub fn scheduledTimerWithTimeIntervalinvocationrepeats(__ti: f64, __invocation:  * NSInvocation, __yesOrNo: c_int, )  * NSTimer {{
           return @as(*const fn(Class, SEL, f64,  * NSInvocation, c_int, ) callconv(.C)  * NSTimer, @ptrCast(&objc_msgSend))(class.get(), sel_scheduledTimerWithTimeInterval_invocation_repeats_.get(), __ti, __invocation, __yesOrNo, );
 }}
var sel_timerWithTimeInterval_target_selector_userInfo_repeats_ = CachedSelector.init("timerWithTimeInterval:target:selector:userInfo:repeats:");
      pub fn timerWithTimeIntervaltargetselectoruserInforepeats(__ti: f64, __aTarget: id, __aSelector: SEL, __userInfo: id, __yesOrNo: c_int, )  * NSTimer {{
           return @as(*const fn(Class, SEL, f64, id, SEL, id, c_int, ) callconv(.C)  * NSTimer, @ptrCast(&objc_msgSend))(class.get(), sel_timerWithTimeInterval_target_selector_userInfo_repeats_.get(), __ti, __aTarget, __aSelector, __userInfo, __yesOrNo, );
 }}
var sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_ = CachedSelector.init("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
      pub fn scheduledTimerWithTimeIntervaltargetselectoruserInforepeats(__ti: f64, __aTarget: id, __aSelector: SEL, __userInfo: id, __yesOrNo: c_int, )  * NSTimer {{
           return @as(*const fn(Class, SEL, f64, id, SEL, id, c_int, ) callconv(.C)  * NSTimer, @ptrCast(&objc_msgSend))(class.get(), sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_.get(), __ti, __aTarget, __aSelector, __userInfo, __yesOrNo, );
 }}
var sel_timerWithTimeInterval_repeats_block_ = CachedSelector.init("timerWithTimeInterval:repeats:block:");
      pub fn timerWithTimeIntervalrepeatsblock(__interval: f64, __repeats: c_int, __block: ?*u8, )  * NSTimer {{
           return @as(*const fn(Class, SEL, f64, c_int, ?*u8, ) callconv(.C)  * NSTimer, @ptrCast(&objc_msgSend))(class.get(), sel_timerWithTimeInterval_repeats_block_.get(), __interval, __repeats, __block, );
 }}
var sel_scheduledTimerWithTimeInterval_repeats_block_ = CachedSelector.init("scheduledTimerWithTimeInterval:repeats:block:");
      pub fn scheduledTimerWithTimeIntervalrepeatsblock(__interval: f64, __repeats: c_int, __block: ?*u8, )  * NSTimer {{
           return @as(*const fn(Class, SEL, f64, c_int, ?*u8, ) callconv(.C)  * NSTimer, @ptrCast(&objc_msgSend))(class.get(), sel_scheduledTimerWithTimeInterval_repeats_block_.get(), __interval, __repeats, __block, );
 }}
var sel_initWithFireDate_interval_repeats_block_ = CachedSelector.init("initWithFireDate:interval:repeats:block:");
      pub fn initWithFireDateintervalrepeatsblock(self: *Self, __date:  * NSDate, __interval: f64, __repeats: c_int, __block: ?*u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSDate, f64, c_int, ?*u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFireDate_interval_repeats_block_.get(), __date, __interval, __repeats, __block, );
 }}
var sel_initWithFireDate_interval_target_selector_userInfo_repeats_ = CachedSelector.init("initWithFireDate:interval:target:selector:userInfo:repeats:");
      pub fn initWithFireDateintervaltargetselectoruserInforepeats(self: *Self, __date:  * NSDate, __ti: f64, __t: id, __s: SEL, __ui: id, __rep: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSDate, f64, id, SEL, id, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFireDate_interval_target_selector_userInfo_repeats_.get(), __date, __ti, __t, __s, __ui, __rep, );
 }}
var sel_fire = CachedSelector.init("fire");
      pub fn fire(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fire.get(), );
 }}
var sel_invalidate = CachedSelector.init("invalidate");
      pub fn invalidate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invalidate.get(), );
 }}
var sel_fireDate = CachedSelector.init("fireDate");
      pub fn fireDate(self: *Self, )  * NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fireDate.get(), );
 }}
var sel_setFireDate_ = CachedSelector.init("setFireDate:");
      pub fn setFireDate(self: *Self, __fireDate:  * NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFireDate_.get(), __fireDate, );
 }}
var sel_timeInterval = CachedSelector.init("timeInterval");
      pub fn timeInterval(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeInterval.get(), );
 }}
var sel_tolerance = CachedSelector.init("tolerance");
      pub fn tolerance(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tolerance.get(), );
 }}
var sel_setTolerance_ = CachedSelector.init("setTolerance:");
      pub fn setTolerance(self: *Self, __tolerance: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTolerance_.get(), __tolerance, );
 }}
var sel_isValid = CachedSelector.init("isValid");
      pub fn isValid(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isValid.get(), );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
  };
}

pub const NSTimer = opaque {
  const Self = @This();
  pub usingnamespace NSTimerInterfaceMixin(Self, "NSTimer");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSTimer");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSTimer");
};

pub fn NSCoderInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_encodeValueOfObjCType_at_ = CachedSelector.init("encodeValueOfObjCType:at:");
      pub fn encodeValueOfObjCTypeat(self: *Self, __a_type:  [*c]  const u8, __addr:  [*c]  const void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8,  [*c]  const void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeValueOfObjCType_at_.get(), __a_type, __addr, );
 }}
var sel_encodeDataObject_ = CachedSelector.init("encodeDataObject:");
      pub fn encodeDataObject(self: *Self, __data:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeDataObject_.get(), __data, );
 }}
var sel_decodeDataObject = CachedSelector.init("decodeDataObject");
      pub fn decodeDataObject(self: *Self, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeDataObject.get(), );
 }}
var sel_decodeValueOfObjCType_at_size_ = CachedSelector.init("decodeValueOfObjCType:at:size:");
      pub fn decodeValueOfObjCTypeatsize(self: *Self, __a_type:  [*c]  const u8, __data:  [*c] void, __size: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8,  [*c] void, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeValueOfObjCType_at_size_.get(), __a_type, __data, __size, );
 }}
var sel_versionForClassName_ = CachedSelector.init("versionForClassName:");
      pub fn versionForClassName(self: *Self, __className:  * NSString, ) c_long {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_versionForClassName_.get(), __className, );
 }}
var sel_encodeObject_ = CachedSelector.init("encodeObject:");
      pub fn encodeObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeObject_.get(), __object, );
 }}
var sel_encodeRootObject_ = CachedSelector.init("encodeRootObject:");
      pub fn encodeRootObject(self: *Self, __rootObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeRootObject_.get(), __rootObject, );
 }}
var sel_encodeBycopyObject_ = CachedSelector.init("encodeBycopyObject:");
      pub fn encodeBycopyObject(self: *Self, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeBycopyObject_.get(), __anObject, );
 }}
var sel_encodeByrefObject_ = CachedSelector.init("encodeByrefObject:");
      pub fn encodeByrefObject(self: *Self, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeByrefObject_.get(), __anObject, );
 }}
var sel_encodeConditionalObject_ = CachedSelector.init("encodeConditionalObject:");
      pub fn encodeConditionalObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeConditionalObject_.get(), __object, );
 }}
var sel_encodeValuesOfObjCTypes_ = CachedSelector.init("encodeValuesOfObjCTypes:");
      pub fn encodeValuesOfObjCTypes(self: *Self, __types:  [*c]  const u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeValuesOfObjCTypes_.get(), __types, );
 }}
var sel_encodeArrayOfObjCType_count_at_ = CachedSelector.init("encodeArrayOfObjCType:count:at:");
      pub fn encodeArrayOfObjCTypecountat(self: *Self, __a_type:  [*c]  const u8, __count: c_ulong, __array:  [*c]  const void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, c_ulong,  [*c]  const void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeArrayOfObjCType_count_at_.get(), __a_type, __count, __array, );
 }}
var sel_encodeBytes_length_ = CachedSelector.init("encodeBytes:length:");
      pub fn encodeByteslength(self: *Self, __byteaddr:  [*c]  const void, __length: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeBytes_length_.get(), __byteaddr, __length, );
 }}
var sel_decodeObject = CachedSelector.init("decodeObject");
      pub fn decodeObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeObject.get(), );
 }}
var sel_decodeTopLevelObjectAndReturnError_ = CachedSelector.init("decodeTopLevelObjectAndReturnError:");
      pub fn decodeTopLevelObjectAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeTopLevelObjectAndReturnError_.get(), __an_error, );
 }}
var sel_decodeValuesOfObjCTypes_ = CachedSelector.init("decodeValuesOfObjCTypes:");
      pub fn decodeValuesOfObjCTypes(self: *Self, __types:  [*c]  const u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeValuesOfObjCTypes_.get(), __types, );
 }}
var sel_decodeArrayOfObjCType_count_at_ = CachedSelector.init("decodeArrayOfObjCType:count:at:");
      pub fn decodeArrayOfObjCTypecountat(self: *Self, __itemType:  [*c]  const u8, __count: c_ulong, __array:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, c_ulong,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeArrayOfObjCType_count_at_.get(), __itemType, __count, __array, );
 }}
var sel_decodeBytesWithReturnedLength_ = CachedSelector.init("decodeBytesWithReturnedLength:");
      pub fn decodeBytesWithReturnedLength(self: *Self, __lengthp:  [*c] c_ulong, )  [*c] void {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulong, ) callconv(.C)  [*c] void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeBytesWithReturnedLength_.get(), __lengthp, );
 }}
var sel_encodePropertyList_ = CachedSelector.init("encodePropertyList:");
      pub fn encodePropertyList(self: *Self, __aPropertyList: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodePropertyList_.get(), __aPropertyList, );
 }}
var sel_decodePropertyList = CachedSelector.init("decodePropertyList");
      pub fn decodePropertyList(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodePropertyList.get(), );
 }}
var sel_setObjectZone_ = CachedSelector.init("setObjectZone:");
      pub fn setObjectZone(self: *Self, __zone:  [*c] _NSZone, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] _NSZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectZone_.get(), __zone, );
 }}
var sel_objectZone = CachedSelector.init("objectZone");
      pub fn objectZone(self: *Self, )  [*c] _NSZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] _NSZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectZone.get(), );
 }}
var sel_encodeObject_forKey_ = CachedSelector.init("encodeObject:forKey:");
      pub fn encodeObjectforKey(self: *Self, __object: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeObject_forKey_.get(), __object, __key, );
 }}
var sel_encodeConditionalObject_forKey_ = CachedSelector.init("encodeConditionalObject:forKey:");
      pub fn encodeConditionalObjectforKey(self: *Self, __object: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeConditionalObject_forKey_.get(), __object, __key, );
 }}
var sel_encodeBool_forKey_ = CachedSelector.init("encodeBool:forKey:");
      pub fn encodeBoolforKey(self: *Self, __value: c_int, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_int,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeBool_forKey_.get(), __value, __key, );
 }}
var sel_encodeInt_forKey_ = CachedSelector.init("encodeInt:forKey:");
      pub fn encodeIntforKey(self: *Self, __value: c_int, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_int,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeInt_forKey_.get(), __value, __key, );
 }}
var sel_encodeInt32_forKey_ = CachedSelector.init("encodeInt32:forKey:");
      pub fn encodeInt32forKey(self: *Self, __value: c_int, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_int,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeInt32_forKey_.get(), __value, __key, );
 }}
var sel_encodeInt64_forKey_ = CachedSelector.init("encodeInt64:forKey:");
      pub fn encodeInt64forKey(self: *Self, __value: c_longlong, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_longlong,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeInt64_forKey_.get(), __value, __key, );
 }}
var sel_encodeFloat_forKey_ = CachedSelector.init("encodeFloat:forKey:");
      pub fn encodeFloatforKey(self: *Self, __value: f32, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, f32,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeFloat_forKey_.get(), __value, __key, );
 }}
var sel_encodeDouble_forKey_ = CachedSelector.init("encodeDouble:forKey:");
      pub fn encodeDoubleforKey(self: *Self, __value: f64, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, f64,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeDouble_forKey_.get(), __value, __key, );
 }}
var sel_encodeBytes_length_forKey_ = CachedSelector.init("encodeBytes:length:forKey:");
      pub fn encodeByteslengthforKey(self: *Self, __bytes:  [*c] u8, __length: c_ulong, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeBytes_length_forKey_.get(), __bytes, __length, __key, );
 }}
var sel_containsValueForKey_ = CachedSelector.init("containsValueForKey:");
      pub fn containsValueForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsValueForKey_.get(), __key, );
 }}
var sel_decodeObjectForKey_ = CachedSelector.init("decodeObjectForKey:");
      pub fn decodeObjectForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeObjectForKey_.get(), __key, );
 }}
var sel_decodeTopLevelObjectForKey_error_ = CachedSelector.init("decodeTopLevelObjectForKey:error:");
      pub fn decodeTopLevelObjectForKeyerror(self: *Self, __key:  * NSString, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeTopLevelObjectForKey_error_.get(), __key, __an_error, );
 }}
var sel_decodeBoolForKey_ = CachedSelector.init("decodeBoolForKey:");
      pub fn decodeBoolForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeBoolForKey_.get(), __key, );
 }}
var sel_decodeIntForKey_ = CachedSelector.init("decodeIntForKey:");
      pub fn decodeIntForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeIntForKey_.get(), __key, );
 }}
var sel_decodeInt32ForKey_ = CachedSelector.init("decodeInt32ForKey:");
      pub fn decodeInt32ForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeInt32ForKey_.get(), __key, );
 }}
var sel_decodeInt64ForKey_ = CachedSelector.init("decodeInt64ForKey:");
      pub fn decodeInt64ForKey(self: *Self, __key:  * NSString, ) c_longlong {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeInt64ForKey_.get(), __key, );
 }}
var sel_decodeFloatForKey_ = CachedSelector.init("decodeFloatForKey:");
      pub fn decodeFloatForKey(self: *Self, __key:  * NSString, ) f32 {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeFloatForKey_.get(), __key, );
 }}
var sel_decodeDoubleForKey_ = CachedSelector.init("decodeDoubleForKey:");
      pub fn decodeDoubleForKey(self: *Self, __key:  * NSString, ) f64 {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeDoubleForKey_.get(), __key, );
 }}
var sel_decodeBytesForKey_returnedLength_ = CachedSelector.init("decodeBytesForKey:returnedLength:");
      pub fn decodeBytesForKeyreturnedLength(self: *Self, __key:  * NSString, __lengthp:  [*c] c_ulong, )  [*c] u8 {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c] c_ulong, ) callconv(.C)  [*c] u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeBytesForKey_returnedLength_.get(), __key, __lengthp, );
 }}
var sel_encodeInteger_forKey_ = CachedSelector.init("encodeInteger:forKey:");
      pub fn encodeIntegerforKey(self: *Self, __value: c_long, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_long,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeInteger_forKey_.get(), __value, __key, );
 }}
var sel_decodeIntegerForKey_ = CachedSelector.init("decodeIntegerForKey:");
      pub fn decodeIntegerForKey(self: *Self, __key:  * NSString, ) c_long {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeIntegerForKey_.get(), __key, );
 }}
var sel_decodeObjectOfClass_forKey_ = CachedSelector.init("decodeObjectOfClass:forKey:");
      pub fn decodeObjectOfClassforKey(self: *Self, __aClass: Class, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL, Class,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeObjectOfClass_forKey_.get(), __aClass, __key, );
 }}
var sel_decodeTopLevelObjectOfClass_forKey_error_ = CachedSelector.init("decodeTopLevelObjectOfClass:forKey:error:");
      pub fn decodeTopLevelObjectOfClassforKeyerror(self: *Self, __aClass: Class, __key:  * NSString, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(*Self, SEL, Class,  * NSString,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeTopLevelObjectOfClass_forKey_error_.get(), __aClass, __key, __an_error, );
 }}
var sel_decodeArrayOfObjectsOfClass_forKey_ = CachedSelector.init("decodeArrayOfObjectsOfClass:forKey:");
      pub fn decodeArrayOfObjectsOfClassforKey(self: *Self, __cls: Class, __key:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, Class,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeArrayOfObjectsOfClass_forKey_.get(), __cls, __key, );
 }}
var sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_ = CachedSelector.init("decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:");
      pub fn decodeDictionaryWithKeysOfClassobjectsOfClassforKey(self: *Self, __keyCls: Class, __objectCls: Class, __key:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, Class, Class,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_.get(), __keyCls, __objectCls, __key, );
 }}
var sel_decodeObjectOfClasses_forKey_ = CachedSelector.init("decodeObjectOfClasses:forKey:");
      pub fn decodeObjectOfClassesforKey(self: *Self, __classes:  ?* NSSet, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  ?* NSSet,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeObjectOfClasses_forKey_.get(), __classes, __key, );
 }}
var sel_decodeTopLevelObjectOfClasses_forKey_error_ = CachedSelector.init("decodeTopLevelObjectOfClasses:forKey:error:");
      pub fn decodeTopLevelObjectOfClassesforKeyerror(self: *Self, __classes:  ?* NSSet, __key:  * NSString, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(*Self, SEL,  ?* NSSet,  * NSString,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeTopLevelObjectOfClasses_forKey_error_.get(), __classes, __key, __an_error, );
 }}
var sel_decodeArrayOfObjectsOfClasses_forKey_ = CachedSelector.init("decodeArrayOfObjectsOfClasses:forKey:");
      pub fn decodeArrayOfObjectsOfClassesforKey(self: *Self, __classes:  * NSSet, __key:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSSet,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeArrayOfObjectsOfClasses_forKey_.get(), __classes, __key, );
 }}
var sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_ = CachedSelector.init("decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:");
      pub fn decodeDictionaryWithKeysOfClassesobjectsOfClassesforKey(self: *Self, __keyClasses:  * NSSet, __objectClasses:  * NSSet, __key:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSSet,  * NSSet,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_.get(), __keyClasses, __objectClasses, __key, );
 }}
var sel_decodePropertyListForKey_ = CachedSelector.init("decodePropertyListForKey:");
      pub fn decodePropertyListForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodePropertyListForKey_.get(), __key, );
 }}
var sel_failWithError_ = CachedSelector.init("failWithError:");
      pub fn failWithError(self: *Self, __an_error:  * NSError, ) void {{
           return @as(*const fn(*Self, SEL,  * NSError, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_failWithError_.get(), __an_error, );
 }}
var sel_systemVersion = CachedSelector.init("systemVersion");
      pub fn systemVersion(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_systemVersion.get(), );
 }}
var sel_allowsKeyedCoding = CachedSelector.init("allowsKeyedCoding");
      pub fn allowsKeyedCoding(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsKeyedCoding.get(), );
 }}
var sel_requiresSecureCoding = CachedSelector.init("requiresSecureCoding");
      pub fn requiresSecureCoding(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requiresSecureCoding.get(), );
 }}
var sel_allowedClasses = CachedSelector.init("allowedClasses");
      pub fn allowedClasses(self: *Self, )  ?* NSSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowedClasses.get(), );
 }}
var sel_decodingFailurePolicy = CachedSelector.init("decodingFailurePolicy");
      pub fn decodingFailurePolicy(self: *Self, ) NSDecodingFailurePolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDecodingFailurePolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodingFailurePolicy.get(), );
 }}
var sel_error = CachedSelector.init("error");
      pub fn _error(self: *Self, )  ?* NSError {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSError, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_error.get(), );
 }}
var sel_encodeNXObject_ = CachedSelector.init("encodeNXObject:");
      pub fn encodeNXObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeNXObject_.get(), __object, );
 }}
var sel_decodeNXObject = CachedSelector.init("decodeNXObject");
      pub fn decodeNXObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeNXObject.get(), );
 }}
var sel_decodeValueOfObjCType_at_ = CachedSelector.init("decodeValueOfObjCType:at:");
      pub fn decodeValueOfObjCTypeat(self: *Self, __a_type:  [*c]  const u8, __data:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeValueOfObjCType_at_.get(), __a_type, __data, );
 }}
var sel_encodePoint_ = CachedSelector.init("encodePoint:");
      pub fn encodePoint(self: *Self, __point: CGPoint, ) void {{
           return @as(*const fn(*Self, SEL, CGPoint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodePoint_.get(), __point, );
 }}
var sel_decodePoint = CachedSelector.init("decodePoint");
      pub fn decodePoint(self: *Self, ) CGPoint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) CGPoint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodePoint.get(), );
 }}
var sel_encodeSize_ = CachedSelector.init("encodeSize:");
      pub fn encodeSize(self: *Self, __size: CGSize, ) void {{
           return @as(*const fn(*Self, SEL, CGSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeSize_.get(), __size, );
 }}
var sel_decodeSize = CachedSelector.init("decodeSize");
      pub fn decodeSize(self: *Self, ) CGSize {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) CGSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeSize.get(), );
 }}
var sel_encodeRect_ = CachedSelector.init("encodeRect:");
      pub fn encodeRect(self: *Self, __rect: CGRect, ) void {{
           return @as(*const fn(*Self, SEL, CGRect, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeRect_.get(), __rect, );
 }}
var sel_decodeRect = CachedSelector.init("decodeRect");
      pub fn decodeRect(self: *Self, ) CGRect {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) CGRect, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeRect.get(), );
 }}
var sel_encodePoint_forKey_ = CachedSelector.init("encodePoint:forKey:");
      pub fn encodePointforKey(self: *Self, __point: CGPoint, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, CGPoint,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodePoint_forKey_.get(), __point, __key, );
 }}
var sel_encodeSize_forKey_ = CachedSelector.init("encodeSize:forKey:");
      pub fn encodeSizeforKey(self: *Self, __size: CGSize, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, CGSize,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeSize_forKey_.get(), __size, __key, );
 }}
var sel_encodeRect_forKey_ = CachedSelector.init("encodeRect:forKey:");
      pub fn encodeRectforKey(self: *Self, __rect: CGRect, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, CGRect,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeRect_forKey_.get(), __rect, __key, );
 }}
var sel_decodePointForKey_ = CachedSelector.init("decodePointForKey:");
      pub fn decodePointForKey(self: *Self, __key:  * NSString, ) CGPoint {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) CGPoint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodePointForKey_.get(), __key, );
 }}
var sel_decodeSizeForKey_ = CachedSelector.init("decodeSizeForKey:");
      pub fn decodeSizeForKey(self: *Self, __key:  * NSString, ) CGSize {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) CGSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeSizeForKey_.get(), __key, );
 }}
var sel_decodeRectForKey_ = CachedSelector.init("decodeRectForKey:");
      pub fn decodeRectForKey(self: *Self, __key:  * NSString, ) CGRect {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) CGRect, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeRectForKey_.get(), __key, );
 }}
  };
}

pub const NSCoder = opaque {
  const Self = @This();
  pub usingnamespace NSCoderInterfaceMixin(Self, "NSCoder");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCoder");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSCoder");
};

pub fn MTLRenderPipelineReflectionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_vertexBindings = CachedSelector.init("vertexBindings");
      pub fn vertexBindings(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexBindings.get(), );
 }}
var sel_fragmentBindings = CachedSelector.init("fragmentBindings");
      pub fn fragmentBindings(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentBindings.get(), );
 }}
var sel_tileBindings = CachedSelector.init("tileBindings");
      pub fn tileBindings(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tileBindings.get(), );
 }}
var sel_objectBindings = CachedSelector.init("objectBindings");
      pub fn objectBindings(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectBindings.get(), );
 }}
var sel_meshBindings = CachedSelector.init("meshBindings");
      pub fn meshBindings(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_meshBindings.get(), );
 }}
var sel_vertexArguments = CachedSelector.init("vertexArguments");
      pub fn vertexArguments(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexArguments.get(), );
 }}
var sel_fragmentArguments = CachedSelector.init("fragmentArguments");
      pub fn fragmentArguments(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentArguments.get(), );
 }}
var sel_tileArguments = CachedSelector.init("tileArguments");
      pub fn tileArguments(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tileArguments.get(), );
 }}
  };
}

pub const MTLRenderPipelineReflection = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPipelineReflectionInterfaceMixin(Self, "MTLRenderPipelineReflection");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPipelineReflection");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPipelineReflection");
};

pub fn MTLVertexAttributeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_attributeIndex = CachedSelector.init("attributeIndex");
      pub fn attributeIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeIndex.get(), );
 }}
var sel_attributeType = CachedSelector.init("attributeType");
      pub fn attributeType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeType.get(), );
 }}
var sel_isActive = CachedSelector.init("isActive");
      pub fn isActive(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isActive.get(), );
 }}
var sel_isPatchData = CachedSelector.init("isPatchData");
      pub fn isPatchData(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPatchData.get(), );
 }}
var sel_isPatchControlPointData = CachedSelector.init("isPatchControlPointData");
      pub fn isPatchControlPointData(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPatchControlPointData.get(), );
 }}
  };
}

pub const MTLVertexAttribute = opaque {
  const Self = @This();
  pub usingnamespace MTLVertexAttributeInterfaceMixin(Self, "MTLVertexAttribute");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLVertexAttribute");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLVertexAttribute");
};

pub fn NSUniqueIDSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_initWithContainerClassDescription_containerSpecifier_key_uniqueID_ = CachedSelector.init("initWithContainerClassDescription:containerSpecifier:key:uniqueID:");
      pub fn initWithContainerClassDescriptioncontainerSpecifierkeyuniqueID(self: *Self, __classDesc:  * NSScriptClassDescription, __container:  ?* NSScriptObjectSpecifier, __property:  * NSString, __uniqueID: id, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptClassDescription,  ?* NSScriptObjectSpecifier,  * NSString, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContainerClassDescription_containerSpecifier_key_uniqueID_.get(), __classDesc, __container, __property, __uniqueID, );
 }}
var sel_uniqueID = CachedSelector.init("uniqueID");
      pub fn uniqueID(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uniqueID.get(), );
 }}
var sel_setUniqueID_ = CachedSelector.init("setUniqueID:");
      pub fn setUniqueID(self: *Self, __uniqueID: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUniqueID_.get(), __uniqueID, );
 }}
  };
}

pub const NSUniqueIDSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSUniqueIDSpecifierInterfaceMixin(Self, "NSUniqueIDSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUniqueIDSpecifier");
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSUniqueIDSpecifier");
};

pub fn NSUnitIlluminanceInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_lux = CachedSelector.init("lux");
      pub fn lux()  * NSUnitIlluminance {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitIlluminance, @ptrCast(&objc_msgSend))(class.get(), sel_lux.get(), );
 }}
  };
}

pub const NSUnitIlluminance = opaque {
  const Self = @This();
  pub usingnamespace NSUnitIlluminanceInterfaceMixin(Self, "NSUnitIlluminance");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitIlluminance");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitIlluminance");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitIlluminance");
};

pub fn NSMessagePortNameServerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sharedInstance = CachedSelector.init("sharedInstance");
      pub fn sharedInstance() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_sharedInstance.get(), );
 }}
var sel_portForName_ = CachedSelector.init("portForName:");
      pub fn portForName(self: *Self, __name:  * NSString, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portForName_.get(), __name, );
 }}
var sel_portForName_host_ = CachedSelector.init("portForName:host:");
      pub fn portForNamehost(self: *Self, __name:  * NSString, __host:  ?* NSString, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portForName_host_.get(), __name, __host, );
 }}
  };
}

pub const NSMessagePortNameServer = opaque {
  const Self = @This();
  pub usingnamespace NSMessagePortNameServerInterfaceMixin(Self, "NSMessagePortNameServer");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMessagePortNameServer");
  pub usingnamespace NSPortNameServerInterfaceMixin(Self, "NSMessagePortNameServer");
};

pub fn NSScriptWhoseTestInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_isTrue = CachedSelector.init("isTrue");
      pub fn isTrue(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isTrue.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
  };
}

pub const NSScriptWhoseTest = opaque {
  const Self = @This();
  pub usingnamespace NSScriptWhoseTestInterfaceMixin(Self, "NSScriptWhoseTest");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSScriptWhoseTest");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSScriptWhoseTest");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSScriptWhoseTest");
};

pub fn NSRelativeSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier_ = CachedSelector.init("initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:");
      pub fn initWithContainerClassDescriptioncontainerSpecifierkeyrelativePositionbaseSpecifier(self: *Self, __classDesc:  * NSScriptClassDescription, __container:  ?* NSScriptObjectSpecifier, __property:  * NSString, __relPos: NSRelativePosition, __baseSpecifier:  ?* NSScriptObjectSpecifier, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptClassDescription,  ?* NSScriptObjectSpecifier,  * NSString, NSRelativePosition,  ?* NSScriptObjectSpecifier, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier_.get(), __classDesc, __container, __property, __relPos, __baseSpecifier, );
 }}
var sel_relativePosition = CachedSelector.init("relativePosition");
      pub fn relativePosition(self: *Self, ) NSRelativePosition {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSRelativePosition, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_relativePosition.get(), );
 }}
var sel_setRelativePosition_ = CachedSelector.init("setRelativePosition:");
      pub fn setRelativePosition(self: *Self, __relativePosition: NSRelativePosition, ) void {{
           return @as(*const fn(*Self, SEL, NSRelativePosition, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRelativePosition_.get(), __relativePosition, );
 }}
var sel_baseSpecifier = CachedSelector.init("baseSpecifier");
      pub fn baseSpecifier(self: *Self, )  ?* NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_baseSpecifier.get(), );
 }}
var sel_setBaseSpecifier_ = CachedSelector.init("setBaseSpecifier:");
      pub fn setBaseSpecifier(self: *Self, __baseSpecifier:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBaseSpecifier_.get(), __baseSpecifier, );
 }}
  };
}

pub const NSRelativeSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSRelativeSpecifierInterfaceMixin(Self, "NSRelativeSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSRelativeSpecifier");
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSRelativeSpecifier");
};

pub fn NSMapTableInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithKeyOptions_valueOptions_capacity_ = CachedSelector.init("initWithKeyOptions:valueOptions:capacity:");
      pub fn initWithKeyOptionsvalueOptionscapacity(self: *Self, __keyOptions: NSPointerFunctionsOptions, __valueOptions: NSPointerFunctionsOptions, __initialCapacity: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, NSPointerFunctionsOptions, NSPointerFunctionsOptions, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKeyOptions_valueOptions_capacity_.get(), __keyOptions, __valueOptions, __initialCapacity, );
 }}
var sel_initWithKeyPointerFunctions_valuePointerFunctions_capacity_ = CachedSelector.init("initWithKeyPointerFunctions:valuePointerFunctions:capacity:");
      pub fn initWithKeyPointerFunctionsvaluePointerFunctionscapacity(self: *Self, __keyFunctions:  * NSPointerFunctions, __valueFunctions:  * NSPointerFunctions, __initialCapacity: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSPointerFunctions,  * NSPointerFunctions, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKeyPointerFunctions_valuePointerFunctions_capacity_.get(), __keyFunctions, __valueFunctions, __initialCapacity, );
 }}
var sel_mapTableWithKeyOptions_valueOptions_ = CachedSelector.init("mapTableWithKeyOptions:valueOptions:");
      pub fn mapTableWithKeyOptionsvalueOptions(__keyOptions: NSPointerFunctionsOptions, __valueOptions: NSPointerFunctionsOptions, )  * NSMapTable {{
           return @as(*const fn(Class, SEL, NSPointerFunctionsOptions, NSPointerFunctionsOptions, ) callconv(.C)  * NSMapTable, @ptrCast(&objc_msgSend))(class.get(), sel_mapTableWithKeyOptions_valueOptions_.get(), __keyOptions, __valueOptions, );
 }}
var sel_mapTableWithStrongToStrongObjects = CachedSelector.init("mapTableWithStrongToStrongObjects");
      pub fn mapTableWithStrongToStrongObjects() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_mapTableWithStrongToStrongObjects.get(), );
 }}
var sel_mapTableWithWeakToStrongObjects = CachedSelector.init("mapTableWithWeakToStrongObjects");
      pub fn mapTableWithWeakToStrongObjects() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_mapTableWithWeakToStrongObjects.get(), );
 }}
var sel_mapTableWithStrongToWeakObjects = CachedSelector.init("mapTableWithStrongToWeakObjects");
      pub fn mapTableWithStrongToWeakObjects() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_mapTableWithStrongToWeakObjects.get(), );
 }}
var sel_mapTableWithWeakToWeakObjects = CachedSelector.init("mapTableWithWeakToWeakObjects");
      pub fn mapTableWithWeakToWeakObjects() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_mapTableWithWeakToWeakObjects.get(), );
 }}
var sel_strongToStrongObjectsMapTable = CachedSelector.init("strongToStrongObjectsMapTable");
      pub fn strongToStrongObjectsMapTable()  * NSMapTable {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMapTable, @ptrCast(&objc_msgSend))(class.get(), sel_strongToStrongObjectsMapTable.get(), );
 }}
var sel_weakToStrongObjectsMapTable = CachedSelector.init("weakToStrongObjectsMapTable");
      pub fn weakToStrongObjectsMapTable()  * NSMapTable {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMapTable, @ptrCast(&objc_msgSend))(class.get(), sel_weakToStrongObjectsMapTable.get(), );
 }}
var sel_strongToWeakObjectsMapTable = CachedSelector.init("strongToWeakObjectsMapTable");
      pub fn strongToWeakObjectsMapTable()  * NSMapTable {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMapTable, @ptrCast(&objc_msgSend))(class.get(), sel_strongToWeakObjectsMapTable.get(), );
 }}
var sel_weakToWeakObjectsMapTable = CachedSelector.init("weakToWeakObjectsMapTable");
      pub fn weakToWeakObjectsMapTable()  * NSMapTable {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMapTable, @ptrCast(&objc_msgSend))(class.get(), sel_weakToWeakObjectsMapTable.get(), );
 }}
var sel_objectForKey_ = CachedSelector.init("objectForKey:");
      pub fn objectForKey(self: *Self, __aKey: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectForKey_.get(), __aKey, );
 }}
var sel_removeObjectForKey_ = CachedSelector.init("removeObjectForKey:");
      pub fn removeObjectForKey(self: *Self, __aKey: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectForKey_.get(), __aKey, );
 }}
var sel_setObject_forKey_ = CachedSelector.init("setObject:forKey:");
      pub fn setObjectforKey(self: *Self, __anObject: id, __aKey: id, ) void {{
           return @as(*const fn(*Self, SEL, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_forKey_.get(), __anObject, __aKey, );
 }}
var sel_keyEnumerator = CachedSelector.init("keyEnumerator");
      pub fn keyEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keyEnumerator.get(), );
 }}
var sel_objectEnumerator = CachedSelector.init("objectEnumerator");
      pub fn objectEnumerator(self: *Self, )  ?* NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectEnumerator.get(), );
 }}
var sel_removeAllObjects = CachedSelector.init("removeAllObjects");
      pub fn removeAllObjects(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllObjects.get(), );
 }}
var sel_dictionaryRepresentation = CachedSelector.init("dictionaryRepresentation");
      pub fn dictionaryRepresentation(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dictionaryRepresentation.get(), );
 }}
var sel_keyPointerFunctions = CachedSelector.init("keyPointerFunctions");
      pub fn keyPointerFunctions(self: *Self, )  * NSPointerFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSPointerFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keyPointerFunctions.get(), );
 }}
var sel_valuePointerFunctions = CachedSelector.init("valuePointerFunctions");
      pub fn valuePointerFunctions(self: *Self, )  * NSPointerFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSPointerFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valuePointerFunctions.get(), );
 }}
var sel_count = CachedSelector.init("count");
      pub fn count(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_count.get(), );
 }}
  };
}

pub const NSMapTable = opaque {
  const Self = @This();
  pub usingnamespace NSMapTableInterfaceMixin(Self, "NSMapTable");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSMapTable");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSMapTable");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSMapTable");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMapTable");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMapTable");
};

pub fn MTLHeapDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_size = CachedSelector.init("size");
      pub fn size(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_size.get(), );
 }}
var sel_setSize_ = CachedSelector.init("setSize:");
      pub fn setSize(self: *Self, __size: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSize_.get(), __size, );
 }}
var sel_storageMode = CachedSelector.init("storageMode");
      pub fn storageMode(self: *Self, ) MTLStorageMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStorageMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storageMode.get(), );
 }}
var sel_setStorageMode_ = CachedSelector.init("setStorageMode:");
      pub fn setStorageMode(self: *Self, __storageMode: MTLStorageMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLStorageMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStorageMode_.get(), __storageMode, );
 }}
var sel_cpuCacheMode = CachedSelector.init("cpuCacheMode");
      pub fn cpuCacheMode(self: *Self, ) MTLCPUCacheMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCPUCacheMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cpuCacheMode.get(), );
 }}
var sel_setCpuCacheMode_ = CachedSelector.init("setCpuCacheMode:");
      pub fn setCpuCacheMode(self: *Self, __cpuCacheMode: MTLCPUCacheMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLCPUCacheMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCpuCacheMode_.get(), __cpuCacheMode, );
 }}
var sel_sparsePageSize = CachedSelector.init("sparsePageSize");
      pub fn sparsePageSize(self: *Self, ) MTLSparsePageSize {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSparsePageSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sparsePageSize.get(), );
 }}
var sel_setSparsePageSize_ = CachedSelector.init("setSparsePageSize:");
      pub fn setSparsePageSize(self: *Self, __sparsePageSize: MTLSparsePageSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSparsePageSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSparsePageSize_.get(), __sparsePageSize, );
 }}
var sel_hazardTrackingMode = CachedSelector.init("hazardTrackingMode");
      pub fn hazardTrackingMode(self: *Self, ) MTLHazardTrackingMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLHazardTrackingMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hazardTrackingMode.get(), );
 }}
var sel_setHazardTrackingMode_ = CachedSelector.init("setHazardTrackingMode:");
      pub fn setHazardTrackingMode(self: *Self, __hazardTrackingMode: MTLHazardTrackingMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLHazardTrackingMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHazardTrackingMode_.get(), __hazardTrackingMode, );
 }}
var sel_resourceOptions = CachedSelector.init("resourceOptions");
      pub fn resourceOptions(self: *Self, ) MTLResourceOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLResourceOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceOptions.get(), );
 }}
var sel_setResourceOptions_ = CachedSelector.init("setResourceOptions:");
      pub fn setResourceOptions(self: *Self, __resourceOptions: MTLResourceOptions, ) void {{
           return @as(*const fn(*Self, SEL, MTLResourceOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResourceOptions_.get(), __resourceOptions, );
 }}
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, ) MTLHeapType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLHeapType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
var sel_setType_ = CachedSelector.init("setType:");
      pub fn setType(self: *Self, __a_type: MTLHeapType, ) void {{
           return @as(*const fn(*Self, SEL, MTLHeapType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setType_.get(), __a_type, );
 }}
  };
}

pub const MTLHeapDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLHeapDescriptorInterfaceMixin(Self, "MTLHeapDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLHeapDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLHeapDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLHeapDescriptor");
};

pub fn NSURLCredentialStorageInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_credentialsForProtectionSpace_ = CachedSelector.init("credentialsForProtectionSpace:");
      pub fn credentialsForProtectionSpace(self: *Self, __space:  * NSURLProtectionSpace, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSURLProtectionSpace, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_credentialsForProtectionSpace_.get(), __space, );
 }}
var sel_setCredential_forProtectionSpace_ = CachedSelector.init("setCredential:forProtectionSpace:");
      pub fn setCredentialforProtectionSpace(self: *Self, __credential:  * NSURLCredential, __space:  * NSURLProtectionSpace, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLCredential,  * NSURLProtectionSpace, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCredential_forProtectionSpace_.get(), __credential, __space, );
 }}
var sel_removeCredential_forProtectionSpace_ = CachedSelector.init("removeCredential:forProtectionSpace:");
      pub fn removeCredentialforProtectionSpace(self: *Self, __credential:  * NSURLCredential, __space:  * NSURLProtectionSpace, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLCredential,  * NSURLProtectionSpace, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCredential_forProtectionSpace_.get(), __credential, __space, );
 }}
var sel_removeCredential_forProtectionSpace_options_ = CachedSelector.init("removeCredential:forProtectionSpace:options:");
      pub fn removeCredentialforProtectionSpaceoptions(self: *Self, __credential:  * NSURLCredential, __space:  * NSURLProtectionSpace, __options:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLCredential,  * NSURLProtectionSpace,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCredential_forProtectionSpace_options_.get(), __credential, __space, __options, );
 }}
var sel_defaultCredentialForProtectionSpace_ = CachedSelector.init("defaultCredentialForProtectionSpace:");
      pub fn defaultCredentialForProtectionSpace(self: *Self, __space:  * NSURLProtectionSpace, )  ?* NSURLCredential {{
           return @as(*const fn(*Self, SEL,  * NSURLProtectionSpace, ) callconv(.C)  ?* NSURLCredential, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_defaultCredentialForProtectionSpace_.get(), __space, );
 }}
var sel_setDefaultCredential_forProtectionSpace_ = CachedSelector.init("setDefaultCredential:forProtectionSpace:");
      pub fn setDefaultCredentialforProtectionSpace(self: *Self, __credential:  * NSURLCredential, __space:  * NSURLProtectionSpace, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLCredential,  * NSURLProtectionSpace, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDefaultCredential_forProtectionSpace_.get(), __credential, __space, );
 }}
var sel_sharedCredentialStorage = CachedSelector.init("sharedCredentialStorage");
      pub fn sharedCredentialStorage()  * NSURLCredentialStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSURLCredentialStorage, @ptrCast(&objc_msgSend))(class.get(), sel_sharedCredentialStorage.get(), );
 }}
var sel_allCredentials = CachedSelector.init("allCredentials");
      pub fn allCredentials(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allCredentials.get(), );
 }}
var sel_getCredentialsForProtectionSpace_task_completionHandler_ = CachedSelector.init("getCredentialsForProtectionSpace:task:completionHandler:");
      pub fn getCredentialsForProtectionSpacetaskcompletionHandler(self: *Self, __protectionSpace:  * NSURLProtectionSpace, __task:  * NSURLSessionTask, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtectionSpace,  * NSURLSessionTask, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCredentialsForProtectionSpace_task_completionHandler_.get(), __protectionSpace, __task, __completionHandler, );
 }}
var sel_setCredential_forProtectionSpace_task_ = CachedSelector.init("setCredential:forProtectionSpace:task:");
      pub fn setCredentialforProtectionSpacetask(self: *Self, __credential:  * NSURLCredential, __protectionSpace:  * NSURLProtectionSpace, __task:  * NSURLSessionTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLCredential,  * NSURLProtectionSpace,  * NSURLSessionTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCredential_forProtectionSpace_task_.get(), __credential, __protectionSpace, __task, );
 }}
var sel_removeCredential_forProtectionSpace_options_task_ = CachedSelector.init("removeCredential:forProtectionSpace:options:task:");
      pub fn removeCredentialforProtectionSpaceoptionstask(self: *Self, __credential:  * NSURLCredential, __protectionSpace:  * NSURLProtectionSpace, __options:  ?* NSDictionary, __task:  * NSURLSessionTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLCredential,  * NSURLProtectionSpace,  ?* NSDictionary,  * NSURLSessionTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCredential_forProtectionSpace_options_task_.get(), __credential, __protectionSpace, __options, __task, );
 }}
var sel_getDefaultCredentialForProtectionSpace_task_completionHandler_ = CachedSelector.init("getDefaultCredentialForProtectionSpace:task:completionHandler:");
      pub fn getDefaultCredentialForProtectionSpacetaskcompletionHandler(self: *Self, __space:  * NSURLProtectionSpace, __task:  * NSURLSessionTask, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLProtectionSpace,  * NSURLSessionTask, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getDefaultCredentialForProtectionSpace_task_completionHandler_.get(), __space, __task, __completionHandler, );
 }}
var sel_setDefaultCredential_forProtectionSpace_task_ = CachedSelector.init("setDefaultCredential:forProtectionSpace:task:");
      pub fn setDefaultCredentialforProtectionSpacetask(self: *Self, __credential:  * NSURLCredential, __protectionSpace:  * NSURLProtectionSpace, __task:  * NSURLSessionTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLCredential,  * NSURLProtectionSpace,  * NSURLSessionTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDefaultCredential_forProtectionSpace_task_.get(), __credential, __protectionSpace, __task, );
 }}
  };
}

pub const NSURLCredentialStorage = opaque {
  const Self = @This();
  pub usingnamespace NSURLCredentialStorageInterfaceMixin(Self, "NSURLCredentialStorage");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLCredentialStorage");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLCredentialStorage");
};

pub fn NSURLProtectionSpaceInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithHost_port_protocol_realm_authenticationMethod_ = CachedSelector.init("initWithHost:port:protocol:realm:authenticationMethod:");
      pub fn initWithHostportprotocolrealmauthenticationMethod(self: *Self, __host:  * NSString, __port: c_long, __protocol:  ?* NSString, __realm:  ?* NSString, __authenticationMethod:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, c_long,  ?* NSString,  ?* NSString,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithHost_port_protocol_realm_authenticationMethod_.get(), __host, __port, __protocol, __realm, __authenticationMethod, );
 }}
var sel_initWithProxyHost_port_type_realm_authenticationMethod_ = CachedSelector.init("initWithProxyHost:port:type:realm:authenticationMethod:");
      pub fn initWithProxyHostporttyperealmauthenticationMethod(self: *Self, __host:  * NSString, __port: c_long, __a_type:  ?* NSString, __realm:  ?* NSString, __authenticationMethod:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, c_long,  ?* NSString,  ?* NSString,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithProxyHost_port_type_realm_authenticationMethod_.get(), __host, __port, __a_type, __realm, __authenticationMethod, );
 }}
var sel_realm = CachedSelector.init("realm");
      pub fn realm(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_realm.get(), );
 }}
var sel_receivesCredentialSecurely = CachedSelector.init("receivesCredentialSecurely");
      pub fn receivesCredentialSecurely(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_receivesCredentialSecurely.get(), );
 }}
var sel_isProxy = CachedSelector.init("isProxy");
      pub fn isProxy(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isProxy.get(), );
 }}
var sel_host = CachedSelector.init("host");
      pub fn host(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_host.get(), );
 }}
var sel_port = CachedSelector.init("port");
      pub fn port(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_port.get(), );
 }}
var sel_proxyType = CachedSelector.init("proxyType");
      pub fn proxyType(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_proxyType.get(), );
 }}
var sel_protocol = CachedSelector.init("protocol");
      pub fn protocol(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_protocol.get(), );
 }}
var sel_authenticationMethod = CachedSelector.init("authenticationMethod");
      pub fn authenticationMethod(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_authenticationMethod.get(), );
 }}
var sel_distinguishedNames = CachedSelector.init("distinguishedNames");
      pub fn distinguishedNames(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_distinguishedNames.get(), );
 }}
var sel_serverTrust = CachedSelector.init("serverTrust");
      pub fn serverTrust(self: *Self, )  [*c] __SecTrust {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] __SecTrust, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_serverTrust.get(), );
 }}
  };
}

pub const NSURLProtectionSpace = opaque {
  const Self = @This();
  pub usingnamespace NSURLProtectionSpaceInterfaceMixin(Self, "NSURLProtectionSpace");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSURLProtectionSpace");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSURLProtectionSpace");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLProtectionSpace");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLProtectionSpace");
};

pub fn NSLocaleInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectForKey_ = CachedSelector.init("objectForKey:");
      pub fn objectForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectForKey_.get(), __key, );
 }}
var sel_displayNameForKey_value_ = CachedSelector.init("displayNameForKey:value:");
      pub fn displayNameForKeyvalue(self: *Self, __key:  * NSString, __value: id, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, id, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_displayNameForKey_value_.get(), __key, __value, );
 }}
var sel_initWithLocaleIdentifier_ = CachedSelector.init("initWithLocaleIdentifier:");
      pub fn initWithLocaleIdentifier(self: *Self, __string:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithLocaleIdentifier_.get(), __string, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_localizedStringForLocaleIdentifier_ = CachedSelector.init("localizedStringForLocaleIdentifier:");
      pub fn localizedStringForLocaleIdentifier(self: *Self, __localeIdentifier:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForLocaleIdentifier_.get(), __localeIdentifier, );
 }}
var sel_localizedStringForLanguageCode_ = CachedSelector.init("localizedStringForLanguageCode:");
      pub fn localizedStringForLanguageCode(self: *Self, __languageCode:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForLanguageCode_.get(), __languageCode, );
 }}
var sel_localizedStringForCountryCode_ = CachedSelector.init("localizedStringForCountryCode:");
      pub fn localizedStringForCountryCode(self: *Self, __countryCode:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForCountryCode_.get(), __countryCode, );
 }}
var sel_localizedStringForScriptCode_ = CachedSelector.init("localizedStringForScriptCode:");
      pub fn localizedStringForScriptCode(self: *Self, __scriptCode:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForScriptCode_.get(), __scriptCode, );
 }}
var sel_localizedStringForVariantCode_ = CachedSelector.init("localizedStringForVariantCode:");
      pub fn localizedStringForVariantCode(self: *Self, __variantCode:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForVariantCode_.get(), __variantCode, );
 }}
var sel_localizedStringForCalendarIdentifier_ = CachedSelector.init("localizedStringForCalendarIdentifier:");
      pub fn localizedStringForCalendarIdentifier(self: *Self, __calendarIdentifier:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForCalendarIdentifier_.get(), __calendarIdentifier, );
 }}
var sel_localizedStringForCollationIdentifier_ = CachedSelector.init("localizedStringForCollationIdentifier:");
      pub fn localizedStringForCollationIdentifier(self: *Self, __collationIdentifier:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForCollationIdentifier_.get(), __collationIdentifier, );
 }}
var sel_localizedStringForCurrencyCode_ = CachedSelector.init("localizedStringForCurrencyCode:");
      pub fn localizedStringForCurrencyCode(self: *Self, __currencyCode:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForCurrencyCode_.get(), __currencyCode, );
 }}
var sel_localizedStringForCollatorIdentifier_ = CachedSelector.init("localizedStringForCollatorIdentifier:");
      pub fn localizedStringForCollatorIdentifier(self: *Self, __collatorIdentifier:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForCollatorIdentifier_.get(), __collatorIdentifier, );
 }}
var sel_localeIdentifier = CachedSelector.init("localeIdentifier");
      pub fn localeIdentifier(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localeIdentifier.get(), );
 }}
var sel_languageCode = CachedSelector.init("languageCode");
      pub fn languageCode(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_languageCode.get(), );
 }}
var sel_languageIdentifier = CachedSelector.init("languageIdentifier");
      pub fn languageIdentifier(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_languageIdentifier.get(), );
 }}
var sel_countryCode = CachedSelector.init("countryCode");
      pub fn countryCode(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countryCode.get(), );
 }}
var sel_regionCode = CachedSelector.init("regionCode");
      pub fn regionCode(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_regionCode.get(), );
 }}
var sel_scriptCode = CachedSelector.init("scriptCode");
      pub fn scriptCode(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptCode.get(), );
 }}
var sel_variantCode = CachedSelector.init("variantCode");
      pub fn variantCode(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_variantCode.get(), );
 }}
var sel_exemplarCharacterSet = CachedSelector.init("exemplarCharacterSet");
      pub fn exemplarCharacterSet(self: *Self, )  * NSCharacterSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSCharacterSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_exemplarCharacterSet.get(), );
 }}
var sel_calendarIdentifier = CachedSelector.init("calendarIdentifier");
      pub fn calendarIdentifier(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_calendarIdentifier.get(), );
 }}
var sel_collationIdentifier = CachedSelector.init("collationIdentifier");
      pub fn collationIdentifier(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_collationIdentifier.get(), );
 }}
var sel_usesMetricSystem = CachedSelector.init("usesMetricSystem");
      pub fn usesMetricSystem(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_usesMetricSystem.get(), );
 }}
var sel_decimalSeparator = CachedSelector.init("decimalSeparator");
      pub fn decimalSeparator(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalSeparator.get(), );
 }}
var sel_groupingSeparator = CachedSelector.init("groupingSeparator");
      pub fn groupingSeparator(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_groupingSeparator.get(), );
 }}
var sel_currencySymbol = CachedSelector.init("currencySymbol");
      pub fn currencySymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currencySymbol.get(), );
 }}
var sel_currencyCode = CachedSelector.init("currencyCode");
      pub fn currencyCode(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currencyCode.get(), );
 }}
var sel_collatorIdentifier = CachedSelector.init("collatorIdentifier");
      pub fn collatorIdentifier(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_collatorIdentifier.get(), );
 }}
var sel_quotationBeginDelimiter = CachedSelector.init("quotationBeginDelimiter");
      pub fn quotationBeginDelimiter(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_quotationBeginDelimiter.get(), );
 }}
var sel_quotationEndDelimiter = CachedSelector.init("quotationEndDelimiter");
      pub fn quotationEndDelimiter(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_quotationEndDelimiter.get(), );
 }}
var sel_alternateQuotationBeginDelimiter = CachedSelector.init("alternateQuotationBeginDelimiter");
      pub fn alternateQuotationBeginDelimiter(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_alternateQuotationBeginDelimiter.get(), );
 }}
var sel_alternateQuotationEndDelimiter = CachedSelector.init("alternateQuotationEndDelimiter");
      pub fn alternateQuotationEndDelimiter(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_alternateQuotationEndDelimiter.get(), );
 }}
var sel_localeWithLocaleIdentifier_ = CachedSelector.init("localeWithLocaleIdentifier:");
      pub fn localeWithLocaleIdentifier(__ident:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_localeWithLocaleIdentifier_.get(), __ident, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_autoupdatingCurrentLocale = CachedSelector.init("autoupdatingCurrentLocale");
      pub fn autoupdatingCurrentLocale()  * NSLocale {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(class.get(), sel_autoupdatingCurrentLocale.get(), );
 }}
var sel_currentLocale = CachedSelector.init("currentLocale");
      pub fn currentLocale()  * NSLocale {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(class.get(), sel_currentLocale.get(), );
 }}
var sel_systemLocale = CachedSelector.init("systemLocale");
      pub fn systemLocale()  * NSLocale {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(class.get(), sel_systemLocale.get(), );
 }}
var sel_componentsFromLocaleIdentifier_ = CachedSelector.init("componentsFromLocaleIdentifier:");
      pub fn componentsFromLocaleIdentifier(__string:  * NSString, )  * NSDictionary {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_componentsFromLocaleIdentifier_.get(), __string, );
 }}
var sel_localeIdentifierFromComponents_ = CachedSelector.init("localeIdentifierFromComponents:");
      pub fn localeIdentifierFromComponents(__dict:  * NSDictionary, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSDictionary, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localeIdentifierFromComponents_.get(), __dict, );
 }}
var sel_canonicalLocaleIdentifierFromString_ = CachedSelector.init("canonicalLocaleIdentifierFromString:");
      pub fn canonicalLocaleIdentifierFromString(__string:  * NSString, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_canonicalLocaleIdentifierFromString_.get(), __string, );
 }}
var sel_canonicalLanguageIdentifierFromString_ = CachedSelector.init("canonicalLanguageIdentifierFromString:");
      pub fn canonicalLanguageIdentifierFromString(__string:  * NSString, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_canonicalLanguageIdentifierFromString_.get(), __string, );
 }}
var sel_localeIdentifierFromWindowsLocaleCode_ = CachedSelector.init("localeIdentifierFromWindowsLocaleCode:");
      pub fn localeIdentifierFromWindowsLocaleCode(__lcid: c_uint, )  ?* NSString {{
           return @as(*const fn(Class, SEL, c_uint, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localeIdentifierFromWindowsLocaleCode_.get(), __lcid, );
 }}
var sel_windowsLocaleCodeFromLocaleIdentifier_ = CachedSelector.init("windowsLocaleCodeFromLocaleIdentifier:");
      pub fn windowsLocaleCodeFromLocaleIdentifier(__localeIdentifier:  * NSString, ) c_uint {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(class.get(), sel_windowsLocaleCodeFromLocaleIdentifier_.get(), __localeIdentifier, );
 }}
var sel_characterDirectionForLanguage_ = CachedSelector.init("characterDirectionForLanguage:");
      pub fn characterDirectionForLanguage(__isoLangCode:  * NSString, ) NSLocaleLanguageDirection {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) NSLocaleLanguageDirection, @ptrCast(&objc_msgSend))(class.get(), sel_characterDirectionForLanguage_.get(), __isoLangCode, );
 }}
var sel_lineDirectionForLanguage_ = CachedSelector.init("lineDirectionForLanguage:");
      pub fn lineDirectionForLanguage(__isoLangCode:  * NSString, ) NSLocaleLanguageDirection {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) NSLocaleLanguageDirection, @ptrCast(&objc_msgSend))(class.get(), sel_lineDirectionForLanguage_.get(), __isoLangCode, );
 }}
var sel_availableLocaleIdentifiers = CachedSelector.init("availableLocaleIdentifiers");
      pub fn availableLocaleIdentifiers()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_availableLocaleIdentifiers.get(), );
 }}
var sel_ISOLanguageCodes = CachedSelector.init("ISOLanguageCodes");
      pub fn ISOLanguageCodes()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_ISOLanguageCodes.get(), );
 }}
var sel_ISOCountryCodes = CachedSelector.init("ISOCountryCodes");
      pub fn ISOCountryCodes()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_ISOCountryCodes.get(), );
 }}
var sel_ISOCurrencyCodes = CachedSelector.init("ISOCurrencyCodes");
      pub fn ISOCurrencyCodes()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_ISOCurrencyCodes.get(), );
 }}
var sel_commonISOCurrencyCodes = CachedSelector.init("commonISOCurrencyCodes");
      pub fn commonISOCurrencyCodes()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_commonISOCurrencyCodes.get(), );
 }}
var sel_preferredLanguages = CachedSelector.init("preferredLanguages");
      pub fn preferredLanguages()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_preferredLanguages.get(), );
 }}
  };
}

pub const NSLocale = opaque {
  const Self = @This();
  pub usingnamespace NSLocaleInterfaceMixin(Self, "NSLocale");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSLocale");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSLocale");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSLocale");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSLocale");
};

pub fn NSNumberInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_initWithChar_ = CachedSelector.init("initWithChar:");
      pub fn initWithChar(self: *Self, __value: u8, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, u8, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithChar_.get(), __value, );
 }}
var sel_initWithUnsignedChar_ = CachedSelector.init("initWithUnsignedChar:");
      pub fn initWithUnsignedChar(self: *Self, __value: u8, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, u8, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUnsignedChar_.get(), __value, );
 }}
var sel_initWithShort_ = CachedSelector.init("initWithShort:");
      pub fn initWithShort(self: *Self, __value: c_short, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_short, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithShort_.get(), __value, );
 }}
var sel_initWithUnsignedShort_ = CachedSelector.init("initWithUnsignedShort:");
      pub fn initWithUnsignedShort(self: *Self, __value: c_ushort, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_ushort, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUnsignedShort_.get(), __value, );
 }}
var sel_initWithInt_ = CachedSelector.init("initWithInt:");
      pub fn initWithInt(self: *Self, __value: c_int, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithInt_.get(), __value, );
 }}
var sel_initWithUnsignedInt_ = CachedSelector.init("initWithUnsignedInt:");
      pub fn initWithUnsignedInt(self: *Self, __value: c_uint, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUnsignedInt_.get(), __value, );
 }}
var sel_initWithLong_ = CachedSelector.init("initWithLong:");
      pub fn initWithLong(self: *Self, __value: c_long, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithLong_.get(), __value, );
 }}
var sel_initWithUnsignedLong_ = CachedSelector.init("initWithUnsignedLong:");
      pub fn initWithUnsignedLong(self: *Self, __value: c_ulong, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUnsignedLong_.get(), __value, );
 }}
var sel_initWithLongLong_ = CachedSelector.init("initWithLongLong:");
      pub fn initWithLongLong(self: *Self, __value: c_longlong, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_longlong, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithLongLong_.get(), __value, );
 }}
var sel_initWithUnsignedLongLong_ = CachedSelector.init("initWithUnsignedLongLong:");
      pub fn initWithUnsignedLongLong(self: *Self, __value: c_ulonglong, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_ulonglong, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUnsignedLongLong_.get(), __value, );
 }}
var sel_initWithFloat_ = CachedSelector.init("initWithFloat:");
      pub fn initWithFloat(self: *Self, __value: f32, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, f32, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFloat_.get(), __value, );
 }}
var sel_initWithDouble_ = CachedSelector.init("initWithDouble:");
      pub fn initWithDouble(self: *Self, __value: f64, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDouble_.get(), __value, );
 }}
var sel_initWithBool_ = CachedSelector.init("initWithBool:");
      pub fn initWithBool(self: *Self, __value: c_int, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithBool_.get(), __value, );
 }}
var sel_initWithInteger_ = CachedSelector.init("initWithInteger:");
      pub fn initWithInteger(self: *Self, __value: c_long, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithInteger_.get(), __value, );
 }}
var sel_initWithUnsignedInteger_ = CachedSelector.init("initWithUnsignedInteger:");
      pub fn initWithUnsignedInteger(self: *Self, __value: c_ulong, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUnsignedInteger_.get(), __value, );
 }}
var sel_compare_ = CachedSelector.init("compare:");
      pub fn compare(self: *Self, __otherNumber:  * NSNumber, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSNumber, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_.get(), __otherNumber, );
 }}
var sel_isEqualToNumber_ = CachedSelector.init("isEqualToNumber:");
      pub fn isEqualToNumber(self: *Self, __number:  * NSNumber, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSNumber, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToNumber_.get(), __number, );
 }}
var sel_descriptionWithLocale_ = CachedSelector.init("descriptionWithLocale:");
      pub fn descriptionWithLocale(self: *Self, __locale: id, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_.get(), __locale, );
 }}
var sel_charValue = CachedSelector.init("charValue");
      pub fn charValue(self: *Self, ) u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_charValue.get(), );
 }}
var sel_unsignedCharValue = CachedSelector.init("unsignedCharValue");
      pub fn unsignedCharValue(self: *Self, ) u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unsignedCharValue.get(), );
 }}
var sel_shortValue = CachedSelector.init("shortValue");
      pub fn shortValue(self: *Self, ) c_short {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_short, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortValue.get(), );
 }}
var sel_unsignedShortValue = CachedSelector.init("unsignedShortValue");
      pub fn unsignedShortValue(self: *Self, ) c_ushort {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ushort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unsignedShortValue.get(), );
 }}
var sel_intValue = CachedSelector.init("intValue");
      pub fn intValue(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intValue.get(), );
 }}
var sel_unsignedIntValue = CachedSelector.init("unsignedIntValue");
      pub fn unsignedIntValue(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unsignedIntValue.get(), );
 }}
var sel_longValue = CachedSelector.init("longValue");
      pub fn longValue(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_longValue.get(), );
 }}
var sel_unsignedLongValue = CachedSelector.init("unsignedLongValue");
      pub fn unsignedLongValue(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unsignedLongValue.get(), );
 }}
var sel_longLongValue = CachedSelector.init("longLongValue");
      pub fn longLongValue(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_longLongValue.get(), );
 }}
var sel_unsignedLongLongValue = CachedSelector.init("unsignedLongLongValue");
      pub fn unsignedLongLongValue(self: *Self, ) c_ulonglong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulonglong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unsignedLongLongValue.get(), );
 }}
var sel_floatValue = CachedSelector.init("floatValue");
      pub fn floatValue(self: *Self, ) f32 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_floatValue.get(), );
 }}
var sel_doubleValue = CachedSelector.init("doubleValue");
      pub fn doubleValue(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doubleValue.get(), );
 }}
var sel_boolValue = CachedSelector.init("boolValue");
      pub fn boolValue(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boolValue.get(), );
 }}
var sel_integerValue = CachedSelector.init("integerValue");
      pub fn integerValue(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_integerValue.get(), );
 }}
var sel_unsignedIntegerValue = CachedSelector.init("unsignedIntegerValue");
      pub fn unsignedIntegerValue(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unsignedIntegerValue.get(), );
 }}
var sel_stringValue = CachedSelector.init("stringValue");
      pub fn stringValue(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringValue.get(), );
 }}
var sel_numberWithChar_ = CachedSelector.init("numberWithChar:");
      pub fn numberWithChar(__value: u8, )  * NSNumber {{
           return @as(*const fn(Class, SEL, u8, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithChar_.get(), __value, );
 }}
var sel_numberWithUnsignedChar_ = CachedSelector.init("numberWithUnsignedChar:");
      pub fn numberWithUnsignedChar(__value: u8, )  * NSNumber {{
           return @as(*const fn(Class, SEL, u8, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithUnsignedChar_.get(), __value, );
 }}
var sel_numberWithShort_ = CachedSelector.init("numberWithShort:");
      pub fn numberWithShort(__value: c_short, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_short, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithShort_.get(), __value, );
 }}
var sel_numberWithUnsignedShort_ = CachedSelector.init("numberWithUnsignedShort:");
      pub fn numberWithUnsignedShort(__value: c_ushort, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_ushort, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithUnsignedShort_.get(), __value, );
 }}
var sel_numberWithInt_ = CachedSelector.init("numberWithInt:");
      pub fn numberWithInt(__value: c_int, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_int, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithInt_.get(), __value, );
 }}
var sel_numberWithUnsignedInt_ = CachedSelector.init("numberWithUnsignedInt:");
      pub fn numberWithUnsignedInt(__value: c_uint, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_uint, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithUnsignedInt_.get(), __value, );
 }}
var sel_numberWithLong_ = CachedSelector.init("numberWithLong:");
      pub fn numberWithLong(__value: c_long, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_long, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithLong_.get(), __value, );
 }}
var sel_numberWithUnsignedLong_ = CachedSelector.init("numberWithUnsignedLong:");
      pub fn numberWithUnsignedLong(__value: c_ulong, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithUnsignedLong_.get(), __value, );
 }}
var sel_numberWithLongLong_ = CachedSelector.init("numberWithLongLong:");
      pub fn numberWithLongLong(__value: c_longlong, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_longlong, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithLongLong_.get(), __value, );
 }}
var sel_numberWithUnsignedLongLong_ = CachedSelector.init("numberWithUnsignedLongLong:");
      pub fn numberWithUnsignedLongLong(__value: c_ulonglong, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_ulonglong, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithUnsignedLongLong_.get(), __value, );
 }}
var sel_numberWithFloat_ = CachedSelector.init("numberWithFloat:");
      pub fn numberWithFloat(__value: f32, )  * NSNumber {{
           return @as(*const fn(Class, SEL, f32, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithFloat_.get(), __value, );
 }}
var sel_numberWithDouble_ = CachedSelector.init("numberWithDouble:");
      pub fn numberWithDouble(__value: f64, )  * NSNumber {{
           return @as(*const fn(Class, SEL, f64, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithDouble_.get(), __value, );
 }}
var sel_numberWithBool_ = CachedSelector.init("numberWithBool:");
      pub fn numberWithBool(__value: c_int, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_int, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithBool_.get(), __value, );
 }}
var sel_numberWithInteger_ = CachedSelector.init("numberWithInteger:");
      pub fn numberWithInteger(__value: c_long, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_long, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithInteger_.get(), __value, );
 }}
var sel_numberWithUnsignedInteger_ = CachedSelector.init("numberWithUnsignedInteger:");
      pub fn numberWithUnsignedInteger(__value: c_ulong, )  * NSNumber {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(class.get(), sel_numberWithUnsignedInteger_.get(), __value, );
 }}
var sel_decimalValue = CachedSelector.init("decimalValue");
      pub fn decimalValue(self: *Self, ) NSDecimal {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDecimal, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalValue.get(), );
 }}
  };
}

pub const NSNumber = opaque {
  const Self = @This();
  pub usingnamespace NSNumberInterfaceMixin(Self, "NSNumber");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNumber");
  pub usingnamespace NSValueInterfaceMixin(Self, "NSNumber");
};

pub fn NSDeleteCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setReceiversSpecifier_ = CachedSelector.init("setReceiversSpecifier:");
      pub fn setReceiversSpecifier(self: *Self, __receiversRef:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReceiversSpecifier_.get(), __receiversRef, );
 }}
var sel_keySpecifier = CachedSelector.init("keySpecifier");
      pub fn keySpecifier(self: *Self, )  * NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keySpecifier.get(), );
 }}
  };
}

pub const NSDeleteCommand = opaque {
  const Self = @This();
  pub usingnamespace NSDeleteCommandInterfaceMixin(Self, "NSDeleteCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDeleteCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSDeleteCommand");
};

pub fn MTLVertexAttributeDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_format = CachedSelector.init("format");
      pub fn format(self: *Self, ) MTLVertexFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLVertexFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_format.get(), );
 }}
var sel_setFormat_ = CachedSelector.init("setFormat:");
      pub fn setFormat(self: *Self, __format: MTLVertexFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLVertexFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormat_.get(), __format, );
 }}
var sel_offset = CachedSelector.init("offset");
      pub fn offset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_offset.get(), );
 }}
var sel_setOffset_ = CachedSelector.init("setOffset:");
      pub fn setOffset(self: *Self, __offset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOffset_.get(), __offset, );
 }}
var sel_bufferIndex = CachedSelector.init("bufferIndex");
      pub fn bufferIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferIndex.get(), );
 }}
var sel_setBufferIndex_ = CachedSelector.init("setBufferIndex:");
      pub fn setBufferIndex(self: *Self, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBufferIndex_.get(), __bufferIndex, );
 }}
  };
}

pub const MTLVertexAttributeDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLVertexAttributeDescriptorInterfaceMixin(Self, "MTLVertexAttributeDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLVertexAttributeDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLVertexAttributeDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLVertexAttributeDescriptor");
};

pub fn NSXPCInterfaceInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_interfaceWithProtocol_ = CachedSelector.init("interfaceWithProtocol:");
      pub fn interfaceWithProtocol(__protocol:  * Protocol, )  * NSXPCInterface {{
           return @as(*const fn(Class, SEL,  * Protocol, ) callconv(.C)  * NSXPCInterface, @ptrCast(&objc_msgSend))(class.get(), sel_interfaceWithProtocol_.get(), __protocol, );
 }}
var sel_setClasses_forSelector_argumentIndex_ofReply_ = CachedSelector.init("setClasses:forSelector:argumentIndex:ofReply:");
      pub fn setClassesforSelectorargumentIndexofReply(self: *Self, __classes:  * NSSet, __sel: SEL, __arg: c_ulong, __ofReply: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, SEL, c_ulong, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setClasses_forSelector_argumentIndex_ofReply_.get(), __classes, __sel, __arg, __ofReply, );
 }}
var sel_classesForSelector_argumentIndex_ofReply_ = CachedSelector.init("classesForSelector:argumentIndex:ofReply:");
      pub fn classesForSelectorargumentIndexofReply(self: *Self, __sel: SEL, __arg: c_ulong, __ofReply: c_int, )  * NSSet {{
           return @as(*const fn(*Self, SEL, SEL, c_ulong, c_int, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classesForSelector_argumentIndex_ofReply_.get(), __sel, __arg, __ofReply, );
 }}
var sel_setInterface_forSelector_argumentIndex_ofReply_ = CachedSelector.init("setInterface:forSelector:argumentIndex:ofReply:");
      pub fn setInterfaceforSelectorargumentIndexofReply(self: *Self, __ifc:  * NSXPCInterface, __sel: SEL, __arg: c_ulong, __ofReply: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXPCInterface, SEL, c_ulong, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInterface_forSelector_argumentIndex_ofReply_.get(), __ifc, __sel, __arg, __ofReply, );
 }}
var sel_interfaceForSelector_argumentIndex_ofReply_ = CachedSelector.init("interfaceForSelector:argumentIndex:ofReply:");
      pub fn interfaceForSelectorargumentIndexofReply(self: *Self, __sel: SEL, __arg: c_ulong, __ofReply: c_int, )  ?* NSXPCInterface {{
           return @as(*const fn(*Self, SEL, SEL, c_ulong, c_int, ) callconv(.C)  ?* NSXPCInterface, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_interfaceForSelector_argumentIndex_ofReply_.get(), __sel, __arg, __ofReply, );
 }}
var sel_setXPCType_forSelector_argumentIndex_ofReply_ = CachedSelector.init("setXPCType:forSelector:argumentIndex:ofReply:");
      pub fn setXPCTypeforSelectorargumentIndexofReply(self: *Self, __a_type:  [*c] _xpc_type_s, __sel: SEL, __arg: c_ulong, __ofReply: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] _xpc_type_s, SEL, c_ulong, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setXPCType_forSelector_argumentIndex_ofReply_.get(), __a_type, __sel, __arg, __ofReply, );
 }}
var sel_XPCTypeForSelector_argumentIndex_ofReply_ = CachedSelector.init("XPCTypeForSelector:argumentIndex:ofReply:");
      pub fn XPCTypeForSelectorargumentIndexofReply(self: *Self, __sel: SEL, __arg: c_ulong, __ofReply: c_int, )  [*c] _xpc_type_s {{
           return @as(*const fn(*Self, SEL, SEL, c_ulong, c_int, ) callconv(.C)  [*c] _xpc_type_s, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_XPCTypeForSelector_argumentIndex_ofReply_.get(), __sel, __arg, __ofReply, );
 }}
var sel_protocol = CachedSelector.init("protocol");
      pub fn protocol(self: *Self, )  * Protocol {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * Protocol, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_protocol.get(), );
 }}
var sel_setProtocol_ = CachedSelector.init("setProtocol:");
      pub fn setProtocol(self: *Self, __protocol:  * Protocol, ) void {{
           return @as(*const fn(*Self, SEL,  * Protocol, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setProtocol_.get(), __protocol, );
 }}
  };
}

pub const NSXPCInterface = opaque {
  const Self = @This();
  pub usingnamespace NSXPCInterfaceInterfaceMixin(Self, "NSXPCInterface");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXPCInterface");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSXPCInterface");
};

pub fn NSUserActivityInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithActivityType_ = CachedSelector.init("initWithActivityType:");
      pub fn initWithActivityType(self: *Self, __activityType:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithActivityType_.get(), __activityType, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_addUserInfoEntriesFromDictionary_ = CachedSelector.init("addUserInfoEntriesFromDictionary:");
      pub fn addUserInfoEntriesFromDictionary(self: *Self, __otherDictionary:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addUserInfoEntriesFromDictionary_.get(), __otherDictionary, );
 }}
var sel_becomeCurrent = CachedSelector.init("becomeCurrent");
      pub fn becomeCurrent(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_becomeCurrent.get(), );
 }}
var sel_resignCurrent = CachedSelector.init("resignCurrent");
      pub fn resignCurrent(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resignCurrent.get(), );
 }}
var sel_invalidate = CachedSelector.init("invalidate");
      pub fn invalidate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invalidate.get(), );
 }}
var sel_getContinuationStreamsWithCompletionHandler_ = CachedSelector.init("getContinuationStreamsWithCompletionHandler:");
      pub fn getContinuationStreamsWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getContinuationStreamsWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler_ = CachedSelector.init("deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:");
      pub fn deleteSavedUserActivitiesWithPersistentIdentifierscompletionHandler(__persistentIdentifiers:  * NSArray, __handler: ?*u8, ) void {{
           return @as(*const fn(Class, SEL,  * NSArray, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler_.get(), __persistentIdentifiers, __handler, );
 }}
var sel_deleteAllSavedUserActivitiesWithCompletionHandler_ = CachedSelector.init("deleteAllSavedUserActivitiesWithCompletionHandler:");
      pub fn deleteAllSavedUserActivitiesWithCompletionHandler(__handler: ?*u8, ) void {{
           return @as(*const fn(Class, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_deleteAllSavedUserActivitiesWithCompletionHandler_.get(), __handler, );
 }}
var sel_activityType = CachedSelector.init("activityType");
      pub fn activityType(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_activityType.get(), );
 }}
var sel_title = CachedSelector.init("title");
      pub fn title(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_title.get(), );
 }}
var sel_setTitle_ = CachedSelector.init("setTitle:");
      pub fn setTitle(self: *Self, __title:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTitle_.get(), __title, );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
var sel_setUserInfo_ = CachedSelector.init("setUserInfo:");
      pub fn setUserInfo(self: *Self, __userInfo:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUserInfo_.get(), __userInfo, );
 }}
var sel_requiredUserInfoKeys = CachedSelector.init("requiredUserInfoKeys");
      pub fn requiredUserInfoKeys(self: *Self, )  ?* NSSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requiredUserInfoKeys.get(), );
 }}
var sel_setRequiredUserInfoKeys_ = CachedSelector.init("setRequiredUserInfoKeys:");
      pub fn setRequiredUserInfoKeys(self: *Self, __requiredUserInfoKeys:  ?* NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRequiredUserInfoKeys_.get(), __requiredUserInfoKeys, );
 }}
var sel_needsSave = CachedSelector.init("needsSave");
      pub fn needsSave(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_needsSave.get(), );
 }}
var sel_setNeedsSave_ = CachedSelector.init("setNeedsSave:");
      pub fn setNeedsSave(self: *Self, __needsSave: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNeedsSave_.get(), __needsSave, );
 }}
var sel_webpageURL = CachedSelector.init("webpageURL");
      pub fn webpageURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_webpageURL.get(), );
 }}
var sel_setWebpageURL_ = CachedSelector.init("setWebpageURL:");
      pub fn setWebpageURL(self: *Self, __webpageURL:  ?* NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWebpageURL_.get(), __webpageURL, );
 }}
var sel_referrerURL = CachedSelector.init("referrerURL");
      pub fn referrerURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_referrerURL.get(), );
 }}
var sel_setReferrerURL_ = CachedSelector.init("setReferrerURL:");
      pub fn setReferrerURL(self: *Self, __referrerURL:  ?* NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReferrerURL_.get(), __referrerURL, );
 }}
var sel_expirationDate = CachedSelector.init("expirationDate");
      pub fn expirationDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_expirationDate.get(), );
 }}
var sel_setExpirationDate_ = CachedSelector.init("setExpirationDate:");
      pub fn setExpirationDate(self: *Self, __expirationDate:  ?* NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setExpirationDate_.get(), __expirationDate, );
 }}
var sel_keywords = CachedSelector.init("keywords");
      pub fn keywords(self: *Self, )  * NSSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keywords.get(), );
 }}
var sel_setKeywords_ = CachedSelector.init("setKeywords:");
      pub fn setKeywords(self: *Self, __keywords:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setKeywords_.get(), __keywords, );
 }}
var sel_supportsContinuationStreams = CachedSelector.init("supportsContinuationStreams");
      pub fn supportsContinuationStreams(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsContinuationStreams.get(), );
 }}
var sel_setSupportsContinuationStreams_ = CachedSelector.init("setSupportsContinuationStreams:");
      pub fn setSupportsContinuationStreams(self: *Self, __supportsContinuationStreams: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportsContinuationStreams_.get(), __supportsContinuationStreams, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSUserActivityDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSUserActivityDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSUserActivityDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSUserActivityDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_targetContentIdentifier = CachedSelector.init("targetContentIdentifier");
      pub fn targetContentIdentifier(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_targetContentIdentifier.get(), );
 }}
var sel_setTargetContentIdentifier_ = CachedSelector.init("setTargetContentIdentifier:");
      pub fn setTargetContentIdentifier(self: *Self, __targetContentIdentifier:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTargetContentIdentifier_.get(), __targetContentIdentifier, );
 }}
var sel_isEligibleForHandoff = CachedSelector.init("isEligibleForHandoff");
      pub fn isEligibleForHandoff(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEligibleForHandoff.get(), );
 }}
var sel_setEligibleForHandoff_ = CachedSelector.init("setEligibleForHandoff:");
      pub fn setEligibleForHandoff(self: *Self, __eligibleForHandoff: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEligibleForHandoff_.get(), __eligibleForHandoff, );
 }}
var sel_isEligibleForSearch = CachedSelector.init("isEligibleForSearch");
      pub fn isEligibleForSearch(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEligibleForSearch.get(), );
 }}
var sel_setEligibleForSearch_ = CachedSelector.init("setEligibleForSearch:");
      pub fn setEligibleForSearch(self: *Self, __eligibleForSearch: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEligibleForSearch_.get(), __eligibleForSearch, );
 }}
var sel_isEligibleForPublicIndexing = CachedSelector.init("isEligibleForPublicIndexing");
      pub fn isEligibleForPublicIndexing(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEligibleForPublicIndexing.get(), );
 }}
var sel_setEligibleForPublicIndexing_ = CachedSelector.init("setEligibleForPublicIndexing:");
      pub fn setEligibleForPublicIndexing(self: *Self, __eligibleForPublicIndexing: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEligibleForPublicIndexing_.get(), __eligibleForPublicIndexing, );
 }}
var sel_isEligibleForPrediction = CachedSelector.init("isEligibleForPrediction");
      pub fn isEligibleForPrediction(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEligibleForPrediction.get(), );
 }}
var sel_setEligibleForPrediction_ = CachedSelector.init("setEligibleForPrediction:");
      pub fn setEligibleForPrediction(self: *Self, __eligibleForPrediction: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEligibleForPrediction_.get(), __eligibleForPrediction, );
 }}
var sel_persistentIdentifier = CachedSelector.init("persistentIdentifier");
      pub fn persistentIdentifier(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_persistentIdentifier.get(), );
 }}
var sel_setPersistentIdentifier_ = CachedSelector.init("setPersistentIdentifier:");
      pub fn setPersistentIdentifier(self: *Self, __persistentIdentifier:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPersistentIdentifier_.get(), __persistentIdentifier, );
 }}
  };
}

pub const NSUserActivity = opaque {
  const Self = @This();
  pub usingnamespace NSUserActivityInterfaceMixin(Self, "NSUserActivity");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserActivity");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUserActivity");
};

pub fn MTLTextureReferenceTypeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_textureDataType = CachedSelector.init("textureDataType");
      pub fn textureDataType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureDataType.get(), );
 }}
var sel_textureType = CachedSelector.init("textureType");
      pub fn textureType(self: *Self, ) MTLTextureType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLTextureType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textureType.get(), );
 }}
var sel_access = CachedSelector.init("access");
      pub fn access(self: *Self, ) MTLBindingAccess {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLBindingAccess, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_access.get(), );
 }}
var sel_isDepthTexture = CachedSelector.init("isDepthTexture");
      pub fn isDepthTexture(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDepthTexture.get(), );
 }}
  };
}

pub const MTLTextureReferenceType = opaque {
  const Self = @This();
  pub usingnamespace MTLTextureReferenceTypeInterfaceMixin(Self, "MTLTextureReferenceType");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLTextureReferenceType");
  pub usingnamespace MTLTypeInterfaceMixin(Self, "MTLTextureReferenceType");
};

pub fn NSMeasurementInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithDoubleValue_unit_ = CachedSelector.init("initWithDoubleValue:unit:");
      pub fn initWithDoubleValueunit(self: *Self, __doubleValue: f64, __unit: id, ) *Self {{
           return @as(*const fn(*Self, SEL, f64, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDoubleValue_unit_.get(), __doubleValue, __unit, );
 }}
var sel_canBeConvertedToUnit_ = CachedSelector.init("canBeConvertedToUnit:");
      pub fn canBeConvertedToUnit(self: *Self, __unit:  * NSUnit, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSUnit, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_canBeConvertedToUnit_.get(), __unit, );
 }}
var sel_measurementByConvertingToUnit_ = CachedSelector.init("measurementByConvertingToUnit:");
      pub fn measurementByConvertingToUnit(self: *Self, __unit:  * NSUnit, )  * NSMeasurement {{
           return @as(*const fn(*Self, SEL,  * NSUnit, ) callconv(.C)  * NSMeasurement, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_measurementByConvertingToUnit_.get(), __unit, );
 }}
var sel_measurementByAddingMeasurement_ = CachedSelector.init("measurementByAddingMeasurement:");
      pub fn measurementByAddingMeasurement(self: *Self, __measurement:  * NSMeasurement, )  * NSMeasurement {{
           return @as(*const fn(*Self, SEL,  * NSMeasurement, ) callconv(.C)  * NSMeasurement, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_measurementByAddingMeasurement_.get(), __measurement, );
 }}
var sel_measurementBySubtractingMeasurement_ = CachedSelector.init("measurementBySubtractingMeasurement:");
      pub fn measurementBySubtractingMeasurement(self: *Self, __measurement:  * NSMeasurement, )  * NSMeasurement {{
           return @as(*const fn(*Self, SEL,  * NSMeasurement, ) callconv(.C)  * NSMeasurement, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_measurementBySubtractingMeasurement_.get(), __measurement, );
 }}
var sel_unit = CachedSelector.init("unit");
      pub fn unit(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unit.get(), );
 }}
var sel_doubleValue = CachedSelector.init("doubleValue");
      pub fn doubleValue(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doubleValue.get(), );
 }}
  };
}

pub const NSMeasurement = opaque {
  const Self = @This();
  pub usingnamespace NSMeasurementInterfaceMixin(Self, "NSMeasurement");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSMeasurement");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSMeasurement");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMeasurement");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMeasurement");
};

pub fn NSPointerArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithOptions_ = CachedSelector.init("initWithOptions:");
      pub fn initWithOptions(self: *Self, __options: NSPointerFunctionsOptions, ) *Self {{
           return @as(*const fn(*Self, SEL, NSPointerFunctionsOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithOptions_.get(), __options, );
 }}
var sel_initWithPointerFunctions_ = CachedSelector.init("initWithPointerFunctions:");
      pub fn initWithPointerFunctions(self: *Self, __functions:  * NSPointerFunctions, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSPointerFunctions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithPointerFunctions_.get(), __functions, );
 }}
var sel_pointerArrayWithOptions_ = CachedSelector.init("pointerArrayWithOptions:");
      pub fn pointerArrayWithOptions(__options: NSPointerFunctionsOptions, )  * NSPointerArray {{
           return @as(*const fn(Class, SEL, NSPointerFunctionsOptions, ) callconv(.C)  * NSPointerArray, @ptrCast(&objc_msgSend))(class.get(), sel_pointerArrayWithOptions_.get(), __options, );
 }}
var sel_pointerArrayWithPointerFunctions_ = CachedSelector.init("pointerArrayWithPointerFunctions:");
      pub fn pointerArrayWithPointerFunctions(__functions:  * NSPointerFunctions, )  * NSPointerArray {{
           return @as(*const fn(Class, SEL,  * NSPointerFunctions, ) callconv(.C)  * NSPointerArray, @ptrCast(&objc_msgSend))(class.get(), sel_pointerArrayWithPointerFunctions_.get(), __functions, );
 }}
var sel_pointerAtIndex_ = CachedSelector.init("pointerAtIndex:");
      pub fn pointerAtIndex(self: *Self, __index: c_ulong, )  [*c] void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  [*c] void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pointerAtIndex_.get(), __index, );
 }}
var sel_addPointer_ = CachedSelector.init("addPointer:");
      pub fn addPointer(self: *Self, __pointer:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addPointer_.get(), __pointer, );
 }}
var sel_removePointerAtIndex_ = CachedSelector.init("removePointerAtIndex:");
      pub fn removePointerAtIndex(self: *Self, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removePointerAtIndex_.get(), __index, );
 }}
var sel_insertPointer_atIndex_ = CachedSelector.init("insertPointer:atIndex:");
      pub fn insertPointeratIndex(self: *Self, __item:  [*c] void, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertPointer_atIndex_.get(), __item, __index, );
 }}
var sel_replacePointerAtIndex_withPointer_ = CachedSelector.init("replacePointerAtIndex:withPointer:");
      pub fn replacePointerAtIndexwithPointer(self: *Self, __index: c_ulong, __item:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replacePointerAtIndex_withPointer_.get(), __index, __item, );
 }}
var sel_compact = CachedSelector.init("compact");
      pub fn compact(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compact.get(), );
 }}
var sel_pointerFunctions = CachedSelector.init("pointerFunctions");
      pub fn pointerFunctions(self: *Self, )  * NSPointerFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSPointerFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pointerFunctions.get(), );
 }}
var sel_count = CachedSelector.init("count");
      pub fn count(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_count.get(), );
 }}
var sel_setCount_ = CachedSelector.init("setCount:");
      pub fn setCount(self: *Self, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCount_.get(), __count, );
 }}
var sel_pointerArrayWithStrongObjects = CachedSelector.init("pointerArrayWithStrongObjects");
      pub fn pointerArrayWithStrongObjects() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_pointerArrayWithStrongObjects.get(), );
 }}
var sel_pointerArrayWithWeakObjects = CachedSelector.init("pointerArrayWithWeakObjects");
      pub fn pointerArrayWithWeakObjects() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_pointerArrayWithWeakObjects.get(), );
 }}
var sel_strongObjectsPointerArray = CachedSelector.init("strongObjectsPointerArray");
      pub fn strongObjectsPointerArray()  * NSPointerArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSPointerArray, @ptrCast(&objc_msgSend))(class.get(), sel_strongObjectsPointerArray.get(), );
 }}
var sel_weakObjectsPointerArray = CachedSelector.init("weakObjectsPointerArray");
      pub fn weakObjectsPointerArray()  * NSPointerArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSPointerArray, @ptrCast(&objc_msgSend))(class.get(), sel_weakObjectsPointerArray.get(), );
 }}
var sel_allObjects = CachedSelector.init("allObjects");
      pub fn allObjects(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allObjects.get(), );
 }}
  };
}

pub const NSPointerArray = opaque {
  const Self = @This();
  pub usingnamespace NSPointerArrayInterfaceMixin(Self, "NSPointerArray");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSPointerArray");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSPointerArray");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSPointerArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPointerArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPointerArray");
};

pub fn MTLBlitPassSampleBufferAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sampleBuffer = CachedSelector.init("sampleBuffer");
      pub fn sampleBuffer(self: *Self, )  ?* MTLCounterSampleBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCounterSampleBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBuffer.get(), );
 }}
var sel_setSampleBuffer_ = CachedSelector.init("setSampleBuffer:");
      pub fn setSampleBuffer(self: *Self, __sampleBuffer:  ?* MTLCounterSampleBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLCounterSampleBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSampleBuffer_.get(), __sampleBuffer, );
 }}
var sel_startOfEncoderSampleIndex = CachedSelector.init("startOfEncoderSampleIndex");
      pub fn startOfEncoderSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startOfEncoderSampleIndex.get(), );
 }}
var sel_setStartOfEncoderSampleIndex_ = CachedSelector.init("setStartOfEncoderSampleIndex:");
      pub fn setStartOfEncoderSampleIndex(self: *Self, __startOfEncoderSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStartOfEncoderSampleIndex_.get(), __startOfEncoderSampleIndex, );
 }}
var sel_endOfEncoderSampleIndex = CachedSelector.init("endOfEncoderSampleIndex");
      pub fn endOfEncoderSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endOfEncoderSampleIndex.get(), );
 }}
var sel_setEndOfEncoderSampleIndex_ = CachedSelector.init("setEndOfEncoderSampleIndex:");
      pub fn setEndOfEncoderSampleIndex(self: *Self, __endOfEncoderSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEndOfEncoderSampleIndex_.get(), __endOfEncoderSampleIndex, );
 }}
  };
}

pub const MTLBlitPassSampleBufferAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLBlitPassSampleBufferAttachmentDescriptorInterfaceMixin(Self, "MTLBlitPassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLBlitPassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBlitPassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLBlitPassSampleBufferAttachmentDescriptor");
};

pub fn MTLMotionKeyframeDataInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_data = CachedSelector.init("data");
      pub fn data() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_data.get(), );
 }}
var sel_buffer = CachedSelector.init("buffer");
      pub fn buffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_buffer.get(), );
 }}
var sel_setBuffer_ = CachedSelector.init("setBuffer:");
      pub fn setBuffer(self: *Self, __buffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBuffer_.get(), __buffer, );
 }}
var sel_offset = CachedSelector.init("offset");
      pub fn offset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_offset.get(), );
 }}
var sel_setOffset_ = CachedSelector.init("setOffset:");
      pub fn setOffset(self: *Self, __offset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOffset_.get(), __offset, );
 }}
  };
}

pub const MTLMotionKeyframeData = opaque {
  const Self = @This();
  pub usingnamespace MTLMotionKeyframeDataInterfaceMixin(Self, "MTLMotionKeyframeData");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLMotionKeyframeData");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLMotionKeyframeData");
};

pub fn MTLRasterizationRateMapDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_rasterizationRateMapDescriptorWithScreenSize_ = CachedSelector.init("rasterizationRateMapDescriptorWithScreenSize:");
      pub fn rasterizationRateMapDescriptorWithScreenSize(__screenSize: MTLSize, )  * MTLRasterizationRateMapDescriptor {{
           return @as(*const fn(Class, SEL, MTLSize, ) callconv(.C)  * MTLRasterizationRateMapDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_rasterizationRateMapDescriptorWithScreenSize_.get(), __screenSize, );
 }}
var sel_rasterizationRateMapDescriptorWithScreenSize_layer_ = CachedSelector.init("rasterizationRateMapDescriptorWithScreenSize:layer:");
      pub fn rasterizationRateMapDescriptorWithScreenSizelayer(__screenSize: MTLSize, __layer:  * MTLRasterizationRateLayerDescriptor, )  * MTLRasterizationRateMapDescriptor {{
           return @as(*const fn(Class, SEL, MTLSize,  * MTLRasterizationRateLayerDescriptor, ) callconv(.C)  * MTLRasterizationRateMapDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_rasterizationRateMapDescriptorWithScreenSize_layer_.get(), __screenSize, __layer, );
 }}
var sel_rasterizationRateMapDescriptorWithScreenSize_layerCount_layers_ = CachedSelector.init("rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:");
      pub fn rasterizationRateMapDescriptorWithScreenSizelayerCountlayers(__screenSize: MTLSize, __layerCount: c_ulong, __layers:  [*c]  * MTLRasterizationRateLayerDescriptor, )  * MTLRasterizationRateMapDescriptor {{
           return @as(*const fn(Class, SEL, MTLSize, c_ulong,  [*c]  * MTLRasterizationRateLayerDescriptor, ) callconv(.C)  * MTLRasterizationRateMapDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_rasterizationRateMapDescriptorWithScreenSize_layerCount_layers_.get(), __screenSize, __layerCount, __layers, );
 }}
var sel_layerAtIndex_ = CachedSelector.init("layerAtIndex:");
      pub fn layerAtIndex(self: *Self, __layerIndex: c_ulong, )  ?* MTLRasterizationRateLayerDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* MTLRasterizationRateLayerDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_layerAtIndex_.get(), __layerIndex, );
 }}
var sel_setLayer_atIndex_ = CachedSelector.init("setLayer:atIndex:");
      pub fn setLayeratIndex(self: *Self, __layer:  ?* MTLRasterizationRateLayerDescriptor, __layerIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLRasterizationRateLayerDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLayer_atIndex_.get(), __layer, __layerIndex, );
 }}
var sel_layers = CachedSelector.init("layers");
      pub fn layers(self: *Self, )  * MTLRasterizationRateLayerArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLRasterizationRateLayerArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_layers.get(), );
 }}
var sel_screenSize = CachedSelector.init("screenSize");
      pub fn screenSize(self: *Self, ) MTLSize {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_screenSize.get(), );
 }}
var sel_setScreenSize_ = CachedSelector.init("setScreenSize:");
      pub fn setScreenSize(self: *Self, __screenSize: MTLSize, ) void {{
           return @as(*const fn(*Self, SEL, MTLSize, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScreenSize_.get(), __screenSize, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_layerCount = CachedSelector.init("layerCount");
      pub fn layerCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_layerCount.get(), );
 }}
  };
}

pub const MTLRasterizationRateMapDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRasterizationRateMapDescriptorInterfaceMixin(Self, "MTLRasterizationRateMapDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLRasterizationRateMapDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRasterizationRateMapDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRasterizationRateMapDescriptor");
};

pub fn NSURLSessionConfigurationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_backgroundSessionConfigurationWithIdentifier_ = CachedSelector.init("backgroundSessionConfigurationWithIdentifier:");
      pub fn backgroundSessionConfigurationWithIdentifier(__identifier:  * NSString, )  * NSURLSessionConfiguration {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSURLSessionConfiguration, @ptrCast(&objc_msgSend))(class.get(), sel_backgroundSessionConfigurationWithIdentifier_.get(), __identifier, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_defaultSessionConfiguration = CachedSelector.init("defaultSessionConfiguration");
      pub fn defaultSessionConfiguration()  * NSURLSessionConfiguration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSURLSessionConfiguration, @ptrCast(&objc_msgSend))(class.get(), sel_defaultSessionConfiguration.get(), );
 }}
var sel_ephemeralSessionConfiguration = CachedSelector.init("ephemeralSessionConfiguration");
      pub fn ephemeralSessionConfiguration()  * NSURLSessionConfiguration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSURLSessionConfiguration, @ptrCast(&objc_msgSend))(class.get(), sel_ephemeralSessionConfiguration.get(), );
 }}
var sel_identifier = CachedSelector.init("identifier");
      pub fn identifier(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_identifier.get(), );
 }}
var sel_requestCachePolicy = CachedSelector.init("requestCachePolicy");
      pub fn requestCachePolicy(self: *Self, ) NSURLRequestCachePolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLRequestCachePolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requestCachePolicy.get(), );
 }}
var sel_setRequestCachePolicy_ = CachedSelector.init("setRequestCachePolicy:");
      pub fn setRequestCachePolicy(self: *Self, __requestCachePolicy: NSURLRequestCachePolicy, ) void {{
           return @as(*const fn(*Self, SEL, NSURLRequestCachePolicy, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRequestCachePolicy_.get(), __requestCachePolicy, );
 }}
var sel_timeoutIntervalForRequest = CachedSelector.init("timeoutIntervalForRequest");
      pub fn timeoutIntervalForRequest(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeoutIntervalForRequest.get(), );
 }}
var sel_setTimeoutIntervalForRequest_ = CachedSelector.init("setTimeoutIntervalForRequest:");
      pub fn setTimeoutIntervalForRequest(self: *Self, __timeoutIntervalForRequest: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeoutIntervalForRequest_.get(), __timeoutIntervalForRequest, );
 }}
var sel_timeoutIntervalForResource = CachedSelector.init("timeoutIntervalForResource");
      pub fn timeoutIntervalForResource(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeoutIntervalForResource.get(), );
 }}
var sel_setTimeoutIntervalForResource_ = CachedSelector.init("setTimeoutIntervalForResource:");
      pub fn setTimeoutIntervalForResource(self: *Self, __timeoutIntervalForResource: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeoutIntervalForResource_.get(), __timeoutIntervalForResource, );
 }}
var sel_networkServiceType = CachedSelector.init("networkServiceType");
      pub fn networkServiceType(self: *Self, ) NSURLRequestNetworkServiceType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLRequestNetworkServiceType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_networkServiceType.get(), );
 }}
var sel_setNetworkServiceType_ = CachedSelector.init("setNetworkServiceType:");
      pub fn setNetworkServiceType(self: *Self, __networkServiceType: NSURLRequestNetworkServiceType, ) void {{
           return @as(*const fn(*Self, SEL, NSURLRequestNetworkServiceType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNetworkServiceType_.get(), __networkServiceType, );
 }}
var sel_allowsCellularAccess = CachedSelector.init("allowsCellularAccess");
      pub fn allowsCellularAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsCellularAccess.get(), );
 }}
var sel_setAllowsCellularAccess_ = CachedSelector.init("setAllowsCellularAccess:");
      pub fn setAllowsCellularAccess(self: *Self, __allowsCellularAccess: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsCellularAccess_.get(), __allowsCellularAccess, );
 }}
var sel_allowsExpensiveNetworkAccess = CachedSelector.init("allowsExpensiveNetworkAccess");
      pub fn allowsExpensiveNetworkAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsExpensiveNetworkAccess.get(), );
 }}
var sel_setAllowsExpensiveNetworkAccess_ = CachedSelector.init("setAllowsExpensiveNetworkAccess:");
      pub fn setAllowsExpensiveNetworkAccess(self: *Self, __allowsExpensiveNetworkAccess: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsExpensiveNetworkAccess_.get(), __allowsExpensiveNetworkAccess, );
 }}
var sel_allowsConstrainedNetworkAccess = CachedSelector.init("allowsConstrainedNetworkAccess");
      pub fn allowsConstrainedNetworkAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsConstrainedNetworkAccess.get(), );
 }}
var sel_setAllowsConstrainedNetworkAccess_ = CachedSelector.init("setAllowsConstrainedNetworkAccess:");
      pub fn setAllowsConstrainedNetworkAccess(self: *Self, __allowsConstrainedNetworkAccess: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsConstrainedNetworkAccess_.get(), __allowsConstrainedNetworkAccess, );
 }}
var sel_requiresDNSSECValidation = CachedSelector.init("requiresDNSSECValidation");
      pub fn requiresDNSSECValidation(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requiresDNSSECValidation.get(), );
 }}
var sel_setRequiresDNSSECValidation_ = CachedSelector.init("setRequiresDNSSECValidation:");
      pub fn setRequiresDNSSECValidation(self: *Self, __requiresDNSSECValidation: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRequiresDNSSECValidation_.get(), __requiresDNSSECValidation, );
 }}
var sel_waitsForConnectivity = CachedSelector.init("waitsForConnectivity");
      pub fn waitsForConnectivity(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitsForConnectivity.get(), );
 }}
var sel_setWaitsForConnectivity_ = CachedSelector.init("setWaitsForConnectivity:");
      pub fn setWaitsForConnectivity(self: *Self, __waitsForConnectivity: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWaitsForConnectivity_.get(), __waitsForConnectivity, );
 }}
var sel_isDiscretionary = CachedSelector.init("isDiscretionary");
      pub fn isDiscretionary(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDiscretionary.get(), );
 }}
var sel_setDiscretionary_ = CachedSelector.init("setDiscretionary:");
      pub fn setDiscretionary(self: *Self, __discretionary: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDiscretionary_.get(), __discretionary, );
 }}
var sel_sharedContainerIdentifier = CachedSelector.init("sharedContainerIdentifier");
      pub fn sharedContainerIdentifier(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sharedContainerIdentifier.get(), );
 }}
var sel_setSharedContainerIdentifier_ = CachedSelector.init("setSharedContainerIdentifier:");
      pub fn setSharedContainerIdentifier(self: *Self, __sharedContainerIdentifier:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSharedContainerIdentifier_.get(), __sharedContainerIdentifier, );
 }}
var sel_sessionSendsLaunchEvents = CachedSelector.init("sessionSendsLaunchEvents");
      pub fn sessionSendsLaunchEvents(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sessionSendsLaunchEvents.get(), );
 }}
var sel_setSessionSendsLaunchEvents_ = CachedSelector.init("setSessionSendsLaunchEvents:");
      pub fn setSessionSendsLaunchEvents(self: *Self, __sessionSendsLaunchEvents: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSessionSendsLaunchEvents_.get(), __sessionSendsLaunchEvents, );
 }}
var sel_connectionProxyDictionary = CachedSelector.init("connectionProxyDictionary");
      pub fn connectionProxyDictionary(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connectionProxyDictionary.get(), );
 }}
var sel_setConnectionProxyDictionary_ = CachedSelector.init("setConnectionProxyDictionary:");
      pub fn setConnectionProxyDictionary(self: *Self, __connectionProxyDictionary:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setConnectionProxyDictionary_.get(), __connectionProxyDictionary, );
 }}
var sel_TLSMinimumSupportedProtocol = CachedSelector.init("TLSMinimumSupportedProtocol");
      pub fn TLSMinimumSupportedProtocol(self: *Self, ) SSLProtocol {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) SSLProtocol, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_TLSMinimumSupportedProtocol.get(), );
 }}
var sel_setTLSMinimumSupportedProtocol_ = CachedSelector.init("setTLSMinimumSupportedProtocol:");
      pub fn setTLSMinimumSupportedProtocol(self: *Self, __TLSMinimumSupportedProtocol: SSLProtocol, ) void {{
           return @as(*const fn(*Self, SEL, SSLProtocol, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTLSMinimumSupportedProtocol_.get(), __TLSMinimumSupportedProtocol, );
 }}
var sel_TLSMaximumSupportedProtocol = CachedSelector.init("TLSMaximumSupportedProtocol");
      pub fn TLSMaximumSupportedProtocol(self: *Self, ) SSLProtocol {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) SSLProtocol, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_TLSMaximumSupportedProtocol.get(), );
 }}
var sel_setTLSMaximumSupportedProtocol_ = CachedSelector.init("setTLSMaximumSupportedProtocol:");
      pub fn setTLSMaximumSupportedProtocol(self: *Self, __TLSMaximumSupportedProtocol: SSLProtocol, ) void {{
           return @as(*const fn(*Self, SEL, SSLProtocol, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTLSMaximumSupportedProtocol_.get(), __TLSMaximumSupportedProtocol, );
 }}
var sel_TLSMinimumSupportedProtocolVersion = CachedSelector.init("TLSMinimumSupportedProtocolVersion");
      pub fn TLSMinimumSupportedProtocolVersion(self: *Self, ) tls_protocol_version_t {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) tls_protocol_version_t, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_TLSMinimumSupportedProtocolVersion.get(), );
 }}
var sel_setTLSMinimumSupportedProtocolVersion_ = CachedSelector.init("setTLSMinimumSupportedProtocolVersion:");
      pub fn setTLSMinimumSupportedProtocolVersion(self: *Self, __TLSMinimumSupportedProtocolVersion: tls_protocol_version_t, ) void {{
           return @as(*const fn(*Self, SEL, tls_protocol_version_t, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTLSMinimumSupportedProtocolVersion_.get(), __TLSMinimumSupportedProtocolVersion, );
 }}
var sel_TLSMaximumSupportedProtocolVersion = CachedSelector.init("TLSMaximumSupportedProtocolVersion");
      pub fn TLSMaximumSupportedProtocolVersion(self: *Self, ) tls_protocol_version_t {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) tls_protocol_version_t, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_TLSMaximumSupportedProtocolVersion.get(), );
 }}
var sel_setTLSMaximumSupportedProtocolVersion_ = CachedSelector.init("setTLSMaximumSupportedProtocolVersion:");
      pub fn setTLSMaximumSupportedProtocolVersion(self: *Self, __TLSMaximumSupportedProtocolVersion: tls_protocol_version_t, ) void {{
           return @as(*const fn(*Self, SEL, tls_protocol_version_t, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTLSMaximumSupportedProtocolVersion_.get(), __TLSMaximumSupportedProtocolVersion, );
 }}
var sel_HTTPShouldUsePipelining = CachedSelector.init("HTTPShouldUsePipelining");
      pub fn HTTPShouldUsePipelining(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPShouldUsePipelining.get(), );
 }}
var sel_setHTTPShouldUsePipelining_ = CachedSelector.init("setHTTPShouldUsePipelining:");
      pub fn setHTTPShouldUsePipelining(self: *Self, __HTTPShouldUsePipelining: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPShouldUsePipelining_.get(), __HTTPShouldUsePipelining, );
 }}
var sel_HTTPShouldSetCookies = CachedSelector.init("HTTPShouldSetCookies");
      pub fn HTTPShouldSetCookies(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPShouldSetCookies.get(), );
 }}
var sel_setHTTPShouldSetCookies_ = CachedSelector.init("setHTTPShouldSetCookies:");
      pub fn setHTTPShouldSetCookies(self: *Self, __HTTPShouldSetCookies: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPShouldSetCookies_.get(), __HTTPShouldSetCookies, );
 }}
var sel_HTTPCookieAcceptPolicy = CachedSelector.init("HTTPCookieAcceptPolicy");
      pub fn HTTPCookieAcceptPolicy(self: *Self, ) NSHTTPCookieAcceptPolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSHTTPCookieAcceptPolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPCookieAcceptPolicy.get(), );
 }}
var sel_setHTTPCookieAcceptPolicy_ = CachedSelector.init("setHTTPCookieAcceptPolicy:");
      pub fn setHTTPCookieAcceptPolicy(self: *Self, __HTTPCookieAcceptPolicy: NSHTTPCookieAcceptPolicy, ) void {{
           return @as(*const fn(*Self, SEL, NSHTTPCookieAcceptPolicy, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPCookieAcceptPolicy_.get(), __HTTPCookieAcceptPolicy, );
 }}
var sel_HTTPAdditionalHeaders = CachedSelector.init("HTTPAdditionalHeaders");
      pub fn HTTPAdditionalHeaders(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPAdditionalHeaders.get(), );
 }}
var sel_setHTTPAdditionalHeaders_ = CachedSelector.init("setHTTPAdditionalHeaders:");
      pub fn setHTTPAdditionalHeaders(self: *Self, __HTTPAdditionalHeaders:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPAdditionalHeaders_.get(), __HTTPAdditionalHeaders, );
 }}
var sel_HTTPMaximumConnectionsPerHost = CachedSelector.init("HTTPMaximumConnectionsPerHost");
      pub fn HTTPMaximumConnectionsPerHost(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPMaximumConnectionsPerHost.get(), );
 }}
var sel_setHTTPMaximumConnectionsPerHost_ = CachedSelector.init("setHTTPMaximumConnectionsPerHost:");
      pub fn setHTTPMaximumConnectionsPerHost(self: *Self, __HTTPMaximumConnectionsPerHost: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPMaximumConnectionsPerHost_.get(), __HTTPMaximumConnectionsPerHost, );
 }}
var sel_HTTPCookieStorage = CachedSelector.init("HTTPCookieStorage");
      pub fn HTTPCookieStorage(self: *Self, )  ?* NSHTTPCookieStorage {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSHTTPCookieStorage, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPCookieStorage.get(), );
 }}
var sel_setHTTPCookieStorage_ = CachedSelector.init("setHTTPCookieStorage:");
      pub fn setHTTPCookieStorage(self: *Self, __HTTPCookieStorage:  ?* NSHTTPCookieStorage, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSHTTPCookieStorage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPCookieStorage_.get(), __HTTPCookieStorage, );
 }}
var sel_URLCredentialStorage = CachedSelector.init("URLCredentialStorage");
      pub fn URLCredentialStorage(self: *Self, )  ?* NSURLCredentialStorage {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLCredentialStorage, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLCredentialStorage.get(), );
 }}
var sel_setURLCredentialStorage_ = CachedSelector.init("setURLCredentialStorage:");
      pub fn setURLCredentialStorage(self: *Self, __URLCredentialStorage:  ?* NSURLCredentialStorage, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURLCredentialStorage, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setURLCredentialStorage_.get(), __URLCredentialStorage, );
 }}
var sel_URLCache = CachedSelector.init("URLCache");
      pub fn URLCache(self: *Self, )  ?* NSURLCache {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLCache, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLCache.get(), );
 }}
var sel_setURLCache_ = CachedSelector.init("setURLCache:");
      pub fn setURLCache(self: *Self, __URLCache:  ?* NSURLCache, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURLCache, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setURLCache_.get(), __URLCache, );
 }}
var sel_shouldUseExtendedBackgroundIdleMode = CachedSelector.init("shouldUseExtendedBackgroundIdleMode");
      pub fn shouldUseExtendedBackgroundIdleMode(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shouldUseExtendedBackgroundIdleMode.get(), );
 }}
var sel_setShouldUseExtendedBackgroundIdleMode_ = CachedSelector.init("setShouldUseExtendedBackgroundIdleMode:");
      pub fn setShouldUseExtendedBackgroundIdleMode(self: *Self, __shouldUseExtendedBackgroundIdleMode: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShouldUseExtendedBackgroundIdleMode_.get(), __shouldUseExtendedBackgroundIdleMode, );
 }}
var sel_protocolClasses = CachedSelector.init("protocolClasses");
      pub fn protocolClasses(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_protocolClasses.get(), );
 }}
var sel_setProtocolClasses_ = CachedSelector.init("setProtocolClasses:");
      pub fn setProtocolClasses(self: *Self, __protocolClasses:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setProtocolClasses_.get(), __protocolClasses, );
 }}
var sel_multipathServiceType = CachedSelector.init("multipathServiceType");
      pub fn multipathServiceType(self: *Self, ) NSURLSessionMultipathServiceType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLSessionMultipathServiceType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_multipathServiceType.get(), );
 }}
var sel_setMultipathServiceType_ = CachedSelector.init("setMultipathServiceType:");
      pub fn setMultipathServiceType(self: *Self, __multipathServiceType: NSURLSessionMultipathServiceType, ) void {{
           return @as(*const fn(*Self, SEL, NSURLSessionMultipathServiceType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMultipathServiceType_.get(), __multipathServiceType, );
 }}
var sel_backgroundSessionConfiguration_ = CachedSelector.init("backgroundSessionConfiguration:");
      pub fn backgroundSessionConfiguration(__identifier:  * NSString, )  * NSURLSessionConfiguration {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSURLSessionConfiguration, @ptrCast(&objc_msgSend))(class.get(), sel_backgroundSessionConfiguration_.get(), __identifier, );
 }}
  };
}

pub const NSURLSessionConfiguration = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionConfigurationInterfaceMixin(Self, "NSURLSessionConfiguration");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSURLSessionConfiguration");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionConfiguration");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLSessionConfiguration");
};

pub fn NSBackgroundActivitySchedulerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithIdentifier_ = CachedSelector.init("initWithIdentifier:");
      pub fn initWithIdentifier(self: *Self, __identifier:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithIdentifier_.get(), __identifier, );
 }}
var sel_scheduleWithBlock_ = CachedSelector.init("scheduleWithBlock:");
      pub fn scheduleWithBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduleWithBlock_.get(), __block, );
 }}
var sel_invalidate = CachedSelector.init("invalidate");
      pub fn invalidate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invalidate.get(), );
 }}
var sel_identifier = CachedSelector.init("identifier");
      pub fn identifier(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_identifier.get(), );
 }}
var sel_qualityOfService = CachedSelector.init("qualityOfService");
      pub fn qualityOfService(self: *Self, ) NSQualityOfService {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSQualityOfService, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_qualityOfService.get(), );
 }}
var sel_setQualityOfService_ = CachedSelector.init("setQualityOfService:");
      pub fn setQualityOfService(self: *Self, __qualityOfService: NSQualityOfService, ) void {{
           return @as(*const fn(*Self, SEL, NSQualityOfService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQualityOfService_.get(), __qualityOfService, );
 }}
var sel_repeats = CachedSelector.init("repeats");
      pub fn repeats(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_repeats.get(), );
 }}
var sel_setRepeats_ = CachedSelector.init("setRepeats:");
      pub fn setRepeats(self: *Self, __repeats: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRepeats_.get(), __repeats, );
 }}
var sel_interval = CachedSelector.init("interval");
      pub fn interval(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_interval.get(), );
 }}
var sel_setInterval_ = CachedSelector.init("setInterval:");
      pub fn setInterval(self: *Self, __interval: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInterval_.get(), __interval, );
 }}
var sel_tolerance = CachedSelector.init("tolerance");
      pub fn tolerance(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tolerance.get(), );
 }}
var sel_setTolerance_ = CachedSelector.init("setTolerance:");
      pub fn setTolerance(self: *Self, __tolerance: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTolerance_.get(), __tolerance, );
 }}
var sel_shouldDefer = CachedSelector.init("shouldDefer");
      pub fn shouldDefer(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shouldDefer.get(), );
 }}
  };
}

pub const NSBackgroundActivityScheduler = opaque {
  const Self = @This();
  pub usingnamespace NSBackgroundActivitySchedulerInterfaceMixin(Self, "NSBackgroundActivityScheduler");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSBackgroundActivityScheduler");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSBackgroundActivityScheduler");
};

pub fn NSRecursiveLockInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_tryLock = CachedSelector.init("tryLock");
      pub fn tryLock(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tryLock.get(), );
 }}
var sel_lockBeforeDate_ = CachedSelector.init("lockBeforeDate:");
      pub fn lockBeforeDate(self: *Self, __limit:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lockBeforeDate_.get(), __limit, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
  };
}

pub const NSRecursiveLock = opaque {
  const Self = @This();
  pub usingnamespace NSRecursiveLockInterfaceMixin(Self, "NSRecursiveLock");
  pub usingnamespace NSLockingProtocolMixin(Self, "NSRecursiveLock");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSRecursiveLock");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSRecursiveLock");
};

pub fn NSScriptClassDescriptionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_classDescriptionForClass_ = CachedSelector.init("classDescriptionForClass:");
      pub fn classDescriptionForClass(__aClass: Class, )  ?* NSScriptClassDescription {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C)  ?* NSScriptClassDescription, @ptrCast(&objc_msgSend))(class.get(), sel_classDescriptionForClass_.get(), __aClass, );
 }}
var sel_initWithSuiteName_className_dictionary_ = CachedSelector.init("initWithSuiteName:className:dictionary:");
      pub fn initWithSuiteNameclassNamedictionary(self: *Self, __suiteName:  * NSString, __className:  * NSString, __classDeclaration:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSuiteName_className_dictionary_.get(), __suiteName, __className, __classDeclaration, );
 }}
var sel_matchesAppleEventCode_ = CachedSelector.init("matchesAppleEventCode:");
      pub fn matchesAppleEventCode(self: *Self, __appleEventCode: c_uint, ) c_int {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_matchesAppleEventCode_.get(), __appleEventCode, );
 }}
var sel_supportsCommand_ = CachedSelector.init("supportsCommand:");
      pub fn supportsCommand(self: *Self, __commandDescription:  * NSScriptCommandDescription, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSScriptCommandDescription, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsCommand_.get(), __commandDescription, );
 }}
var sel_selectorForCommand_ = CachedSelector.init("selectorForCommand:");
      pub fn selectorForCommand(self: *Self, __commandDescription:  * NSScriptCommandDescription, ) SEL {{
           return @as(*const fn(*Self, SEL,  * NSScriptCommandDescription, ) callconv(.C) SEL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_selectorForCommand_.get(), __commandDescription, );
 }}
var sel_typeForKey_ = CachedSelector.init("typeForKey:");
      pub fn typeForKey(self: *Self, __key:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_typeForKey_.get(), __key, );
 }}
var sel_classDescriptionForKey_ = CachedSelector.init("classDescriptionForKey:");
      pub fn classDescriptionForKey(self: *Self, __key:  * NSString, )  ?* NSScriptClassDescription {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSScriptClassDescription, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classDescriptionForKey_.get(), __key, );
 }}
var sel_appleEventCodeForKey_ = CachedSelector.init("appleEventCodeForKey:");
      pub fn appleEventCodeForKey(self: *Self, __key:  * NSString, ) c_uint {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appleEventCodeForKey_.get(), __key, );
 }}
var sel_keyWithAppleEventCode_ = CachedSelector.init("keyWithAppleEventCode:");
      pub fn keyWithAppleEventCode(self: *Self, __appleEventCode: c_uint, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keyWithAppleEventCode_.get(), __appleEventCode, );
 }}
var sel_isLocationRequiredToCreateForKey_ = CachedSelector.init("isLocationRequiredToCreateForKey:");
      pub fn isLocationRequiredToCreateForKey(self: *Self, __toManyRelationshipKey:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLocationRequiredToCreateForKey_.get(), __toManyRelationshipKey, );
 }}
var sel_hasPropertyForKey_ = CachedSelector.init("hasPropertyForKey:");
      pub fn hasPropertyForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasPropertyForKey_.get(), __key, );
 }}
var sel_hasOrderedToManyRelationshipForKey_ = CachedSelector.init("hasOrderedToManyRelationshipForKey:");
      pub fn hasOrderedToManyRelationshipForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasOrderedToManyRelationshipForKey_.get(), __key, );
 }}
var sel_hasReadablePropertyForKey_ = CachedSelector.init("hasReadablePropertyForKey:");
      pub fn hasReadablePropertyForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasReadablePropertyForKey_.get(), __key, );
 }}
var sel_hasWritablePropertyForKey_ = CachedSelector.init("hasWritablePropertyForKey:");
      pub fn hasWritablePropertyForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasWritablePropertyForKey_.get(), __key, );
 }}
var sel_suiteName = CachedSelector.init("suiteName");
      pub fn suiteName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suiteName.get(), );
 }}
var sel_className = CachedSelector.init("className");
      pub fn className(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_className.get(), );
 }}
var sel_implementationClassName = CachedSelector.init("implementationClassName");
      pub fn implementationClassName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_implementationClassName.get(), );
 }}
var sel_superclassDescription = CachedSelector.init("superclassDescription");
      pub fn superclassDescription(self: *Self, )  ?* NSScriptClassDescription {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptClassDescription, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_superclassDescription.get(), );
 }}
var sel_appleEventCode = CachedSelector.init("appleEventCode");
      pub fn appleEventCode(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appleEventCode.get(), );
 }}
var sel_defaultSubcontainerAttributeKey = CachedSelector.init("defaultSubcontainerAttributeKey");
      pub fn defaultSubcontainerAttributeKey(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_defaultSubcontainerAttributeKey.get(), );
 }}
var sel_isReadOnlyKey_ = CachedSelector.init("isReadOnlyKey:");
      pub fn isReadOnlyKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isReadOnlyKey_.get(), __key, );
 }}
  };
}

pub const NSScriptClassDescription = opaque {
  const Self = @This();
  pub usingnamespace NSScriptClassDescriptionInterfaceMixin(Self, "NSScriptClassDescription");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSScriptClassDescription");
  pub usingnamespace NSClassDescriptionInterfaceMixin(Self, "NSScriptClassDescription");
};

pub fn NSScriptCoercionHandlerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sharedCoercionHandler = CachedSelector.init("sharedCoercionHandler");
      pub fn sharedCoercionHandler()  * NSScriptCoercionHandler {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSScriptCoercionHandler, @ptrCast(&objc_msgSend))(class.get(), sel_sharedCoercionHandler.get(), );
 }}
var sel_coerceValue_toClass_ = CachedSelector.init("coerceValue:toClass:");
      pub fn coerceValuetoClass(self: *Self, __value: id, __toClass: Class, ) id {{
           return @as(*const fn(*Self, SEL, id, Class, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_coerceValue_toClass_.get(), __value, __toClass, );
 }}
var sel_registerCoercer_selector_toConvertFromClass_toClass_ = CachedSelector.init("registerCoercer:selector:toConvertFromClass:toClass:");
      pub fn registerCoercerselectortoConvertFromClasstoClass(self: *Self, __coercer: id, __selector: SEL, __fromClass: Class, __toClass: Class, ) void {{
           return @as(*const fn(*Self, SEL, id, SEL, Class, Class, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerCoercer_selector_toConvertFromClass_toClass_.get(), __coercer, __selector, __fromClass, __toClass, );
 }}
  };
}

pub const NSScriptCoercionHandler = opaque {
  const Self = @This();
  pub usingnamespace NSScriptCoercionHandlerInterfaceMixin(Self, "NSScriptCoercionHandler");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSScriptCoercionHandler");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSScriptCoercionHandler");
};

pub fn NSUserNotificationActionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_actionWithIdentifier_title_ = CachedSelector.init("actionWithIdentifier:title:");
      pub fn actionWithIdentifiertitle(__identifier:  ?* NSString, __title:  ?* NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  ?* NSString,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_actionWithIdentifier_title_.get(), __identifier, __title, );
 }}
var sel_identifier = CachedSelector.init("identifier");
      pub fn identifier(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_identifier.get(), );
 }}
var sel_title = CachedSelector.init("title");
      pub fn title(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_title.get(), );
 }}
  };
}

pub const NSUserNotificationAction = opaque {
  const Self = @This();
  pub usingnamespace NSUserNotificationActionInterfaceMixin(Self, "NSUserNotificationAction");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSUserNotificationAction");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserNotificationAction");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUserNotificationAction");
};

pub fn NSPurgeableDataInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSPurgeableData = opaque {
  const Self = @This();
  pub usingnamespace NSPurgeableDataInterfaceMixin(Self, "NSPurgeableData");
  pub usingnamespace NSDiscardableContentProtocolMixin(Self, "NSPurgeableData");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPurgeableData");
  pub usingnamespace NSMutableDataInterfaceMixin(Self, "NSPurgeableData");
};

pub fn MTLBlitPassDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_blitPassDescriptor = CachedSelector.init("blitPassDescriptor");
      pub fn blitPassDescriptor()  * MTLBlitPassDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLBlitPassDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_blitPassDescriptor.get(), );
 }}
var sel_sampleBufferAttachments = CachedSelector.init("sampleBufferAttachments");
      pub fn sampleBufferAttachments(self: *Self, )  * MTLBlitPassSampleBufferAttachmentDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLBlitPassSampleBufferAttachmentDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBufferAttachments.get(), );
 }}
  };
}

pub const MTLBlitPassDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLBlitPassDescriptorInterfaceMixin(Self, "MTLBlitPassDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLBlitPassDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBlitPassDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLBlitPassDescriptor");
};

pub fn NSURLComponentsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithURL_resolvingAgainstBaseURL_ = CachedSelector.init("initWithURL:resolvingAgainstBaseURL:");
      pub fn initWithURLresolvingAgainstBaseURL(self: *Self, __url:  * NSURL, __resolve: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_resolvingAgainstBaseURL_.get(), __url, __resolve, );
 }}
var sel_componentsWithURL_resolvingAgainstBaseURL_ = CachedSelector.init("componentsWithURL:resolvingAgainstBaseURL:");
      pub fn componentsWithURLresolvingAgainstBaseURL(__url:  * NSURL, __resolve: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_componentsWithURL_resolvingAgainstBaseURL_.get(), __url, __resolve, );
 }}
var sel_initWithString_ = CachedSelector.init("initWithString:");
      pub fn initWithString(self: *Self, __URLString:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_.get(), __URLString, );
 }}
var sel_componentsWithString_ = CachedSelector.init("componentsWithString:");
      pub fn componentsWithString(__URLString:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_componentsWithString_.get(), __URLString, );
 }}
var sel_initWithString_encodingInvalidCharacters_ = CachedSelector.init("initWithString:encodingInvalidCharacters:");
      pub fn initWithStringencodingInvalidCharacters(self: *Self, __URLString:  * NSString, __encodingInvalidCharacters: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_encodingInvalidCharacters_.get(), __URLString, __encodingInvalidCharacters, );
 }}
var sel_componentsWithString_encodingInvalidCharacters_ = CachedSelector.init("componentsWithString:encodingInvalidCharacters:");
      pub fn componentsWithStringencodingInvalidCharacters(__URLString:  * NSString, __encodingInvalidCharacters: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_componentsWithString_encodingInvalidCharacters_.get(), __URLString, __encodingInvalidCharacters, );
 }}
var sel_URLRelativeToURL_ = CachedSelector.init("URLRelativeToURL:");
      pub fn URLRelativeToURL(self: *Self, __baseURL:  ?* NSURL, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  ?* NSURL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLRelativeToURL_.get(), __baseURL, );
 }}
var sel_URL = CachedSelector.init("URL");
      pub fn URL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL.get(), );
 }}
var sel_string = CachedSelector.init("string");
      pub fn string(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_string.get(), );
 }}
var sel_scheme = CachedSelector.init("scheme");
      pub fn scheme(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheme.get(), );
 }}
var sel_setScheme_ = CachedSelector.init("setScheme:");
      pub fn setScheme(self: *Self, __scheme:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScheme_.get(), __scheme, );
 }}
var sel_user = CachedSelector.init("user");
      pub fn user(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_user.get(), );
 }}
var sel_setUser_ = CachedSelector.init("setUser:");
      pub fn setUser(self: *Self, __user:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUser_.get(), __user, );
 }}
var sel_password = CachedSelector.init("password");
      pub fn password(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_password.get(), );
 }}
var sel_setPassword_ = CachedSelector.init("setPassword:");
      pub fn setPassword(self: *Self, __password:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPassword_.get(), __password, );
 }}
var sel_host = CachedSelector.init("host");
      pub fn host(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_host.get(), );
 }}
var sel_setHost_ = CachedSelector.init("setHost:");
      pub fn setHost(self: *Self, __host:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHost_.get(), __host, );
 }}
var sel_port = CachedSelector.init("port");
      pub fn port(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_port.get(), );
 }}
var sel_setPort_ = CachedSelector.init("setPort:");
      pub fn setPort(self: *Self, __port:  ?* NSNumber, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPort_.get(), __port, );
 }}
var sel_path = CachedSelector.init("path");
      pub fn path(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_path.get(), );
 }}
var sel_setPath_ = CachedSelector.init("setPath:");
      pub fn setPath(self: *Self, __path:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPath_.get(), __path, );
 }}
var sel_query = CachedSelector.init("query");
      pub fn query(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_query.get(), );
 }}
var sel_setQuery_ = CachedSelector.init("setQuery:");
      pub fn setQuery(self: *Self, __query:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQuery_.get(), __query, );
 }}
var sel_fragment = CachedSelector.init("fragment");
      pub fn fragment(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragment.get(), );
 }}
var sel_setFragment_ = CachedSelector.init("setFragment:");
      pub fn setFragment(self: *Self, __fragment:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragment_.get(), __fragment, );
 }}
var sel_percentEncodedUser = CachedSelector.init("percentEncodedUser");
      pub fn percentEncodedUser(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_percentEncodedUser.get(), );
 }}
var sel_setPercentEncodedUser_ = CachedSelector.init("setPercentEncodedUser:");
      pub fn setPercentEncodedUser(self: *Self, __percentEncodedUser:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPercentEncodedUser_.get(), __percentEncodedUser, );
 }}
var sel_percentEncodedPassword = CachedSelector.init("percentEncodedPassword");
      pub fn percentEncodedPassword(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_percentEncodedPassword.get(), );
 }}
var sel_setPercentEncodedPassword_ = CachedSelector.init("setPercentEncodedPassword:");
      pub fn setPercentEncodedPassword(self: *Self, __percentEncodedPassword:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPercentEncodedPassword_.get(), __percentEncodedPassword, );
 }}
var sel_percentEncodedHost = CachedSelector.init("percentEncodedHost");
      pub fn percentEncodedHost(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_percentEncodedHost.get(), );
 }}
var sel_setPercentEncodedHost_ = CachedSelector.init("setPercentEncodedHost:");
      pub fn setPercentEncodedHost(self: *Self, __percentEncodedHost:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPercentEncodedHost_.get(), __percentEncodedHost, );
 }}
var sel_percentEncodedPath = CachedSelector.init("percentEncodedPath");
      pub fn percentEncodedPath(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_percentEncodedPath.get(), );
 }}
var sel_setPercentEncodedPath_ = CachedSelector.init("setPercentEncodedPath:");
      pub fn setPercentEncodedPath(self: *Self, __percentEncodedPath:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPercentEncodedPath_.get(), __percentEncodedPath, );
 }}
var sel_percentEncodedQuery = CachedSelector.init("percentEncodedQuery");
      pub fn percentEncodedQuery(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_percentEncodedQuery.get(), );
 }}
var sel_setPercentEncodedQuery_ = CachedSelector.init("setPercentEncodedQuery:");
      pub fn setPercentEncodedQuery(self: *Self, __percentEncodedQuery:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPercentEncodedQuery_.get(), __percentEncodedQuery, );
 }}
var sel_percentEncodedFragment = CachedSelector.init("percentEncodedFragment");
      pub fn percentEncodedFragment(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_percentEncodedFragment.get(), );
 }}
var sel_setPercentEncodedFragment_ = CachedSelector.init("setPercentEncodedFragment:");
      pub fn setPercentEncodedFragment(self: *Self, __percentEncodedFragment:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPercentEncodedFragment_.get(), __percentEncodedFragment, );
 }}
var sel_encodedHost = CachedSelector.init("encodedHost");
      pub fn encodedHost(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodedHost.get(), );
 }}
var sel_setEncodedHost_ = CachedSelector.init("setEncodedHost:");
      pub fn setEncodedHost(self: *Self, __encodedHost:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEncodedHost_.get(), __encodedHost, );
 }}
var sel_rangeOfScheme = CachedSelector.init("rangeOfScheme");
      pub fn rangeOfScheme(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfScheme.get(), );
 }}
var sel_rangeOfUser = CachedSelector.init("rangeOfUser");
      pub fn rangeOfUser(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfUser.get(), );
 }}
var sel_rangeOfPassword = CachedSelector.init("rangeOfPassword");
      pub fn rangeOfPassword(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfPassword.get(), );
 }}
var sel_rangeOfHost = CachedSelector.init("rangeOfHost");
      pub fn rangeOfHost(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfHost.get(), );
 }}
var sel_rangeOfPort = CachedSelector.init("rangeOfPort");
      pub fn rangeOfPort(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfPort.get(), );
 }}
var sel_rangeOfPath = CachedSelector.init("rangeOfPath");
      pub fn rangeOfPath(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfPath.get(), );
 }}
var sel_rangeOfQuery = CachedSelector.init("rangeOfQuery");
      pub fn rangeOfQuery(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfQuery.get(), );
 }}
var sel_rangeOfFragment = CachedSelector.init("rangeOfFragment");
      pub fn rangeOfFragment(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfFragment.get(), );
 }}
var sel_queryItems = CachedSelector.init("queryItems");
      pub fn queryItems(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_queryItems.get(), );
 }}
var sel_setQueryItems_ = CachedSelector.init("setQueryItems:");
      pub fn setQueryItems(self: *Self, __queryItems:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQueryItems_.get(), __queryItems, );
 }}
var sel_percentEncodedQueryItems = CachedSelector.init("percentEncodedQueryItems");
      pub fn percentEncodedQueryItems(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_percentEncodedQueryItems.get(), );
 }}
var sel_setPercentEncodedQueryItems_ = CachedSelector.init("setPercentEncodedQueryItems:");
      pub fn setPercentEncodedQueryItems(self: *Self, __percentEncodedQueryItems:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPercentEncodedQueryItems_.get(), __percentEncodedQueryItems, );
 }}
  };
}

pub const NSURLComponents = opaque {
  const Self = @This();
  pub usingnamespace NSURLComponentsInterfaceMixin(Self, "NSURLComponents");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSURLComponents");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLComponents");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLComponents");
};

pub fn NSMoveCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setReceiversSpecifier_ = CachedSelector.init("setReceiversSpecifier:");
      pub fn setReceiversSpecifier(self: *Self, __receiversRef:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReceiversSpecifier_.get(), __receiversRef, );
 }}
var sel_keySpecifier = CachedSelector.init("keySpecifier");
      pub fn keySpecifier(self: *Self, )  * NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keySpecifier.get(), );
 }}
  };
}

pub const NSMoveCommand = opaque {
  const Self = @This();
  pub usingnamespace NSMoveCommandInterfaceMixin(Self, "NSMoveCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMoveCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSMoveCommand");
};

pub fn NSWhoseSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_initWithContainerClassDescription_containerSpecifier_key_test_ = CachedSelector.init("initWithContainerClassDescription:containerSpecifier:key:test:");
      pub fn initWithContainerClassDescriptioncontainerSpecifierkeytest(self: *Self, __classDesc:  * NSScriptClassDescription, __container:  ?* NSScriptObjectSpecifier, __property:  * NSString, ___test:  * NSScriptWhoseTest, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptClassDescription,  ?* NSScriptObjectSpecifier,  * NSString,  * NSScriptWhoseTest, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContainerClassDescription_containerSpecifier_key_test_.get(), __classDesc, __container, __property, ___test, );
 }}
var sel_test = CachedSelector.init("test");
      pub fn _test(self: *Self, )  * NSScriptWhoseTest {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSScriptWhoseTest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_test.get(), );
 }}
var sel_setTest_ = CachedSelector.init("setTest:");
      pub fn setTest(self: *Self, ___test:  * NSScriptWhoseTest, ) void {{
           return @as(*const fn(*Self, SEL,  * NSScriptWhoseTest, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTest_.get(), ___test, );
 }}
var sel_startSubelementIdentifier = CachedSelector.init("startSubelementIdentifier");
      pub fn startSubelementIdentifier(self: *Self, ) NSWhoseSubelementIdentifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSWhoseSubelementIdentifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startSubelementIdentifier.get(), );
 }}
var sel_setStartSubelementIdentifier_ = CachedSelector.init("setStartSubelementIdentifier:");
      pub fn setStartSubelementIdentifier(self: *Self, __startSubelementIdentifier: NSWhoseSubelementIdentifier, ) void {{
           return @as(*const fn(*Self, SEL, NSWhoseSubelementIdentifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStartSubelementIdentifier_.get(), __startSubelementIdentifier, );
 }}
var sel_startSubelementIndex = CachedSelector.init("startSubelementIndex");
      pub fn startSubelementIndex(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startSubelementIndex.get(), );
 }}
var sel_setStartSubelementIndex_ = CachedSelector.init("setStartSubelementIndex:");
      pub fn setStartSubelementIndex(self: *Self, __startSubelementIndex: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStartSubelementIndex_.get(), __startSubelementIndex, );
 }}
var sel_endSubelementIdentifier = CachedSelector.init("endSubelementIdentifier");
      pub fn endSubelementIdentifier(self: *Self, ) NSWhoseSubelementIdentifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSWhoseSubelementIdentifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endSubelementIdentifier.get(), );
 }}
var sel_setEndSubelementIdentifier_ = CachedSelector.init("setEndSubelementIdentifier:");
      pub fn setEndSubelementIdentifier(self: *Self, __endSubelementIdentifier: NSWhoseSubelementIdentifier, ) void {{
           return @as(*const fn(*Self, SEL, NSWhoseSubelementIdentifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEndSubelementIdentifier_.get(), __endSubelementIdentifier, );
 }}
var sel_endSubelementIndex = CachedSelector.init("endSubelementIndex");
      pub fn endSubelementIndex(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endSubelementIndex.get(), );
 }}
var sel_setEndSubelementIndex_ = CachedSelector.init("setEndSubelementIndex:");
      pub fn setEndSubelementIndex(self: *Self, __endSubelementIndex: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEndSubelementIndex_.get(), __endSubelementIndex, );
 }}
  };
}

pub const NSWhoseSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSWhoseSpecifierInterfaceMixin(Self, "NSWhoseSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSWhoseSpecifier");
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSWhoseSpecifier");
};

pub fn MTLIOCommandQueueDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_maxCommandBufferCount = CachedSelector.init("maxCommandBufferCount");
      pub fn maxCommandBufferCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxCommandBufferCount.get(), );
 }}
var sel_setMaxCommandBufferCount_ = CachedSelector.init("setMaxCommandBufferCount:");
      pub fn setMaxCommandBufferCount(self: *Self, __maxCommandBufferCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxCommandBufferCount_.get(), __maxCommandBufferCount, );
 }}
var sel_priority = CachedSelector.init("priority");
      pub fn priority(self: *Self, ) MTLIOPriority {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLIOPriority, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_priority.get(), );
 }}
var sel_setPriority_ = CachedSelector.init("setPriority:");
      pub fn setPriority(self: *Self, __priority: MTLIOPriority, ) void {{
           return @as(*const fn(*Self, SEL, MTLIOPriority, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPriority_.get(), __priority, );
 }}
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, ) MTLIOCommandQueueType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLIOCommandQueueType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
var sel_setType_ = CachedSelector.init("setType:");
      pub fn setType(self: *Self, __a_type: MTLIOCommandQueueType, ) void {{
           return @as(*const fn(*Self, SEL, MTLIOCommandQueueType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setType_.get(), __a_type, );
 }}
var sel_maxCommandsInFlight = CachedSelector.init("maxCommandsInFlight");
      pub fn maxCommandsInFlight(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxCommandsInFlight.get(), );
 }}
var sel_setMaxCommandsInFlight_ = CachedSelector.init("setMaxCommandsInFlight:");
      pub fn setMaxCommandsInFlight(self: *Self, __maxCommandsInFlight: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxCommandsInFlight_.get(), __maxCommandsInFlight, );
 }}
var sel_scratchBufferAllocator = CachedSelector.init("scratchBufferAllocator");
      pub fn scratchBufferAllocator(self: *Self, )  ?* MTLIOScratchBufferAllocator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLIOScratchBufferAllocator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scratchBufferAllocator.get(), );
 }}
var sel_setScratchBufferAllocator_ = CachedSelector.init("setScratchBufferAllocator:");
      pub fn setScratchBufferAllocator(self: *Self, __scratchBufferAllocator:  ?* MTLIOScratchBufferAllocator, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLIOScratchBufferAllocator, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScratchBufferAllocator_.get(), __scratchBufferAllocator, );
 }}
  };
}

pub const MTLIOCommandQueueDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLIOCommandQueueDescriptorInterfaceMixin(Self, "MTLIOCommandQueueDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLIOCommandQueueDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIOCommandQueueDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLIOCommandQueueDescriptor");
};

pub fn NSPositionalSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithPosition_objectSpecifier_ = CachedSelector.init("initWithPosition:objectSpecifier:");
      pub fn initWithPositionobjectSpecifier(self: *Self, __position: NSInsertionPosition, __specifier:  * NSScriptObjectSpecifier, ) *Self {{
           return @as(*const fn(*Self, SEL, NSInsertionPosition,  * NSScriptObjectSpecifier, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithPosition_objectSpecifier_.get(), __position, __specifier, );
 }}
var sel_setInsertionClassDescription_ = CachedSelector.init("setInsertionClassDescription:");
      pub fn setInsertionClassDescription(self: *Self, __classDescription:  * NSScriptClassDescription, ) void {{
           return @as(*const fn(*Self, SEL,  * NSScriptClassDescription, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInsertionClassDescription_.get(), __classDescription, );
 }}
var sel_evaluate = CachedSelector.init("evaluate");
      pub fn evaluate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_evaluate.get(), );
 }}
var sel_position = CachedSelector.init("position");
      pub fn position(self: *Self, ) NSInsertionPosition {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSInsertionPosition, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_position.get(), );
 }}
var sel_objectSpecifier = CachedSelector.init("objectSpecifier");
      pub fn objectSpecifier(self: *Self, )  * NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectSpecifier.get(), );
 }}
var sel_insertionContainer = CachedSelector.init("insertionContainer");
      pub fn insertionContainer(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertionContainer.get(), );
 }}
var sel_insertionKey = CachedSelector.init("insertionKey");
      pub fn insertionKey(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertionKey.get(), );
 }}
var sel_insertionIndex = CachedSelector.init("insertionIndex");
      pub fn insertionIndex(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertionIndex.get(), );
 }}
var sel_insertionReplaces = CachedSelector.init("insertionReplaces");
      pub fn insertionReplaces(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertionReplaces.get(), );
 }}
  };
}

pub const NSPositionalSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSPositionalSpecifierInterfaceMixin(Self, "NSPositionalSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPositionalSpecifier");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPositionalSpecifier");
};

pub fn NSCloneCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setReceiversSpecifier_ = CachedSelector.init("setReceiversSpecifier:");
      pub fn setReceiversSpecifier(self: *Self, __receiversRef:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReceiversSpecifier_.get(), __receiversRef, );
 }}
var sel_keySpecifier = CachedSelector.init("keySpecifier");
      pub fn keySpecifier(self: *Self, )  * NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keySpecifier.get(), );
 }}
  };
}

pub const NSCloneCommand = opaque {
  const Self = @This();
  pub usingnamespace NSCloneCommandInterfaceMixin(Self, "NSCloneCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCloneCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSCloneCommand");
};

pub fn NSXMLNodeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithKind_ = CachedSelector.init("initWithKind:");
      pub fn initWithKind(self: *Self, __kind: NSXMLNodeKind, ) *Self {{
           return @as(*const fn(*Self, SEL, NSXMLNodeKind, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKind_.get(), __kind, );
 }}
var sel_initWithKind_options_ = CachedSelector.init("initWithKind:options:");
      pub fn initWithKindoptions(self: *Self, __kind: NSXMLNodeKind, __options: NSXMLNodeOptions, ) *Self {{
           return @as(*const fn(*Self, SEL, NSXMLNodeKind, NSXMLNodeOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKind_options_.get(), __kind, __options, );
 }}
var sel_document = CachedSelector.init("document");
      pub fn document() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_document.get(), );
 }}
var sel_documentWithRootElement_ = CachedSelector.init("documentWithRootElement:");
      pub fn documentWithRootElement(__element:  * NSXMLElement, ) id {{
           return @as(*const fn(Class, SEL,  * NSXMLElement, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_documentWithRootElement_.get(), __element, );
 }}
var sel_elementWithName_ = CachedSelector.init("elementWithName:");
      pub fn elementWithName(__name:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_elementWithName_.get(), __name, );
 }}
var sel_elementWithName_URI_ = CachedSelector.init("elementWithName:URI:");
      pub fn elementWithNameURI(__name:  * NSString, __URI:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_elementWithName_URI_.get(), __name, __URI, );
 }}
var sel_elementWithName_stringValue_ = CachedSelector.init("elementWithName:stringValue:");
      pub fn elementWithNamestringValue(__name:  * NSString, __string:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_elementWithName_stringValue_.get(), __name, __string, );
 }}
var sel_elementWithName_children_attributes_ = CachedSelector.init("elementWithName:children:attributes:");
      pub fn elementWithNamechildrenattributes(__name:  * NSString, __children:  ?* NSArray, __attributes:  ?* NSArray, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSArray,  ?* NSArray, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_elementWithName_children_attributes_.get(), __name, __children, __attributes, );
 }}
var sel_attributeWithName_stringValue_ = CachedSelector.init("attributeWithName:stringValue:");
      pub fn attributeWithNamestringValue(__name:  * NSString, __stringValue:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_attributeWithName_stringValue_.get(), __name, __stringValue, );
 }}
var sel_attributeWithName_URI_stringValue_ = CachedSelector.init("attributeWithName:URI:stringValue:");
      pub fn attributeWithNameURIstringValue(__name:  * NSString, __URI:  * NSString, __stringValue:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_attributeWithName_URI_stringValue_.get(), __name, __URI, __stringValue, );
 }}
var sel_namespaceWithName_stringValue_ = CachedSelector.init("namespaceWithName:stringValue:");
      pub fn namespaceWithNamestringValue(__name:  * NSString, __stringValue:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_namespaceWithName_stringValue_.get(), __name, __stringValue, );
 }}
var sel_processingInstructionWithName_stringValue_ = CachedSelector.init("processingInstructionWithName:stringValue:");
      pub fn processingInstructionWithNamestringValue(__name:  * NSString, __stringValue:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_processingInstructionWithName_stringValue_.get(), __name, __stringValue, );
 }}
var sel_commentWithStringValue_ = CachedSelector.init("commentWithStringValue:");
      pub fn commentWithStringValue(__stringValue:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_commentWithStringValue_.get(), __stringValue, );
 }}
var sel_textWithStringValue_ = CachedSelector.init("textWithStringValue:");
      pub fn textWithStringValue(__stringValue:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_textWithStringValue_.get(), __stringValue, );
 }}
var sel_DTDNodeWithXMLString_ = CachedSelector.init("DTDNodeWithXMLString:");
      pub fn DTDNodeWithXMLString(__string:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_DTDNodeWithXMLString_.get(), __string, );
 }}
var sel_setStringValue_resolvingEntities_ = CachedSelector.init("setStringValue:resolvingEntities:");
      pub fn setStringValueresolvingEntities(self: *Self, __string:  * NSString, __resolve: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStringValue_resolvingEntities_.get(), __string, __resolve, );
 }}
var sel_childAtIndex_ = CachedSelector.init("childAtIndex:");
      pub fn childAtIndex(self: *Self, __index: c_ulong, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_childAtIndex_.get(), __index, );
 }}
var sel_detach = CachedSelector.init("detach");
      pub fn detach(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_detach.get(), );
 }}
var sel_localNameForName_ = CachedSelector.init("localNameForName:");
      pub fn localNameForName(__name:  * NSString, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localNameForName_.get(), __name, );
 }}
var sel_prefixForName_ = CachedSelector.init("prefixForName:");
      pub fn prefixForName(__name:  * NSString, )  ?* NSString {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(class.get(), sel_prefixForName_.get(), __name, );
 }}
var sel_predefinedNamespaceForPrefix_ = CachedSelector.init("predefinedNamespaceForPrefix:");
      pub fn predefinedNamespaceForPrefix(__name:  * NSString, )  ?* NSXMLNode {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(class.get(), sel_predefinedNamespaceForPrefix_.get(), __name, );
 }}
var sel_XMLStringWithOptions_ = CachedSelector.init("XMLStringWithOptions:");
      pub fn XMLStringWithOptions(self: *Self, __options: NSXMLNodeOptions, )  * NSString {{
           return @as(*const fn(*Self, SEL, NSXMLNodeOptions, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_XMLStringWithOptions_.get(), __options, );
 }}
var sel_canonicalXMLStringPreservingComments_ = CachedSelector.init("canonicalXMLStringPreservingComments:");
      pub fn canonicalXMLStringPreservingComments(self: *Self, __comments: c_int, )  * NSString {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_canonicalXMLStringPreservingComments_.get(), __comments, );
 }}
var sel_nodesForXPath_error_ = CachedSelector.init("nodesForXPath:error:");
      pub fn nodesForXPatherror(self: *Self, __xpath:  * NSString, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nodesForXPath_error_.get(), __xpath, __an_error, );
 }}
var sel_objectsForXQuery_constants_error_ = CachedSelector.init("objectsForXQuery:constants:error:");
      pub fn objectsForXQueryconstantserror(self: *Self, __xquery:  * NSString, __constants:  ?* NSDictionary, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSDictionary,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectsForXQuery_constants_error_.get(), __xquery, __constants, __an_error, );
 }}
var sel_objectsForXQuery_error_ = CachedSelector.init("objectsForXQuery:error:");
      pub fn objectsForXQueryerror(self: *Self, __xquery:  * NSString, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectsForXQuery_error_.get(), __xquery, __an_error, );
 }}
var sel_kind = CachedSelector.init("kind");
      pub fn kind(self: *Self, ) NSXMLNodeKind {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSXMLNodeKind, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_kind.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
var sel_objectValue = CachedSelector.init("objectValue");
      pub fn objectValue(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectValue.get(), );
 }}
var sel_setObjectValue_ = CachedSelector.init("setObjectValue:");
      pub fn setObjectValue(self: *Self, __objectValue: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectValue_.get(), __objectValue, );
 }}
var sel_stringValue = CachedSelector.init("stringValue");
      pub fn stringValue(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringValue.get(), );
 }}
var sel_setStringValue_ = CachedSelector.init("setStringValue:");
      pub fn setStringValue(self: *Self, __stringValue:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStringValue_.get(), __stringValue, );
 }}
var sel_index = CachedSelector.init("index");
      pub fn index(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_index.get(), );
 }}
var sel_level = CachedSelector.init("level");
      pub fn level(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_level.get(), );
 }}
var sel_rootDocument = CachedSelector.init("rootDocument");
      pub fn rootDocument(self: *Self, )  ?* NSXMLDocument {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXMLDocument, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rootDocument.get(), );
 }}
var sel_parent = CachedSelector.init("parent");
      pub fn parent(self: *Self, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parent.get(), );
 }}
var sel_childCount = CachedSelector.init("childCount");
      pub fn childCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_childCount.get(), );
 }}
var sel_children = CachedSelector.init("children");
      pub fn children(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_children.get(), );
 }}
var sel_previousSibling = CachedSelector.init("previousSibling");
      pub fn previousSibling(self: *Self, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_previousSibling.get(), );
 }}
var sel_nextSibling = CachedSelector.init("nextSibling");
      pub fn nextSibling(self: *Self, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nextSibling.get(), );
 }}
var sel_previousNode = CachedSelector.init("previousNode");
      pub fn previousNode(self: *Self, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_previousNode.get(), );
 }}
var sel_nextNode = CachedSelector.init("nextNode");
      pub fn nextNode(self: *Self, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nextNode.get(), );
 }}
var sel_XPath = CachedSelector.init("XPath");
      pub fn XPath(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_XPath.get(), );
 }}
var sel_localName = CachedSelector.init("localName");
      pub fn localName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localName.get(), );
 }}
var sel_prefix = CachedSelector.init("prefix");
      pub fn prefix(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_prefix.get(), );
 }}
var sel_URI = CachedSelector.init("URI");
      pub fn URI(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URI.get(), );
 }}
var sel_setURI_ = CachedSelector.init("setURI:");
      pub fn setURI(self: *Self, __URI:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setURI_.get(), __URI, );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_XMLString = CachedSelector.init("XMLString");
      pub fn XMLString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_XMLString.get(), );
 }}
  };
}

pub const NSXMLNode = opaque {
  const Self = @This();
  pub usingnamespace NSXMLNodeInterfaceMixin(Self, "NSXMLNode");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSXMLNode");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXMLNode");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSXMLNode");
};

pub fn MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __attachmentIndex: c_ulong, )  * MTLAccelerationStructurePassSampleBufferAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLAccelerationStructurePassSampleBufferAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __attachmentIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attachment:  ?* MTLAccelerationStructurePassSampleBufferAttachmentDescriptor, __attachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLAccelerationStructurePassSampleBufferAttachmentDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attachment, __attachmentIndex, );
 }}
  };
}

pub const MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArrayInterfaceMixin(Self, "MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray");
};

pub fn NSIndexSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithContainerClassDescription_containerSpecifier_key_index_ = CachedSelector.init("initWithContainerClassDescription:containerSpecifier:key:index:");
      pub fn initWithContainerClassDescriptioncontainerSpecifierkeyindex(self: *Self, __classDesc:  * NSScriptClassDescription, __container:  ?* NSScriptObjectSpecifier, __property:  * NSString, __index: c_long, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptClassDescription,  ?* NSScriptObjectSpecifier,  * NSString, c_long, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContainerClassDescription_containerSpecifier_key_index_.get(), __classDesc, __container, __property, __index, );
 }}
var sel_index = CachedSelector.init("index");
      pub fn index(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_index.get(), );
 }}
var sel_setIndex_ = CachedSelector.init("setIndex:");
      pub fn setIndex(self: *Self, __index: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndex_.get(), __index, );
 }}
  };
}

pub const NSIndexSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSIndexSpecifierInterfaceMixin(Self, "NSIndexSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSIndexSpecifier");
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSIndexSpecifier");
};

pub fn NSUnitPowerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_terawatts = CachedSelector.init("terawatts");
      pub fn terawatts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_terawatts.get(), );
 }}
var sel_gigawatts = CachedSelector.init("gigawatts");
      pub fn gigawatts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_gigawatts.get(), );
 }}
var sel_megawatts = CachedSelector.init("megawatts");
      pub fn megawatts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_megawatts.get(), );
 }}
var sel_kilowatts = CachedSelector.init("kilowatts");
      pub fn kilowatts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_kilowatts.get(), );
 }}
var sel_watts = CachedSelector.init("watts");
      pub fn watts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_watts.get(), );
 }}
var sel_milliwatts = CachedSelector.init("milliwatts");
      pub fn milliwatts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_milliwatts.get(), );
 }}
var sel_microwatts = CachedSelector.init("microwatts");
      pub fn microwatts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_microwatts.get(), );
 }}
var sel_nanowatts = CachedSelector.init("nanowatts");
      pub fn nanowatts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_nanowatts.get(), );
 }}
var sel_picowatts = CachedSelector.init("picowatts");
      pub fn picowatts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_picowatts.get(), );
 }}
var sel_femtowatts = CachedSelector.init("femtowatts");
      pub fn femtowatts()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_femtowatts.get(), );
 }}
var sel_horsepower = CachedSelector.init("horsepower");
      pub fn horsepower()  * NSUnitPower {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPower, @ptrCast(&objc_msgSend))(class.get(), sel_horsepower.get(), );
 }}
  };
}

pub const NSUnitPower = opaque {
  const Self = @This();
  pub usingnamespace NSUnitPowerInterfaceMixin(Self, "NSUnitPower");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitPower");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitPower");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitPower");
};

pub fn NSUnitElectricChargeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_coulombs = CachedSelector.init("coulombs");
      pub fn coulombs()  * NSUnitElectricCharge {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCharge, @ptrCast(&objc_msgSend))(class.get(), sel_coulombs.get(), );
 }}
var sel_megaampereHours = CachedSelector.init("megaampereHours");
      pub fn megaampereHours()  * NSUnitElectricCharge {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCharge, @ptrCast(&objc_msgSend))(class.get(), sel_megaampereHours.get(), );
 }}
var sel_kiloampereHours = CachedSelector.init("kiloampereHours");
      pub fn kiloampereHours()  * NSUnitElectricCharge {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCharge, @ptrCast(&objc_msgSend))(class.get(), sel_kiloampereHours.get(), );
 }}
var sel_ampereHours = CachedSelector.init("ampereHours");
      pub fn ampereHours()  * NSUnitElectricCharge {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCharge, @ptrCast(&objc_msgSend))(class.get(), sel_ampereHours.get(), );
 }}
var sel_milliampereHours = CachedSelector.init("milliampereHours");
      pub fn milliampereHours()  * NSUnitElectricCharge {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCharge, @ptrCast(&objc_msgSend))(class.get(), sel_milliampereHours.get(), );
 }}
var sel_microampereHours = CachedSelector.init("microampereHours");
      pub fn microampereHours()  * NSUnitElectricCharge {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCharge, @ptrCast(&objc_msgSend))(class.get(), sel_microampereHours.get(), );
 }}
  };
}

pub const NSUnitElectricCharge = opaque {
  const Self = @This();
  pub usingnamespace NSUnitElectricChargeInterfaceMixin(Self, "NSUnitElectricCharge");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitElectricCharge");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitElectricCharge");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitElectricCharge");
};

pub fn NSSortDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sortDescriptorWithKey_ascending_ = CachedSelector.init("sortDescriptorWithKey:ascending:");
      pub fn sortDescriptorWithKeyascending(__key:  ?* NSString, __ascending: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  ?* NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_sortDescriptorWithKey_ascending_.get(), __key, __ascending, );
 }}
var sel_sortDescriptorWithKey_ascending_selector_ = CachedSelector.init("sortDescriptorWithKey:ascending:selector:");
      pub fn sortDescriptorWithKeyascendingselector(__key:  ?* NSString, __ascending: c_int, __selector: SEL, ) *Self {{
           return @as(*const fn(Class, SEL,  ?* NSString, c_int, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_sortDescriptorWithKey_ascending_selector_.get(), __key, __ascending, __selector, );
 }}
var sel_initWithKey_ascending_ = CachedSelector.init("initWithKey:ascending:");
      pub fn initWithKeyascending(self: *Self, __key:  ?* NSString, __ascending: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKey_ascending_.get(), __key, __ascending, );
 }}
var sel_initWithKey_ascending_selector_ = CachedSelector.init("initWithKey:ascending:selector:");
      pub fn initWithKeyascendingselector(self: *Self, __key:  ?* NSString, __ascending: c_int, __selector: SEL, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSString, c_int, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKey_ascending_selector_.get(), __key, __ascending, __selector, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_allowEvaluation = CachedSelector.init("allowEvaluation");
      pub fn allowEvaluation(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowEvaluation.get(), );
 }}
var sel_sortDescriptorWithKey_ascending_comparator_ = CachedSelector.init("sortDescriptorWithKey:ascending:comparator:");
      pub fn sortDescriptorWithKeyascendingcomparator(__key:  ?* NSString, __ascending: c_int, __cmptr: ?*u8, ) *Self {{
           return @as(*const fn(Class, SEL,  ?* NSString, c_int, ?*u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_sortDescriptorWithKey_ascending_comparator_.get(), __key, __ascending, __cmptr, );
 }}
var sel_initWithKey_ascending_comparator_ = CachedSelector.init("initWithKey:ascending:comparator:");
      pub fn initWithKeyascendingcomparator(self: *Self, __key:  ?* NSString, __ascending: c_int, __cmptr: ?*u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSString, c_int, ?*u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKey_ascending_comparator_.get(), __key, __ascending, __cmptr, );
 }}
var sel_compareObject_toObject_ = CachedSelector.init("compareObject:toObject:");
      pub fn compareObjecttoObject(self: *Self, __object1: id, __object2: id, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL, id, id, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compareObject_toObject_.get(), __object1, __object2, );
 }}
var sel_key = CachedSelector.init("key");
      pub fn key(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_key.get(), );
 }}
var sel_ascending = CachedSelector.init("ascending");
      pub fn ascending(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_ascending.get(), );
 }}
var sel_selector = CachedSelector.init("selector");
      pub fn selector(self: *Self, ) SEL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) SEL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_selector.get(), );
 }}
var sel_comparator = CachedSelector.init("comparator");
      pub fn comparator(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_comparator.get(), );
 }}
var sel_reversedSortDescriptor = CachedSelector.init("reversedSortDescriptor");
      pub fn reversedSortDescriptor(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reversedSortDescriptor.get(), );
 }}
  };
}

pub const NSSortDescriptor = opaque {
  const Self = @This();
  pub usingnamespace NSSortDescriptorInterfaceMixin(Self, "NSSortDescriptor");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSSortDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSSortDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSortDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSSortDescriptor");
};

pub fn NSURLAuthenticationChallengeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_ = CachedSelector.init("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:");
      pub fn initWithProtectionSpaceproposedCredentialpreviousFailureCountfailureResponseerrorsender(self: *Self, __space:  * NSURLProtectionSpace, __credential:  ?* NSURLCredential, __previousFailureCount: c_long, __response:  ?* NSURLResponse, __an_error:  ?* NSError, __sender:  * NSURLAuthenticationChallengeSender, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURLProtectionSpace,  ?* NSURLCredential, c_long,  ?* NSURLResponse,  ?* NSError,  * NSURLAuthenticationChallengeSender, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_.get(), __space, __credential, __previousFailureCount, __response, __an_error, __sender, );
 }}
var sel_initWithAuthenticationChallenge_sender_ = CachedSelector.init("initWithAuthenticationChallenge:sender:");
      pub fn initWithAuthenticationChallengesender(self: *Self, __challenge:  * NSURLAuthenticationChallenge, __sender:  * NSURLAuthenticationChallengeSender, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURLAuthenticationChallenge,  * NSURLAuthenticationChallengeSender, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithAuthenticationChallenge_sender_.get(), __challenge, __sender, );
 }}
var sel_protectionSpace = CachedSelector.init("protectionSpace");
      pub fn protectionSpace(self: *Self, )  * NSURLProtectionSpace {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURLProtectionSpace, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_protectionSpace.get(), );
 }}
var sel_proposedCredential = CachedSelector.init("proposedCredential");
      pub fn proposedCredential(self: *Self, )  ?* NSURLCredential {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLCredential, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_proposedCredential.get(), );
 }}
var sel_previousFailureCount = CachedSelector.init("previousFailureCount");
      pub fn previousFailureCount(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_previousFailureCount.get(), );
 }}
var sel_failureResponse = CachedSelector.init("failureResponse");
      pub fn failureResponse(self: *Self, )  ?* NSURLResponse {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLResponse, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_failureResponse.get(), );
 }}
var sel_error = CachedSelector.init("error");
      pub fn _error(self: *Self, )  ?* NSError {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSError, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_error.get(), );
 }}
var sel_sender = CachedSelector.init("sender");
      pub fn sender(self: *Self, )  ?* NSURLAuthenticationChallengeSender {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLAuthenticationChallengeSender, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sender.get(), );
 }}
  };
}

pub const NSURLAuthenticationChallenge = opaque {
  const Self = @This();
  pub usingnamespace NSURLAuthenticationChallengeInterfaceMixin(Self, "NSURLAuthenticationChallenge");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSURLAuthenticationChallenge");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLAuthenticationChallenge");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLAuthenticationChallenge");
};

pub fn NSSecureUnarchiveFromDataTransformerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_allowedTopLevelClasses = CachedSelector.init("allowedTopLevelClasses");
      pub fn allowedTopLevelClasses()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_allowedTopLevelClasses.get(), );
 }}
  };
}

pub const NSSecureUnarchiveFromDataTransformer = opaque {
  const Self = @This();
  pub usingnamespace NSSecureUnarchiveFromDataTransformerInterfaceMixin(Self, "NSSecureUnarchiveFromDataTransformer");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSecureUnarchiveFromDataTransformer");
  pub usingnamespace NSValueTransformerInterfaceMixin(Self, "NSSecureUnarchiveFromDataTransformer");
};

pub fn NSURLSessionStreamTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_readDataOfMinLength_maxLength_timeout_completionHandler_ = CachedSelector.init("readDataOfMinLength:maxLength:timeout:completionHandler:");
      pub fn readDataOfMinLengthmaxLengthtimeoutcompletionHandler(self: *Self, __minBytes: c_ulong, __maxBytes: c_ulong, __timeout: f64, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, f64, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readDataOfMinLength_maxLength_timeout_completionHandler_.get(), __minBytes, __maxBytes, __timeout, __completionHandler, );
 }}
var sel_writeData_timeout_completionHandler_ = CachedSelector.init("writeData:timeout:completionHandler:");
      pub fn writeDatatimeoutcompletionHandler(self: *Self, __data:  * NSData, __timeout: f64, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSData, f64, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeData_timeout_completionHandler_.get(), __data, __timeout, __completionHandler, );
 }}
var sel_captureStreams = CachedSelector.init("captureStreams");
      pub fn captureStreams(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_captureStreams.get(), );
 }}
var sel_closeWrite = CachedSelector.init("closeWrite");
      pub fn closeWrite(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_closeWrite.get(), );
 }}
var sel_closeRead = CachedSelector.init("closeRead");
      pub fn closeRead(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_closeRead.get(), );
 }}
var sel_startSecureConnection = CachedSelector.init("startSecureConnection");
      pub fn startSecureConnection(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startSecureConnection.get(), );
 }}
var sel_stopSecureConnection = CachedSelector.init("stopSecureConnection");
      pub fn stopSecureConnection(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stopSecureConnection.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
  };
}

pub const NSURLSessionStreamTask = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionStreamTaskInterfaceMixin(Self, "NSURLSessionStreamTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionStreamTask");
  pub usingnamespace NSURLSessionTaskInterfaceMixin(Self, "NSURLSessionStreamTask");
};

pub fn NSDecimalNumberInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithMantissa_exponent_isNegative_ = CachedSelector.init("initWithMantissa:exponent:isNegative:");
      pub fn initWithMantissaexponentisNegative(self: *Self, __mantissa: c_ulonglong, __exponent: c_short, __flag: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulonglong, c_short, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMantissa_exponent_isNegative_.get(), __mantissa, __exponent, __flag, );
 }}
var sel_initWithDecimal_ = CachedSelector.init("initWithDecimal:");
      pub fn initWithDecimal(self: *Self, __dcm: NSDecimal, ) *Self {{
           return @as(*const fn(*Self, SEL, NSDecimal, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDecimal_.get(), __dcm, );
 }}
var sel_initWithString_ = CachedSelector.init("initWithString:");
      pub fn initWithString(self: *Self, __numberValue:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_.get(), __numberValue, );
 }}
var sel_initWithString_locale_ = CachedSelector.init("initWithString:locale:");
      pub fn initWithStringlocale(self: *Self, __numberValue:  ?* NSString, __locale: id, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSString, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_locale_.get(), __numberValue, __locale, );
 }}
var sel_descriptionWithLocale_ = CachedSelector.init("descriptionWithLocale:");
      pub fn descriptionWithLocale(self: *Self, __locale: id, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_.get(), __locale, );
 }}
var sel_decimalNumberWithMantissa_exponent_isNegative_ = CachedSelector.init("decimalNumberWithMantissa:exponent:isNegative:");
      pub fn decimalNumberWithMantissaexponentisNegative(__mantissa: c_ulonglong, __exponent: c_short, __flag: c_int, )  * NSDecimalNumber {{
           return @as(*const fn(Class, SEL, c_ulonglong, c_short, c_int, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(class.get(), sel_decimalNumberWithMantissa_exponent_isNegative_.get(), __mantissa, __exponent, __flag, );
 }}
var sel_decimalNumberWithDecimal_ = CachedSelector.init("decimalNumberWithDecimal:");
      pub fn decimalNumberWithDecimal(__dcm: NSDecimal, )  * NSDecimalNumber {{
           return @as(*const fn(Class, SEL, NSDecimal, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(class.get(), sel_decimalNumberWithDecimal_.get(), __dcm, );
 }}
var sel_decimalNumberWithString_ = CachedSelector.init("decimalNumberWithString:");
      pub fn decimalNumberWithString(__numberValue:  ?* NSString, )  * NSDecimalNumber {{
           return @as(*const fn(Class, SEL,  ?* NSString, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(class.get(), sel_decimalNumberWithString_.get(), __numberValue, );
 }}
var sel_decimalNumberWithString_locale_ = CachedSelector.init("decimalNumberWithString:locale:");
      pub fn decimalNumberWithStringlocale(__numberValue:  ?* NSString, __locale: id, )  * NSDecimalNumber {{
           return @as(*const fn(Class, SEL,  ?* NSString, id, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(class.get(), sel_decimalNumberWithString_locale_.get(), __numberValue, __locale, );
 }}
var sel_decimalNumberByAdding_ = CachedSelector.init("decimalNumberByAdding:");
      pub fn decimalNumberByAdding(self: *Self, __decimalNumber:  * NSDecimalNumber, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL,  * NSDecimalNumber, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByAdding_.get(), __decimalNumber, );
 }}
var sel_decimalNumberByAdding_withBehavior_ = CachedSelector.init("decimalNumberByAdding:withBehavior:");
      pub fn decimalNumberByAddingwithBehavior(self: *Self, __decimalNumber:  * NSDecimalNumber, __behavior:  ?* NSDecimalNumberBehaviors, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL,  * NSDecimalNumber,  ?* NSDecimalNumberBehaviors, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByAdding_withBehavior_.get(), __decimalNumber, __behavior, );
 }}
var sel_decimalNumberBySubtracting_ = CachedSelector.init("decimalNumberBySubtracting:");
      pub fn decimalNumberBySubtracting(self: *Self, __decimalNumber:  * NSDecimalNumber, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL,  * NSDecimalNumber, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberBySubtracting_.get(), __decimalNumber, );
 }}
var sel_decimalNumberBySubtracting_withBehavior_ = CachedSelector.init("decimalNumberBySubtracting:withBehavior:");
      pub fn decimalNumberBySubtractingwithBehavior(self: *Self, __decimalNumber:  * NSDecimalNumber, __behavior:  ?* NSDecimalNumberBehaviors, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL,  * NSDecimalNumber,  ?* NSDecimalNumberBehaviors, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberBySubtracting_withBehavior_.get(), __decimalNumber, __behavior, );
 }}
var sel_decimalNumberByMultiplyingBy_ = CachedSelector.init("decimalNumberByMultiplyingBy:");
      pub fn decimalNumberByMultiplyingBy(self: *Self, __decimalNumber:  * NSDecimalNumber, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL,  * NSDecimalNumber, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByMultiplyingBy_.get(), __decimalNumber, );
 }}
var sel_decimalNumberByMultiplyingBy_withBehavior_ = CachedSelector.init("decimalNumberByMultiplyingBy:withBehavior:");
      pub fn decimalNumberByMultiplyingBywithBehavior(self: *Self, __decimalNumber:  * NSDecimalNumber, __behavior:  ?* NSDecimalNumberBehaviors, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL,  * NSDecimalNumber,  ?* NSDecimalNumberBehaviors, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByMultiplyingBy_withBehavior_.get(), __decimalNumber, __behavior, );
 }}
var sel_decimalNumberByDividingBy_ = CachedSelector.init("decimalNumberByDividingBy:");
      pub fn decimalNumberByDividingBy(self: *Self, __decimalNumber:  * NSDecimalNumber, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL,  * NSDecimalNumber, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByDividingBy_.get(), __decimalNumber, );
 }}
var sel_decimalNumberByDividingBy_withBehavior_ = CachedSelector.init("decimalNumberByDividingBy:withBehavior:");
      pub fn decimalNumberByDividingBywithBehavior(self: *Self, __decimalNumber:  * NSDecimalNumber, __behavior:  ?* NSDecimalNumberBehaviors, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL,  * NSDecimalNumber,  ?* NSDecimalNumberBehaviors, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByDividingBy_withBehavior_.get(), __decimalNumber, __behavior, );
 }}
var sel_decimalNumberByRaisingToPower_ = CachedSelector.init("decimalNumberByRaisingToPower:");
      pub fn decimalNumberByRaisingToPower(self: *Self, __power: c_ulong, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByRaisingToPower_.get(), __power, );
 }}
var sel_decimalNumberByRaisingToPower_withBehavior_ = CachedSelector.init("decimalNumberByRaisingToPower:withBehavior:");
      pub fn decimalNumberByRaisingToPowerwithBehavior(self: *Self, __power: c_ulong, __behavior:  ?* NSDecimalNumberBehaviors, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL, c_ulong,  ?* NSDecimalNumberBehaviors, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByRaisingToPower_withBehavior_.get(), __power, __behavior, );
 }}
var sel_decimalNumberByMultiplyingByPowerOf10_ = CachedSelector.init("decimalNumberByMultiplyingByPowerOf10:");
      pub fn decimalNumberByMultiplyingByPowerOf10(self: *Self, __power: c_short, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL, c_short, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByMultiplyingByPowerOf10_.get(), __power, );
 }}
var sel_decimalNumberByMultiplyingByPowerOf10_withBehavior_ = CachedSelector.init("decimalNumberByMultiplyingByPowerOf10:withBehavior:");
      pub fn decimalNumberByMultiplyingByPowerOf10withBehavior(self: *Self, __power: c_short, __behavior:  ?* NSDecimalNumberBehaviors, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL, c_short,  ?* NSDecimalNumberBehaviors, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByMultiplyingByPowerOf10_withBehavior_.get(), __power, __behavior, );
 }}
var sel_decimalNumberByRoundingAccordingToBehavior_ = CachedSelector.init("decimalNumberByRoundingAccordingToBehavior:");
      pub fn decimalNumberByRoundingAccordingToBehavior(self: *Self, __behavior:  ?* NSDecimalNumberBehaviors, )  * NSDecimalNumber {{
           return @as(*const fn(*Self, SEL,  ?* NSDecimalNumberBehaviors, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalNumberByRoundingAccordingToBehavior_.get(), __behavior, );
 }}
var sel_compare_ = CachedSelector.init("compare:");
      pub fn compare(self: *Self, __decimalNumber:  * NSNumber, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSNumber, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_.get(), __decimalNumber, );
 }}
var sel_decimalValue = CachedSelector.init("decimalValue");
      pub fn decimalValue(self: *Self, ) NSDecimal {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDecimal, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalValue.get(), );
 }}
var sel_zero = CachedSelector.init("zero");
      pub fn zero()  * NSDecimalNumber {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(class.get(), sel_zero.get(), );
 }}
var sel_one = CachedSelector.init("one");
      pub fn one()  * NSDecimalNumber {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(class.get(), sel_one.get(), );
 }}
var sel_minimumDecimalNumber = CachedSelector.init("minimumDecimalNumber");
      pub fn minimumDecimalNumber()  * NSDecimalNumber {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(class.get(), sel_minimumDecimalNumber.get(), );
 }}
var sel_maximumDecimalNumber = CachedSelector.init("maximumDecimalNumber");
      pub fn maximumDecimalNumber()  * NSDecimalNumber {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(class.get(), sel_maximumDecimalNumber.get(), );
 }}
var sel_notANumber = CachedSelector.init("notANumber");
      pub fn notANumber()  * NSDecimalNumber {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDecimalNumber, @ptrCast(&objc_msgSend))(class.get(), sel_notANumber.get(), );
 }}
var sel_defaultBehavior = CachedSelector.init("defaultBehavior");
      pub fn defaultBehavior()  * NSDecimalNumberBehaviors {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDecimalNumberBehaviors, @ptrCast(&objc_msgSend))(class.get(), sel_defaultBehavior.get(), );
 }}
var sel_setDefaultBehavior_ = CachedSelector.init("setDefaultBehavior:");
      pub fn setDefaultBehavior(__defaultBehavior:  * NSDecimalNumberBehaviors, ) void {{
           return @as(*const fn(Class, SEL,  * NSDecimalNumberBehaviors, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setDefaultBehavior_.get(), __defaultBehavior, );
 }}
var sel_objCType = CachedSelector.init("objCType");
      pub fn objCType(self: *Self, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objCType.get(), );
 }}
var sel_doubleValue = CachedSelector.init("doubleValue");
      pub fn doubleValue(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doubleValue.get(), );
 }}
  };
}

pub const NSDecimalNumber = opaque {
  const Self = @This();
  pub usingnamespace NSDecimalNumberInterfaceMixin(Self, "NSDecimalNumber");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDecimalNumber");
  pub usingnamespace NSNumberInterfaceMixin(Self, "NSDecimalNumber");
};

pub fn NSInflectionRuleExplicitInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithMorphology_ = CachedSelector.init("initWithMorphology:");
      pub fn initWithMorphology(self: *Self, __morphology:  * NSMorphology, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSMorphology, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMorphology_.get(), __morphology, );
 }}
var sel_morphology = CachedSelector.init("morphology");
      pub fn morphology(self: *Self, )  * NSMorphology {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSMorphology, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_morphology.get(), );
 }}
  };
}

pub const NSInflectionRuleExplicit = opaque {
  const Self = @This();
  pub usingnamespace NSInflectionRuleExplicitInterfaceMixin(Self, "NSInflectionRuleExplicit");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSInflectionRuleExplicit");
  pub usingnamespace NSInflectionRuleInterfaceMixin(Self, "NSInflectionRuleExplicit");
};

pub fn NSMutableURLRequestInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_URL = CachedSelector.init("URL");
      pub fn URL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL.get(), );
 }}
var sel_setURL_ = CachedSelector.init("setURL:");
      pub fn setURL(self: *Self, __URL:  ?* NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setURL_.get(), __URL, );
 }}
var sel_cachePolicy = CachedSelector.init("cachePolicy");
      pub fn cachePolicy(self: *Self, ) NSURLRequestCachePolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLRequestCachePolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cachePolicy.get(), );
 }}
var sel_setCachePolicy_ = CachedSelector.init("setCachePolicy:");
      pub fn setCachePolicy(self: *Self, __cachePolicy: NSURLRequestCachePolicy, ) void {{
           return @as(*const fn(*Self, SEL, NSURLRequestCachePolicy, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCachePolicy_.get(), __cachePolicy, );
 }}
var sel_timeoutInterval = CachedSelector.init("timeoutInterval");
      pub fn timeoutInterval(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeoutInterval.get(), );
 }}
var sel_setTimeoutInterval_ = CachedSelector.init("setTimeoutInterval:");
      pub fn setTimeoutInterval(self: *Self, __timeoutInterval: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeoutInterval_.get(), __timeoutInterval, );
 }}
var sel_mainDocumentURL = CachedSelector.init("mainDocumentURL");
      pub fn mainDocumentURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mainDocumentURL.get(), );
 }}
var sel_setMainDocumentURL_ = CachedSelector.init("setMainDocumentURL:");
      pub fn setMainDocumentURL(self: *Self, __mainDocumentURL:  ?* NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMainDocumentURL_.get(), __mainDocumentURL, );
 }}
var sel_networkServiceType = CachedSelector.init("networkServiceType");
      pub fn networkServiceType(self: *Self, ) NSURLRequestNetworkServiceType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLRequestNetworkServiceType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_networkServiceType.get(), );
 }}
var sel_setNetworkServiceType_ = CachedSelector.init("setNetworkServiceType:");
      pub fn setNetworkServiceType(self: *Self, __networkServiceType: NSURLRequestNetworkServiceType, ) void {{
           return @as(*const fn(*Self, SEL, NSURLRequestNetworkServiceType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNetworkServiceType_.get(), __networkServiceType, );
 }}
var sel_allowsCellularAccess = CachedSelector.init("allowsCellularAccess");
      pub fn allowsCellularAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsCellularAccess.get(), );
 }}
var sel_setAllowsCellularAccess_ = CachedSelector.init("setAllowsCellularAccess:");
      pub fn setAllowsCellularAccess(self: *Self, __allowsCellularAccess: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsCellularAccess_.get(), __allowsCellularAccess, );
 }}
var sel_allowsExpensiveNetworkAccess = CachedSelector.init("allowsExpensiveNetworkAccess");
      pub fn allowsExpensiveNetworkAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsExpensiveNetworkAccess.get(), );
 }}
var sel_setAllowsExpensiveNetworkAccess_ = CachedSelector.init("setAllowsExpensiveNetworkAccess:");
      pub fn setAllowsExpensiveNetworkAccess(self: *Self, __allowsExpensiveNetworkAccess: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsExpensiveNetworkAccess_.get(), __allowsExpensiveNetworkAccess, );
 }}
var sel_allowsConstrainedNetworkAccess = CachedSelector.init("allowsConstrainedNetworkAccess");
      pub fn allowsConstrainedNetworkAccess(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsConstrainedNetworkAccess.get(), );
 }}
var sel_setAllowsConstrainedNetworkAccess_ = CachedSelector.init("setAllowsConstrainedNetworkAccess:");
      pub fn setAllowsConstrainedNetworkAccess(self: *Self, __allowsConstrainedNetworkAccess: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsConstrainedNetworkAccess_.get(), __allowsConstrainedNetworkAccess, );
 }}
var sel_assumesHTTP3Capable = CachedSelector.init("assumesHTTP3Capable");
      pub fn assumesHTTP3Capable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_assumesHTTP3Capable.get(), );
 }}
var sel_setAssumesHTTP3Capable_ = CachedSelector.init("setAssumesHTTP3Capable:");
      pub fn setAssumesHTTP3Capable(self: *Self, __assumesHTTP3Capable: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAssumesHTTP3Capable_.get(), __assumesHTTP3Capable, );
 }}
var sel_attribution = CachedSelector.init("attribution");
      pub fn attribution(self: *Self, ) NSURLRequestAttribution {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLRequestAttribution, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attribution.get(), );
 }}
var sel_setAttribution_ = CachedSelector.init("setAttribution:");
      pub fn setAttribution(self: *Self, __attribution: NSURLRequestAttribution, ) void {{
           return @as(*const fn(*Self, SEL, NSURLRequestAttribution, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttribution_.get(), __attribution, );
 }}
var sel_requiresDNSSECValidation = CachedSelector.init("requiresDNSSECValidation");
      pub fn requiresDNSSECValidation(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requiresDNSSECValidation.get(), );
 }}
var sel_setRequiresDNSSECValidation_ = CachedSelector.init("setRequiresDNSSECValidation:");
      pub fn setRequiresDNSSECValidation(self: *Self, __requiresDNSSECValidation: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRequiresDNSSECValidation_.get(), __requiresDNSSECValidation, );
 }}
var sel_setValue_forHTTPHeaderField_ = CachedSelector.init("setValue:forHTTPHeaderField:");
      pub fn setValueforHTTPHeaderField(self: *Self, __value:  ?* NSString, __field:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValue_forHTTPHeaderField_.get(), __value, __field, );
 }}
var sel_addValue_forHTTPHeaderField_ = CachedSelector.init("addValue:forHTTPHeaderField:");
      pub fn addValueforHTTPHeaderField(self: *Self, __value:  * NSString, __field:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addValue_forHTTPHeaderField_.get(), __value, __field, );
 }}
var sel_HTTPMethod = CachedSelector.init("HTTPMethod");
      pub fn HTTPMethod(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPMethod.get(), );
 }}
var sel_setHTTPMethod_ = CachedSelector.init("setHTTPMethod:");
      pub fn setHTTPMethod(self: *Self, __HTTPMethod:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPMethod_.get(), __HTTPMethod, );
 }}
var sel_allHTTPHeaderFields = CachedSelector.init("allHTTPHeaderFields");
      pub fn allHTTPHeaderFields(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allHTTPHeaderFields.get(), );
 }}
var sel_setAllHTTPHeaderFields_ = CachedSelector.init("setAllHTTPHeaderFields:");
      pub fn setAllHTTPHeaderFields(self: *Self, __allHTTPHeaderFields:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllHTTPHeaderFields_.get(), __allHTTPHeaderFields, );
 }}
var sel_HTTPBody = CachedSelector.init("HTTPBody");
      pub fn HTTPBody(self: *Self, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPBody.get(), );
 }}
var sel_setHTTPBody_ = CachedSelector.init("setHTTPBody:");
      pub fn setHTTPBody(self: *Self, __HTTPBody:  ?* NSData, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPBody_.get(), __HTTPBody, );
 }}
var sel_HTTPBodyStream = CachedSelector.init("HTTPBodyStream");
      pub fn HTTPBodyStream(self: *Self, )  ?* NSInputStream {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSInputStream, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPBodyStream.get(), );
 }}
var sel_setHTTPBodyStream_ = CachedSelector.init("setHTTPBodyStream:");
      pub fn setHTTPBodyStream(self: *Self, __HTTPBodyStream:  ?* NSInputStream, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSInputStream, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPBodyStream_.get(), __HTTPBodyStream, );
 }}
var sel_HTTPShouldHandleCookies = CachedSelector.init("HTTPShouldHandleCookies");
      pub fn HTTPShouldHandleCookies(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPShouldHandleCookies.get(), );
 }}
var sel_setHTTPShouldHandleCookies_ = CachedSelector.init("setHTTPShouldHandleCookies:");
      pub fn setHTTPShouldHandleCookies(self: *Self, __HTTPShouldHandleCookies: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPShouldHandleCookies_.get(), __HTTPShouldHandleCookies, );
 }}
var sel_HTTPShouldUsePipelining = CachedSelector.init("HTTPShouldUsePipelining");
      pub fn HTTPShouldUsePipelining(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_HTTPShouldUsePipelining.get(), );
 }}
var sel_setHTTPShouldUsePipelining_ = CachedSelector.init("setHTTPShouldUsePipelining:");
      pub fn setHTTPShouldUsePipelining(self: *Self, __HTTPShouldUsePipelining: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHTTPShouldUsePipelining_.get(), __HTTPShouldUsePipelining, );
 }}
  };
}

pub const NSMutableURLRequest = opaque {
  const Self = @This();
  pub usingnamespace NSMutableURLRequestInterfaceMixin(Self, "NSMutableURLRequest");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableURLRequest");
  pub usingnamespace NSURLRequestInterfaceMixin(Self, "NSMutableURLRequest");
};

pub fn NSTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_launchAndReturnError_ = CachedSelector.init("launchAndReturnError:");
      pub fn launchAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_launchAndReturnError_.get(), __an_error, );
 }}
var sel_interrupt = CachedSelector.init("interrupt");
      pub fn interrupt(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_interrupt.get(), );
 }}
var sel_terminate = CachedSelector.init("terminate");
      pub fn terminate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_terminate.get(), );
 }}
var sel_suspend = CachedSelector.init("suspend");
      pub fn _suspend(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suspend.get(), );
 }}
var sel_resume = CachedSelector.init("resume");
      pub fn _resume(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resume.get(), );
 }}
var sel_executableURL = CachedSelector.init("executableURL");
      pub fn executableURL(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executableURL.get(), );
 }}
var sel_setExecutableURL_ = CachedSelector.init("setExecutableURL:");
      pub fn setExecutableURL(self: *Self, __executableURL:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setExecutableURL_.get(), __executableURL, );
 }}
var sel_arguments = CachedSelector.init("arguments");
      pub fn arguments(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arguments.get(), );
 }}
var sel_setArguments_ = CachedSelector.init("setArguments:");
      pub fn setArguments(self: *Self, __arguments:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArguments_.get(), __arguments, );
 }}
var sel_environment = CachedSelector.init("environment");
      pub fn environment(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_environment.get(), );
 }}
var sel_setEnvironment_ = CachedSelector.init("setEnvironment:");
      pub fn setEnvironment(self: *Self, __environment:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEnvironment_.get(), __environment, );
 }}
var sel_currentDirectoryURL = CachedSelector.init("currentDirectoryURL");
      pub fn currentDirectoryURL(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentDirectoryURL.get(), );
 }}
var sel_setCurrentDirectoryURL_ = CachedSelector.init("setCurrentDirectoryURL:");
      pub fn setCurrentDirectoryURL(self: *Self, __currentDirectoryURL:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurrentDirectoryURL_.get(), __currentDirectoryURL, );
 }}
var sel_standardInput = CachedSelector.init("standardInput");
      pub fn standardInput(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standardInput.get(), );
 }}
var sel_setStandardInput_ = CachedSelector.init("setStandardInput:");
      pub fn setStandardInput(self: *Self, __standardInput: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandardInput_.get(), __standardInput, );
 }}
var sel_standardOutput = CachedSelector.init("standardOutput");
      pub fn standardOutput(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standardOutput.get(), );
 }}
var sel_setStandardOutput_ = CachedSelector.init("setStandardOutput:");
      pub fn setStandardOutput(self: *Self, __standardOutput: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandardOutput_.get(), __standardOutput, );
 }}
var sel_standardError = CachedSelector.init("standardError");
      pub fn standardError(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standardError.get(), );
 }}
var sel_setStandardError_ = CachedSelector.init("setStandardError:");
      pub fn setStandardError(self: *Self, __standardError: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandardError_.get(), __standardError, );
 }}
var sel_processIdentifier = CachedSelector.init("processIdentifier");
      pub fn processIdentifier(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_processIdentifier.get(), );
 }}
var sel_isRunning = CachedSelector.init("isRunning");
      pub fn isRunning(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isRunning.get(), );
 }}
var sel_terminationStatus = CachedSelector.init("terminationStatus");
      pub fn terminationStatus(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_terminationStatus.get(), );
 }}
var sel_terminationReason = CachedSelector.init("terminationReason");
      pub fn terminationReason(self: *Self, ) NSTaskTerminationReason {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSTaskTerminationReason, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_terminationReason.get(), );
 }}
var sel_terminationHandler = CachedSelector.init("terminationHandler");
      pub fn terminationHandler(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_terminationHandler.get(), );
 }}
var sel_setTerminationHandler_ = CachedSelector.init("setTerminationHandler:");
      pub fn setTerminationHandler(self: *Self, __terminationHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTerminationHandler_.get(), __terminationHandler, );
 }}
var sel_qualityOfService = CachedSelector.init("qualityOfService");
      pub fn qualityOfService(self: *Self, ) NSQualityOfService {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSQualityOfService, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_qualityOfService.get(), );
 }}
var sel_setQualityOfService_ = CachedSelector.init("setQualityOfService:");
      pub fn setQualityOfService(self: *Self, __qualityOfService: NSQualityOfService, ) void {{
           return @as(*const fn(*Self, SEL, NSQualityOfService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQualityOfService_.get(), __qualityOfService, );
 }}
var sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_ = CachedSelector.init("launchedTaskWithExecutableURL:arguments:error:terminationHandler:");
      pub fn launchedTaskWithExecutableURLargumentserrorterminationHandler(__url:  * NSURL, __arguments:  * NSArray, __an_error:  [*c]  ?* NSError, __terminationHandler: ?*u8, )  ?* NSTask {{
           return @as(*const fn(Class, SEL,  * NSURL,  * NSArray,  [*c]  ?* NSError, ?*u8, ) callconv(.C)  ?* NSTask, @ptrCast(&objc_msgSend))(class.get(), sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_.get(), __url, __arguments, __an_error, __terminationHandler, );
 }}
var sel_waitUntilExit = CachedSelector.init("waitUntilExit");
      pub fn waitUntilExit(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitUntilExit.get(), );
 }}
var sel_launch = CachedSelector.init("launch");
      pub fn launch(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_launch.get(), );
 }}
var sel_launchedTaskWithLaunchPath_arguments_ = CachedSelector.init("launchedTaskWithLaunchPath:arguments:");
      pub fn launchedTaskWithLaunchPatharguments(__path:  * NSString, __arguments:  * NSArray, )  * NSTask {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSArray, ) callconv(.C)  * NSTask, @ptrCast(&objc_msgSend))(class.get(), sel_launchedTaskWithLaunchPath_arguments_.get(), __path, __arguments, );
 }}
var sel_launchPath = CachedSelector.init("launchPath");
      pub fn launchPath(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_launchPath.get(), );
 }}
var sel_setLaunchPath_ = CachedSelector.init("setLaunchPath:");
      pub fn setLaunchPath(self: *Self, __launchPath:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLaunchPath_.get(), __launchPath, );
 }}
var sel_currentDirectoryPath = CachedSelector.init("currentDirectoryPath");
      pub fn currentDirectoryPath(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentDirectoryPath.get(), );
 }}
var sel_setCurrentDirectoryPath_ = CachedSelector.init("setCurrentDirectoryPath:");
      pub fn setCurrentDirectoryPath(self: *Self, __currentDirectoryPath:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurrentDirectoryPath_.get(), __currentDirectoryPath, );
 }}
  };
}

pub const NSTask = opaque {
  const Self = @This();
  pub usingnamespace NSTaskInterfaceMixin(Self, "NSTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSTask");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSTask");
};

pub fn NSDateIntervalInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_initWithStartDate_duration_ = CachedSelector.init("initWithStartDate:duration:");
      pub fn initWithStartDateduration(self: *Self, __startDate:  * NSDate, __duration: f64, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSDate, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithStartDate_duration_.get(), __startDate, __duration, );
 }}
var sel_initWithStartDate_endDate_ = CachedSelector.init("initWithStartDate:endDate:");
      pub fn initWithStartDateendDate(self: *Self, __startDate:  * NSDate, __endDate:  * NSDate, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDate, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithStartDate_endDate_.get(), __startDate, __endDate, );
 }}
var sel_compare_ = CachedSelector.init("compare:");
      pub fn compare(self: *Self, __dateInterval:  * NSDateInterval, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSDateInterval, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_.get(), __dateInterval, );
 }}
var sel_isEqualToDateInterval_ = CachedSelector.init("isEqualToDateInterval:");
      pub fn isEqualToDateInterval(self: *Self, __dateInterval:  * NSDateInterval, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDateInterval, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToDateInterval_.get(), __dateInterval, );
 }}
var sel_intersectsDateInterval_ = CachedSelector.init("intersectsDateInterval:");
      pub fn intersectsDateInterval(self: *Self, __dateInterval:  * NSDateInterval, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDateInterval, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectsDateInterval_.get(), __dateInterval, );
 }}
var sel_intersectionWithDateInterval_ = CachedSelector.init("intersectionWithDateInterval:");
      pub fn intersectionWithDateInterval(self: *Self, __dateInterval:  * NSDateInterval, )  ?* NSDateInterval {{
           return @as(*const fn(*Self, SEL,  * NSDateInterval, ) callconv(.C)  ?* NSDateInterval, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectionWithDateInterval_.get(), __dateInterval, );
 }}
var sel_containsDate_ = CachedSelector.init("containsDate:");
      pub fn containsDate(self: *Self, __date:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsDate_.get(), __date, );
 }}
var sel_startDate = CachedSelector.init("startDate");
      pub fn startDate(self: *Self, )  * NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startDate.get(), );
 }}
var sel_endDate = CachedSelector.init("endDate");
      pub fn endDate(self: *Self, )  * NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endDate.get(), );
 }}
var sel_duration = CachedSelector.init("duration");
      pub fn duration(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_duration.get(), );
 }}
  };
}

pub const NSDateInterval = opaque {
  const Self = @This();
  pub usingnamespace NSDateIntervalInterfaceMixin(Self, "NSDateInterval");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSDateInterval");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSDateInterval");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDateInterval");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSDateInterval");
};

pub fn NSCompoundPredicateInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithType_subpredicates_ = CachedSelector.init("initWithType:subpredicates:");
      pub fn initWithTypesubpredicates(self: *Self, __a_type: NSCompoundPredicateType, __subpredicates:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL, NSCompoundPredicateType,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithType_subpredicates_.get(), __a_type, __subpredicates, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_andPredicateWithSubpredicates_ = CachedSelector.init("andPredicateWithSubpredicates:");
      pub fn andPredicateWithSubpredicates(__subpredicates:  * NSArray, )  * NSCompoundPredicate {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C)  * NSCompoundPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_andPredicateWithSubpredicates_.get(), __subpredicates, );
 }}
var sel_orPredicateWithSubpredicates_ = CachedSelector.init("orPredicateWithSubpredicates:");
      pub fn orPredicateWithSubpredicates(__subpredicates:  * NSArray, )  * NSCompoundPredicate {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C)  * NSCompoundPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_orPredicateWithSubpredicates_.get(), __subpredicates, );
 }}
var sel_notPredicateWithSubpredicate_ = CachedSelector.init("notPredicateWithSubpredicate:");
      pub fn notPredicateWithSubpredicate(__predicate:  * NSPredicate, )  * NSCompoundPredicate {{
           return @as(*const fn(Class, SEL,  * NSPredicate, ) callconv(.C)  * NSCompoundPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_notPredicateWithSubpredicate_.get(), __predicate, );
 }}
var sel_compoundPredicateType = CachedSelector.init("compoundPredicateType");
      pub fn compoundPredicateType(self: *Self, ) NSCompoundPredicateType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSCompoundPredicateType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compoundPredicateType.get(), );
 }}
var sel_subpredicates = CachedSelector.init("subpredicates");
      pub fn subpredicates(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_subpredicates.get(), );
 }}
  };
}

pub const NSCompoundPredicate = opaque {
  const Self = @This();
  pub usingnamespace NSCompoundPredicateInterfaceMixin(Self, "NSCompoundPredicate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCompoundPredicate");
  pub usingnamespace NSPredicateInterfaceMixin(Self, "NSCompoundPredicate");
};

pub fn MTLPipelineBufferDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __bufferIndex: c_ulong, )  * MTLPipelineBufferDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLPipelineBufferDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __bufferIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __buffer:  ?* MTLPipelineBufferDescriptor, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLPipelineBufferDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __buffer, __bufferIndex, );
 }}
  };
}

pub const MTLPipelineBufferDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLPipelineBufferDescriptorArrayInterfaceMixin(Self, "MTLPipelineBufferDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLPipelineBufferDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLPipelineBufferDescriptorArray");
};

pub fn NSArchiverInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initForWritingWithMutableData_ = CachedSelector.init("initForWritingWithMutableData:");
      pub fn initForWritingWithMutableData(self: *Self, __mdata:  * NSMutableData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSMutableData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initForWritingWithMutableData_.get(), __mdata, );
 }}
var sel_encodeRootObject_ = CachedSelector.init("encodeRootObject:");
      pub fn encodeRootObject(self: *Self, __rootObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeRootObject_.get(), __rootObject, );
 }}
var sel_encodeConditionalObject_ = CachedSelector.init("encodeConditionalObject:");
      pub fn encodeConditionalObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeConditionalObject_.get(), __object, );
 }}
var sel_archivedDataWithRootObject_ = CachedSelector.init("archivedDataWithRootObject:");
      pub fn archivedDataWithRootObject(__rootObject: id, )  * NSData {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(class.get(), sel_archivedDataWithRootObject_.get(), __rootObject, );
 }}
var sel_archiveRootObject_toFile_ = CachedSelector.init("archiveRootObject:toFile:");
      pub fn archiveRootObjecttoFile(__rootObject: id, __path:  * NSString, ) c_int {{
           return @as(*const fn(Class, SEL, id,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_archiveRootObject_toFile_.get(), __rootObject, __path, );
 }}
var sel_encodeClassName_intoClassName_ = CachedSelector.init("encodeClassName:intoClassName:");
      pub fn encodeClassNameintoClassName(self: *Self, __trueName:  * NSString, __inArchiveName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeClassName_intoClassName_.get(), __trueName, __inArchiveName, );
 }}
var sel_classNameEncodedForTrueClassName_ = CachedSelector.init("classNameEncodedForTrueClassName:");
      pub fn classNameEncodedForTrueClassName(self: *Self, __trueName:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classNameEncodedForTrueClassName_.get(), __trueName, );
 }}
var sel_replaceObject_withObject_ = CachedSelector.init("replaceObject:withObject:");
      pub fn replaceObjectwithObject(self: *Self, __object: id, __newObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceObject_withObject_.get(), __object, __newObject, );
 }}
var sel_archiverData = CachedSelector.init("archiverData");
      pub fn archiverData(self: *Self, )  * NSMutableData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSMutableData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_archiverData.get(), );
 }}
  };
}

pub const NSArchiver = opaque {
  const Self = @This();
  pub usingnamespace NSArchiverInterfaceMixin(Self, "NSArchiver");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSArchiver");
  pub usingnamespace NSCoderInterfaceMixin(Self, "NSArchiver");
};

pub fn MTLAccelerationStructureMotionTriangleGeometryDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_descriptor.get(), );
 }}
var sel_vertexBuffers = CachedSelector.init("vertexBuffers");
      pub fn vertexBuffers(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexBuffers.get(), );
 }}
var sel_setVertexBuffers_ = CachedSelector.init("setVertexBuffers:");
      pub fn setVertexBuffers(self: *Self, __vertexBuffers:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexBuffers_.get(), __vertexBuffers, );
 }}
var sel_vertexFormat = CachedSelector.init("vertexFormat");
      pub fn vertexFormat(self: *Self, ) MTLAttributeFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAttributeFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexFormat.get(), );
 }}
var sel_setVertexFormat_ = CachedSelector.init("setVertexFormat:");
      pub fn setVertexFormat(self: *Self, __vertexFormat: MTLAttributeFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLAttributeFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexFormat_.get(), __vertexFormat, );
 }}
var sel_vertexStride = CachedSelector.init("vertexStride");
      pub fn vertexStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexStride.get(), );
 }}
var sel_setVertexStride_ = CachedSelector.init("setVertexStride:");
      pub fn setVertexStride(self: *Self, __vertexStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexStride_.get(), __vertexStride, );
 }}
var sel_indexBuffer = CachedSelector.init("indexBuffer");
      pub fn indexBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexBuffer.get(), );
 }}
var sel_setIndexBuffer_ = CachedSelector.init("setIndexBuffer:");
      pub fn setIndexBuffer(self: *Self, __indexBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexBuffer_.get(), __indexBuffer, );
 }}
var sel_indexBufferOffset = CachedSelector.init("indexBufferOffset");
      pub fn indexBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexBufferOffset.get(), );
 }}
var sel_setIndexBufferOffset_ = CachedSelector.init("setIndexBufferOffset:");
      pub fn setIndexBufferOffset(self: *Self, __indexBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexBufferOffset_.get(), __indexBufferOffset, );
 }}
var sel_indexType = CachedSelector.init("indexType");
      pub fn indexType(self: *Self, ) MTLIndexType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLIndexType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexType.get(), );
 }}
var sel_setIndexType_ = CachedSelector.init("setIndexType:");
      pub fn setIndexType(self: *Self, __indexType: MTLIndexType, ) void {{
           return @as(*const fn(*Self, SEL, MTLIndexType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexType_.get(), __indexType, );
 }}
var sel_triangleCount = CachedSelector.init("triangleCount");
      pub fn triangleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_triangleCount.get(), );
 }}
var sel_setTriangleCount_ = CachedSelector.init("setTriangleCount:");
      pub fn setTriangleCount(self: *Self, __triangleCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTriangleCount_.get(), __triangleCount, );
 }}
var sel_transformationMatrixBuffer = CachedSelector.init("transformationMatrixBuffer");
      pub fn transformationMatrixBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transformationMatrixBuffer.get(), );
 }}
var sel_setTransformationMatrixBuffer_ = CachedSelector.init("setTransformationMatrixBuffer:");
      pub fn setTransformationMatrixBuffer(self: *Self, __transformationMatrixBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTransformationMatrixBuffer_.get(), __transformationMatrixBuffer, );
 }}
var sel_transformationMatrixBufferOffset = CachedSelector.init("transformationMatrixBufferOffset");
      pub fn transformationMatrixBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transformationMatrixBufferOffset.get(), );
 }}
var sel_setTransformationMatrixBufferOffset_ = CachedSelector.init("setTransformationMatrixBufferOffset:");
      pub fn setTransformationMatrixBufferOffset(self: *Self, __transformationMatrixBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTransformationMatrixBufferOffset_.get(), __transformationMatrixBufferOffset, );
 }}
  };
}

pub const MTLAccelerationStructureMotionTriangleGeometryDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureMotionTriangleGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureMotionTriangleGeometryDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructureMotionTriangleGeometryDescriptor");
  pub usingnamespace MTLAccelerationStructureGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureMotionTriangleGeometryDescriptor");
};

pub fn NSRegularExpressionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_regularExpressionWithPattern_options_error_ = CachedSelector.init("regularExpressionWithPattern:options:error:");
      pub fn regularExpressionWithPatternoptionserror(__pattern:  * NSString, __options: NSRegularExpressionOptions, __an_error:  [*c]  ?* NSError, )  ?* NSRegularExpression {{
           return @as(*const fn(Class, SEL,  * NSString, NSRegularExpressionOptions,  [*c]  ?* NSError, ) callconv(.C)  ?* NSRegularExpression, @ptrCast(&objc_msgSend))(class.get(), sel_regularExpressionWithPattern_options_error_.get(), __pattern, __options, __an_error, );
 }}
var sel_initWithPattern_options_error_ = CachedSelector.init("initWithPattern:options:error:");
      pub fn initWithPatternoptionserror(self: *Self, __pattern:  * NSString, __options: NSRegularExpressionOptions, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, NSRegularExpressionOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithPattern_options_error_.get(), __pattern, __options, __an_error, );
 }}
var sel_escapedPatternForString_ = CachedSelector.init("escapedPatternForString:");
      pub fn escapedPatternForString(__string:  * NSString, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_escapedPatternForString_.get(), __string, );
 }}
var sel_pattern = CachedSelector.init("pattern");
      pub fn pattern(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pattern.get(), );
 }}
var sel_options = CachedSelector.init("options");
      pub fn options(self: *Self, ) NSRegularExpressionOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSRegularExpressionOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_options.get(), );
 }}
var sel_numberOfCaptureGroups = CachedSelector.init("numberOfCaptureGroups");
      pub fn numberOfCaptureGroups(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberOfCaptureGroups.get(), );
 }}
var sel_enumerateMatchesInString_options_range_usingBlock_ = CachedSelector.init("enumerateMatchesInString:options:range:usingBlock:");
      pub fn enumerateMatchesInStringoptionsrangeusingBlock(self: *Self, __string:  * NSString, __options: NSMatchingOptions, __range: _NSRange, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, NSMatchingOptions, _NSRange, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateMatchesInString_options_range_usingBlock_.get(), __string, __options, __range, __block, );
 }}
var sel_matchesInString_options_range_ = CachedSelector.init("matchesInString:options:range:");
      pub fn matchesInStringoptionsrange(self: *Self, __string:  * NSString, __options: NSMatchingOptions, __range: _NSRange, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, NSMatchingOptions, _NSRange, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_matchesInString_options_range_.get(), __string, __options, __range, );
 }}
var sel_numberOfMatchesInString_options_range_ = CachedSelector.init("numberOfMatchesInString:options:range:");
      pub fn numberOfMatchesInStringoptionsrange(self: *Self, __string:  * NSString, __options: NSMatchingOptions, __range: _NSRange, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  * NSString, NSMatchingOptions, _NSRange, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberOfMatchesInString_options_range_.get(), __string, __options, __range, );
 }}
var sel_firstMatchInString_options_range_ = CachedSelector.init("firstMatchInString:options:range:");
      pub fn firstMatchInStringoptionsrange(self: *Self, __string:  * NSString, __options: NSMatchingOptions, __range: _NSRange, )  ?* NSTextCheckingResult {{
           return @as(*const fn(*Self, SEL,  * NSString, NSMatchingOptions, _NSRange, ) callconv(.C)  ?* NSTextCheckingResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_firstMatchInString_options_range_.get(), __string, __options, __range, );
 }}
var sel_rangeOfFirstMatchInString_options_range_ = CachedSelector.init("rangeOfFirstMatchInString:options:range:");
      pub fn rangeOfFirstMatchInStringoptionsrange(self: *Self, __string:  * NSString, __options: NSMatchingOptions, __range: _NSRange, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSString, NSMatchingOptions, _NSRange, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfFirstMatchInString_options_range_.get(), __string, __options, __range, );
 }}
var sel_stringByReplacingMatchesInString_options_range_withTemplate_ = CachedSelector.init("stringByReplacingMatchesInString:options:range:withTemplate:");
      pub fn stringByReplacingMatchesInStringoptionsrangewithTemplate(self: *Self, __string:  * NSString, __options: NSMatchingOptions, __range: _NSRange, __templ:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, NSMatchingOptions, _NSRange,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringByReplacingMatchesInString_options_range_withTemplate_.get(), __string, __options, __range, __templ, );
 }}
var sel_replaceMatchesInString_options_range_withTemplate_ = CachedSelector.init("replaceMatchesInString:options:range:withTemplate:");
      pub fn replaceMatchesInStringoptionsrangewithTemplate(self: *Self, __string:  * NSMutableString, __options: NSMatchingOptions, __range: _NSRange, __templ:  * NSString, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  * NSMutableString, NSMatchingOptions, _NSRange,  * NSString, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceMatchesInString_options_range_withTemplate_.get(), __string, __options, __range, __templ, );
 }}
var sel_replacementStringForResult_inString_offset_template_ = CachedSelector.init("replacementStringForResult:inString:offset:template:");
      pub fn replacementStringForResultinStringoffsettemplate(self: *Self, __result:  * NSTextCheckingResult, __string:  * NSString, __offset: c_long, __templ:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSTextCheckingResult,  * NSString, c_long,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replacementStringForResult_inString_offset_template_.get(), __result, __string, __offset, __templ, );
 }}
var sel_escapedTemplateForString_ = CachedSelector.init("escapedTemplateForString:");
      pub fn escapedTemplateForString(__string:  * NSString, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_escapedTemplateForString_.get(), __string, );
 }}
  };
}

pub const NSRegularExpression = opaque {
  const Self = @This();
  pub usingnamespace NSRegularExpressionInterfaceMixin(Self, "NSRegularExpression");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSRegularExpression");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSRegularExpression");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSRegularExpression");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSRegularExpression");
};

pub fn MTLStructTypeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_memberByName_ = CachedSelector.init("memberByName:");
      pub fn memberByName(self: *Self, __name:  * NSString, )  ?* MTLStructMember {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* MTLStructMember, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_memberByName_.get(), __name, );
 }}
var sel_members = CachedSelector.init("members");
      pub fn members(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_members.get(), );
 }}
  };
}

pub const MTLStructType = opaque {
  const Self = @This();
  pub usingnamespace MTLStructTypeInterfaceMixin(Self, "MTLStructType");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLStructType");
  pub usingnamespace MTLTypeInterfaceMixin(Self, "MTLStructType");
};

pub fn MTLFunctionStitchingAttributeAlwaysInlineInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const MTLFunctionStitchingAttributeAlwaysInline = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionStitchingAttributeAlwaysInlineInterfaceMixin(Self, "MTLFunctionStitchingAttributeAlwaysInline");
  pub usingnamespace MTLFunctionStitchingAttributeProtocolMixin(Self, "MTLFunctionStitchingAttributeAlwaysInline");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionStitchingAttributeAlwaysInline");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLFunctionStitchingAttributeAlwaysInline");
};

pub fn NSMachPortInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_portWithMachPort_ = CachedSelector.init("portWithMachPort:");
      pub fn portWithMachPort(__machPort: c_uint, )  * NSPort {{
           return @as(*const fn(Class, SEL, c_uint, ) callconv(.C)  * NSPort, @ptrCast(&objc_msgSend))(class.get(), sel_portWithMachPort_.get(), __machPort, );
 }}
var sel_initWithMachPort_ = CachedSelector.init("initWithMachPort:");
      pub fn initWithMachPort(self: *Self, __machPort: c_uint, ) *Self {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMachPort_.get(), __machPort, );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __anObject:  ?* NSMachPortDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSMachPortDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __anObject, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSMachPortDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSMachPortDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_portWithMachPort_options_ = CachedSelector.init("portWithMachPort:options:");
      pub fn portWithMachPortoptions(__machPort: c_uint, __f: NSMachPortOptions, )  * NSPort {{
           return @as(*const fn(Class, SEL, c_uint, NSMachPortOptions, ) callconv(.C)  * NSPort, @ptrCast(&objc_msgSend))(class.get(), sel_portWithMachPort_options_.get(), __machPort, __f, );
 }}
var sel_initWithMachPort_options_ = CachedSelector.init("initWithMachPort:options:");
      pub fn initWithMachPortoptions(self: *Self, __machPort: c_uint, __f: NSMachPortOptions, ) *Self {{
           return @as(*const fn(*Self, SEL, c_uint, NSMachPortOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMachPort_options_.get(), __machPort, __f, );
 }}
var sel_scheduleInRunLoop_forMode_ = CachedSelector.init("scheduleInRunLoop:forMode:");
      pub fn scheduleInRunLoopforMode(self: *Self, __runLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduleInRunLoop_forMode_.get(), __runLoop, __mode, );
 }}
var sel_removeFromRunLoop_forMode_ = CachedSelector.init("removeFromRunLoop:forMode:");
      pub fn removeFromRunLoopforMode(self: *Self, __runLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeFromRunLoop_forMode_.get(), __runLoop, __mode, );
 }}
var sel_machPort = CachedSelector.init("machPort");
      pub fn machPort(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_machPort.get(), );
 }}
  };
}

pub const NSMachPort = opaque {
  const Self = @This();
  pub usingnamespace NSMachPortInterfaceMixin(Self, "NSMachPort");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMachPort");
  pub usingnamespace NSPortInterfaceMixin(Self, "NSMachPort");
};

pub fn NSIndexSetInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_indexSet = CachedSelector.init("indexSet");
      pub fn indexSet() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_indexSet.get(), );
 }}
var sel_indexSetWithIndex_ = CachedSelector.init("indexSetWithIndex:");
      pub fn indexSetWithIndex(__value: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_indexSetWithIndex_.get(), __value, );
 }}
var sel_indexSetWithIndexesInRange_ = CachedSelector.init("indexSetWithIndexesInRange:");
      pub fn indexSetWithIndexesInRange(__range: _NSRange, ) *Self {{
           return @as(*const fn(Class, SEL, _NSRange, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_indexSetWithIndexesInRange_.get(), __range, );
 }}
var sel_initWithIndexesInRange_ = CachedSelector.init("initWithIndexesInRange:");
      pub fn initWithIndexesInRange(self: *Self, __range: _NSRange, ) *Self {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithIndexesInRange_.get(), __range, );
 }}
var sel_initWithIndexSet_ = CachedSelector.init("initWithIndexSet:");
      pub fn initWithIndexSet(self: *Self, __indexSet:  * NSIndexSet, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithIndexSet_.get(), __indexSet, );
 }}
var sel_initWithIndex_ = CachedSelector.init("initWithIndex:");
      pub fn initWithIndex(self: *Self, __value: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithIndex_.get(), __value, );
 }}
var sel_isEqualToIndexSet_ = CachedSelector.init("isEqualToIndexSet:");
      pub fn isEqualToIndexSet(self: *Self, __indexSet:  * NSIndexSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToIndexSet_.get(), __indexSet, );
 }}
var sel_indexGreaterThanIndex_ = CachedSelector.init("indexGreaterThanIndex:");
      pub fn indexGreaterThanIndex(self: *Self, __value: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexGreaterThanIndex_.get(), __value, );
 }}
var sel_indexLessThanIndex_ = CachedSelector.init("indexLessThanIndex:");
      pub fn indexLessThanIndex(self: *Self, __value: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexLessThanIndex_.get(), __value, );
 }}
var sel_indexGreaterThanOrEqualToIndex_ = CachedSelector.init("indexGreaterThanOrEqualToIndex:");
      pub fn indexGreaterThanOrEqualToIndex(self: *Self, __value: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexGreaterThanOrEqualToIndex_.get(), __value, );
 }}
var sel_indexLessThanOrEqualToIndex_ = CachedSelector.init("indexLessThanOrEqualToIndex:");
      pub fn indexLessThanOrEqualToIndex(self: *Self, __value: c_ulong, ) c_ulong {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexLessThanOrEqualToIndex_.get(), __value, );
 }}
var sel_getIndexes_maxCount_inIndexRange_ = CachedSelector.init("getIndexes:maxCount:inIndexRange:");
      pub fn getIndexesmaxCountinIndexRange(self: *Self, __indexBuffer:  [*c] c_ulong, __bufferSize: c_ulong, __range:  [*c] _NSRange, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulong, c_ulong,  [*c] _NSRange, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getIndexes_maxCount_inIndexRange_.get(), __indexBuffer, __bufferSize, __range, );
 }}
var sel_countOfIndexesInRange_ = CachedSelector.init("countOfIndexesInRange:");
      pub fn countOfIndexesInRange(self: *Self, __range: _NSRange, ) c_ulong {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfIndexesInRange_.get(), __range, );
 }}
var sel_containsIndex_ = CachedSelector.init("containsIndex:");
      pub fn containsIndex(self: *Self, __value: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsIndex_.get(), __value, );
 }}
var sel_containsIndexesInRange_ = CachedSelector.init("containsIndexesInRange:");
      pub fn containsIndexesInRange(self: *Self, __range: _NSRange, ) c_int {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsIndexesInRange_.get(), __range, );
 }}
var sel_containsIndexes_ = CachedSelector.init("containsIndexes:");
      pub fn containsIndexes(self: *Self, __indexSet:  * NSIndexSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsIndexes_.get(), __indexSet, );
 }}
var sel_intersectsIndexesInRange_ = CachedSelector.init("intersectsIndexesInRange:");
      pub fn intersectsIndexesInRange(self: *Self, __range: _NSRange, ) c_int {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectsIndexesInRange_.get(), __range, );
 }}
var sel_enumerateIndexesUsingBlock_ = CachedSelector.init("enumerateIndexesUsingBlock:");
      pub fn enumerateIndexesUsingBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateIndexesUsingBlock_.get(), __block, );
 }}
var sel_enumerateIndexesWithOptions_usingBlock_ = CachedSelector.init("enumerateIndexesWithOptions:usingBlock:");
      pub fn enumerateIndexesWithOptionsusingBlock(self: *Self, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateIndexesWithOptions_usingBlock_.get(), __opts, __block, );
 }}
var sel_enumerateIndexesInRange_options_usingBlock_ = CachedSelector.init("enumerateIndexesInRange:options:usingBlock:");
      pub fn enumerateIndexesInRangeoptionsusingBlock(self: *Self, __range: _NSRange, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateIndexesInRange_options_usingBlock_.get(), __range, __opts, __block, );
 }}
var sel_indexPassingTest_ = CachedSelector.init("indexPassingTest:");
      pub fn indexPassingTest(self: *Self, __predicate: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexPassingTest_.get(), __predicate, );
 }}
var sel_indexWithOptions_passingTest_ = CachedSelector.init("indexWithOptions:passingTest:");
      pub fn indexWithOptionspassingTest(self: *Self, __opts: NSEnumerationOptions, __predicate: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexWithOptions_passingTest_.get(), __opts, __predicate, );
 }}
var sel_indexInRange_options_passingTest_ = CachedSelector.init("indexInRange:options:passingTest:");
      pub fn indexInRangeoptionspassingTest(self: *Self, __range: _NSRange, __opts: NSEnumerationOptions, __predicate: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL, _NSRange, NSEnumerationOptions, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexInRange_options_passingTest_.get(), __range, __opts, __predicate, );
 }}
var sel_indexesPassingTest_ = CachedSelector.init("indexesPassingTest:");
      pub fn indexesPassingTest(self: *Self, __predicate: ?*u8, )  * NSIndexSet {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C)  * NSIndexSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexesPassingTest_.get(), __predicate, );
 }}
var sel_indexesWithOptions_passingTest_ = CachedSelector.init("indexesWithOptions:passingTest:");
      pub fn indexesWithOptionspassingTest(self: *Self, __opts: NSEnumerationOptions, __predicate: ?*u8, )  * NSIndexSet {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C)  * NSIndexSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexesWithOptions_passingTest_.get(), __opts, __predicate, );
 }}
var sel_indexesInRange_options_passingTest_ = CachedSelector.init("indexesInRange:options:passingTest:");
      pub fn indexesInRangeoptionspassingTest(self: *Self, __range: _NSRange, __opts: NSEnumerationOptions, __predicate: ?*u8, )  * NSIndexSet {{
           return @as(*const fn(*Self, SEL, _NSRange, NSEnumerationOptions, ?*u8, ) callconv(.C)  * NSIndexSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexesInRange_options_passingTest_.get(), __range, __opts, __predicate, );
 }}
var sel_enumerateRangesUsingBlock_ = CachedSelector.init("enumerateRangesUsingBlock:");
      pub fn enumerateRangesUsingBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateRangesUsingBlock_.get(), __block, );
 }}
var sel_enumerateRangesWithOptions_usingBlock_ = CachedSelector.init("enumerateRangesWithOptions:usingBlock:");
      pub fn enumerateRangesWithOptionsusingBlock(self: *Self, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateRangesWithOptions_usingBlock_.get(), __opts, __block, );
 }}
var sel_enumerateRangesInRange_options_usingBlock_ = CachedSelector.init("enumerateRangesInRange:options:usingBlock:");
      pub fn enumerateRangesInRangeoptionsusingBlock(self: *Self, __range: _NSRange, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateRangesInRange_options_usingBlock_.get(), __range, __opts, __block, );
 }}
var sel_count = CachedSelector.init("count");
      pub fn count(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_count.get(), );
 }}
var sel_firstIndex = CachedSelector.init("firstIndex");
      pub fn firstIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_firstIndex.get(), );
 }}
var sel_lastIndex = CachedSelector.init("lastIndex");
      pub fn lastIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lastIndex.get(), );
 }}
  };
}

pub const NSIndexSet = opaque {
  const Self = @This();
  pub usingnamespace NSIndexSetInterfaceMixin(Self, "NSIndexSet");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSIndexSet");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSIndexSet");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSIndexSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSIndexSet");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSIndexSet");
};

pub fn NSEnergyFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stringFromValue_unit_ = CachedSelector.init("stringFromValue:unit:");
      pub fn stringFromValueunit(self: *Self, __value: f64, __unit: NSEnergyFormatterUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, NSEnergyFormatterUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromValue_unit_.get(), __value, __unit, );
 }}
var sel_stringFromJoules_ = CachedSelector.init("stringFromJoules:");
      pub fn stringFromJoules(self: *Self, __numberInJoules: f64, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromJoules_.get(), __numberInJoules, );
 }}
var sel_unitStringFromValue_unit_ = CachedSelector.init("unitStringFromValue:unit:");
      pub fn unitStringFromValueunit(self: *Self, __value: f64, __unit: NSEnergyFormatterUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, NSEnergyFormatterUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStringFromValue_unit_.get(), __value, __unit, );
 }}
var sel_unitStringFromJoules_usedUnit_ = CachedSelector.init("unitStringFromJoules:usedUnit:");
      pub fn unitStringFromJoulesusedUnit(self: *Self, __numberInJoules: f64, __unitp:  [*c] NSEnergyFormatterUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64,  [*c] NSEnergyFormatterUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStringFromJoules_usedUnit_.get(), __numberInJoules, __unitp, );
 }}
var sel_getObjectValue_forString_errorDescription_ = CachedSelector.init("getObjectValue:forString:errorDescription:");
      pub fn getObjectValueforStringerrorDescription(self: *Self, __obj:  ?* id, __string:  * NSString, __an_error:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* id,  * NSString,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjectValue_forString_errorDescription_.get(), __obj, __string, __an_error, );
 }}
var sel_numberFormatter = CachedSelector.init("numberFormatter");
      pub fn numberFormatter(self: *Self, )  * NSNumberFormatter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSNumberFormatter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberFormatter.get(), );
 }}
var sel_setNumberFormatter_ = CachedSelector.init("setNumberFormatter:");
      pub fn setNumberFormatter(self: *Self, __numberFormatter:  ?* NSNumberFormatter, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNumberFormatter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNumberFormatter_.get(), __numberFormatter, );
 }}
var sel_unitStyle = CachedSelector.init("unitStyle");
      pub fn unitStyle(self: *Self, ) NSFormattingUnitStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSFormattingUnitStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStyle.get(), );
 }}
var sel_setUnitStyle_ = CachedSelector.init("setUnitStyle:");
      pub fn setUnitStyle(self: *Self, __unitStyle: NSFormattingUnitStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSFormattingUnitStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUnitStyle_.get(), __unitStyle, );
 }}
var sel_isForFoodEnergyUse = CachedSelector.init("isForFoodEnergyUse");
      pub fn isForFoodEnergyUse(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isForFoodEnergyUse.get(), );
 }}
var sel_setForFoodEnergyUse_ = CachedSelector.init("setForFoodEnergyUse:");
      pub fn setForFoodEnergyUse(self: *Self, __forFoodEnergyUse: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setForFoodEnergyUse_.get(), __forFoodEnergyUse, );
 }}
  };
}

pub const NSEnergyFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSEnergyFormatterInterfaceMixin(Self, "NSEnergyFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSEnergyFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSEnergyFormatter");
};

pub fn NSUndoManagerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_beginUndoGrouping = CachedSelector.init("beginUndoGrouping");
      pub fn beginUndoGrouping(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_beginUndoGrouping.get(), );
 }}
var sel_endUndoGrouping = CachedSelector.init("endUndoGrouping");
      pub fn endUndoGrouping(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endUndoGrouping.get(), );
 }}
var sel_disableUndoRegistration = CachedSelector.init("disableUndoRegistration");
      pub fn disableUndoRegistration(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_disableUndoRegistration.get(), );
 }}
var sel_enableUndoRegistration = CachedSelector.init("enableUndoRegistration");
      pub fn enableUndoRegistration(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enableUndoRegistration.get(), );
 }}
var sel_undo = CachedSelector.init("undo");
      pub fn undo(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_undo.get(), );
 }}
var sel_redo = CachedSelector.init("redo");
      pub fn redo(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_redo.get(), );
 }}
var sel_undoNestedGroup = CachedSelector.init("undoNestedGroup");
      pub fn undoNestedGroup(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_undoNestedGroup.get(), );
 }}
var sel_removeAllActions = CachedSelector.init("removeAllActions");
      pub fn removeAllActions(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllActions.get(), );
 }}
var sel_removeAllActionsWithTarget_ = CachedSelector.init("removeAllActionsWithTarget:");
      pub fn removeAllActionsWithTarget(self: *Self, __target: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllActionsWithTarget_.get(), __target, );
 }}
var sel_registerUndoWithTarget_selector_object_ = CachedSelector.init("registerUndoWithTarget:selector:object:");
      pub fn registerUndoWithTargetselectorobject(self: *Self, __target: id, __selector: SEL, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerUndoWithTarget_selector_object_.get(), __target, __selector, __anObject, );
 }}
var sel_prepareWithInvocationTarget_ = CachedSelector.init("prepareWithInvocationTarget:");
      pub fn prepareWithInvocationTarget(self: *Self, __target: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_prepareWithInvocationTarget_.get(), __target, );
 }}
var sel_registerUndoWithTarget_handler_ = CachedSelector.init("registerUndoWithTarget:handler:");
      pub fn registerUndoWithTargethandler(self: *Self, __target: id, __undoHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, id, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerUndoWithTarget_handler_.get(), __target, __undoHandler, );
 }}
var sel_setActionIsDiscardable_ = CachedSelector.init("setActionIsDiscardable:");
      pub fn setActionIsDiscardable(self: *Self, __discardable: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setActionIsDiscardable_.get(), __discardable, );
 }}
var sel_setActionName_ = CachedSelector.init("setActionName:");
      pub fn setActionName(self: *Self, __actionName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setActionName_.get(), __actionName, );
 }}
var sel_undoMenuTitleForUndoActionName_ = CachedSelector.init("undoMenuTitleForUndoActionName:");
      pub fn undoMenuTitleForUndoActionName(self: *Self, __actionName:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_undoMenuTitleForUndoActionName_.get(), __actionName, );
 }}
var sel_redoMenuTitleForUndoActionName_ = CachedSelector.init("redoMenuTitleForUndoActionName:");
      pub fn redoMenuTitleForUndoActionName(self: *Self, __actionName:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_redoMenuTitleForUndoActionName_.get(), __actionName, );
 }}
var sel_groupingLevel = CachedSelector.init("groupingLevel");
      pub fn groupingLevel(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_groupingLevel.get(), );
 }}
var sel_isUndoRegistrationEnabled = CachedSelector.init("isUndoRegistrationEnabled");
      pub fn isUndoRegistrationEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isUndoRegistrationEnabled.get(), );
 }}
var sel_groupsByEvent = CachedSelector.init("groupsByEvent");
      pub fn groupsByEvent(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_groupsByEvent.get(), );
 }}
var sel_setGroupsByEvent_ = CachedSelector.init("setGroupsByEvent:");
      pub fn setGroupsByEvent(self: *Self, __groupsByEvent: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGroupsByEvent_.get(), __groupsByEvent, );
 }}
var sel_levelsOfUndo = CachedSelector.init("levelsOfUndo");
      pub fn levelsOfUndo(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_levelsOfUndo.get(), );
 }}
var sel_setLevelsOfUndo_ = CachedSelector.init("setLevelsOfUndo:");
      pub fn setLevelsOfUndo(self: *Self, __levelsOfUndo: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLevelsOfUndo_.get(), __levelsOfUndo, );
 }}
var sel_runLoopModes = CachedSelector.init("runLoopModes");
      pub fn runLoopModes(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_runLoopModes.get(), );
 }}
var sel_setRunLoopModes_ = CachedSelector.init("setRunLoopModes:");
      pub fn setRunLoopModes(self: *Self, __runLoopModes:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRunLoopModes_.get(), __runLoopModes, );
 }}
var sel_canUndo = CachedSelector.init("canUndo");
      pub fn canUndo(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_canUndo.get(), );
 }}
var sel_canRedo = CachedSelector.init("canRedo");
      pub fn canRedo(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_canRedo.get(), );
 }}
var sel_isUndoing = CachedSelector.init("isUndoing");
      pub fn isUndoing(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isUndoing.get(), );
 }}
var sel_isRedoing = CachedSelector.init("isRedoing");
      pub fn isRedoing(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isRedoing.get(), );
 }}
var sel_undoActionIsDiscardable = CachedSelector.init("undoActionIsDiscardable");
      pub fn undoActionIsDiscardable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_undoActionIsDiscardable.get(), );
 }}
var sel_redoActionIsDiscardable = CachedSelector.init("redoActionIsDiscardable");
      pub fn redoActionIsDiscardable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_redoActionIsDiscardable.get(), );
 }}
var sel_undoActionName = CachedSelector.init("undoActionName");
      pub fn undoActionName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_undoActionName.get(), );
 }}
var sel_redoActionName = CachedSelector.init("redoActionName");
      pub fn redoActionName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_redoActionName.get(), );
 }}
var sel_undoMenuItemTitle = CachedSelector.init("undoMenuItemTitle");
      pub fn undoMenuItemTitle(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_undoMenuItemTitle.get(), );
 }}
var sel_redoMenuItemTitle = CachedSelector.init("redoMenuItemTitle");
      pub fn redoMenuItemTitle(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_redoMenuItemTitle.get(), );
 }}
  };
}

pub const NSUndoManager = opaque {
  const Self = @This();
  pub usingnamespace NSUndoManagerInterfaceMixin(Self, "NSUndoManager");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUndoManager");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUndoManager");
};

pub fn NSUnitTemperatureInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_kelvin = CachedSelector.init("kelvin");
      pub fn kelvin()  * NSUnitTemperature {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitTemperature, @ptrCast(&objc_msgSend))(class.get(), sel_kelvin.get(), );
 }}
var sel_celsius = CachedSelector.init("celsius");
      pub fn celsius()  * NSUnitTemperature {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitTemperature, @ptrCast(&objc_msgSend))(class.get(), sel_celsius.get(), );
 }}
var sel_fahrenheit = CachedSelector.init("fahrenheit");
      pub fn fahrenheit()  * NSUnitTemperature {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitTemperature, @ptrCast(&objc_msgSend))(class.get(), sel_fahrenheit.get(), );
 }}
  };
}

pub const NSUnitTemperature = opaque {
  const Self = @This();
  pub usingnamespace NSUnitTemperatureInterfaceMixin(Self, "NSUnitTemperature");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitTemperature");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitTemperature");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitTemperature");
};

pub fn NSPortMessageInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithSendPort_receivePort_components_ = CachedSelector.init("initWithSendPort:receivePort:components:");
      pub fn initWithSendPortreceivePortcomponents(self: *Self, __sendPort:  ?* NSPort, __replyPort:  ?* NSPort, __components:  ?* NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSPort,  ?* NSPort,  ?* NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSendPort_receivePort_components_.get(), __sendPort, __replyPort, __components, );
 }}
var sel_sendBeforeDate_ = CachedSelector.init("sendBeforeDate:");
      pub fn sendBeforeDate(self: *Self, __date:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sendBeforeDate_.get(), __date, );
 }}
var sel_components = CachedSelector.init("components");
      pub fn components(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_components.get(), );
 }}
var sel_receivePort = CachedSelector.init("receivePort");
      pub fn receivePort(self: *Self, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_receivePort.get(), );
 }}
var sel_sendPort = CachedSelector.init("sendPort");
      pub fn sendPort(self: *Self, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sendPort.get(), );
 }}
var sel_msgid = CachedSelector.init("msgid");
      pub fn msgid(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_msgid.get(), );
 }}
var sel_setMsgid_ = CachedSelector.init("setMsgid:");
      pub fn setMsgid(self: *Self, __msgid: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMsgid_.get(), __msgid, );
 }}
  };
}

pub const NSPortMessage = opaque {
  const Self = @This();
  pub usingnamespace NSPortMessageInterfaceMixin(Self, "NSPortMessage");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPortMessage");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPortMessage");
};

pub fn NSMutableArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addObject_ = CachedSelector.init("addObject:");
      pub fn addObject(self: *Self, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObject_.get(), __anObject, );
 }}
var sel_insertObject_atIndex_ = CachedSelector.init("insertObject:atIndex:");
      pub fn insertObjectatIndex(self: *Self, __anObject: id, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, id, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertObject_atIndex_.get(), __anObject, __index, );
 }}
var sel_removeLastObject = CachedSelector.init("removeLastObject");
      pub fn removeLastObject(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeLastObject.get(), );
 }}
var sel_removeObjectAtIndex_ = CachedSelector.init("removeObjectAtIndex:");
      pub fn removeObjectAtIndex(self: *Self, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectAtIndex_.get(), __index, );
 }}
var sel_replaceObjectAtIndex_withObject_ = CachedSelector.init("replaceObjectAtIndex:withObject:");
      pub fn replaceObjectAtIndexwithObject(self: *Self, __index: c_ulong, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceObjectAtIndex_withObject_.get(), __index, __anObject, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithCapacity_ = CachedSelector.init("initWithCapacity:");
      pub fn initWithCapacity(self: *Self, __numItems: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCapacity_.get(), __numItems, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_addObjectsFromArray_ = CachedSelector.init("addObjectsFromArray:");
      pub fn addObjectsFromArray(self: *Self, __otherArray:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObjectsFromArray_.get(), __otherArray, );
 }}
var sel_exchangeObjectAtIndex_withObjectAtIndex_ = CachedSelector.init("exchangeObjectAtIndex:withObjectAtIndex:");
      pub fn exchangeObjectAtIndexwithObjectAtIndex(self: *Self, __idx1: c_ulong, __idx2: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_exchangeObjectAtIndex_withObjectAtIndex_.get(), __idx1, __idx2, );
 }}
var sel_removeAllObjects = CachedSelector.init("removeAllObjects");
      pub fn removeAllObjects(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllObjects.get(), );
 }}
var sel_removeObject_inRange_ = CachedSelector.init("removeObject:inRange:");
      pub fn removeObjectinRange(self: *Self, __anObject: id, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, id, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObject_inRange_.get(), __anObject, __range, );
 }}
var sel_removeObject_ = CachedSelector.init("removeObject:");
      pub fn removeObject(self: *Self, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObject_.get(), __anObject, );
 }}
var sel_removeObjectIdenticalTo_inRange_ = CachedSelector.init("removeObjectIdenticalTo:inRange:");
      pub fn removeObjectIdenticalToinRange(self: *Self, __anObject: id, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, id, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectIdenticalTo_inRange_.get(), __anObject, __range, );
 }}
var sel_removeObjectIdenticalTo_ = CachedSelector.init("removeObjectIdenticalTo:");
      pub fn removeObjectIdenticalTo(self: *Self, __anObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectIdenticalTo_.get(), __anObject, );
 }}
var sel_removeObjectsFromIndices_numIndices_ = CachedSelector.init("removeObjectsFromIndices:numIndices:");
      pub fn removeObjectsFromIndicesnumIndices(self: *Self, __indices:  [*c] c_ulong, __cnt: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectsFromIndices_numIndices_.get(), __indices, __cnt, );
 }}
var sel_removeObjectsInArray_ = CachedSelector.init("removeObjectsInArray:");
      pub fn removeObjectsInArray(self: *Self, __otherArray:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectsInArray_.get(), __otherArray, );
 }}
var sel_removeObjectsInRange_ = CachedSelector.init("removeObjectsInRange:");
      pub fn removeObjectsInRange(self: *Self, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectsInRange_.get(), __range, );
 }}
var sel_replaceObjectsInRange_withObjectsFromArray_range_ = CachedSelector.init("replaceObjectsInRange:withObjectsFromArray:range:");
      pub fn replaceObjectsInRangewithObjectsFromArrayrange(self: *Self, __range: _NSRange, __otherArray:  * NSArray, __otherRange: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSArray, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceObjectsInRange_withObjectsFromArray_range_.get(), __range, __otherArray, __otherRange, );
 }}
var sel_replaceObjectsInRange_withObjectsFromArray_ = CachedSelector.init("replaceObjectsInRange:withObjectsFromArray:");
      pub fn replaceObjectsInRangewithObjectsFromArray(self: *Self, __range: _NSRange, __otherArray:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceObjectsInRange_withObjectsFromArray_.get(), __range, __otherArray, );
 }}
var sel_setArray_ = CachedSelector.init("setArray:");
      pub fn setArray(self: *Self, __otherArray:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArray_.get(), __otherArray, );
 }}
var sel_sortUsingFunction_context_ = CachedSelector.init("sortUsingFunction:context:");
      pub fn sortUsingFunctioncontext(self: *Self, __compare:  [*c] ?*u8, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortUsingFunction_context_.get(), __compare, __context, );
 }}
var sel_sortUsingSelector_ = CachedSelector.init("sortUsingSelector:");
      pub fn sortUsingSelector(self: *Self, __comparator: SEL, ) void {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortUsingSelector_.get(), __comparator, );
 }}
var sel_insertObjects_atIndexes_ = CachedSelector.init("insertObjects:atIndexes:");
      pub fn insertObjectsatIndexes(self: *Self, __objects:  * NSArray, __indexes:  * NSIndexSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray,  * NSIndexSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertObjects_atIndexes_.get(), __objects, __indexes, );
 }}
var sel_removeObjectsAtIndexes_ = CachedSelector.init("removeObjectsAtIndexes:");
      pub fn removeObjectsAtIndexes(self: *Self, __indexes:  * NSIndexSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectsAtIndexes_.get(), __indexes, );
 }}
var sel_replaceObjectsAtIndexes_withObjects_ = CachedSelector.init("replaceObjectsAtIndexes:withObjects:");
      pub fn replaceObjectsAtIndexeswithObjects(self: *Self, __indexes:  * NSIndexSet, __objects:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceObjectsAtIndexes_withObjects_.get(), __indexes, __objects, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __obj: id, __idx: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, id, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __obj, __idx, );
 }}
var sel_sortUsingComparator_ = CachedSelector.init("sortUsingComparator:");
      pub fn sortUsingComparator(self: *Self, __cmptr: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortUsingComparator_.get(), __cmptr, );
 }}
var sel_sortWithOptions_usingComparator_ = CachedSelector.init("sortWithOptions:usingComparator:");
      pub fn sortWithOptionsusingComparator(self: *Self, __opts: NSSortOptions, __cmptr: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSSortOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortWithOptions_usingComparator_.get(), __opts, __cmptr, );
 }}
var sel_arrayWithCapacity_ = CachedSelector.init("arrayWithCapacity:");
      pub fn arrayWithCapacity(__numItems: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithCapacity_.get(), __numItems, );
 }}
var sel_arrayWithContentsOfFile_ = CachedSelector.init("arrayWithContentsOfFile:");
      pub fn arrayWithContentsOfFile(__path:  * NSString, )  ?* NSMutableArray {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSMutableArray, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithContentsOfFile_.get(), __path, );
 }}
var sel_arrayWithContentsOfURL_ = CachedSelector.init("arrayWithContentsOfURL:");
      pub fn arrayWithContentsOfURL(__url:  * NSURL, )  ?* NSMutableArray {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  ?* NSMutableArray, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithContentsOfURL_.get(), __url, );
 }}
var sel_initWithContentsOfFile_ = CachedSelector.init("initWithContentsOfFile:");
      pub fn initWithContentsOfFile(self: *Self, __path:  * NSString, )  ?* NSMutableArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSMutableArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfFile_.get(), __path, );
 }}
var sel_initWithContentsOfURL_ = CachedSelector.init("initWithContentsOfURL:");
      pub fn initWithContentsOfURL(self: *Self, __url:  * NSURL, )  ?* NSMutableArray {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C)  ?* NSMutableArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_.get(), __url, );
 }}
var sel_applyDifference_ = CachedSelector.init("applyDifference:");
      pub fn applyDifference(self: *Self, __difference:  * NSOrderedCollectionDifference, ) void {{
           return @as(*const fn(*Self, SEL,  * NSOrderedCollectionDifference, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_applyDifference_.get(), __difference, );
 }}
var sel_sortUsingDescriptors_ = CachedSelector.init("sortUsingDescriptors:");
      pub fn sortUsingDescriptors(self: *Self, __sortDescriptors:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortUsingDescriptors_.get(), __sortDescriptors, );
 }}
var sel_filterUsingPredicate_ = CachedSelector.init("filterUsingPredicate:");
      pub fn filterUsingPredicate(self: *Self, __predicate:  * NSPredicate, ) void {{
           return @as(*const fn(*Self, SEL,  * NSPredicate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_filterUsingPredicate_.get(), __predicate, );
 }}
  };
}

pub const NSMutableArray = opaque {
  const Self = @This();
  pub usingnamespace NSMutableArrayInterfaceMixin(Self, "NSMutableArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableArray");
  pub usingnamespace NSArrayInterfaceMixin(Self, "NSMutableArray");
};

pub fn NSGarbageCollectorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_defaultCollector = CachedSelector.init("defaultCollector");
      pub fn defaultCollector() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_defaultCollector.get(), );
 }}
var sel_isCollecting = CachedSelector.init("isCollecting");
      pub fn isCollecting(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isCollecting.get(), );
 }}
var sel_disable = CachedSelector.init("disable");
      pub fn disable(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_disable.get(), );
 }}
var sel_enable = CachedSelector.init("enable");
      pub fn enable(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enable.get(), );
 }}
var sel_isEnabled = CachedSelector.init("isEnabled");
      pub fn isEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEnabled.get(), );
 }}
var sel_collectIfNeeded = CachedSelector.init("collectIfNeeded");
      pub fn collectIfNeeded(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_collectIfNeeded.get(), );
 }}
var sel_collectExhaustively = CachedSelector.init("collectExhaustively");
      pub fn collectExhaustively(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_collectExhaustively.get(), );
 }}
var sel_disableCollectorForPointer_ = CachedSelector.init("disableCollectorForPointer:");
      pub fn disableCollectorForPointer(self: *Self, __ptr:  [*c]  const void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_disableCollectorForPointer_.get(), __ptr, );
 }}
var sel_enableCollectorForPointer_ = CachedSelector.init("enableCollectorForPointer:");
      pub fn enableCollectorForPointer(self: *Self, __ptr:  [*c]  const void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enableCollectorForPointer_.get(), __ptr, );
 }}
var sel_zone = CachedSelector.init("zone");
      pub fn zone(self: *Self, )  [*c] _NSZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] _NSZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_zone.get(), );
 }}
  };
}

pub const NSGarbageCollector = opaque {
  const Self = @This();
  pub usingnamespace NSGarbageCollectorInterfaceMixin(Self, "NSGarbageCollector");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSGarbageCollector");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSGarbageCollector");
};

pub fn NSOrthographyInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithDominantScript_languageMap_ = CachedSelector.init("initWithDominantScript:languageMap:");
      pub fn initWithDominantScriptlanguageMap(self: *Self, __script:  * NSString, __map:  * NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDominantScript_languageMap_.get(), __script, __map, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_dominantScript = CachedSelector.init("dominantScript");
      pub fn dominantScript(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dominantScript.get(), );
 }}
var sel_languageMap = CachedSelector.init("languageMap");
      pub fn languageMap(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_languageMap.get(), );
 }}
var sel_languagesForScript_ = CachedSelector.init("languagesForScript:");
      pub fn languagesForScript(self: *Self, __script:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_languagesForScript_.get(), __script, );
 }}
var sel_dominantLanguageForScript_ = CachedSelector.init("dominantLanguageForScript:");
      pub fn dominantLanguageForScript(self: *Self, __script:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dominantLanguageForScript_.get(), __script, );
 }}
var sel_defaultOrthographyForLanguage_ = CachedSelector.init("defaultOrthographyForLanguage:");
      pub fn defaultOrthographyForLanguage(__language:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_defaultOrthographyForLanguage_.get(), __language, );
 }}
var sel_dominantLanguage = CachedSelector.init("dominantLanguage");
      pub fn dominantLanguage(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dominantLanguage.get(), );
 }}
var sel_allScripts = CachedSelector.init("allScripts");
      pub fn allScripts(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allScripts.get(), );
 }}
var sel_allLanguages = CachedSelector.init("allLanguages");
      pub fn allLanguages(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allLanguages.get(), );
 }}
var sel_orthographyWithDominantScript_languageMap_ = CachedSelector.init("orthographyWithDominantScript:languageMap:");
      pub fn orthographyWithDominantScriptlanguageMap(__script:  * NSString, __map:  * NSDictionary, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orthographyWithDominantScript_languageMap_.get(), __script, __map, );
 }}
  };
}

pub const NSOrthography = opaque {
  const Self = @This();
  pub usingnamespace NSOrthographyInterfaceMixin(Self, "NSOrthography");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSOrthography");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSOrthography");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSOrthography");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSOrthography");
};

pub fn NSURLInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithScheme_host_path_ = CachedSelector.init("initWithScheme:host:path:");
      pub fn initWithSchemehostpath(self: *Self, __scheme:  * NSString, __host:  ?* NSString, __path:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithScheme_host_path_.get(), __scheme, __host, __path, );
 }}
var sel_initFileURLWithPath_isDirectory_relativeToURL_ = CachedSelector.init("initFileURLWithPath:isDirectory:relativeToURL:");
      pub fn initFileURLWithPathisDirectoryrelativeToURL(self: *Self, __path:  * NSString, __isDir: c_int, __baseURL:  ?* NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int,  ?* NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initFileURLWithPath_isDirectory_relativeToURL_.get(), __path, __isDir, __baseURL, );
 }}
var sel_initFileURLWithPath_relativeToURL_ = CachedSelector.init("initFileURLWithPath:relativeToURL:");
      pub fn initFileURLWithPathrelativeToURL(self: *Self, __path:  * NSString, __baseURL:  ?* NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initFileURLWithPath_relativeToURL_.get(), __path, __baseURL, );
 }}
var sel_initFileURLWithPath_isDirectory_ = CachedSelector.init("initFileURLWithPath:isDirectory:");
      pub fn initFileURLWithPathisDirectory(self: *Self, __path:  * NSString, __isDir: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initFileURLWithPath_isDirectory_.get(), __path, __isDir, );
 }}
var sel_initFileURLWithPath_ = CachedSelector.init("initFileURLWithPath:");
      pub fn initFileURLWithPath(self: *Self, __path:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initFileURLWithPath_.get(), __path, );
 }}
var sel_fileURLWithPath_isDirectory_relativeToURL_ = CachedSelector.init("fileURLWithPath:isDirectory:relativeToURL:");
      pub fn fileURLWithPathisDirectoryrelativeToURL(__path:  * NSString, __isDir: c_int, __baseURL:  ?* NSURL, )  * NSURL {{
           return @as(*const fn(Class, SEL,  * NSString, c_int,  ?* NSURL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_fileURLWithPath_isDirectory_relativeToURL_.get(), __path, __isDir, __baseURL, );
 }}
var sel_fileURLWithPath_relativeToURL_ = CachedSelector.init("fileURLWithPath:relativeToURL:");
      pub fn fileURLWithPathrelativeToURL(__path:  * NSString, __baseURL:  ?* NSURL, )  * NSURL {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSURL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_fileURLWithPath_relativeToURL_.get(), __path, __baseURL, );
 }}
var sel_fileURLWithPath_isDirectory_ = CachedSelector.init("fileURLWithPath:isDirectory:");
      pub fn fileURLWithPathisDirectory(__path:  * NSString, __isDir: c_int, )  * NSURL {{
           return @as(*const fn(Class, SEL,  * NSString, c_int, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_fileURLWithPath_isDirectory_.get(), __path, __isDir, );
 }}
var sel_fileURLWithPath_ = CachedSelector.init("fileURLWithPath:");
      pub fn fileURLWithPath(__path:  * NSString, )  * NSURL {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_fileURLWithPath_.get(), __path, );
 }}
var sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_ = CachedSelector.init("initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
      pub fn initFileURLWithFileSystemRepresentationisDirectoryrelativeToURL(self: *Self, __path:  [*c]  const u8, __isDir: c_int, __baseURL:  ?* NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c]  const u8, c_int,  ?* NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_.get(), __path, __isDir, __baseURL, );
 }}
var sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_ = CachedSelector.init("fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
      pub fn fileURLWithFileSystemRepresentationisDirectoryrelativeToURL(__path:  [*c]  const u8, __isDir: c_int, __baseURL:  ?* NSURL, )  * NSURL {{
           return @as(*const fn(Class, SEL,  [*c]  const u8, c_int,  ?* NSURL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_.get(), __path, __isDir, __baseURL, );
 }}
var sel_initWithString_ = CachedSelector.init("initWithString:");
      pub fn initWithString(self: *Self, __URLString:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_.get(), __URLString, );
 }}
var sel_initWithString_relativeToURL_ = CachedSelector.init("initWithString:relativeToURL:");
      pub fn initWithStringrelativeToURL(self: *Self, __URLString:  * NSString, __baseURL:  ?* NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_relativeToURL_.get(), __URLString, __baseURL, );
 }}
var sel_URLWithString_ = CachedSelector.init("URLWithString:");
      pub fn URLWithString(__URLString:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_URLWithString_.get(), __URLString, );
 }}
var sel_URLWithString_relativeToURL_ = CachedSelector.init("URLWithString:relativeToURL:");
      pub fn URLWithStringrelativeToURL(__URLString:  * NSString, __baseURL:  ?* NSURL, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_URLWithString_relativeToURL_.get(), __URLString, __baseURL, );
 }}
var sel_initWithString_encodingInvalidCharacters_ = CachedSelector.init("initWithString:encodingInvalidCharacters:");
      pub fn initWithStringencodingInvalidCharacters(self: *Self, __URLString:  * NSString, __encodingInvalidCharacters: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_encodingInvalidCharacters_.get(), __URLString, __encodingInvalidCharacters, );
 }}
var sel_URLWithString_encodingInvalidCharacters_ = CachedSelector.init("URLWithString:encodingInvalidCharacters:");
      pub fn URLWithStringencodingInvalidCharacters(__URLString:  * NSString, __encodingInvalidCharacters: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_URLWithString_encodingInvalidCharacters_.get(), __URLString, __encodingInvalidCharacters, );
 }}
var sel_initWithDataRepresentation_relativeToURL_ = CachedSelector.init("initWithDataRepresentation:relativeToURL:");
      pub fn initWithDataRepresentationrelativeToURL(self: *Self, __data:  * NSData, __baseURL:  ?* NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData,  ?* NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDataRepresentation_relativeToURL_.get(), __data, __baseURL, );
 }}
var sel_URLWithDataRepresentation_relativeToURL_ = CachedSelector.init("URLWithDataRepresentation:relativeToURL:");
      pub fn URLWithDataRepresentationrelativeToURL(__data:  * NSData, __baseURL:  ?* NSURL, )  * NSURL {{
           return @as(*const fn(Class, SEL,  * NSData,  ?* NSURL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_URLWithDataRepresentation_relativeToURL_.get(), __data, __baseURL, );
 }}
var sel_initAbsoluteURLWithDataRepresentation_relativeToURL_ = CachedSelector.init("initAbsoluteURLWithDataRepresentation:relativeToURL:");
      pub fn initAbsoluteURLWithDataRepresentationrelativeToURL(self: *Self, __data:  * NSData, __baseURL:  ?* NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData,  ?* NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initAbsoluteURLWithDataRepresentation_relativeToURL_.get(), __data, __baseURL, );
 }}
var sel_absoluteURLWithDataRepresentation_relativeToURL_ = CachedSelector.init("absoluteURLWithDataRepresentation:relativeToURL:");
      pub fn absoluteURLWithDataRepresentationrelativeToURL(__data:  * NSData, __baseURL:  ?* NSURL, )  * NSURL {{
           return @as(*const fn(Class, SEL,  * NSData,  ?* NSURL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_absoluteURLWithDataRepresentation_relativeToURL_.get(), __data, __baseURL, );
 }}
var sel_getFileSystemRepresentation_maxLength_ = CachedSelector.init("getFileSystemRepresentation:maxLength:");
      pub fn getFileSystemRepresentationmaxLength(self: *Self, __buffer:  [*c] u8, __maxBufferLength: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getFileSystemRepresentation_maxLength_.get(), __buffer, __maxBufferLength, );
 }}
var sel_checkResourceIsReachableAndReturnError_ = CachedSelector.init("checkResourceIsReachableAndReturnError:");
      pub fn checkResourceIsReachableAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_checkResourceIsReachableAndReturnError_.get(), __an_error, );
 }}
var sel_isFileReferenceURL = CachedSelector.init("isFileReferenceURL");
      pub fn isFileReferenceURL(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isFileReferenceURL.get(), );
 }}
var sel_fileReferenceURL = CachedSelector.init("fileReferenceURL");
      pub fn fileReferenceURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileReferenceURL.get(), );
 }}
var sel_getResourceValue_forKey_error_ = CachedSelector.init("getResourceValue:forKey:error:");
      pub fn getResourceValueforKeyerror(self: *Self, __value:  * id, __key:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * id,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getResourceValue_forKey_error_.get(), __value, __key, __an_error, );
 }}
var sel_resourceValuesForKeys_error_ = CachedSelector.init("resourceValuesForKeys:error:");
      pub fn resourceValuesForKeyserror(self: *Self, __keys:  * NSArray, __an_error:  [*c]  ?* NSError, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSArray,  [*c]  ?* NSError, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceValuesForKeys_error_.get(), __keys, __an_error, );
 }}
var sel_setResourceValue_forKey_error_ = CachedSelector.init("setResourceValue:forKey:error:");
      pub fn setResourceValueforKeyerror(self: *Self, __value: id, __key:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL, id,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResourceValue_forKey_error_.get(), __value, __key, __an_error, );
 }}
var sel_setResourceValues_error_ = CachedSelector.init("setResourceValues:error:");
      pub fn setResourceValueserror(self: *Self, __keyedValues:  * NSDictionary, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDictionary,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResourceValues_error_.get(), __keyedValues, __an_error, );
 }}
var sel_removeCachedResourceValueForKey_ = CachedSelector.init("removeCachedResourceValueForKey:");
      pub fn removeCachedResourceValueForKey(self: *Self, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCachedResourceValueForKey_.get(), __key, );
 }}
var sel_removeAllCachedResourceValues = CachedSelector.init("removeAllCachedResourceValues");
      pub fn removeAllCachedResourceValues(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllCachedResourceValues.get(), );
 }}
var sel_setTemporaryResourceValue_forKey_ = CachedSelector.init("setTemporaryResourceValue:forKey:");
      pub fn setTemporaryResourceValueforKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTemporaryResourceValue_forKey_.get(), __value, __key, );
 }}
var sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_ = CachedSelector.init("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:");
      pub fn bookmarkDataWithOptionsincludingResourceValuesForKeysrelativeToURLerror(self: *Self, __options: NSURLBookmarkCreationOptions, __keys:  ?* NSArray, __relativeURL:  ?* NSURL, __an_error:  [*c]  ?* NSError, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, NSURLBookmarkCreationOptions,  ?* NSArray,  ?* NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_.get(), __options, __keys, __relativeURL, __an_error, );
 }}
var sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_ = CachedSelector.init("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
      pub fn initByResolvingBookmarkDataoptionsrelativeToURLbookmarkDataIsStaleerror(self: *Self, __bookmarkData:  * NSData, __options: NSURLBookmarkResolutionOptions, __relativeURL:  ?* NSURL, __isStale:  [*c] c_int, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, NSURLBookmarkResolutionOptions,  ?* NSURL,  [*c] c_int,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_.get(), __bookmarkData, __options, __relativeURL, __isStale, __an_error, );
 }}
var sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_ = CachedSelector.init("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
      pub fn URLByResolvingBookmarkDataoptionsrelativeToURLbookmarkDataIsStaleerror(__bookmarkData:  * NSData, __options: NSURLBookmarkResolutionOptions, __relativeURL:  ?* NSURL, __isStale:  [*c] c_int, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSData, NSURLBookmarkResolutionOptions,  ?* NSURL,  [*c] c_int,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_.get(), __bookmarkData, __options, __relativeURL, __isStale, __an_error, );
 }}
var sel_resourceValuesForKeys_fromBookmarkData_ = CachedSelector.init("resourceValuesForKeys:fromBookmarkData:");
      pub fn resourceValuesForKeysfromBookmarkData(__keys:  * NSArray, __bookmarkData:  * NSData, )  ?* NSDictionary {{
           return @as(*const fn(Class, SEL,  * NSArray,  * NSData, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_resourceValuesForKeys_fromBookmarkData_.get(), __keys, __bookmarkData, );
 }}
var sel_writeBookmarkData_toURL_options_error_ = CachedSelector.init("writeBookmarkData:toURL:options:error:");
      pub fn writeBookmarkDatatoURLoptionserror(__bookmarkData:  * NSData, __bookmarkFileURL:  * NSURL, __options: c_ulong, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSData,  * NSURL, c_ulong,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_writeBookmarkData_toURL_options_error_.get(), __bookmarkData, __bookmarkFileURL, __options, __an_error, );
 }}
var sel_bookmarkDataWithContentsOfURL_error_ = CachedSelector.init("bookmarkDataWithContentsOfURL:error:");
      pub fn bookmarkDataWithContentsOfURLerror(__bookmarkFileURL:  * NSURL, __an_error:  [*c]  ?* NSError, )  ?* NSData {{
           return @as(*const fn(Class, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(class.get(), sel_bookmarkDataWithContentsOfURL_error_.get(), __bookmarkFileURL, __an_error, );
 }}
var sel_URLByResolvingAliasFileAtURL_options_error_ = CachedSelector.init("URLByResolvingAliasFileAtURL:options:error:");
      pub fn URLByResolvingAliasFileAtURLoptionserror(__url:  * NSURL, __options: NSURLBookmarkResolutionOptions, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, NSURLBookmarkResolutionOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_URLByResolvingAliasFileAtURL_options_error_.get(), __url, __options, __an_error, );
 }}
var sel_startAccessingSecurityScopedResource = CachedSelector.init("startAccessingSecurityScopedResource");
      pub fn startAccessingSecurityScopedResource(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startAccessingSecurityScopedResource.get(), );
 }}
var sel_stopAccessingSecurityScopedResource = CachedSelector.init("stopAccessingSecurityScopedResource");
      pub fn stopAccessingSecurityScopedResource(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stopAccessingSecurityScopedResource.get(), );
 }}
var sel_dataRepresentation = CachedSelector.init("dataRepresentation");
      pub fn dataRepresentation(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataRepresentation.get(), );
 }}
var sel_absoluteString = CachedSelector.init("absoluteString");
      pub fn absoluteString(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_absoluteString.get(), );
 }}
var sel_relativeString = CachedSelector.init("relativeString");
      pub fn relativeString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_relativeString.get(), );
 }}
var sel_baseURL = CachedSelector.init("baseURL");
      pub fn baseURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_baseURL.get(), );
 }}
var sel_absoluteURL = CachedSelector.init("absoluteURL");
      pub fn absoluteURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_absoluteURL.get(), );
 }}
var sel_scheme = CachedSelector.init("scheme");
      pub fn scheme(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheme.get(), );
 }}
var sel_resourceSpecifier = CachedSelector.init("resourceSpecifier");
      pub fn resourceSpecifier(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceSpecifier.get(), );
 }}
var sel_host = CachedSelector.init("host");
      pub fn host(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_host.get(), );
 }}
var sel_port = CachedSelector.init("port");
      pub fn port(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_port.get(), );
 }}
var sel_user = CachedSelector.init("user");
      pub fn user(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_user.get(), );
 }}
var sel_password = CachedSelector.init("password");
      pub fn password(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_password.get(), );
 }}
var sel_path = CachedSelector.init("path");
      pub fn path(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_path.get(), );
 }}
var sel_fragment = CachedSelector.init("fragment");
      pub fn fragment(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragment.get(), );
 }}
var sel_parameterString = CachedSelector.init("parameterString");
      pub fn parameterString(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_parameterString.get(), );
 }}
var sel_query = CachedSelector.init("query");
      pub fn query(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_query.get(), );
 }}
var sel_relativePath = CachedSelector.init("relativePath");
      pub fn relativePath(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_relativePath.get(), );
 }}
var sel_hasDirectoryPath = CachedSelector.init("hasDirectoryPath");
      pub fn hasDirectoryPath(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasDirectoryPath.get(), );
 }}
var sel_fileSystemRepresentation = CachedSelector.init("fileSystemRepresentation");
      pub fn fileSystemRepresentation(self: *Self, )  [*c]  const u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c]  const u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileSystemRepresentation.get(), );
 }}
var sel_isFileURL = CachedSelector.init("isFileURL");
      pub fn isFileURL(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isFileURL.get(), );
 }}
var sel_standardizedURL = CachedSelector.init("standardizedURL");
      pub fn standardizedURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standardizedURL.get(), );
 }}
var sel_filePathURL = CachedSelector.init("filePathURL");
      pub fn filePathURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_filePathURL.get(), );
 }}
var sel_getPromisedItemResourceValue_forKey_error_ = CachedSelector.init("getPromisedItemResourceValue:forKey:error:");
      pub fn getPromisedItemResourceValueforKeyerror(self: *Self, __value:  * id, __key:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * id,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getPromisedItemResourceValue_forKey_error_.get(), __value, __key, __an_error, );
 }}
var sel_promisedItemResourceValuesForKeys_error_ = CachedSelector.init("promisedItemResourceValuesForKeys:error:");
      pub fn promisedItemResourceValuesForKeyserror(self: *Self, __keys:  * NSArray, __an_error:  [*c]  ?* NSError, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSArray,  [*c]  ?* NSError, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_promisedItemResourceValuesForKeys_error_.get(), __keys, __an_error, );
 }}
var sel_checkPromisedItemIsReachableAndReturnError_ = CachedSelector.init("checkPromisedItemIsReachableAndReturnError:");
      pub fn checkPromisedItemIsReachableAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_checkPromisedItemIsReachableAndReturnError_.get(), __an_error, );
 }}
var sel_fileURLWithPathComponents_ = CachedSelector.init("fileURLWithPathComponents:");
      pub fn fileURLWithPathComponents(__components:  * NSArray, )  ?* NSURL {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_fileURLWithPathComponents_.get(), __components, );
 }}
var sel_URLByAppendingPathComponent_ = CachedSelector.init("URLByAppendingPathComponent:");
      pub fn URLByAppendingPathComponent(self: *Self, __pathComponent:  * NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLByAppendingPathComponent_.get(), __pathComponent, );
 }}
var sel_URLByAppendingPathComponent_isDirectory_ = CachedSelector.init("URLByAppendingPathComponent:isDirectory:");
      pub fn URLByAppendingPathComponentisDirectory(self: *Self, __pathComponent:  * NSString, __isDirectory: c_int, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLByAppendingPathComponent_isDirectory_.get(), __pathComponent, __isDirectory, );
 }}
var sel_URLByAppendingPathExtension_ = CachedSelector.init("URLByAppendingPathExtension:");
      pub fn URLByAppendingPathExtension(self: *Self, __pathExtension:  * NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLByAppendingPathExtension_.get(), __pathExtension, );
 }}
var sel_pathComponents = CachedSelector.init("pathComponents");
      pub fn pathComponents(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathComponents.get(), );
 }}
var sel_lastPathComponent = CachedSelector.init("lastPathComponent");
      pub fn lastPathComponent(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lastPathComponent.get(), );
 }}
var sel_pathExtension = CachedSelector.init("pathExtension");
      pub fn pathExtension(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathExtension.get(), );
 }}
var sel_URLByDeletingLastPathComponent = CachedSelector.init("URLByDeletingLastPathComponent");
      pub fn URLByDeletingLastPathComponent(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLByDeletingLastPathComponent.get(), );
 }}
var sel_URLByDeletingPathExtension = CachedSelector.init("URLByDeletingPathExtension");
      pub fn URLByDeletingPathExtension(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLByDeletingPathExtension.get(), );
 }}
var sel_URLByStandardizingPath = CachedSelector.init("URLByStandardizingPath");
      pub fn URLByStandardizingPath(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLByStandardizingPath.get(), );
 }}
var sel_URLByResolvingSymlinksInPath = CachedSelector.init("URLByResolvingSymlinksInPath");
      pub fn URLByResolvingSymlinksInPath(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLByResolvingSymlinksInPath.get(), );
 }}
var sel_resourceDataUsingCache_ = CachedSelector.init("resourceDataUsingCache:");
      pub fn resourceDataUsingCache(self: *Self, __shouldUseCache: c_int, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceDataUsingCache_.get(), __shouldUseCache, );
 }}
var sel_loadResourceDataNotifyingClient_usingCache_ = CachedSelector.init("loadResourceDataNotifyingClient:usingCache:");
      pub fn loadResourceDataNotifyingClientusingCache(self: *Self, __client: id, __shouldUseCache: c_int, ) void {{
           return @as(*const fn(*Self, SEL, id, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadResourceDataNotifyingClient_usingCache_.get(), __client, __shouldUseCache, );
 }}
var sel_propertyForKey_ = CachedSelector.init("propertyForKey:");
      pub fn propertyForKey(self: *Self, __propertyKey:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_propertyForKey_.get(), __propertyKey, );
 }}
var sel_setResourceData_ = CachedSelector.init("setResourceData:");
      pub fn setResourceData(self: *Self, __data:  * NSData, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResourceData_.get(), __data, );
 }}
var sel_setProperty_forKey_ = CachedSelector.init("setProperty:forKey:");
      pub fn setPropertyforKey(self: *Self, __property: id, __propertyKey:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setProperty_forKey_.get(), __property, __propertyKey, );
 }}
var sel_URLHandleUsingCache_ = CachedSelector.init("URLHandleUsingCache:");
      pub fn URLHandleUsingCache(self: *Self, __shouldUseCache: c_int, )  ?* NSURLHandle {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C)  ?* NSURLHandle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLHandleUsingCache_.get(), __shouldUseCache, );
 }}
  };
}

pub const NSURL = opaque {
  const Self = @This();
  pub usingnamespace NSURLInterfaceMixin(Self, "NSURL");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSURL");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSURL");
  pub usingnamespace NSItemProviderReadingProtocolMixin(Self, "NSURL");
  pub usingnamespace NSItemProviderWritingProtocolMixin(Self, "NSURL");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURL");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURL");
};

pub fn NSCountCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSCountCommand = opaque {
  const Self = @This();
  pub usingnamespace NSCountCommandInterfaceMixin(Self, "NSCountCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCountCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSCountCommand");
};

pub fn MTLFunctionDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_functionDescriptor = CachedSelector.init("functionDescriptor");
      pub fn functionDescriptor()  * MTLFunctionDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLFunctionDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_functionDescriptor.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
var sel_specializedName = CachedSelector.init("specializedName");
      pub fn specializedName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_specializedName.get(), );
 }}
var sel_setSpecializedName_ = CachedSelector.init("setSpecializedName:");
      pub fn setSpecializedName(self: *Self, __specializedName:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSpecializedName_.get(), __specializedName, );
 }}
var sel_constantValues = CachedSelector.init("constantValues");
      pub fn constantValues(self: *Self, )  ?* MTLFunctionConstantValues {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunctionConstantValues, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_constantValues.get(), );
 }}
var sel_setConstantValues_ = CachedSelector.init("setConstantValues:");
      pub fn setConstantValues(self: *Self, __constantValues:  ?* MTLFunctionConstantValues, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunctionConstantValues, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setConstantValues_.get(), __constantValues, );
 }}
var sel_options = CachedSelector.init("options");
      pub fn options(self: *Self, ) MTLFunctionOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLFunctionOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_options.get(), );
 }}
var sel_setOptions_ = CachedSelector.init("setOptions:");
      pub fn setOptions(self: *Self, __options: MTLFunctionOptions, ) void {{
           return @as(*const fn(*Self, SEL, MTLFunctionOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOptions_.get(), __options, );
 }}
var sel_binaryArchives = CachedSelector.init("binaryArchives");
      pub fn binaryArchives(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_binaryArchives.get(), );
 }}
var sel_setBinaryArchives_ = CachedSelector.init("setBinaryArchives:");
      pub fn setBinaryArchives(self: *Self, __binaryArchives:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBinaryArchives_.get(), __binaryArchives, );
 }}
  };
}

pub const MTLFunctionDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionDescriptorInterfaceMixin(Self, "MTLFunctionDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLFunctionDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLFunctionDescriptor");
};

pub fn NSUserAppleScriptTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_executeWithAppleEvent_completionHandler_ = CachedSelector.init("executeWithAppleEvent:completionHandler:");
      pub fn executeWithAppleEventcompletionHandler(self: *Self, __event:  ?* NSAppleEventDescriptor, __handler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSAppleEventDescriptor, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeWithAppleEvent_completionHandler_.get(), __event, __handler, );
 }}
  };
}

pub const NSUserAppleScriptTask = opaque {
  const Self = @This();
  pub usingnamespace NSUserAppleScriptTaskInterfaceMixin(Self, "NSUserAppleScriptTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserAppleScriptTask");
  pub usingnamespace NSUserScriptTaskInterfaceMixin(Self, "NSUserAppleScriptTask");
};

pub fn NSCloseCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_saveOptions = CachedSelector.init("saveOptions");
      pub fn saveOptions(self: *Self, ) NSSaveOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSSaveOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_saveOptions.get(), );
 }}
  };
}

pub const NSCloseCommand = opaque {
  const Self = @This();
  pub usingnamespace NSCloseCommandInterfaceMixin(Self, "NSCloseCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCloseCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSCloseCommand");
};

pub fn MTLMeshRenderPipelineDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_reset = CachedSelector.init("reset");
      pub fn reset(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reset.get(), );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_objectFunction = CachedSelector.init("objectFunction");
      pub fn objectFunction(self: *Self, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectFunction.get(), );
 }}
var sel_setObjectFunction_ = CachedSelector.init("setObjectFunction:");
      pub fn setObjectFunction(self: *Self, __objectFunction:  ?* MTLFunction, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectFunction_.get(), __objectFunction, );
 }}
var sel_meshFunction = CachedSelector.init("meshFunction");
      pub fn meshFunction(self: *Self, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_meshFunction.get(), );
 }}
var sel_setMeshFunction_ = CachedSelector.init("setMeshFunction:");
      pub fn setMeshFunction(self: *Self, __meshFunction:  ?* MTLFunction, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshFunction_.get(), __meshFunction, );
 }}
var sel_fragmentFunction = CachedSelector.init("fragmentFunction");
      pub fn fragmentFunction(self: *Self, )  ?* MTLFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentFunction.get(), );
 }}
var sel_setFragmentFunction_ = CachedSelector.init("setFragmentFunction:");
      pub fn setFragmentFunction(self: *Self, __fragmentFunction:  ?* MTLFunction, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentFunction_.get(), __fragmentFunction, );
 }}
var sel_maxTotalThreadsPerObjectThreadgroup = CachedSelector.init("maxTotalThreadsPerObjectThreadgroup");
      pub fn maxTotalThreadsPerObjectThreadgroup(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadsPerObjectThreadgroup.get(), );
 }}
var sel_setMaxTotalThreadsPerObjectThreadgroup_ = CachedSelector.init("setMaxTotalThreadsPerObjectThreadgroup:");
      pub fn setMaxTotalThreadsPerObjectThreadgroup(self: *Self, __maxTotalThreadsPerObjectThreadgroup: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxTotalThreadsPerObjectThreadgroup_.get(), __maxTotalThreadsPerObjectThreadgroup, );
 }}
var sel_maxTotalThreadsPerMeshThreadgroup = CachedSelector.init("maxTotalThreadsPerMeshThreadgroup");
      pub fn maxTotalThreadsPerMeshThreadgroup(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadsPerMeshThreadgroup.get(), );
 }}
var sel_setMaxTotalThreadsPerMeshThreadgroup_ = CachedSelector.init("setMaxTotalThreadsPerMeshThreadgroup:");
      pub fn setMaxTotalThreadsPerMeshThreadgroup(self: *Self, __maxTotalThreadsPerMeshThreadgroup: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxTotalThreadsPerMeshThreadgroup_.get(), __maxTotalThreadsPerMeshThreadgroup, );
 }}
var sel_objectThreadgroupSizeIsMultipleOfThreadExecutionWidth = CachedSelector.init("objectThreadgroupSizeIsMultipleOfThreadExecutionWidth");
      pub fn objectThreadgroupSizeIsMultipleOfThreadExecutionWidth(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectThreadgroupSizeIsMultipleOfThreadExecutionWidth.get(), );
 }}
var sel_setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth_ = CachedSelector.init("setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:");
      pub fn setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth(self: *Self, __objectThreadgroupSizeIsMultipleOfThreadExecutionWidth: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth_.get(), __objectThreadgroupSizeIsMultipleOfThreadExecutionWidth, );
 }}
var sel_meshThreadgroupSizeIsMultipleOfThreadExecutionWidth = CachedSelector.init("meshThreadgroupSizeIsMultipleOfThreadExecutionWidth");
      pub fn meshThreadgroupSizeIsMultipleOfThreadExecutionWidth(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_meshThreadgroupSizeIsMultipleOfThreadExecutionWidth.get(), );
 }}
var sel_setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth_ = CachedSelector.init("setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:");
      pub fn setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth(self: *Self, __meshThreadgroupSizeIsMultipleOfThreadExecutionWidth: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth_.get(), __meshThreadgroupSizeIsMultipleOfThreadExecutionWidth, );
 }}
var sel_payloadMemoryLength = CachedSelector.init("payloadMemoryLength");
      pub fn payloadMemoryLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_payloadMemoryLength.get(), );
 }}
var sel_setPayloadMemoryLength_ = CachedSelector.init("setPayloadMemoryLength:");
      pub fn setPayloadMemoryLength(self: *Self, __payloadMemoryLength: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPayloadMemoryLength_.get(), __payloadMemoryLength, );
 }}
var sel_maxTotalThreadgroupsPerMeshGrid = CachedSelector.init("maxTotalThreadgroupsPerMeshGrid");
      pub fn maxTotalThreadgroupsPerMeshGrid(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxTotalThreadgroupsPerMeshGrid.get(), );
 }}
var sel_setMaxTotalThreadgroupsPerMeshGrid_ = CachedSelector.init("setMaxTotalThreadgroupsPerMeshGrid:");
      pub fn setMaxTotalThreadgroupsPerMeshGrid(self: *Self, __maxTotalThreadgroupsPerMeshGrid: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxTotalThreadgroupsPerMeshGrid_.get(), __maxTotalThreadgroupsPerMeshGrid, );
 }}
var sel_objectBuffers = CachedSelector.init("objectBuffers");
      pub fn objectBuffers(self: *Self, )  * MTLPipelineBufferDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLPipelineBufferDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectBuffers.get(), );
 }}
var sel_meshBuffers = CachedSelector.init("meshBuffers");
      pub fn meshBuffers(self: *Self, )  * MTLPipelineBufferDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLPipelineBufferDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_meshBuffers.get(), );
 }}
var sel_fragmentBuffers = CachedSelector.init("fragmentBuffers");
      pub fn fragmentBuffers(self: *Self, )  * MTLPipelineBufferDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLPipelineBufferDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentBuffers.get(), );
 }}
var sel_rasterSampleCount = CachedSelector.init("rasterSampleCount");
      pub fn rasterSampleCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rasterSampleCount.get(), );
 }}
var sel_setRasterSampleCount_ = CachedSelector.init("setRasterSampleCount:");
      pub fn setRasterSampleCount(self: *Self, __rasterSampleCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRasterSampleCount_.get(), __rasterSampleCount, );
 }}
var sel_isAlphaToCoverageEnabled = CachedSelector.init("isAlphaToCoverageEnabled");
      pub fn isAlphaToCoverageEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAlphaToCoverageEnabled.get(), );
 }}
var sel_setAlphaToCoverageEnabled_ = CachedSelector.init("setAlphaToCoverageEnabled:");
      pub fn setAlphaToCoverageEnabled(self: *Self, __alphaToCoverageEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAlphaToCoverageEnabled_.get(), __alphaToCoverageEnabled, );
 }}
var sel_isAlphaToOneEnabled = CachedSelector.init("isAlphaToOneEnabled");
      pub fn isAlphaToOneEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAlphaToOneEnabled.get(), );
 }}
var sel_setAlphaToOneEnabled_ = CachedSelector.init("setAlphaToOneEnabled:");
      pub fn setAlphaToOneEnabled(self: *Self, __alphaToOneEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAlphaToOneEnabled_.get(), __alphaToOneEnabled, );
 }}
var sel_isRasterizationEnabled = CachedSelector.init("isRasterizationEnabled");
      pub fn isRasterizationEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isRasterizationEnabled.get(), );
 }}
var sel_setRasterizationEnabled_ = CachedSelector.init("setRasterizationEnabled:");
      pub fn setRasterizationEnabled(self: *Self, __rasterizationEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRasterizationEnabled_.get(), __rasterizationEnabled, );
 }}
var sel_maxVertexAmplificationCount = CachedSelector.init("maxVertexAmplificationCount");
      pub fn maxVertexAmplificationCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxVertexAmplificationCount.get(), );
 }}
var sel_setMaxVertexAmplificationCount_ = CachedSelector.init("setMaxVertexAmplificationCount:");
      pub fn setMaxVertexAmplificationCount(self: *Self, __maxVertexAmplificationCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxVertexAmplificationCount_.get(), __maxVertexAmplificationCount, );
 }}
var sel_colorAttachments = CachedSelector.init("colorAttachments");
      pub fn colorAttachments(self: *Self, )  * MTLRenderPipelineColorAttachmentDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLRenderPipelineColorAttachmentDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_colorAttachments.get(), );
 }}
var sel_depthAttachmentPixelFormat = CachedSelector.init("depthAttachmentPixelFormat");
      pub fn depthAttachmentPixelFormat(self: *Self, ) MTLPixelFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPixelFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depthAttachmentPixelFormat.get(), );
 }}
var sel_setDepthAttachmentPixelFormat_ = CachedSelector.init("setDepthAttachmentPixelFormat:");
      pub fn setDepthAttachmentPixelFormat(self: *Self, __depthAttachmentPixelFormat: MTLPixelFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthAttachmentPixelFormat_.get(), __depthAttachmentPixelFormat, );
 }}
var sel_stencilAttachmentPixelFormat = CachedSelector.init("stencilAttachmentPixelFormat");
      pub fn stencilAttachmentPixelFormat(self: *Self, ) MTLPixelFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPixelFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stencilAttachmentPixelFormat.get(), );
 }}
var sel_setStencilAttachmentPixelFormat_ = CachedSelector.init("setStencilAttachmentPixelFormat:");
      pub fn setStencilAttachmentPixelFormat(self: *Self, __stencilAttachmentPixelFormat: MTLPixelFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStencilAttachmentPixelFormat_.get(), __stencilAttachmentPixelFormat, );
 }}
var sel_objectLinkedFunctions = CachedSelector.init("objectLinkedFunctions");
      pub fn objectLinkedFunctions(self: *Self, )  * MTLLinkedFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLLinkedFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectLinkedFunctions.get(), );
 }}
var sel_setObjectLinkedFunctions_ = CachedSelector.init("setObjectLinkedFunctions:");
      pub fn setObjectLinkedFunctions(self: *Self, __objectLinkedFunctions:  ?* MTLLinkedFunctions, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLLinkedFunctions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectLinkedFunctions_.get(), __objectLinkedFunctions, );
 }}
var sel_meshLinkedFunctions = CachedSelector.init("meshLinkedFunctions");
      pub fn meshLinkedFunctions(self: *Self, )  * MTLLinkedFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLLinkedFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_meshLinkedFunctions.get(), );
 }}
var sel_setMeshLinkedFunctions_ = CachedSelector.init("setMeshLinkedFunctions:");
      pub fn setMeshLinkedFunctions(self: *Self, __meshLinkedFunctions:  ?* MTLLinkedFunctions, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLLinkedFunctions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMeshLinkedFunctions_.get(), __meshLinkedFunctions, );
 }}
var sel_fragmentLinkedFunctions = CachedSelector.init("fragmentLinkedFunctions");
      pub fn fragmentLinkedFunctions(self: *Self, )  * MTLLinkedFunctions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLLinkedFunctions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentLinkedFunctions.get(), );
 }}
var sel_setFragmentLinkedFunctions_ = CachedSelector.init("setFragmentLinkedFunctions:");
      pub fn setFragmentLinkedFunctions(self: *Self, __fragmentLinkedFunctions:  ?* MTLLinkedFunctions, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLLinkedFunctions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentLinkedFunctions_.get(), __fragmentLinkedFunctions, );
 }}
  };
}

pub const MTLMeshRenderPipelineDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLMeshRenderPipelineDescriptorInterfaceMixin(Self, "MTLMeshRenderPipelineDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLMeshRenderPipelineDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLMeshRenderPipelineDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLMeshRenderPipelineDescriptor");
};

pub fn MTLComputePassSampleBufferAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sampleBuffer = CachedSelector.init("sampleBuffer");
      pub fn sampleBuffer(self: *Self, )  ?* MTLCounterSampleBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCounterSampleBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBuffer.get(), );
 }}
var sel_setSampleBuffer_ = CachedSelector.init("setSampleBuffer:");
      pub fn setSampleBuffer(self: *Self, __sampleBuffer:  ?* MTLCounterSampleBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLCounterSampleBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSampleBuffer_.get(), __sampleBuffer, );
 }}
var sel_startOfEncoderSampleIndex = CachedSelector.init("startOfEncoderSampleIndex");
      pub fn startOfEncoderSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startOfEncoderSampleIndex.get(), );
 }}
var sel_setStartOfEncoderSampleIndex_ = CachedSelector.init("setStartOfEncoderSampleIndex:");
      pub fn setStartOfEncoderSampleIndex(self: *Self, __startOfEncoderSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStartOfEncoderSampleIndex_.get(), __startOfEncoderSampleIndex, );
 }}
var sel_endOfEncoderSampleIndex = CachedSelector.init("endOfEncoderSampleIndex");
      pub fn endOfEncoderSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endOfEncoderSampleIndex.get(), );
 }}
var sel_setEndOfEncoderSampleIndex_ = CachedSelector.init("setEndOfEncoderSampleIndex:");
      pub fn setEndOfEncoderSampleIndex(self: *Self, __endOfEncoderSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEndOfEncoderSampleIndex_.get(), __endOfEncoderSampleIndex, );
 }}
  };
}

pub const MTLComputePassSampleBufferAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLComputePassSampleBufferAttachmentDescriptorInterfaceMixin(Self, "MTLComputePassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLComputePassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLComputePassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLComputePassSampleBufferAttachmentDescriptor");
};

pub fn MTLBufferLayoutDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stride = CachedSelector.init("stride");
      pub fn stride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stride.get(), );
 }}
var sel_setStride_ = CachedSelector.init("setStride:");
      pub fn setStride(self: *Self, __stride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStride_.get(), __stride, );
 }}
var sel_stepFunction = CachedSelector.init("stepFunction");
      pub fn stepFunction(self: *Self, ) MTLStepFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLStepFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stepFunction.get(), );
 }}
var sel_setStepFunction_ = CachedSelector.init("setStepFunction:");
      pub fn setStepFunction(self: *Self, __stepFunction: MTLStepFunction, ) void {{
           return @as(*const fn(*Self, SEL, MTLStepFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStepFunction_.get(), __stepFunction, );
 }}
var sel_stepRate = CachedSelector.init("stepRate");
      pub fn stepRate(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stepRate.get(), );
 }}
var sel_setStepRate_ = CachedSelector.init("setStepRate:");
      pub fn setStepRate(self: *Self, __stepRate: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStepRate_.get(), __stepRate, );
 }}
  };
}

pub const MTLBufferLayoutDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLBufferLayoutDescriptorInterfaceMixin(Self, "MTLBufferLayoutDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLBufferLayoutDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBufferLayoutDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLBufferLayoutDescriptor");
};

pub fn NSValueTransformerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setValueTransformer_forName_ = CachedSelector.init("setValueTransformer:forName:");
      pub fn setValueTransformerforName(__transformer:  ?* NSValueTransformer, __name:  * NSString, ) void {{
           return @as(*const fn(Class, SEL,  ?* NSValueTransformer,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setValueTransformer_forName_.get(), __transformer, __name, );
 }}
var sel_valueTransformerForName_ = CachedSelector.init("valueTransformerForName:");
      pub fn valueTransformerForName(__name:  * NSString, )  ?* NSValueTransformer {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSValueTransformer, @ptrCast(&objc_msgSend))(class.get(), sel_valueTransformerForName_.get(), __name, );
 }}
var sel_valueTransformerNames = CachedSelector.init("valueTransformerNames");
      pub fn valueTransformerNames()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_valueTransformerNames.get(), );
 }}
var sel_transformedValueClass = CachedSelector.init("transformedValueClass");
      pub fn transformedValueClass() Class {{
           return @as(*const fn(Class, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(class.get(), sel_transformedValueClass.get(), );
 }}
var sel_allowsReverseTransformation = CachedSelector.init("allowsReverseTransformation");
      pub fn allowsReverseTransformation() c_int {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_allowsReverseTransformation.get(), );
 }}
var sel_transformedValue_ = CachedSelector.init("transformedValue:");
      pub fn transformedValue(self: *Self, __value: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transformedValue_.get(), __value, );
 }}
var sel_reverseTransformedValue_ = CachedSelector.init("reverseTransformedValue:");
      pub fn reverseTransformedValue(self: *Self, __value: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reverseTransformedValue_.get(), __value, );
 }}
  };
}

pub const NSValueTransformer = opaque {
  const Self = @This();
  pub usingnamespace NSValueTransformerInterfaceMixin(Self, "NSValueTransformer");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSValueTransformer");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSValueTransformer");
};

pub fn NSAppleEventDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_nullDescriptor = CachedSelector.init("nullDescriptor");
      pub fn nullDescriptor()  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_nullDescriptor.get(), );
 }}
var sel_descriptorWithDescriptorType_bytes_length_ = CachedSelector.init("descriptorWithDescriptorType:bytes:length:");
      pub fn descriptorWithDescriptorTypebyteslength(__descriptorType: c_uint, __bytes:  [*c]  const void, __byteCount: c_ulong, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, c_uint,  [*c]  const void, c_ulong, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithDescriptorType_bytes_length_.get(), __descriptorType, __bytes, __byteCount, );
 }}
var sel_descriptorWithDescriptorType_data_ = CachedSelector.init("descriptorWithDescriptorType:data:");
      pub fn descriptorWithDescriptorTypedata(__descriptorType: c_uint, __data:  ?* NSData, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, c_uint,  ?* NSData, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithDescriptorType_data_.get(), __descriptorType, __data, );
 }}
var sel_descriptorWithBoolean_ = CachedSelector.init("descriptorWithBoolean:");
      pub fn descriptorWithBoolean(__boolean: u8, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, u8, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithBoolean_.get(), __boolean, );
 }}
var sel_descriptorWithEnumCode_ = CachedSelector.init("descriptorWithEnumCode:");
      pub fn descriptorWithEnumCode(__enumerator: c_uint, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, c_uint, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithEnumCode_.get(), __enumerator, );
 }}
var sel_descriptorWithInt32_ = CachedSelector.init("descriptorWithInt32:");
      pub fn descriptorWithInt32(__signedInt: c_int, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, c_int, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithInt32_.get(), __signedInt, );
 }}
var sel_descriptorWithDouble_ = CachedSelector.init("descriptorWithDouble:");
      pub fn descriptorWithDouble(__doubleValue: f64, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, f64, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithDouble_.get(), __doubleValue, );
 }}
var sel_descriptorWithTypeCode_ = CachedSelector.init("descriptorWithTypeCode:");
      pub fn descriptorWithTypeCode(__typeCode: c_uint, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, c_uint, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithTypeCode_.get(), __typeCode, );
 }}
var sel_descriptorWithString_ = CachedSelector.init("descriptorWithString:");
      pub fn descriptorWithString(__string:  * NSString, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithString_.get(), __string, );
 }}
var sel_descriptorWithDate_ = CachedSelector.init("descriptorWithDate:");
      pub fn descriptorWithDate(__date:  * NSDate, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL,  * NSDate, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithDate_.get(), __date, );
 }}
var sel_descriptorWithFileURL_ = CachedSelector.init("descriptorWithFileURL:");
      pub fn descriptorWithFileURL(__fileURL:  * NSURL, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithFileURL_.get(), __fileURL, );
 }}
var sel_appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_ = CachedSelector.init("appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:");
      pub fn appleEventWithEventClasseventIDtargetDescriptorreturnIDtransactionID(__eventClass: c_uint, __eventID: c_uint, __targetDescriptor:  ?* NSAppleEventDescriptor, __returnID: c_short, __transactionID: c_int, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, c_uint, c_uint,  ?* NSAppleEventDescriptor, c_short, c_int, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_.get(), __eventClass, __eventID, __targetDescriptor, __returnID, __transactionID, );
 }}
var sel_listDescriptor = CachedSelector.init("listDescriptor");
      pub fn listDescriptor()  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_listDescriptor.get(), );
 }}
var sel_recordDescriptor = CachedSelector.init("recordDescriptor");
      pub fn recordDescriptor()  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_recordDescriptor.get(), );
 }}
var sel_currentProcessDescriptor = CachedSelector.init("currentProcessDescriptor");
      pub fn currentProcessDescriptor()  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_currentProcessDescriptor.get(), );
 }}
var sel_descriptorWithProcessIdentifier_ = CachedSelector.init("descriptorWithProcessIdentifier:");
      pub fn descriptorWithProcessIdentifier(__processIdentifier: c_int, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL, c_int, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithProcessIdentifier_.get(), __processIdentifier, );
 }}
var sel_descriptorWithBundleIdentifier_ = CachedSelector.init("descriptorWithBundleIdentifier:");
      pub fn descriptorWithBundleIdentifier(__bundleIdentifier:  * NSString, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithBundleIdentifier_.get(), __bundleIdentifier, );
 }}
var sel_descriptorWithApplicationURL_ = CachedSelector.init("descriptorWithApplicationURL:");
      pub fn descriptorWithApplicationURL(__applicationURL:  * NSURL, )  * NSAppleEventDescriptor {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_descriptorWithApplicationURL_.get(), __applicationURL, );
 }}
var sel_initWithAEDescNoCopy_ = CachedSelector.init("initWithAEDescNoCopy:");
      pub fn initWithAEDescNoCopy(self: *Self, __aeDesc:  [*c] AEDesc, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] AEDesc, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithAEDescNoCopy_.get(), __aeDesc, );
 }}
var sel_initWithDescriptorType_bytes_length_ = CachedSelector.init("initWithDescriptorType:bytes:length:");
      pub fn initWithDescriptorTypebyteslength(self: *Self, __descriptorType: c_uint, __bytes:  [*c]  const void, __byteCount: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_uint,  [*c]  const void, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDescriptorType_bytes_length_.get(), __descriptorType, __bytes, __byteCount, );
 }}
var sel_initWithDescriptorType_data_ = CachedSelector.init("initWithDescriptorType:data:");
      pub fn initWithDescriptorTypedata(self: *Self, __descriptorType: c_uint, __data:  ?* NSData, ) *Self {{
           return @as(*const fn(*Self, SEL, c_uint,  ?* NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDescriptorType_data_.get(), __descriptorType, __data, );
 }}
var sel_initWithEventClass_eventID_targetDescriptor_returnID_transactionID_ = CachedSelector.init("initWithEventClass:eventID:targetDescriptor:returnID:transactionID:");
      pub fn initWithEventClasseventIDtargetDescriptorreturnIDtransactionID(self: *Self, __eventClass: c_uint, __eventID: c_uint, __targetDescriptor:  ?* NSAppleEventDescriptor, __returnID: c_short, __transactionID: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL, c_uint, c_uint,  ?* NSAppleEventDescriptor, c_short, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithEventClass_eventID_targetDescriptor_returnID_transactionID_.get(), __eventClass, __eventID, __targetDescriptor, __returnID, __transactionID, );
 }}
var sel_initListDescriptor = CachedSelector.init("initListDescriptor");
      pub fn initListDescriptor(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initListDescriptor.get(), );
 }}
var sel_initRecordDescriptor = CachedSelector.init("initRecordDescriptor");
      pub fn initRecordDescriptor(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initRecordDescriptor.get(), );
 }}
var sel_setParamDescriptor_forKeyword_ = CachedSelector.init("setParamDescriptor:forKeyword:");
      pub fn setParamDescriptorforKeyword(self: *Self, __descriptor:  * NSAppleEventDescriptor, __keyword: c_uint, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAppleEventDescriptor, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setParamDescriptor_forKeyword_.get(), __descriptor, __keyword, );
 }}
var sel_paramDescriptorForKeyword_ = CachedSelector.init("paramDescriptorForKeyword:");
      pub fn paramDescriptorForKeyword(self: *Self, __keyword: c_uint, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_paramDescriptorForKeyword_.get(), __keyword, );
 }}
var sel_removeParamDescriptorWithKeyword_ = CachedSelector.init("removeParamDescriptorWithKeyword:");
      pub fn removeParamDescriptorWithKeyword(self: *Self, __keyword: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeParamDescriptorWithKeyword_.get(), __keyword, );
 }}
var sel_setAttributeDescriptor_forKeyword_ = CachedSelector.init("setAttributeDescriptor:forKeyword:");
      pub fn setAttributeDescriptorforKeyword(self: *Self, __descriptor:  * NSAppleEventDescriptor, __keyword: c_uint, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAppleEventDescriptor, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributeDescriptor_forKeyword_.get(), __descriptor, __keyword, );
 }}
var sel_attributeDescriptorForKeyword_ = CachedSelector.init("attributeDescriptorForKeyword:");
      pub fn attributeDescriptorForKeyword(self: *Self, __keyword: c_uint, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeDescriptorForKeyword_.get(), __keyword, );
 }}
var sel_sendEventWithOptions_timeout_error_ = CachedSelector.init("sendEventWithOptions:timeout:error:");
      pub fn sendEventWithOptionstimeouterror(self: *Self, __sendOptions: NSAppleEventSendOptions, __timeoutInSeconds: f64, __an_error:  [*c]  ?* NSError, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, NSAppleEventSendOptions, f64,  [*c]  ?* NSError, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sendEventWithOptions_timeout_error_.get(), __sendOptions, __timeoutInSeconds, __an_error, );
 }}
var sel_insertDescriptor_atIndex_ = CachedSelector.init("insertDescriptor:atIndex:");
      pub fn insertDescriptoratIndex(self: *Self, __descriptor:  * NSAppleEventDescriptor, __index: c_long, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAppleEventDescriptor, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertDescriptor_atIndex_.get(), __descriptor, __index, );
 }}
var sel_descriptorAtIndex_ = CachedSelector.init("descriptorAtIndex:");
      pub fn descriptorAtIndex(self: *Self, __index: c_long, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptorAtIndex_.get(), __index, );
 }}
var sel_removeDescriptorAtIndex_ = CachedSelector.init("removeDescriptorAtIndex:");
      pub fn removeDescriptorAtIndex(self: *Self, __index: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeDescriptorAtIndex_.get(), __index, );
 }}
var sel_setDescriptor_forKeyword_ = CachedSelector.init("setDescriptor:forKeyword:");
      pub fn setDescriptorforKeyword(self: *Self, __descriptor:  * NSAppleEventDescriptor, __keyword: c_uint, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAppleEventDescriptor, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDescriptor_forKeyword_.get(), __descriptor, __keyword, );
 }}
var sel_descriptorForKeyword_ = CachedSelector.init("descriptorForKeyword:");
      pub fn descriptorForKeyword(self: *Self, __keyword: c_uint, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptorForKeyword_.get(), __keyword, );
 }}
var sel_removeDescriptorWithKeyword_ = CachedSelector.init("removeDescriptorWithKeyword:");
      pub fn removeDescriptorWithKeyword(self: *Self, __keyword: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeDescriptorWithKeyword_.get(), __keyword, );
 }}
var sel_keywordForDescriptorAtIndex_ = CachedSelector.init("keywordForDescriptorAtIndex:");
      pub fn keywordForDescriptorAtIndex(self: *Self, __index: c_long, ) c_uint {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keywordForDescriptorAtIndex_.get(), __index, );
 }}
var sel_coerceToDescriptorType_ = CachedSelector.init("coerceToDescriptorType:");
      pub fn coerceToDescriptorType(self: *Self, __descriptorType: c_uint, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_coerceToDescriptorType_.get(), __descriptorType, );
 }}
var sel_aeDesc = CachedSelector.init("aeDesc");
      pub fn aeDesc(self: *Self, )  [*c] AEDesc {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] AEDesc, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_aeDesc.get(), );
 }}
var sel_descriptorType = CachedSelector.init("descriptorType");
      pub fn descriptorType(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptorType.get(), );
 }}
var sel_data = CachedSelector.init("data");
      pub fn data(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_data.get(), );
 }}
var sel_booleanValue = CachedSelector.init("booleanValue");
      pub fn booleanValue(self: *Self, ) u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_booleanValue.get(), );
 }}
var sel_enumCodeValue = CachedSelector.init("enumCodeValue");
      pub fn enumCodeValue(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumCodeValue.get(), );
 }}
var sel_int32Value = CachedSelector.init("int32Value");
      pub fn int32Value(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_int32Value.get(), );
 }}
var sel_doubleValue = CachedSelector.init("doubleValue");
      pub fn doubleValue(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doubleValue.get(), );
 }}
var sel_typeCodeValue = CachedSelector.init("typeCodeValue");
      pub fn typeCodeValue(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_typeCodeValue.get(), );
 }}
var sel_stringValue = CachedSelector.init("stringValue");
      pub fn stringValue(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringValue.get(), );
 }}
var sel_dateValue = CachedSelector.init("dateValue");
      pub fn dateValue(self: *Self, )  * NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateValue.get(), );
 }}
var sel_fileURLValue = CachedSelector.init("fileURLValue");
      pub fn fileURLValue(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileURLValue.get(), );
 }}
var sel_eventClass = CachedSelector.init("eventClass");
      pub fn eventClass(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_eventClass.get(), );
 }}
var sel_eventID = CachedSelector.init("eventID");
      pub fn eventID(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_eventID.get(), );
 }}
var sel_returnID = CachedSelector.init("returnID");
      pub fn returnID(self: *Self, ) c_short {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_short, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_returnID.get(), );
 }}
var sel_transactionID = CachedSelector.init("transactionID");
      pub fn transactionID(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transactionID.get(), );
 }}
var sel_isRecordDescriptor = CachedSelector.init("isRecordDescriptor");
      pub fn isRecordDescriptor(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isRecordDescriptor.get(), );
 }}
var sel_numberOfItems = CachedSelector.init("numberOfItems");
      pub fn numberOfItems(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberOfItems.get(), );
 }}
  };
}

pub const NSAppleEventDescriptor = opaque {
  const Self = @This();
  pub usingnamespace NSAppleEventDescriptorInterfaceMixin(Self, "NSAppleEventDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSAppleEventDescriptor");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSAppleEventDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSAppleEventDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSAppleEventDescriptor");
};

pub fn NSObjectInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_load = CachedSelector.init("load");
      pub fn load() void {{
           return @as(*const fn(Class, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_load.get(), );
 }}
var sel_initialize = CachedSelector.init("initialize");
      pub fn initialize() void {{
           return @as(*const fn(Class, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_initialize.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_allocWithZone_ = CachedSelector.init("allocWithZone:");
      pub fn allocWithZone(__zone:  [*c] _NSZone, ) *Self {{
           return @as(*const fn(Class, SEL,  [*c] _NSZone, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_allocWithZone_.get(), __zone, );
 }}
var sel_alloc = CachedSelector.init("alloc");
      pub fn alloc() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_alloc.get(), );
 }}
var sel_dealloc = CachedSelector.init("dealloc");
      pub fn dealloc(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dealloc.get(), );
 }}
var sel_finalize = CachedSelector.init("finalize");
      pub fn finalize(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_finalize.get(), );
 }}
var sel_copy = CachedSelector.init("copy");
      pub fn copy(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copy.get(), );
 }}
var sel_mutableCopy = CachedSelector.init("mutableCopy");
      pub fn mutableCopy(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableCopy.get(), );
 }}
var sel_copyWithZone_ = CachedSelector.init("copyWithZone:");
      pub fn copyWithZone(__zone:  [*c] _NSZone, ) id {{
           return @as(*const fn(Class, SEL,  [*c] _NSZone, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_copyWithZone_.get(), __zone, );
 }}
var sel_mutableCopyWithZone_ = CachedSelector.init("mutableCopyWithZone:");
      pub fn mutableCopyWithZone(__zone:  [*c] _NSZone, ) id {{
           return @as(*const fn(Class, SEL,  [*c] _NSZone, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_mutableCopyWithZone_.get(), __zone, );
 }}
var sel_instancesRespondToSelector_ = CachedSelector.init("instancesRespondToSelector:");
      pub fn instancesRespondToSelector(__aSelector: SEL, ) c_int {{
           return @as(*const fn(Class, SEL, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_instancesRespondToSelector_.get(), __aSelector, );
 }}
var sel_conformsToProtocol_ = CachedSelector.init("conformsToProtocol:");
      pub fn conformsToProtocol(__protocol:  * Protocol, ) c_int {{
           return @as(*const fn(Class, SEL,  * Protocol, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_conformsToProtocol_.get(), __protocol, );
 }}
var sel_methodForSelector_ = CachedSelector.init("methodForSelector:");
      pub fn methodForSelector(self: *Self, __aSelector: SEL, )  [*c] ?*u8 {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C)  [*c] ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_methodForSelector_.get(), __aSelector, );
 }}
var sel_instanceMethodForSelector_ = CachedSelector.init("instanceMethodForSelector:");
      pub fn instanceMethodForSelector(__aSelector: SEL, )  [*c] ?*u8 {{
           return @as(*const fn(Class, SEL, SEL, ) callconv(.C)  [*c] ?*u8, @ptrCast(&objc_msgSend))(class.get(), sel_instanceMethodForSelector_.get(), __aSelector, );
 }}
var sel_doesNotRecognizeSelector_ = CachedSelector.init("doesNotRecognizeSelector:");
      pub fn doesNotRecognizeSelector(self: *Self, __aSelector: SEL, ) void {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doesNotRecognizeSelector_.get(), __aSelector, );
 }}
var sel_forwardingTargetForSelector_ = CachedSelector.init("forwardingTargetForSelector:");
      pub fn forwardingTargetForSelector(self: *Self, __aSelector: SEL, ) id {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_forwardingTargetForSelector_.get(), __aSelector, );
 }}
var sel_forwardInvocation_ = CachedSelector.init("forwardInvocation:");
      pub fn forwardInvocation(self: *Self, __anInvocation:  * NSInvocation, ) void {{
           return @as(*const fn(*Self, SEL,  * NSInvocation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_forwardInvocation_.get(), __anInvocation, );
 }}
var sel_methodSignatureForSelector_ = CachedSelector.init("methodSignatureForSelector:");
      pub fn methodSignatureForSelector(self: *Self, __aSelector: SEL, )  * NSMethodSignature {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C)  * NSMethodSignature, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_methodSignatureForSelector_.get(), __aSelector, );
 }}
var sel_instanceMethodSignatureForSelector_ = CachedSelector.init("instanceMethodSignatureForSelector:");
      pub fn instanceMethodSignatureForSelector(__aSelector: SEL, )  * NSMethodSignature {{
           return @as(*const fn(Class, SEL, SEL, ) callconv(.C)  * NSMethodSignature, @ptrCast(&objc_msgSend))(class.get(), sel_instanceMethodSignatureForSelector_.get(), __aSelector, );
 }}
var sel_allowsWeakReference = CachedSelector.init("allowsWeakReference");
      pub fn allowsWeakReference(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsWeakReference.get(), );
 }}
var sel_retainWeakReference = CachedSelector.init("retainWeakReference");
      pub fn retainWeakReference(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_retainWeakReference.get(), );
 }}
var sel_isSubclassOfClass_ = CachedSelector.init("isSubclassOfClass:");
      pub fn isSubclassOfClass(__aClass: Class, ) c_int {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_isSubclassOfClass_.get(), __aClass, );
 }}
var sel_resolveClassMethod_ = CachedSelector.init("resolveClassMethod:");
      pub fn resolveClassMethod(__sel: SEL, ) c_int {{
           return @as(*const fn(Class, SEL, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_resolveClassMethod_.get(), __sel, );
 }}
var sel_resolveInstanceMethod_ = CachedSelector.init("resolveInstanceMethod:");
      pub fn resolveInstanceMethod(__sel: SEL, ) c_int {{
           return @as(*const fn(Class, SEL, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_resolveInstanceMethod_.get(), __sel, );
 }}
var sel_hash = CachedSelector.init("hash");
      pub fn hash() c_ulong {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(class.get(), sel_hash.get(), );
 }}
var sel_superclass = CachedSelector.init("superclass");
      pub fn superclass() Class {{
           return @as(*const fn(Class, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(class.get(), sel_superclass.get(), );
 }}
var sel_class = CachedSelector.init("class");
      pub fn _class() Class {{
           return @as(*const fn(Class, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(class.get(), sel_class.get(), );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description()  * NSString {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_description.get(), );
 }}
var sel_debugDescription = CachedSelector.init("debugDescription");
      pub fn debugDescription()  * NSString {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_debugDescription.get(), );
 }}
var sel_version = CachedSelector.init("version");
      pub fn version() c_long {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(class.get(), sel_version.get(), );
 }}
var sel_setVersion_ = CachedSelector.init("setVersion:");
      pub fn setVersion(__aVersion: c_long, ) void {{
           return @as(*const fn(Class, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setVersion_.get(), __aVersion, );
 }}
var sel_replacementObjectForCoder_ = CachedSelector.init("replacementObjectForCoder:");
      pub fn replacementObjectForCoder(self: *Self, __coder:  * NSCoder, ) id {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replacementObjectForCoder_.get(), __coder, );
 }}
var sel_awakeAfterUsingCoder_ = CachedSelector.init("awakeAfterUsingCoder:");
      pub fn awakeAfterUsingCoder(self: *Self, __coder:  * NSCoder, ) id {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_awakeAfterUsingCoder_.get(), __coder, );
 }}
var sel_classForCoder = CachedSelector.init("classForCoder");
      pub fn classForCoder(self: *Self, ) Class {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classForCoder.get(), );
 }}
var sel_poseAsClass_ = CachedSelector.init("poseAsClass:");
      pub fn poseAsClass(__aClass: Class, ) void {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_poseAsClass_.get(), __aClass, );
 }}
var sel_autoContentAccessingProxy = CachedSelector.init("autoContentAccessingProxy");
      pub fn autoContentAccessingProxy(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_autoContentAccessingProxy.get(), );
 }}
var sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_ = CachedSelector.init("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:");
      pub fn attemptRecoveryFromErroroptionIndexdelegatedidRecoverSelectorcontextInfo(self: *Self, __an_error:  * NSError, __recoveryOptionIndex: c_ulong, __delegate: id, __didRecoverSelector: SEL, __contextInfo:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSError, c_ulong, id, SEL,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_.get(), __an_error, __recoveryOptionIndex, __delegate, __didRecoverSelector, __contextInfo, );
 }}
var sel_attemptRecoveryFromError_optionIndex_ = CachedSelector.init("attemptRecoveryFromError:optionIndex:");
      pub fn attemptRecoveryFromErroroptionIndex(self: *Self, __an_error:  * NSError, __recoveryOptionIndex: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSError, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attemptRecoveryFromError_optionIndex_.get(), __an_error, __recoveryOptionIndex, );
 }}
var sel_performSelector_withObject_afterDelay_inModes_ = CachedSelector.init("performSelector:withObject:afterDelay:inModes:");
      pub fn performSelectorwithObjectafterDelayinModes(self: *Self, __aSelector: SEL, __anArgument: id, __delay: f64, __modes:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id, f64,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelector_withObject_afterDelay_inModes_.get(), __aSelector, __anArgument, __delay, __modes, );
 }}
var sel_performSelector_withObject_afterDelay_ = CachedSelector.init("performSelector:withObject:afterDelay:");
      pub fn performSelectorwithObjectafterDelay(self: *Self, __aSelector: SEL, __anArgument: id, __delay: f64, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelector_withObject_afterDelay_.get(), __aSelector, __anArgument, __delay, );
 }}
var sel_cancelPreviousPerformRequestsWithTarget_selector_object_ = CachedSelector.init("cancelPreviousPerformRequestsWithTarget:selector:object:");
      pub fn cancelPreviousPerformRequestsWithTargetselectorobject(__aTarget: id, __aSelector: SEL, __anArgument: id, ) void {{
           return @as(*const fn(Class, SEL, id, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_cancelPreviousPerformRequestsWithTarget_selector_object_.get(), __aTarget, __aSelector, __anArgument, );
 }}
var sel_cancelPreviousPerformRequestsWithTarget_ = CachedSelector.init("cancelPreviousPerformRequestsWithTarget:");
      pub fn cancelPreviousPerformRequestsWithTarget(__aTarget: id, ) void {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_cancelPreviousPerformRequestsWithTarget_.get(), __aTarget, );
 }}
var sel_URL_resourceDataDidBecomeAvailable_ = CachedSelector.init("URL:resourceDataDidBecomeAvailable:");
      pub fn URLresourceDataDidBecomeAvailable(self: *Self, __sender:  * NSURL, __newBytes:  * NSData, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSData, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL_resourceDataDidBecomeAvailable_.get(), __sender, __newBytes, );
 }}
var sel_URLResourceDidFinishLoading_ = CachedSelector.init("URLResourceDidFinishLoading:");
      pub fn URLResourceDidFinishLoading(self: *Self, __sender:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLResourceDidFinishLoading_.get(), __sender, );
 }}
var sel_URLResourceDidCancelLoading_ = CachedSelector.init("URLResourceDidCancelLoading:");
      pub fn URLResourceDidCancelLoading(self: *Self, __sender:  * NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLResourceDidCancelLoading_.get(), __sender, );
 }}
var sel_URL_resourceDidFailLoadingWithReason_ = CachedSelector.init("URL:resourceDidFailLoadingWithReason:");
      pub fn URLresourceDidFailLoadingWithReason(self: *Self, __sender:  * NSURL, __reason:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL_resourceDidFailLoadingWithReason_.get(), __sender, __reason, );
 }}
var sel_fileManager_shouldProceedAfterError_ = CachedSelector.init("fileManager:shouldProceedAfterError:");
      pub fn fileManagershouldProceedAfterError(self: *Self, __fm:  * NSFileManager, __errorInfo:  * NSDictionary, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSDictionary, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_shouldProceedAfterError_.get(), __fm, __errorInfo, );
 }}
var sel_fileManager_willProcessPath_ = CachedSelector.init("fileManager:willProcessPath:");
      pub fn fileManagerwillProcessPath(self: *Self, __fm:  * NSFileManager, __path:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSFileManager,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileManager_willProcessPath_.get(), __fm, __path, );
 }}
var sel_valueForKey_ = CachedSelector.init("valueForKey:");
      pub fn valueForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForKey_.get(), __key, );
 }}
var sel_setValue_forKey_ = CachedSelector.init("setValue:forKey:");
      pub fn setValueforKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValue_forKey_.get(), __value, __key, );
 }}
var sel_validateValue_forKey_error_ = CachedSelector.init("validateValue:forKey:error:");
      pub fn validateValueforKeyerror(self: *Self, __ioValue:  * id, __inKey:  * NSString, __outError:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * id,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_validateValue_forKey_error_.get(), __ioValue, __inKey, __outError, );
 }}
var sel_mutableArrayValueForKey_ = CachedSelector.init("mutableArrayValueForKey:");
      pub fn mutableArrayValueForKey(self: *Self, __key:  * NSString, )  * NSMutableArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSMutableArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableArrayValueForKey_.get(), __key, );
 }}
var sel_mutableOrderedSetValueForKey_ = CachedSelector.init("mutableOrderedSetValueForKey:");
      pub fn mutableOrderedSetValueForKey(self: *Self, __key:  * NSString, )  * NSMutableOrderedSet {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSMutableOrderedSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableOrderedSetValueForKey_.get(), __key, );
 }}
var sel_mutableSetValueForKey_ = CachedSelector.init("mutableSetValueForKey:");
      pub fn mutableSetValueForKey(self: *Self, __key:  * NSString, )  * NSMutableSet {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSMutableSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableSetValueForKey_.get(), __key, );
 }}
var sel_valueForKeyPath_ = CachedSelector.init("valueForKeyPath:");
      pub fn valueForKeyPath(self: *Self, __keyPath:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForKeyPath_.get(), __keyPath, );
 }}
var sel_setValue_forKeyPath_ = CachedSelector.init("setValue:forKeyPath:");
      pub fn setValueforKeyPath(self: *Self, __value: id, __keyPath:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValue_forKeyPath_.get(), __value, __keyPath, );
 }}
var sel_validateValue_forKeyPath_error_ = CachedSelector.init("validateValue:forKeyPath:error:");
      pub fn validateValueforKeyPatherror(self: *Self, __ioValue:  * id, __inKeyPath:  * NSString, __outError:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * id,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_validateValue_forKeyPath_error_.get(), __ioValue, __inKeyPath, __outError, );
 }}
var sel_mutableArrayValueForKeyPath_ = CachedSelector.init("mutableArrayValueForKeyPath:");
      pub fn mutableArrayValueForKeyPath(self: *Self, __keyPath:  * NSString, )  * NSMutableArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSMutableArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableArrayValueForKeyPath_.get(), __keyPath, );
 }}
var sel_mutableOrderedSetValueForKeyPath_ = CachedSelector.init("mutableOrderedSetValueForKeyPath:");
      pub fn mutableOrderedSetValueForKeyPath(self: *Self, __keyPath:  * NSString, )  * NSMutableOrderedSet {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSMutableOrderedSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableOrderedSetValueForKeyPath_.get(), __keyPath, );
 }}
var sel_mutableSetValueForKeyPath_ = CachedSelector.init("mutableSetValueForKeyPath:");
      pub fn mutableSetValueForKeyPath(self: *Self, __keyPath:  * NSString, )  * NSMutableSet {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSMutableSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mutableSetValueForKeyPath_.get(), __keyPath, );
 }}
var sel_valueForUndefinedKey_ = CachedSelector.init("valueForUndefinedKey:");
      pub fn valueForUndefinedKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForUndefinedKey_.get(), __key, );
 }}
var sel_setValue_forUndefinedKey_ = CachedSelector.init("setValue:forUndefinedKey:");
      pub fn setValueforUndefinedKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValue_forUndefinedKey_.get(), __value, __key, );
 }}
var sel_setNilValueForKey_ = CachedSelector.init("setNilValueForKey:");
      pub fn setNilValueForKey(self: *Self, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNilValueForKey_.get(), __key, );
 }}
var sel_dictionaryWithValuesForKeys_ = CachedSelector.init("dictionaryWithValuesForKeys:");
      pub fn dictionaryWithValuesForKeys(self: *Self, __keys:  * NSArray, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dictionaryWithValuesForKeys_.get(), __keys, );
 }}
var sel_setValuesForKeysWithDictionary_ = CachedSelector.init("setValuesForKeysWithDictionary:");
      pub fn setValuesForKeysWithDictionary(self: *Self, __keyedValues:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValuesForKeysWithDictionary_.get(), __keyedValues, );
 }}
var sel_accessInstanceVariablesDirectly = CachedSelector.init("accessInstanceVariablesDirectly");
      pub fn accessInstanceVariablesDirectly() c_int {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_accessInstanceVariablesDirectly.get(), );
 }}
var sel_useStoredAccessor = CachedSelector.init("useStoredAccessor");
      pub fn useStoredAccessor() c_int {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_useStoredAccessor.get(), );
 }}
var sel_storedValueForKey_ = CachedSelector.init("storedValueForKey:");
      pub fn storedValueForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storedValueForKey_.get(), __key, );
 }}
var sel_takeStoredValue_forKey_ = CachedSelector.init("takeStoredValue:forKey:");
      pub fn takeStoredValueforKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_takeStoredValue_forKey_.get(), __value, __key, );
 }}
var sel_takeValue_forKey_ = CachedSelector.init("takeValue:forKey:");
      pub fn takeValueforKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_takeValue_forKey_.get(), __value, __key, );
 }}
var sel_takeValue_forKeyPath_ = CachedSelector.init("takeValue:forKeyPath:");
      pub fn takeValueforKeyPath(self: *Self, __value: id, __keyPath:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_takeValue_forKeyPath_.get(), __value, __keyPath, );
 }}
var sel_handleQueryWithUnboundKey_ = CachedSelector.init("handleQueryWithUnboundKey:");
      pub fn handleQueryWithUnboundKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_handleQueryWithUnboundKey_.get(), __key, );
 }}
var sel_handleTakeValue_forUnboundKey_ = CachedSelector.init("handleTakeValue:forUnboundKey:");
      pub fn handleTakeValueforUnboundKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_handleTakeValue_forUnboundKey_.get(), __value, __key, );
 }}
var sel_unableToSetNilForKey_ = CachedSelector.init("unableToSetNilForKey:");
      pub fn unableToSetNilForKey(self: *Self, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unableToSetNilForKey_.get(), __key, );
 }}
var sel_valuesForKeys_ = CachedSelector.init("valuesForKeys:");
      pub fn valuesForKeys(self: *Self, __keys:  * NSArray, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valuesForKeys_.get(), __keys, );
 }}
var sel_takeValuesFromDictionary_ = CachedSelector.init("takeValuesFromDictionary:");
      pub fn takeValuesFromDictionary(self: *Self, __properties:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_takeValuesFromDictionary_.get(), __properties, );
 }}
var sel_observeValueForKeyPath_ofObject_change_context_ = CachedSelector.init("observeValueForKeyPath:ofObject:change:context:");
      pub fn observeValueForKeyPathofObjectchangecontext(self: *Self, __keyPath:  ?* NSString, __object: id, __change:  ?* NSDictionary, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, id,  ?* NSDictionary,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_observeValueForKeyPath_ofObject_change_context_.get(), __keyPath, __object, __change, __context, );
 }}
var sel_addObserver_forKeyPath_options_context_ = CachedSelector.init("addObserver:forKeyPath:options:context:");
      pub fn addObserverforKeyPathoptionscontext(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, __options: NSKeyValueObservingOptions, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString, NSKeyValueObservingOptions,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObserver_forKeyPath_options_context_.get(), __observer, __keyPath, __options, __context, );
 }}
var sel_removeObserver_forKeyPath_context_ = CachedSelector.init("removeObserver:forKeyPath:context:");
      pub fn removeObserverforKeyPathcontext(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_forKeyPath_context_.get(), __observer, __keyPath, __context, );
 }}
var sel_removeObserver_forKeyPath_ = CachedSelector.init("removeObserver:forKeyPath:");
      pub fn removeObserverforKeyPath(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_forKeyPath_.get(), __observer, __keyPath, );
 }}
var sel_willChangeValueForKey_ = CachedSelector.init("willChangeValueForKey:");
      pub fn willChangeValueForKey(self: *Self, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_willChangeValueForKey_.get(), __key, );
 }}
var sel_didChangeValueForKey_ = CachedSelector.init("didChangeValueForKey:");
      pub fn didChangeValueForKey(self: *Self, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_didChangeValueForKey_.get(), __key, );
 }}
var sel_willChange_valuesAtIndexes_forKey_ = CachedSelector.init("willChange:valuesAtIndexes:forKey:");
      pub fn willChangevaluesAtIndexesforKey(self: *Self, __changeKind: NSKeyValueChange, __indexes:  * NSIndexSet, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, NSKeyValueChange,  * NSIndexSet,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_willChange_valuesAtIndexes_forKey_.get(), __changeKind, __indexes, __key, );
 }}
var sel_didChange_valuesAtIndexes_forKey_ = CachedSelector.init("didChange:valuesAtIndexes:forKey:");
      pub fn didChangevaluesAtIndexesforKey(self: *Self, __changeKind: NSKeyValueChange, __indexes:  * NSIndexSet, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, NSKeyValueChange,  * NSIndexSet,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_didChange_valuesAtIndexes_forKey_.get(), __changeKind, __indexes, __key, );
 }}
var sel_willChangeValueForKey_withSetMutation_usingObjects_ = CachedSelector.init("willChangeValueForKey:withSetMutation:usingObjects:");
      pub fn willChangeValueForKeywithSetMutationusingObjects(self: *Self, __key:  * NSString, __mutationKind: NSKeyValueSetMutationKind, __objects:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, NSKeyValueSetMutationKind,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_willChangeValueForKey_withSetMutation_usingObjects_.get(), __key, __mutationKind, __objects, );
 }}
var sel_didChangeValueForKey_withSetMutation_usingObjects_ = CachedSelector.init("didChangeValueForKey:withSetMutation:usingObjects:");
      pub fn didChangeValueForKeywithSetMutationusingObjects(self: *Self, __key:  * NSString, __mutationKind: NSKeyValueSetMutationKind, __objects:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, NSKeyValueSetMutationKind,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_didChangeValueForKey_withSetMutation_usingObjects_.get(), __key, __mutationKind, __objects, );
 }}
var sel_keyPathsForValuesAffectingValueForKey_ = CachedSelector.init("keyPathsForValuesAffectingValueForKey:");
      pub fn keyPathsForValuesAffectingValueForKey(__key:  * NSString, )  * NSSet {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(class.get(), sel_keyPathsForValuesAffectingValueForKey_.get(), __key, );
 }}
var sel_automaticallyNotifiesObserversForKey_ = CachedSelector.init("automaticallyNotifiesObserversForKey:");
      pub fn automaticallyNotifiesObserversForKey(__key:  * NSString, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_automaticallyNotifiesObserversForKey_.get(), __key, );
 }}
var sel_observationInfo = CachedSelector.init("observationInfo");
      pub fn observationInfo(self: *Self, )  [*c] void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_observationInfo.get(), );
 }}
var sel_setObservationInfo_ = CachedSelector.init("setObservationInfo:");
      pub fn setObservationInfo(self: *Self, __observationInfo:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObservationInfo_.get(), __observationInfo, );
 }}
var sel_setKeys_triggerChangeNotificationsForDependentKey_ = CachedSelector.init("setKeys:triggerChangeNotificationsForDependentKey:");
      pub fn setKeystriggerChangeNotificationsForDependentKey(__keys:  * NSArray, __dependentKey:  * NSString, ) void {{
           return @as(*const fn(Class, SEL,  * NSArray,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setKeys_triggerChangeNotificationsForDependentKey_.get(), __keys, __dependentKey, );
 }}
var sel_replacementObjectForKeyedArchiver_ = CachedSelector.init("replacementObjectForKeyedArchiver:");
      pub fn replacementObjectForKeyedArchiver(self: *Self, __archiver:  * NSKeyedArchiver, ) id {{
           return @as(*const fn(*Self, SEL,  * NSKeyedArchiver, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replacementObjectForKeyedArchiver_.get(), __archiver, );
 }}
var sel_classFallbacksForKeyedArchiver = CachedSelector.init("classFallbacksForKeyedArchiver");
      pub fn classFallbacksForKeyedArchiver()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_classFallbacksForKeyedArchiver.get(), );
 }}
var sel_classForKeyedArchiver = CachedSelector.init("classForKeyedArchiver");
      pub fn classForKeyedArchiver(self: *Self, ) Class {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classForKeyedArchiver.get(), );
 }}
var sel_classForKeyedUnarchiver = CachedSelector.init("classForKeyedUnarchiver");
      pub fn classForKeyedUnarchiver() Class {{
           return @as(*const fn(Class, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(class.get(), sel_classForKeyedUnarchiver.get(), );
 }}
var sel_performSelectorOnMainThread_withObject_waitUntilDone_modes_ = CachedSelector.init("performSelectorOnMainThread:withObject:waitUntilDone:modes:");
      pub fn performSelectorOnMainThreadwithObjectwaitUntilDonemodes(self: *Self, __aSelector: SEL, __arg: id, __wait: c_int, __array:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id, c_int,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelectorOnMainThread_withObject_waitUntilDone_modes_.get(), __aSelector, __arg, __wait, __array, );
 }}
var sel_performSelectorOnMainThread_withObject_waitUntilDone_ = CachedSelector.init("performSelectorOnMainThread:withObject:waitUntilDone:");
      pub fn performSelectorOnMainThreadwithObjectwaitUntilDone(self: *Self, __aSelector: SEL, __arg: id, __wait: c_int, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelectorOnMainThread_withObject_waitUntilDone_.get(), __aSelector, __arg, __wait, );
 }}
var sel_performSelector_onThread_withObject_waitUntilDone_modes_ = CachedSelector.init("performSelector:onThread:withObject:waitUntilDone:modes:");
      pub fn performSelectoronThreadwithObjectwaitUntilDonemodes(self: *Self, __aSelector: SEL, __thr:  * NSThread, __arg: id, __wait: c_int, __array:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL, SEL,  * NSThread, id, c_int,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelector_onThread_withObject_waitUntilDone_modes_.get(), __aSelector, __thr, __arg, __wait, __array, );
 }}
var sel_performSelector_onThread_withObject_waitUntilDone_ = CachedSelector.init("performSelector:onThread:withObject:waitUntilDone:");
      pub fn performSelectoronThreadwithObjectwaitUntilDone(self: *Self, __aSelector: SEL, __thr:  * NSThread, __arg: id, __wait: c_int, ) void {{
           return @as(*const fn(*Self, SEL, SEL,  * NSThread, id, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelector_onThread_withObject_waitUntilDone_.get(), __aSelector, __thr, __arg, __wait, );
 }}
var sel_performSelectorInBackground_withObject_ = CachedSelector.init("performSelectorInBackground:withObject:");
      pub fn performSelectorInBackgroundwithObject(self: *Self, __aSelector: SEL, __arg: id, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performSelectorInBackground_withObject_.get(), __aSelector, __arg, );
 }}
var sel_replacementObjectForArchiver_ = CachedSelector.init("replacementObjectForArchiver:");
      pub fn replacementObjectForArchiver(self: *Self, __archiver:  * NSArchiver, ) id {{
           return @as(*const fn(*Self, SEL,  * NSArchiver, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replacementObjectForArchiver_.get(), __archiver, );
 }}
var sel_classForArchiver = CachedSelector.init("classForArchiver");
      pub fn classForArchiver(self: *Self, ) Class {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classForArchiver.get(), );
 }}
var sel_replacementObjectForPortCoder_ = CachedSelector.init("replacementObjectForPortCoder:");
      pub fn replacementObjectForPortCoder(self: *Self, __coder:  * NSPortCoder, ) id {{
           return @as(*const fn(*Self, SEL,  * NSPortCoder, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replacementObjectForPortCoder_.get(), __coder, );
 }}
var sel_classForPortCoder = CachedSelector.init("classForPortCoder");
      pub fn classForPortCoder(self: *Self, ) Class {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classForPortCoder.get(), );
 }}
var sel_inverseForRelationshipKey_ = CachedSelector.init("inverseForRelationshipKey:");
      pub fn inverseForRelationshipKey(self: *Self, __relationshipKey:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_inverseForRelationshipKey_.get(), __relationshipKey, );
 }}
var sel_classDescription = CachedSelector.init("classDescription");
      pub fn classDescription(self: *Self, )  * NSClassDescription {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSClassDescription, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classDescription.get(), );
 }}
var sel_attributeKeys = CachedSelector.init("attributeKeys");
      pub fn attributeKeys(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeKeys.get(), );
 }}
var sel_toOneRelationshipKeys = CachedSelector.init("toOneRelationshipKeys");
      pub fn toOneRelationshipKeys(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_toOneRelationshipKeys.get(), );
 }}
var sel_toManyRelationshipKeys = CachedSelector.init("toManyRelationshipKeys");
      pub fn toManyRelationshipKeys(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_toManyRelationshipKeys.get(), );
 }}
var sel_scriptingValueForSpecifier_ = CachedSelector.init("scriptingValueForSpecifier:");
      pub fn scriptingValueForSpecifier(self: *Self, __objectSpecifier:  * NSScriptObjectSpecifier, ) id {{
           return @as(*const fn(*Self, SEL,  * NSScriptObjectSpecifier, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingValueForSpecifier_.get(), __objectSpecifier, );
 }}
var sel_copyScriptingValue_forKey_withProperties_ = CachedSelector.init("copyScriptingValue:forKey:withProperties:");
      pub fn copyScriptingValueforKeywithProperties(self: *Self, __value: id, __key:  * NSString, __properties:  * NSDictionary, ) id {{
           return @as(*const fn(*Self, SEL, id,  * NSString,  * NSDictionary, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_copyScriptingValue_forKey_withProperties_.get(), __value, __key, __properties, );
 }}
var sel_newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_ = CachedSelector.init("newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:");
      pub fn newScriptingObjectOfClassforValueForKeywithContentsValueproperties(self: *Self, __objectClass: Class, __key:  * NSString, __contentsValue: id, __properties:  * NSDictionary, ) id {{
           return @as(*const fn(*Self, SEL, Class,  * NSString, id,  * NSDictionary, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_.get(), __objectClass, __key, __contentsValue, __properties, );
 }}
var sel_scriptingProperties = CachedSelector.init("scriptingProperties");
      pub fn scriptingProperties(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingProperties.get(), );
 }}
var sel_setScriptingProperties_ = CachedSelector.init("setScriptingProperties:");
      pub fn setScriptingProperties(self: *Self, __scriptingProperties:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScriptingProperties_.get(), __scriptingProperties, );
 }}
var sel_classCode = CachedSelector.init("classCode");
      pub fn classCode(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classCode.get(), );
 }}
var sel_className = CachedSelector.init("className");
      pub fn className(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_className.get(), );
 }}
var sel_valueAtIndex_inPropertyWithKey_ = CachedSelector.init("valueAtIndex:inPropertyWithKey:");
      pub fn valueAtIndexinPropertyWithKey(self: *Self, __index: c_ulong, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL, c_ulong,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueAtIndex_inPropertyWithKey_.get(), __index, __key, );
 }}
var sel_valueWithName_inPropertyWithKey_ = CachedSelector.init("valueWithName:inPropertyWithKey:");
      pub fn valueWithNameinPropertyWithKey(self: *Self, __name:  * NSString, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueWithName_inPropertyWithKey_.get(), __name, __key, );
 }}
var sel_valueWithUniqueID_inPropertyWithKey_ = CachedSelector.init("valueWithUniqueID:inPropertyWithKey:");
      pub fn valueWithUniqueIDinPropertyWithKey(self: *Self, __uniqueID: id, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueWithUniqueID_inPropertyWithKey_.get(), __uniqueID, __key, );
 }}
var sel_insertValue_atIndex_inPropertyWithKey_ = CachedSelector.init("insertValue:atIndex:inPropertyWithKey:");
      pub fn insertValueatIndexinPropertyWithKey(self: *Self, __value: id, __index: c_ulong, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id, c_ulong,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertValue_atIndex_inPropertyWithKey_.get(), __value, __index, __key, );
 }}
var sel_removeValueAtIndex_fromPropertyWithKey_ = CachedSelector.init("removeValueAtIndex:fromPropertyWithKey:");
      pub fn removeValueAtIndexfromPropertyWithKey(self: *Self, __index: c_ulong, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeValueAtIndex_fromPropertyWithKey_.get(), __index, __key, );
 }}
var sel_replaceValueAtIndex_inPropertyWithKey_withValue_ = CachedSelector.init("replaceValueAtIndex:inPropertyWithKey:withValue:");
      pub fn replaceValueAtIndexinPropertyWithKeywithValue(self: *Self, __index: c_ulong, __key:  * NSString, __value: id, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong,  * NSString, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceValueAtIndex_inPropertyWithKey_withValue_.get(), __index, __key, __value, );
 }}
var sel_insertValue_inPropertyWithKey_ = CachedSelector.init("insertValue:inPropertyWithKey:");
      pub fn insertValueinPropertyWithKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertValue_inPropertyWithKey_.get(), __value, __key, );
 }}
var sel_coerceValue_forKey_ = CachedSelector.init("coerceValue:forKey:");
      pub fn coerceValueforKey(self: *Self, __value: id, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_coerceValue_forKey_.get(), __value, __key, );
 }}
var sel_indicesOfObjectsByEvaluatingObjectSpecifier_ = CachedSelector.init("indicesOfObjectsByEvaluatingObjectSpecifier:");
      pub fn indicesOfObjectsByEvaluatingObjectSpecifier(self: *Self, __specifier:  * NSScriptObjectSpecifier, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSScriptObjectSpecifier, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indicesOfObjectsByEvaluatingObjectSpecifier_.get(), __specifier, );
 }}
var sel_objectSpecifier = CachedSelector.init("objectSpecifier");
      pub fn objectSpecifier(self: *Self, )  ?* NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectSpecifier.get(), );
 }}
var sel_isEqualTo_ = CachedSelector.init("isEqualTo:");
      pub fn isEqualTo(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualTo_.get(), __object, );
 }}
var sel_isLessThanOrEqualTo_ = CachedSelector.init("isLessThanOrEqualTo:");
      pub fn isLessThanOrEqualTo(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLessThanOrEqualTo_.get(), __object, );
 }}
var sel_isLessThan_ = CachedSelector.init("isLessThan:");
      pub fn isLessThan(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLessThan_.get(), __object, );
 }}
var sel_isGreaterThanOrEqualTo_ = CachedSelector.init("isGreaterThanOrEqualTo:");
      pub fn isGreaterThanOrEqualTo(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isGreaterThanOrEqualTo_.get(), __object, );
 }}
var sel_isGreaterThan_ = CachedSelector.init("isGreaterThan:");
      pub fn isGreaterThan(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isGreaterThan_.get(), __object, );
 }}
var sel_isNotEqualTo_ = CachedSelector.init("isNotEqualTo:");
      pub fn isNotEqualTo(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isNotEqualTo_.get(), __object, );
 }}
var sel_doesContain_ = CachedSelector.init("doesContain:");
      pub fn doesContain(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doesContain_.get(), __object, );
 }}
var sel_isLike_ = CachedSelector.init("isLike:");
      pub fn isLike(self: *Self, __object:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLike_.get(), __object, );
 }}
var sel_isCaseInsensitiveLike_ = CachedSelector.init("isCaseInsensitiveLike:");
      pub fn isCaseInsensitiveLike(self: *Self, __object:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isCaseInsensitiveLike_.get(), __object, );
 }}
var sel_scriptingIsEqualTo_ = CachedSelector.init("scriptingIsEqualTo:");
      pub fn scriptingIsEqualTo(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingIsEqualTo_.get(), __object, );
 }}
var sel_scriptingIsLessThanOrEqualTo_ = CachedSelector.init("scriptingIsLessThanOrEqualTo:");
      pub fn scriptingIsLessThanOrEqualTo(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingIsLessThanOrEqualTo_.get(), __object, );
 }}
var sel_scriptingIsLessThan_ = CachedSelector.init("scriptingIsLessThan:");
      pub fn scriptingIsLessThan(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingIsLessThan_.get(), __object, );
 }}
var sel_scriptingIsGreaterThanOrEqualTo_ = CachedSelector.init("scriptingIsGreaterThanOrEqualTo:");
      pub fn scriptingIsGreaterThanOrEqualTo(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingIsGreaterThanOrEqualTo_.get(), __object, );
 }}
var sel_scriptingIsGreaterThan_ = CachedSelector.init("scriptingIsGreaterThan:");
      pub fn scriptingIsGreaterThan(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingIsGreaterThan_.get(), __object, );
 }}
var sel_scriptingBeginsWith_ = CachedSelector.init("scriptingBeginsWith:");
      pub fn scriptingBeginsWith(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingBeginsWith_.get(), __object, );
 }}
var sel_scriptingEndsWith_ = CachedSelector.init("scriptingEndsWith:");
      pub fn scriptingEndsWith(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingEndsWith_.get(), __object, );
 }}
var sel_scriptingContains_ = CachedSelector.init("scriptingContains:");
      pub fn scriptingContains(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptingContains_.get(), __object, );
 }}
  };
}

pub fn NSProtocolCheckerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_protocol = CachedSelector.init("protocol");
      pub fn protocol(self: *Self, )  * Protocol {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * Protocol, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_protocol.get(), );
 }}
var sel_target = CachedSelector.init("target");
      pub fn target(self: *Self, )  ?* NSObject {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSObject, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_target.get(), );
 }}
var sel_protocolCheckerWithTarget_protocol_ = CachedSelector.init("protocolCheckerWithTarget:protocol:");
      pub fn protocolCheckerWithTargetprotocol(__anObject:  * NSObject, __aProtocol:  * Protocol, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSObject,  * Protocol, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_protocolCheckerWithTarget_protocol_.get(), __anObject, __aProtocol, );
 }}
var sel_initWithTarget_protocol_ = CachedSelector.init("initWithTarget:protocol:");
      pub fn initWithTargetprotocol(self: *Self, __anObject:  * NSObject, __aProtocol:  * Protocol, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * Protocol, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTarget_protocol_.get(), __anObject, __aProtocol, );
 }}
  };
}

pub const NSProtocolChecker = opaque {
  const Self = @This();
  pub usingnamespace NSProtocolCheckerInterfaceMixin(Self, "NSProtocolChecker");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSProtocolChecker");
  pub usingnamespace NSProxyInterfaceMixin(Self, "NSProtocolChecker");
};

pub fn NSRandomSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSRandomSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSRandomSpecifierInterfaceMixin(Self, "NSRandomSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSRandomSpecifier");
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSRandomSpecifier");
};

pub fn NSComparisonPredicateInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_predicateWithLeftExpression_rightExpression_modifier_type_options_ = CachedSelector.init("predicateWithLeftExpression:rightExpression:modifier:type:options:");
      pub fn predicateWithLeftExpressionrightExpressionmodifiertypeoptions(__lhs:  * NSExpression, __rhs:  * NSExpression, __modifier: NSComparisonPredicateModifier, __a_type: NSPredicateOperatorType, __options: NSComparisonPredicateOptions, )  * NSComparisonPredicate {{
           return @as(*const fn(Class, SEL,  * NSExpression,  * NSExpression, NSComparisonPredicateModifier, NSPredicateOperatorType, NSComparisonPredicateOptions, ) callconv(.C)  * NSComparisonPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_predicateWithLeftExpression_rightExpression_modifier_type_options_.get(), __lhs, __rhs, __modifier, __a_type, __options, );
 }}
var sel_predicateWithLeftExpression_rightExpression_customSelector_ = CachedSelector.init("predicateWithLeftExpression:rightExpression:customSelector:");
      pub fn predicateWithLeftExpressionrightExpressioncustomSelector(__lhs:  * NSExpression, __rhs:  * NSExpression, __selector: SEL, )  * NSComparisonPredicate {{
           return @as(*const fn(Class, SEL,  * NSExpression,  * NSExpression, SEL, ) callconv(.C)  * NSComparisonPredicate, @ptrCast(&objc_msgSend))(class.get(), sel_predicateWithLeftExpression_rightExpression_customSelector_.get(), __lhs, __rhs, __selector, );
 }}
var sel_initWithLeftExpression_rightExpression_modifier_type_options_ = CachedSelector.init("initWithLeftExpression:rightExpression:modifier:type:options:");
      pub fn initWithLeftExpressionrightExpressionmodifiertypeoptions(self: *Self, __lhs:  * NSExpression, __rhs:  * NSExpression, __modifier: NSComparisonPredicateModifier, __a_type: NSPredicateOperatorType, __options: NSComparisonPredicateOptions, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSExpression,  * NSExpression, NSComparisonPredicateModifier, NSPredicateOperatorType, NSComparisonPredicateOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithLeftExpression_rightExpression_modifier_type_options_.get(), __lhs, __rhs, __modifier, __a_type, __options, );
 }}
var sel_initWithLeftExpression_rightExpression_customSelector_ = CachedSelector.init("initWithLeftExpression:rightExpression:customSelector:");
      pub fn initWithLeftExpressionrightExpressioncustomSelector(self: *Self, __lhs:  * NSExpression, __rhs:  * NSExpression, __selector: SEL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSExpression,  * NSExpression, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithLeftExpression_rightExpression_customSelector_.get(), __lhs, __rhs, __selector, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_predicateOperatorType = CachedSelector.init("predicateOperatorType");
      pub fn predicateOperatorType(self: *Self, ) NSPredicateOperatorType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSPredicateOperatorType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_predicateOperatorType.get(), );
 }}
var sel_comparisonPredicateModifier = CachedSelector.init("comparisonPredicateModifier");
      pub fn comparisonPredicateModifier(self: *Self, ) NSComparisonPredicateModifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSComparisonPredicateModifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_comparisonPredicateModifier.get(), );
 }}
var sel_leftExpression = CachedSelector.init("leftExpression");
      pub fn leftExpression(self: *Self, )  * NSExpression {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_leftExpression.get(), );
 }}
var sel_rightExpression = CachedSelector.init("rightExpression");
      pub fn rightExpression(self: *Self, )  * NSExpression {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSExpression, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rightExpression.get(), );
 }}
var sel_customSelector = CachedSelector.init("customSelector");
      pub fn customSelector(self: *Self, ) SEL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) SEL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_customSelector.get(), );
 }}
var sel_options = CachedSelector.init("options");
      pub fn options(self: *Self, ) NSComparisonPredicateOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSComparisonPredicateOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_options.get(), );
 }}
  };
}

pub const NSComparisonPredicate = opaque {
  const Self = @This();
  pub usingnamespace NSComparisonPredicateInterfaceMixin(Self, "NSComparisonPredicate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSComparisonPredicate");
  pub usingnamespace NSPredicateInterfaceMixin(Self, "NSComparisonPredicate");
};

pub fn MTLSamplerDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_minFilter = CachedSelector.init("minFilter");
      pub fn minFilter(self: *Self, ) MTLSamplerMinMagFilter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSamplerMinMagFilter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minFilter.get(), );
 }}
var sel_setMinFilter_ = CachedSelector.init("setMinFilter:");
      pub fn setMinFilter(self: *Self, __minFilter: MTLSamplerMinMagFilter, ) void {{
           return @as(*const fn(*Self, SEL, MTLSamplerMinMagFilter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMinFilter_.get(), __minFilter, );
 }}
var sel_magFilter = CachedSelector.init("magFilter");
      pub fn magFilter(self: *Self, ) MTLSamplerMinMagFilter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSamplerMinMagFilter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_magFilter.get(), );
 }}
var sel_setMagFilter_ = CachedSelector.init("setMagFilter:");
      pub fn setMagFilter(self: *Self, __magFilter: MTLSamplerMinMagFilter, ) void {{
           return @as(*const fn(*Self, SEL, MTLSamplerMinMagFilter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMagFilter_.get(), __magFilter, );
 }}
var sel_mipFilter = CachedSelector.init("mipFilter");
      pub fn mipFilter(self: *Self, ) MTLSamplerMipFilter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSamplerMipFilter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_mipFilter.get(), );
 }}
var sel_setMipFilter_ = CachedSelector.init("setMipFilter:");
      pub fn setMipFilter(self: *Self, __mipFilter: MTLSamplerMipFilter, ) void {{
           return @as(*const fn(*Self, SEL, MTLSamplerMipFilter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMipFilter_.get(), __mipFilter, );
 }}
var sel_maxAnisotropy = CachedSelector.init("maxAnisotropy");
      pub fn maxAnisotropy(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxAnisotropy.get(), );
 }}
var sel_setMaxAnisotropy_ = CachedSelector.init("setMaxAnisotropy:");
      pub fn setMaxAnisotropy(self: *Self, __maxAnisotropy: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxAnisotropy_.get(), __maxAnisotropy, );
 }}
var sel_sAddressMode = CachedSelector.init("sAddressMode");
      pub fn sAddressMode(self: *Self, ) MTLSamplerAddressMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSamplerAddressMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sAddressMode.get(), );
 }}
var sel_setSAddressMode_ = CachedSelector.init("setSAddressMode:");
      pub fn setSAddressMode(self: *Self, __sAddressMode: MTLSamplerAddressMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLSamplerAddressMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSAddressMode_.get(), __sAddressMode, );
 }}
var sel_tAddressMode = CachedSelector.init("tAddressMode");
      pub fn tAddressMode(self: *Self, ) MTLSamplerAddressMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSamplerAddressMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tAddressMode.get(), );
 }}
var sel_setTAddressMode_ = CachedSelector.init("setTAddressMode:");
      pub fn setTAddressMode(self: *Self, __tAddressMode: MTLSamplerAddressMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLSamplerAddressMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTAddressMode_.get(), __tAddressMode, );
 }}
var sel_rAddressMode = CachedSelector.init("rAddressMode");
      pub fn rAddressMode(self: *Self, ) MTLSamplerAddressMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSamplerAddressMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rAddressMode.get(), );
 }}
var sel_setRAddressMode_ = CachedSelector.init("setRAddressMode:");
      pub fn setRAddressMode(self: *Self, __rAddressMode: MTLSamplerAddressMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLSamplerAddressMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRAddressMode_.get(), __rAddressMode, );
 }}
var sel_borderColor = CachedSelector.init("borderColor");
      pub fn borderColor(self: *Self, ) MTLSamplerBorderColor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLSamplerBorderColor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_borderColor.get(), );
 }}
var sel_setBorderColor_ = CachedSelector.init("setBorderColor:");
      pub fn setBorderColor(self: *Self, __borderColor: MTLSamplerBorderColor, ) void {{
           return @as(*const fn(*Self, SEL, MTLSamplerBorderColor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBorderColor_.get(), __borderColor, );
 }}
var sel_normalizedCoordinates = CachedSelector.init("normalizedCoordinates");
      pub fn normalizedCoordinates(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_normalizedCoordinates.get(), );
 }}
var sel_setNormalizedCoordinates_ = CachedSelector.init("setNormalizedCoordinates:");
      pub fn setNormalizedCoordinates(self: *Self, __normalizedCoordinates: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNormalizedCoordinates_.get(), __normalizedCoordinates, );
 }}
var sel_lodMinClamp = CachedSelector.init("lodMinClamp");
      pub fn lodMinClamp(self: *Self, ) f32 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lodMinClamp.get(), );
 }}
var sel_setLodMinClamp_ = CachedSelector.init("setLodMinClamp:");
      pub fn setLodMinClamp(self: *Self, __lodMinClamp: f32, ) void {{
           return @as(*const fn(*Self, SEL, f32, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLodMinClamp_.get(), __lodMinClamp, );
 }}
var sel_lodMaxClamp = CachedSelector.init("lodMaxClamp");
      pub fn lodMaxClamp(self: *Self, ) f32 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lodMaxClamp.get(), );
 }}
var sel_setLodMaxClamp_ = CachedSelector.init("setLodMaxClamp:");
      pub fn setLodMaxClamp(self: *Self, __lodMaxClamp: f32, ) void {{
           return @as(*const fn(*Self, SEL, f32, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLodMaxClamp_.get(), __lodMaxClamp, );
 }}
var sel_lodAverage = CachedSelector.init("lodAverage");
      pub fn lodAverage(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lodAverage.get(), );
 }}
var sel_setLodAverage_ = CachedSelector.init("setLodAverage:");
      pub fn setLodAverage(self: *Self, __lodAverage: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLodAverage_.get(), __lodAverage, );
 }}
var sel_compareFunction = CachedSelector.init("compareFunction");
      pub fn compareFunction(self: *Self, ) MTLCompareFunction {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCompareFunction, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compareFunction.get(), );
 }}
var sel_setCompareFunction_ = CachedSelector.init("setCompareFunction:");
      pub fn setCompareFunction(self: *Self, __compareFunction: MTLCompareFunction, ) void {{
           return @as(*const fn(*Self, SEL, MTLCompareFunction, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCompareFunction_.get(), __compareFunction, );
 }}
var sel_supportArgumentBuffers = CachedSelector.init("supportArgumentBuffers");
      pub fn supportArgumentBuffers(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportArgumentBuffers.get(), );
 }}
var sel_setSupportArgumentBuffers_ = CachedSelector.init("setSupportArgumentBuffers:");
      pub fn setSupportArgumentBuffers(self: *Self, __supportArgumentBuffers: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSupportArgumentBuffers_.get(), __supportArgumentBuffers, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
  };
}

pub const MTLSamplerDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLSamplerDescriptorInterfaceMixin(Self, "MTLSamplerDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLSamplerDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLSamplerDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLSamplerDescriptor");
};

pub fn MTLCaptureDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_captureObject = CachedSelector.init("captureObject");
      pub fn captureObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_captureObject.get(), );
 }}
var sel_setCaptureObject_ = CachedSelector.init("setCaptureObject:");
      pub fn setCaptureObject(self: *Self, __captureObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCaptureObject_.get(), __captureObject, );
 }}
var sel_destination = CachedSelector.init("destination");
      pub fn destination(self: *Self, ) MTLCaptureDestination {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCaptureDestination, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_destination.get(), );
 }}
var sel_setDestination_ = CachedSelector.init("setDestination:");
      pub fn setDestination(self: *Self, __destination: MTLCaptureDestination, ) void {{
           return @as(*const fn(*Self, SEL, MTLCaptureDestination, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDestination_.get(), __destination, );
 }}
var sel_outputURL = CachedSelector.init("outputURL");
      pub fn outputURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_outputURL.get(), );
 }}
var sel_setOutputURL_ = CachedSelector.init("setOutputURL:");
      pub fn setOutputURL(self: *Self, __outputURL:  ?* NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOutputURL_.get(), __outputURL, );
 }}
  };
}

pub const MTLCaptureDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLCaptureDescriptorInterfaceMixin(Self, "MTLCaptureDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLCaptureDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCaptureDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLCaptureDescriptor");
};

pub fn NSUnitElectricCurrentInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_megaamperes = CachedSelector.init("megaamperes");
      pub fn megaamperes()  * NSUnitElectricCurrent {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCurrent, @ptrCast(&objc_msgSend))(class.get(), sel_megaamperes.get(), );
 }}
var sel_kiloamperes = CachedSelector.init("kiloamperes");
      pub fn kiloamperes()  * NSUnitElectricCurrent {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCurrent, @ptrCast(&objc_msgSend))(class.get(), sel_kiloamperes.get(), );
 }}
var sel_amperes = CachedSelector.init("amperes");
      pub fn amperes()  * NSUnitElectricCurrent {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCurrent, @ptrCast(&objc_msgSend))(class.get(), sel_amperes.get(), );
 }}
var sel_milliamperes = CachedSelector.init("milliamperes");
      pub fn milliamperes()  * NSUnitElectricCurrent {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCurrent, @ptrCast(&objc_msgSend))(class.get(), sel_milliamperes.get(), );
 }}
var sel_microamperes = CachedSelector.init("microamperes");
      pub fn microamperes()  * NSUnitElectricCurrent {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricCurrent, @ptrCast(&objc_msgSend))(class.get(), sel_microamperes.get(), );
 }}
  };
}

pub const NSUnitElectricCurrent = opaque {
  const Self = @This();
  pub usingnamespace NSUnitElectricCurrentInterfaceMixin(Self, "NSUnitElectricCurrent");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitElectricCurrent");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitElectricCurrent");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitElectricCurrent");
};

pub fn NSAttributedStringInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_attributesAtIndex_effectiveRange_ = CachedSelector.init("attributesAtIndex:effectiveRange:");
      pub fn attributesAtIndexeffectiveRange(self: *Self, __location: c_ulong, __range:  [*c] _NSRange, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, c_ulong,  [*c] _NSRange, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributesAtIndex_effectiveRange_.get(), __location, __range, );
 }}
var sel_string = CachedSelector.init("string");
      pub fn string(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_string.get(), );
 }}
var sel_attribute_atIndex_effectiveRange_ = CachedSelector.init("attribute:atIndex:effectiveRange:");
      pub fn attributeatIndexeffectiveRange(self: *Self, __attrName:  * NSString, __location: c_ulong, __range:  [*c] _NSRange, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, c_ulong,  [*c] _NSRange, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attribute_atIndex_effectiveRange_.get(), __attrName, __location, __range, );
 }}
var sel_attributedSubstringFromRange_ = CachedSelector.init("attributedSubstringFromRange:");
      pub fn attributedSubstringFromRange(self: *Self, __range: _NSRange, )  * NSAttributedString {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C)  * NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributedSubstringFromRange_.get(), __range, );
 }}
var sel_attributesAtIndex_longestEffectiveRange_inRange_ = CachedSelector.init("attributesAtIndex:longestEffectiveRange:inRange:");
      pub fn attributesAtIndexlongestEffectiveRangeinRange(self: *Self, __location: c_ulong, __range:  [*c] _NSRange, __rangeLimit: _NSRange, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, c_ulong,  [*c] _NSRange, _NSRange, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributesAtIndex_longestEffectiveRange_inRange_.get(), __location, __range, __rangeLimit, );
 }}
var sel_attribute_atIndex_longestEffectiveRange_inRange_ = CachedSelector.init("attribute:atIndex:longestEffectiveRange:inRange:");
      pub fn attributeatIndexlongestEffectiveRangeinRange(self: *Self, __attrName:  * NSString, __location: c_ulong, __range:  [*c] _NSRange, __rangeLimit: _NSRange, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, c_ulong,  [*c] _NSRange, _NSRange, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attribute_atIndex_longestEffectiveRange_inRange_.get(), __attrName, __location, __range, __rangeLimit, );
 }}
var sel_isEqualToAttributedString_ = CachedSelector.init("isEqualToAttributedString:");
      pub fn isEqualToAttributedString(self: *Self, __other:  * NSAttributedString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToAttributedString_.get(), __other, );
 }}
var sel_initWithString_ = CachedSelector.init("initWithString:");
      pub fn initWithString(self: *Self, __str:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_.get(), __str, );
 }}
var sel_initWithString_attributes_ = CachedSelector.init("initWithString:attributes:");
      pub fn initWithStringattributes(self: *Self, __str:  * NSString, __attrs:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_attributes_.get(), __str, __attrs, );
 }}
var sel_initWithAttributedString_ = CachedSelector.init("initWithAttributedString:");
      pub fn initWithAttributedString(self: *Self, __attrStr:  * NSAttributedString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithAttributedString_.get(), __attrStr, );
 }}
var sel_enumerateAttributesInRange_options_usingBlock_ = CachedSelector.init("enumerateAttributesInRange:options:usingBlock:");
      pub fn enumerateAttributesInRangeoptionsusingBlock(self: *Self, __enumerationRange: _NSRange, __opts: NSAttributedStringEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, NSAttributedStringEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateAttributesInRange_options_usingBlock_.get(), __enumerationRange, __opts, __block, );
 }}
var sel_enumerateAttribute_inRange_options_usingBlock_ = CachedSelector.init("enumerateAttribute:inRange:options:usingBlock:");
      pub fn enumerateAttributeinRangeoptionsusingBlock(self: *Self, __attrName:  * NSString, __enumerationRange: _NSRange, __opts: NSAttributedStringEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, _NSRange, NSAttributedStringEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateAttribute_inRange_options_usingBlock_.get(), __attrName, __enumerationRange, __opts, __block, );
 }}
var sel_length = CachedSelector.init("length");
      pub fn length(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_length.get(), );
 }}
var sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_ = CachedSelector.init("initWithContentsOfMarkdownFileAtURL:options:baseURL:error:");
      pub fn initWithContentsOfMarkdownFileAtURLoptionsbaseURLerror(self: *Self, __markdownFile:  * NSURL, __options:  ?* NSAttributedStringMarkdownParsingOptions, __baseURL:  ?* NSURL, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL,  ?* NSAttributedStringMarkdownParsingOptions,  ?* NSURL,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_.get(), __markdownFile, __options, __baseURL, __an_error, );
 }}
var sel_initWithMarkdown_options_baseURL_error_ = CachedSelector.init("initWithMarkdown:options:baseURL:error:");
      pub fn initWithMarkdownoptionsbaseURLerror(self: *Self, __markdown:  * NSData, __options:  ?* NSAttributedStringMarkdownParsingOptions, __baseURL:  ?* NSURL, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData,  ?* NSAttributedStringMarkdownParsingOptions,  ?* NSURL,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMarkdown_options_baseURL_error_.get(), __markdown, __options, __baseURL, __an_error, );
 }}
var sel_initWithMarkdownString_options_baseURL_error_ = CachedSelector.init("initWithMarkdownString:options:baseURL:error:");
      pub fn initWithMarkdownStringoptionsbaseURLerror(self: *Self, __markdownString:  * NSString, __options:  ?* NSAttributedStringMarkdownParsingOptions, __baseURL:  ?* NSURL, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSAttributedStringMarkdownParsingOptions,  ?* NSURL,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMarkdownString_options_baseURL_error_.get(), __markdownString, __options, __baseURL, __an_error, );
 }}
var sel_initWithFormat_options_locale_ = CachedSelector.init("initWithFormat:options:locale:");
      pub fn initWithFormatoptionslocale(self: *Self, __format:  * NSAttributedString, __options: NSAttributedStringFormattingOptions, __locale:  ?* NSLocale, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, NSAttributedStringFormattingOptions,  ?* NSLocale, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFormat_options_locale_.get(), __format, __options, __locale, );
 }}
var sel_initWithFormat_options_locale_arguments_ = CachedSelector.init("initWithFormat:options:locale:arguments:");
      pub fn initWithFormatoptionslocalearguments(self: *Self, __format:  * NSAttributedString, __options: NSAttributedStringFormattingOptions, __locale:  ?* NSLocale, __arguments:  [*c] u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, NSAttributedStringFormattingOptions,  ?* NSLocale,  [*c] u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFormat_options_locale_arguments_.get(), __format, __options, __locale, __arguments, );
 }}
var sel_localizedAttributedStringWithFormat_ = CachedSelector.init("localizedAttributedStringWithFormat:");
      pub fn localizedAttributedStringWithFormat(__format:  * NSAttributedString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSAttributedString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_localizedAttributedStringWithFormat_.get(), __format, );
 }}
var sel_localizedAttributedStringWithFormat_options_ = CachedSelector.init("localizedAttributedStringWithFormat:options:");
      pub fn localizedAttributedStringWithFormatoptions(__format:  * NSAttributedString, __options: NSAttributedStringFormattingOptions, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSAttributedString, NSAttributedStringFormattingOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_localizedAttributedStringWithFormat_options_.get(), __format, __options, );
 }}
var sel_initWithFormat_options_locale_context_ = CachedSelector.init("initWithFormat:options:locale:context:");
      pub fn initWithFormatoptionslocalecontext(self: *Self, __format:  * NSAttributedString, __options: NSAttributedStringFormattingOptions, __locale:  ?* NSLocale, __context:  * NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, NSAttributedStringFormattingOptions,  ?* NSLocale,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFormat_options_locale_context_.get(), __format, __options, __locale, __context, );
 }}
var sel_initWithFormat_options_locale_context_arguments_ = CachedSelector.init("initWithFormat:options:locale:context:arguments:");
      pub fn initWithFormatoptionslocalecontextarguments(self: *Self, __format:  * NSAttributedString, __options: NSAttributedStringFormattingOptions, __locale:  ?* NSLocale, __context:  * NSDictionary, __arguments:  [*c] u8, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, NSAttributedStringFormattingOptions,  ?* NSLocale,  * NSDictionary,  [*c] u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFormat_options_locale_context_arguments_.get(), __format, __options, __locale, __context, __arguments, );
 }}
var sel_localizedAttributedStringWithFormat_context_ = CachedSelector.init("localizedAttributedStringWithFormat:context:");
      pub fn localizedAttributedStringWithFormatcontext(__format:  * NSAttributedString, __context:  * NSDictionary, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSAttributedString,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_localizedAttributedStringWithFormat_context_.get(), __format, __context, );
 }}
var sel_localizedAttributedStringWithFormat_options_context_ = CachedSelector.init("localizedAttributedStringWithFormat:options:context:");
      pub fn localizedAttributedStringWithFormatoptionscontext(__format:  * NSAttributedString, __options: NSAttributedStringFormattingOptions, __context:  * NSDictionary, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSAttributedString, NSAttributedStringFormattingOptions,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_localizedAttributedStringWithFormat_options_context_.get(), __format, __options, __context, );
 }}
var sel_attributedStringByInflectingString = CachedSelector.init("attributedStringByInflectingString");
      pub fn attributedStringByInflectingString(self: *Self, )  * NSAttributedString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributedStringByInflectingString.get(), );
 }}
  };
}

pub const NSAttributedString = opaque {
  const Self = @This();
  pub usingnamespace NSAttributedStringInterfaceMixin(Self, "NSAttributedString");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSAttributedString");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSAttributedString");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSAttributedString");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSAttributedString");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSAttributedString");
};

pub fn MTLResourceStatePassSampleBufferAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sampleBuffer = CachedSelector.init("sampleBuffer");
      pub fn sampleBuffer(self: *Self, )  ?* MTLCounterSampleBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCounterSampleBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBuffer.get(), );
 }}
var sel_setSampleBuffer_ = CachedSelector.init("setSampleBuffer:");
      pub fn setSampleBuffer(self: *Self, __sampleBuffer:  ?* MTLCounterSampleBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLCounterSampleBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSampleBuffer_.get(), __sampleBuffer, );
 }}
var sel_startOfEncoderSampleIndex = CachedSelector.init("startOfEncoderSampleIndex");
      pub fn startOfEncoderSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startOfEncoderSampleIndex.get(), );
 }}
var sel_setStartOfEncoderSampleIndex_ = CachedSelector.init("setStartOfEncoderSampleIndex:");
      pub fn setStartOfEncoderSampleIndex(self: *Self, __startOfEncoderSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStartOfEncoderSampleIndex_.get(), __startOfEncoderSampleIndex, );
 }}
var sel_endOfEncoderSampleIndex = CachedSelector.init("endOfEncoderSampleIndex");
      pub fn endOfEncoderSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endOfEncoderSampleIndex.get(), );
 }}
var sel_setEndOfEncoderSampleIndex_ = CachedSelector.init("setEndOfEncoderSampleIndex:");
      pub fn setEndOfEncoderSampleIndex(self: *Self, __endOfEncoderSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEndOfEncoderSampleIndex_.get(), __endOfEncoderSampleIndex, );
 }}
  };
}

pub const MTLResourceStatePassSampleBufferAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLResourceStatePassSampleBufferAttachmentDescriptorInterfaceMixin(Self, "MTLResourceStatePassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLResourceStatePassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLResourceStatePassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLResourceStatePassSampleBufferAttachmentDescriptor");
};

pub fn NSURLCredentialInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_persistence = CachedSelector.init("persistence");
      pub fn persistence(self: *Self, ) NSURLCredentialPersistence {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLCredentialPersistence, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_persistence.get(), );
 }}
var sel_initWithUser_password_persistence_ = CachedSelector.init("initWithUser:password:persistence:");
      pub fn initWithUserpasswordpersistence(self: *Self, __user:  * NSString, __password:  * NSString, __persistence: NSURLCredentialPersistence, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, NSURLCredentialPersistence, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUser_password_persistence_.get(), __user, __password, __persistence, );
 }}
var sel_credentialWithUser_password_persistence_ = CachedSelector.init("credentialWithUser:password:persistence:");
      pub fn credentialWithUserpasswordpersistence(__user:  * NSString, __password:  * NSString, __persistence: NSURLCredentialPersistence, )  * NSURLCredential {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, NSURLCredentialPersistence, ) callconv(.C)  * NSURLCredential, @ptrCast(&objc_msgSend))(class.get(), sel_credentialWithUser_password_persistence_.get(), __user, __password, __persistence, );
 }}
var sel_user = CachedSelector.init("user");
      pub fn user(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_user.get(), );
 }}
var sel_password = CachedSelector.init("password");
      pub fn password(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_password.get(), );
 }}
var sel_hasPassword = CachedSelector.init("hasPassword");
      pub fn hasPassword(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasPassword.get(), );
 }}
var sel_initWithIdentity_certificates_persistence_ = CachedSelector.init("initWithIdentity:certificates:persistence:");
      pub fn initWithIdentitycertificatespersistence(self: *Self, __identity:  [*c] __SecIdentity, __certArray:  ?* NSArray, __persistence: NSURLCredentialPersistence, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] __SecIdentity,  ?* NSArray, NSURLCredentialPersistence, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithIdentity_certificates_persistence_.get(), __identity, __certArray, __persistence, );
 }}
var sel_credentialWithIdentity_certificates_persistence_ = CachedSelector.init("credentialWithIdentity:certificates:persistence:");
      pub fn credentialWithIdentitycertificatespersistence(__identity:  [*c] __SecIdentity, __certArray:  ?* NSArray, __persistence: NSURLCredentialPersistence, )  * NSURLCredential {{
           return @as(*const fn(Class, SEL,  [*c] __SecIdentity,  ?* NSArray, NSURLCredentialPersistence, ) callconv(.C)  * NSURLCredential, @ptrCast(&objc_msgSend))(class.get(), sel_credentialWithIdentity_certificates_persistence_.get(), __identity, __certArray, __persistence, );
 }}
var sel_identity = CachedSelector.init("identity");
      pub fn identity(self: *Self, )  [*c] __SecIdentity {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] __SecIdentity, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_identity.get(), );
 }}
var sel_certificates = CachedSelector.init("certificates");
      pub fn certificates(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_certificates.get(), );
 }}
var sel_initWithTrust_ = CachedSelector.init("initWithTrust:");
      pub fn initWithTrust(self: *Self, __trust:  [*c] __SecTrust, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] __SecTrust, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTrust_.get(), __trust, );
 }}
var sel_credentialForTrust_ = CachedSelector.init("credentialForTrust:");
      pub fn credentialForTrust(__trust:  [*c] __SecTrust, )  * NSURLCredential {{
           return @as(*const fn(Class, SEL,  [*c] __SecTrust, ) callconv(.C)  * NSURLCredential, @ptrCast(&objc_msgSend))(class.get(), sel_credentialForTrust_.get(), __trust, );
 }}
  };
}

pub const NSURLCredential = opaque {
  const Self = @This();
  pub usingnamespace NSURLCredentialInterfaceMixin(Self, "NSURLCredential");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSURLCredential");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSURLCredential");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLCredential");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLCredential");
};

pub fn NSXPCListenerEndpointInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSXPCListenerEndpoint = opaque {
  const Self = @This();
  pub usingnamespace NSXPCListenerEndpointInterfaceMixin(Self, "NSXPCListenerEndpoint");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSXPCListenerEndpoint");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXPCListenerEndpoint");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSXPCListenerEndpoint");
};

pub fn NSBundleInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_bundleWithPath_ = CachedSelector.init("bundleWithPath:");
      pub fn bundleWithPath(__path:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_bundleWithPath_.get(), __path, );
 }}
var sel_initWithPath_ = CachedSelector.init("initWithPath:");
      pub fn initWithPath(self: *Self, __path:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithPath_.get(), __path, );
 }}
var sel_bundleWithURL_ = CachedSelector.init("bundleWithURL:");
      pub fn bundleWithURL(__url:  * NSURL, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_bundleWithURL_.get(), __url, );
 }}
var sel_initWithURL_ = CachedSelector.init("initWithURL:");
      pub fn initWithURL(self: *Self, __url:  * NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_.get(), __url, );
 }}
var sel_bundleForClass_ = CachedSelector.init("bundleForClass:");
      pub fn bundleForClass(__aClass: Class, )  * NSBundle {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C)  * NSBundle, @ptrCast(&objc_msgSend))(class.get(), sel_bundleForClass_.get(), __aClass, );
 }}
var sel_bundleWithIdentifier_ = CachedSelector.init("bundleWithIdentifier:");
      pub fn bundleWithIdentifier(__identifier:  * NSString, )  ?* NSBundle {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSBundle, @ptrCast(&objc_msgSend))(class.get(), sel_bundleWithIdentifier_.get(), __identifier, );
 }}
var sel_load = CachedSelector.init("load");
      pub fn load(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_load.get(), );
 }}
var sel_unload = CachedSelector.init("unload");
      pub fn unload(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unload.get(), );
 }}
var sel_preflightAndReturnError_ = CachedSelector.init("preflightAndReturnError:");
      pub fn preflightAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_preflightAndReturnError_.get(), __an_error, );
 }}
var sel_loadAndReturnError_ = CachedSelector.init("loadAndReturnError:");
      pub fn loadAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadAndReturnError_.get(), __an_error, );
 }}
var sel_URLForAuxiliaryExecutable_ = CachedSelector.init("URLForAuxiliaryExecutable:");
      pub fn URLForAuxiliaryExecutable(self: *Self, __executableName:  * NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLForAuxiliaryExecutable_.get(), __executableName, );
 }}
var sel_pathForAuxiliaryExecutable_ = CachedSelector.init("pathForAuxiliaryExecutable:");
      pub fn pathForAuxiliaryExecutable(self: *Self, __executableName:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathForAuxiliaryExecutable_.get(), __executableName, );
 }}
var sel_URLForResource_withExtension_subdirectory_inBundleWithURL_ = CachedSelector.init("URLForResource:withExtension:subdirectory:inBundleWithURL:");
      pub fn URLForResourcewithExtensionsubdirectoryinBundleWithURL(__name:  ?* NSString, __ext:  ?* NSString, __subpath:  ?* NSString, __bundleURL:  * NSURL, )  ?* NSURL {{
           return @as(*const fn(Class, SEL,  ?* NSString,  ?* NSString,  ?* NSString,  * NSURL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_URLForResource_withExtension_subdirectory_inBundleWithURL_.get(), __name, __ext, __subpath, __bundleURL, );
 }}
var sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_ = CachedSelector.init("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:");
      pub fn URLsForResourcesWithExtensionsubdirectoryinBundleWithURL(__ext:  ?* NSString, __subpath:  ?* NSString, __bundleURL:  * NSURL, )  ?* NSArray {{
           return @as(*const fn(Class, SEL,  ?* NSString,  ?* NSString,  * NSURL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_.get(), __ext, __subpath, __bundleURL, );
 }}
var sel_URLForResource_withExtension_ = CachedSelector.init("URLForResource:withExtension:");
      pub fn URLForResourcewithExtension(self: *Self, __name:  ?* NSString, __ext:  ?* NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLForResource_withExtension_.get(), __name, __ext, );
 }}
var sel_URLForResource_withExtension_subdirectory_ = CachedSelector.init("URLForResource:withExtension:subdirectory:");
      pub fn URLForResourcewithExtensionsubdirectory(self: *Self, __name:  ?* NSString, __ext:  ?* NSString, __subpath:  ?* NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSString,  ?* NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLForResource_withExtension_subdirectory_.get(), __name, __ext, __subpath, );
 }}
var sel_URLForResource_withExtension_subdirectory_localization_ = CachedSelector.init("URLForResource:withExtension:subdirectory:localization:");
      pub fn URLForResourcewithExtensionsubdirectorylocalization(self: *Self, __name:  ?* NSString, __ext:  ?* NSString, __subpath:  ?* NSString, __localizationName:  ?* NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSString,  ?* NSString,  ?* NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLForResource_withExtension_subdirectory_localization_.get(), __name, __ext, __subpath, __localizationName, );
 }}
var sel_URLsForResourcesWithExtension_subdirectory_ = CachedSelector.init("URLsForResourcesWithExtension:subdirectory:");
      pub fn URLsForResourcesWithExtensionsubdirectory(self: *Self, __ext:  ?* NSString, __subpath:  ?* NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLsForResourcesWithExtension_subdirectory_.get(), __ext, __subpath, );
 }}
var sel_URLsForResourcesWithExtension_subdirectory_localization_ = CachedSelector.init("URLsForResourcesWithExtension:subdirectory:localization:");
      pub fn URLsForResourcesWithExtensionsubdirectorylocalization(self: *Self, __ext:  ?* NSString, __subpath:  ?* NSString, __localizationName:  ?* NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSString,  ?* NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLsForResourcesWithExtension_subdirectory_localization_.get(), __ext, __subpath, __localizationName, );
 }}
var sel_pathForResource_ofType_inDirectory_ = CachedSelector.init("pathForResource:ofType:inDirectory:");
      pub fn pathForResourceofTypeinDirectory(__name:  ?* NSString, __ext:  ?* NSString, __bundlePath:  * NSString, )  ?* NSString {{
           return @as(*const fn(Class, SEL,  ?* NSString,  ?* NSString,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(class.get(), sel_pathForResource_ofType_inDirectory_.get(), __name, __ext, __bundlePath, );
 }}
var sel_pathsForResourcesOfType_inDirectory_ = CachedSelector.init("pathsForResourcesOfType:inDirectory:");
      pub fn pathsForResourcesOfTypeinDirectory(__ext:  ?* NSString, __bundlePath:  * NSString, )  * NSArray {{
           return @as(*const fn(Class, SEL,  ?* NSString,  * NSString, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_pathsForResourcesOfType_inDirectory_.get(), __ext, __bundlePath, );
 }}
var sel_pathForResource_ofType_ = CachedSelector.init("pathForResource:ofType:");
      pub fn pathForResourceofType(self: *Self, __name:  ?* NSString, __ext:  ?* NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathForResource_ofType_.get(), __name, __ext, );
 }}
var sel_pathForResource_ofType_inDirectory_forLocalization_ = CachedSelector.init("pathForResource:ofType:inDirectory:forLocalization:");
      pub fn pathForResourceofTypeinDirectoryforLocalization(self: *Self, __name:  ?* NSString, __ext:  ?* NSString, __subpath:  ?* NSString, __localizationName:  ?* NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSString,  ?* NSString,  ?* NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathForResource_ofType_inDirectory_forLocalization_.get(), __name, __ext, __subpath, __localizationName, );
 }}
var sel_pathsForResourcesOfType_inDirectory_forLocalization_ = CachedSelector.init("pathsForResourcesOfType:inDirectory:forLocalization:");
      pub fn pathsForResourcesOfTypeinDirectoryforLocalization(self: *Self, __ext:  ?* NSString, __subpath:  ?* NSString, __localizationName:  ?* NSString, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSString,  ?* NSString, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathsForResourcesOfType_inDirectory_forLocalization_.get(), __ext, __subpath, __localizationName, );
 }}
var sel_localizedStringForKey_value_table_ = CachedSelector.init("localizedStringForKey:value:table:");
      pub fn localizedStringForKeyvaluetable(self: *Self, __key:  * NSString, __value:  ?* NSString, __tableName:  ?* NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString,  ?* NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForKey_value_table_.get(), __key, __value, __tableName, );
 }}
var sel_localizedAttributedStringForKey_value_table_ = CachedSelector.init("localizedAttributedStringForKey:value:table:");
      pub fn localizedAttributedStringForKeyvaluetable(self: *Self, __key:  * NSString, __value:  ?* NSString, __tableName:  ?* NSString, )  * NSAttributedString {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString,  ?* NSString, ) callconv(.C)  * NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedAttributedStringForKey_value_table_.get(), __key, __value, __tableName, );
 }}
var sel_objectForInfoDictionaryKey_ = CachedSelector.init("objectForInfoDictionaryKey:");
      pub fn objectForInfoDictionaryKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectForInfoDictionaryKey_.get(), __key, );
 }}
var sel_classNamed_ = CachedSelector.init("classNamed:");
      pub fn classNamed(self: *Self, __className:  * NSString, ) Class {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classNamed_.get(), __className, );
 }}
var sel_preferredLocalizationsFromArray_ = CachedSelector.init("preferredLocalizationsFromArray:");
      pub fn preferredLocalizationsFromArray(__localizationsArray:  * NSArray, )  * NSArray {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_preferredLocalizationsFromArray_.get(), __localizationsArray, );
 }}
var sel_preferredLocalizationsFromArray_forPreferences_ = CachedSelector.init("preferredLocalizationsFromArray:forPreferences:");
      pub fn preferredLocalizationsFromArrayforPreferences(__localizationsArray:  * NSArray, __preferencesArray:  ?* NSArray, )  * NSArray {{
           return @as(*const fn(Class, SEL,  * NSArray,  ?* NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_preferredLocalizationsFromArray_forPreferences_.get(), __localizationsArray, __preferencesArray, );
 }}
var sel_mainBundle = CachedSelector.init("mainBundle");
      pub fn mainBundle()  * NSBundle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSBundle, @ptrCast(&objc_msgSend))(class.get(), sel_mainBundle.get(), );
 }}
var sel_allBundles = CachedSelector.init("allBundles");
      pub fn allBundles()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_allBundles.get(), );
 }}
var sel_allFrameworks = CachedSelector.init("allFrameworks");
      pub fn allFrameworks()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_allFrameworks.get(), );
 }}
var sel_isLoaded = CachedSelector.init("isLoaded");
      pub fn isLoaded(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLoaded.get(), );
 }}
var sel_bundleURL = CachedSelector.init("bundleURL");
      pub fn bundleURL(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bundleURL.get(), );
 }}
var sel_resourceURL = CachedSelector.init("resourceURL");
      pub fn resourceURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceURL.get(), );
 }}
var sel_executableURL = CachedSelector.init("executableURL");
      pub fn executableURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executableURL.get(), );
 }}
var sel_privateFrameworksURL = CachedSelector.init("privateFrameworksURL");
      pub fn privateFrameworksURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_privateFrameworksURL.get(), );
 }}
var sel_sharedFrameworksURL = CachedSelector.init("sharedFrameworksURL");
      pub fn sharedFrameworksURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sharedFrameworksURL.get(), );
 }}
var sel_sharedSupportURL = CachedSelector.init("sharedSupportURL");
      pub fn sharedSupportURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sharedSupportURL.get(), );
 }}
var sel_builtInPlugInsURL = CachedSelector.init("builtInPlugInsURL");
      pub fn builtInPlugInsURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_builtInPlugInsURL.get(), );
 }}
var sel_appStoreReceiptURL = CachedSelector.init("appStoreReceiptURL");
      pub fn appStoreReceiptURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appStoreReceiptURL.get(), );
 }}
var sel_bundlePath = CachedSelector.init("bundlePath");
      pub fn bundlePath(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bundlePath.get(), );
 }}
var sel_resourcePath = CachedSelector.init("resourcePath");
      pub fn resourcePath(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourcePath.get(), );
 }}
var sel_executablePath = CachedSelector.init("executablePath");
      pub fn executablePath(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executablePath.get(), );
 }}
var sel_privateFrameworksPath = CachedSelector.init("privateFrameworksPath");
      pub fn privateFrameworksPath(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_privateFrameworksPath.get(), );
 }}
var sel_sharedFrameworksPath = CachedSelector.init("sharedFrameworksPath");
      pub fn sharedFrameworksPath(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sharedFrameworksPath.get(), );
 }}
var sel_sharedSupportPath = CachedSelector.init("sharedSupportPath");
      pub fn sharedSupportPath(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sharedSupportPath.get(), );
 }}
var sel_builtInPlugInsPath = CachedSelector.init("builtInPlugInsPath");
      pub fn builtInPlugInsPath(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_builtInPlugInsPath.get(), );
 }}
var sel_bundleIdentifier = CachedSelector.init("bundleIdentifier");
      pub fn bundleIdentifier(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bundleIdentifier.get(), );
 }}
var sel_infoDictionary = CachedSelector.init("infoDictionary");
      pub fn infoDictionary(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_infoDictionary.get(), );
 }}
var sel_localizedInfoDictionary = CachedSelector.init("localizedInfoDictionary");
      pub fn localizedInfoDictionary(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedInfoDictionary.get(), );
 }}
var sel_principalClass = CachedSelector.init("principalClass");
      pub fn principalClass(self: *Self, ) Class {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_principalClass.get(), );
 }}
var sel_preferredLocalizations = CachedSelector.init("preferredLocalizations");
      pub fn preferredLocalizations(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_preferredLocalizations.get(), );
 }}
var sel_localizations = CachedSelector.init("localizations");
      pub fn localizations(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizations.get(), );
 }}
var sel_developmentLocalization = CachedSelector.init("developmentLocalization");
      pub fn developmentLocalization(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_developmentLocalization.get(), );
 }}
var sel_executableArchitectures = CachedSelector.init("executableArchitectures");
      pub fn executableArchitectures(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executableArchitectures.get(), );
 }}
var sel_setPreservationPriority_forTags_ = CachedSelector.init("setPreservationPriority:forTags:");
      pub fn setPreservationPriorityforTags(self: *Self, __priority: f64, __tags:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL, f64,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPreservationPriority_forTags_.get(), __priority, __tags, );
 }}
var sel_preservationPriorityForTag_ = CachedSelector.init("preservationPriorityForTag:");
      pub fn preservationPriorityForTag(self: *Self, __tag:  * NSString, ) f64 {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_preservationPriorityForTag_.get(), __tag, );
 }}
  };
}

pub const NSBundle = opaque {
  const Self = @This();
  pub usingnamespace NSBundleInterfaceMixin(Self, "NSBundle");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSBundle");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSBundle");
};

pub fn MTLRenderPassColorAttachmentDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __attachmentIndex: c_ulong, )  * MTLRenderPassColorAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLRenderPassColorAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __attachmentIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attachment:  ?* MTLRenderPassColorAttachmentDescriptor, __attachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLRenderPassColorAttachmentDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attachment, __attachmentIndex, );
 }}
  };
}

pub const MTLRenderPassColorAttachmentDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPassColorAttachmentDescriptorArrayInterfaceMixin(Self, "MTLRenderPassColorAttachmentDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPassColorAttachmentDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPassColorAttachmentDescriptorArray");
};

pub fn MTLLinkedFunctionsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_linkedFunctions = CachedSelector.init("linkedFunctions");
      pub fn linkedFunctions()  * MTLLinkedFunctions {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLLinkedFunctions, @ptrCast(&objc_msgSend))(class.get(), sel_linkedFunctions.get(), );
 }}
var sel_functions = CachedSelector.init("functions");
      pub fn functions(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functions.get(), );
 }}
var sel_setFunctions_ = CachedSelector.init("setFunctions:");
      pub fn setFunctions(self: *Self, __functions:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunctions_.get(), __functions, );
 }}
var sel_binaryFunctions = CachedSelector.init("binaryFunctions");
      pub fn binaryFunctions(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_binaryFunctions.get(), );
 }}
var sel_setBinaryFunctions_ = CachedSelector.init("setBinaryFunctions:");
      pub fn setBinaryFunctions(self: *Self, __binaryFunctions:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBinaryFunctions_.get(), __binaryFunctions, );
 }}
var sel_groups = CachedSelector.init("groups");
      pub fn groups(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_groups.get(), );
 }}
var sel_setGroups_ = CachedSelector.init("setGroups:");
      pub fn setGroups(self: *Self, __groups:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGroups_.get(), __groups, );
 }}
var sel_privateFunctions = CachedSelector.init("privateFunctions");
      pub fn privateFunctions(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_privateFunctions.get(), );
 }}
var sel_setPrivateFunctions_ = CachedSelector.init("setPrivateFunctions:");
      pub fn setPrivateFunctions(self: *Self, __privateFunctions:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPrivateFunctions_.get(), __privateFunctions, );
 }}
  };
}

pub const MTLLinkedFunctions = opaque {
  const Self = @This();
  pub usingnamespace MTLLinkedFunctionsInterfaceMixin(Self, "MTLLinkedFunctions");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLLinkedFunctions");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLLinkedFunctions");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLLinkedFunctions");
};

pub fn NSListFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_localizedStringByJoiningStrings_ = CachedSelector.init("localizedStringByJoiningStrings:");
      pub fn localizedStringByJoiningStrings(__strings:  * NSArray, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localizedStringByJoiningStrings_.get(), __strings, );
 }}
var sel_stringFromItems_ = CachedSelector.init("stringFromItems:");
      pub fn stringFromItems(self: *Self, __items:  * NSArray, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromItems_.get(), __items, );
 }}
var sel_stringForObjectValue_ = CachedSelector.init("stringForObjectValue:");
      pub fn stringForObjectValue(self: *Self, __obj: id, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringForObjectValue_.get(), __obj, );
 }}
var sel_locale = CachedSelector.init("locale");
      pub fn locale(self: *Self, )  * NSLocale {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locale.get(), );
 }}
var sel_setLocale_ = CachedSelector.init("setLocale:");
      pub fn setLocale(self: *Self, __locale:  ?* NSLocale, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocale_.get(), __locale, );
 }}
var sel_itemFormatter = CachedSelector.init("itemFormatter");
      pub fn itemFormatter(self: *Self, )  ?* NSFormatter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSFormatter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_itemFormatter.get(), );
 }}
var sel_setItemFormatter_ = CachedSelector.init("setItemFormatter:");
      pub fn setItemFormatter(self: *Self, __itemFormatter:  ?* NSFormatter, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSFormatter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setItemFormatter_.get(), __itemFormatter, );
 }}
  };
}

pub const NSListFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSListFormatterInterfaceMixin(Self, "NSListFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSListFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSListFormatter");
};

pub fn NSInvocationOperationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithTarget_selector_object_ = CachedSelector.init("initWithTarget:selector:object:");
      pub fn initWithTargetselectorobject(self: *Self, __target: id, __sel: SEL, __arg: id, ) *Self {{
           return @as(*const fn(*Self, SEL, id, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTarget_selector_object_.get(), __target, __sel, __arg, );
 }}
var sel_initWithInvocation_ = CachedSelector.init("initWithInvocation:");
      pub fn initWithInvocation(self: *Self, __inv:  * NSInvocation, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSInvocation, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithInvocation_.get(), __inv, );
 }}
var sel_invocation = CachedSelector.init("invocation");
      pub fn invocation(self: *Self, )  * NSInvocation {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSInvocation, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invocation.get(), );
 }}
var sel_result = CachedSelector.init("result");
      pub fn result(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_result.get(), );
 }}
  };
}

pub const NSInvocationOperation = opaque {
  const Self = @This();
  pub usingnamespace NSInvocationOperationInterfaceMixin(Self, "NSInvocationOperation");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSInvocationOperation");
  pub usingnamespace NSOperationInterfaceMixin(Self, "NSInvocationOperation");
};

pub fn NSPropertyListSerializationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_propertyList_isValidForFormat_ = CachedSelector.init("propertyList:isValidForFormat:");
      pub fn propertyListisValidForFormat(__plist: id, __format: NSPropertyListFormat, ) c_int {{
           return @as(*const fn(Class, SEL, id, NSPropertyListFormat, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_propertyList_isValidForFormat_.get(), __plist, __format, );
 }}
var sel_dataWithPropertyList_format_options_error_ = CachedSelector.init("dataWithPropertyList:format:options:error:");
      pub fn dataWithPropertyListformatoptionserror(__plist: id, __format: NSPropertyListFormat, __opt: c_ulong, __an_error:  [*c]  ?* NSError, )  ?* NSData {{
           return @as(*const fn(Class, SEL, id, NSPropertyListFormat, c_ulong,  [*c]  ?* NSError, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(class.get(), sel_dataWithPropertyList_format_options_error_.get(), __plist, __format, __opt, __an_error, );
 }}
var sel_writePropertyList_toStream_format_options_error_ = CachedSelector.init("writePropertyList:toStream:format:options:error:");
      pub fn writePropertyListtoStreamformatoptionserror(__plist: id, __stream:  * NSOutputStream, __format: NSPropertyListFormat, __opt: c_ulong, __an_error:  [*c]  ?* NSError, ) c_long {{
           return @as(*const fn(Class, SEL, id,  * NSOutputStream, NSPropertyListFormat, c_ulong,  [*c]  ?* NSError, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(class.get(), sel_writePropertyList_toStream_format_options_error_.get(), __plist, __stream, __format, __opt, __an_error, );
 }}
var sel_propertyListWithData_options_format_error_ = CachedSelector.init("propertyListWithData:options:format:error:");
      pub fn propertyListWithDataoptionsformaterror(__data:  * NSData, __opt: NSPropertyListMutabilityOptions, __format:  [*c] NSPropertyListFormat, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(Class, SEL,  * NSData, NSPropertyListMutabilityOptions,  [*c] NSPropertyListFormat,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_propertyListWithData_options_format_error_.get(), __data, __opt, __format, __an_error, );
 }}
var sel_propertyListWithStream_options_format_error_ = CachedSelector.init("propertyListWithStream:options:format:error:");
      pub fn propertyListWithStreamoptionsformaterror(__stream:  * NSInputStream, __opt: NSPropertyListMutabilityOptions, __format:  [*c] NSPropertyListFormat, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(Class, SEL,  * NSInputStream, NSPropertyListMutabilityOptions,  [*c] NSPropertyListFormat,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_propertyListWithStream_options_format_error_.get(), __stream, __opt, __format, __an_error, );
 }}
var sel_dataFromPropertyList_format_errorDescription_ = CachedSelector.init("dataFromPropertyList:format:errorDescription:");
      pub fn dataFromPropertyListformaterrorDescription(__plist: id, __format: NSPropertyListFormat, __errorString:  [*c]  ?* NSString, )  ?* NSData {{
           return @as(*const fn(Class, SEL, id, NSPropertyListFormat,  [*c]  ?* NSString, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(class.get(), sel_dataFromPropertyList_format_errorDescription_.get(), __plist, __format, __errorString, );
 }}
var sel_propertyListFromData_mutabilityOption_format_errorDescription_ = CachedSelector.init("propertyListFromData:mutabilityOption:format:errorDescription:");
      pub fn propertyListFromDatamutabilityOptionformaterrorDescription(__data:  * NSData, __opt: NSPropertyListMutabilityOptions, __format:  [*c] NSPropertyListFormat, __errorString:  [*c]  ?* NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSData, NSPropertyListMutabilityOptions,  [*c] NSPropertyListFormat,  [*c]  ?* NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_propertyListFromData_mutabilityOption_format_errorDescription_.get(), __data, __opt, __format, __errorString, );
 }}
  };
}

pub const NSPropertyListSerialization = opaque {
  const Self = @This();
  pub usingnamespace NSPropertyListSerializationInterfaceMixin(Self, "NSPropertyListSerialization");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPropertyListSerialization");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPropertyListSerialization");
};

pub fn NSAppleEventManagerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sharedAppleEventManager = CachedSelector.init("sharedAppleEventManager");
      pub fn sharedAppleEventManager()  * NSAppleEventManager {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSAppleEventManager, @ptrCast(&objc_msgSend))(class.get(), sel_sharedAppleEventManager.get(), );
 }}
var sel_setEventHandler_andSelector_forEventClass_andEventID_ = CachedSelector.init("setEventHandler:andSelector:forEventClass:andEventID:");
      pub fn setEventHandlerandSelectorforEventClassandEventID(self: *Self, __handler: id, __handleEventSelector: SEL, __eventClass: c_uint, __eventID: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, id, SEL, c_uint, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEventHandler_andSelector_forEventClass_andEventID_.get(), __handler, __handleEventSelector, __eventClass, __eventID, );
 }}
var sel_removeEventHandlerForEventClass_andEventID_ = CachedSelector.init("removeEventHandlerForEventClass:andEventID:");
      pub fn removeEventHandlerForEventClassandEventID(self: *Self, __eventClass: c_uint, __eventID: c_uint, ) void {{
           return @as(*const fn(*Self, SEL, c_uint, c_uint, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeEventHandlerForEventClass_andEventID_.get(), __eventClass, __eventID, );
 }}
var sel_dispatchRawAppleEvent_withRawReply_handlerRefCon_ = CachedSelector.init("dispatchRawAppleEvent:withRawReply:handlerRefCon:");
      pub fn dispatchRawAppleEventwithRawReplyhandlerRefCon(self: *Self, __theAppleEvent:  [*c] AEDesc, __theReply:  [*c] AEDesc, __handlerRefCon:  [*c] void, ) c_short {{
           return @as(*const fn(*Self, SEL,  [*c] AEDesc,  [*c] AEDesc,  [*c] void, ) callconv(.C) c_short, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatchRawAppleEvent_withRawReply_handlerRefCon_.get(), __theAppleEvent, __theReply, __handlerRefCon, );
 }}
var sel_suspendCurrentAppleEvent = CachedSelector.init("suspendCurrentAppleEvent");
      pub fn suspendCurrentAppleEvent(self: *Self, )  [*c] __NSAppleEventManagerSuspension {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] __NSAppleEventManagerSuspension, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suspendCurrentAppleEvent.get(), );
 }}
var sel_appleEventForSuspensionID_ = CachedSelector.init("appleEventForSuspensionID:");
      pub fn appleEventForSuspensionID(self: *Self, __suspensionID:  [*c] __NSAppleEventManagerSuspension, )  * NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL,  [*c] __NSAppleEventManagerSuspension, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appleEventForSuspensionID_.get(), __suspensionID, );
 }}
var sel_replyAppleEventForSuspensionID_ = CachedSelector.init("replyAppleEventForSuspensionID:");
      pub fn replyAppleEventForSuspensionID(self: *Self, __suspensionID:  [*c] __NSAppleEventManagerSuspension, )  * NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL,  [*c] __NSAppleEventManagerSuspension, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replyAppleEventForSuspensionID_.get(), __suspensionID, );
 }}
var sel_setCurrentAppleEventAndReplyEventWithSuspensionID_ = CachedSelector.init("setCurrentAppleEventAndReplyEventWithSuspensionID:");
      pub fn setCurrentAppleEventAndReplyEventWithSuspensionID(self: *Self, __suspensionID:  [*c] __NSAppleEventManagerSuspension, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] __NSAppleEventManagerSuspension, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurrentAppleEventAndReplyEventWithSuspensionID_.get(), __suspensionID, );
 }}
var sel_resumeWithSuspensionID_ = CachedSelector.init("resumeWithSuspensionID:");
      pub fn resumeWithSuspensionID(self: *Self, __suspensionID:  [*c] __NSAppleEventManagerSuspension, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] __NSAppleEventManagerSuspension, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resumeWithSuspensionID_.get(), __suspensionID, );
 }}
var sel_currentAppleEvent = CachedSelector.init("currentAppleEvent");
      pub fn currentAppleEvent(self: *Self, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentAppleEvent.get(), );
 }}
var sel_currentReplyAppleEvent = CachedSelector.init("currentReplyAppleEvent");
      pub fn currentReplyAppleEvent(self: *Self, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentReplyAppleEvent.get(), );
 }}
  };
}

pub const NSAppleEventManager = opaque {
  const Self = @This();
  pub usingnamespace NSAppleEventManagerInterfaceMixin(Self, "NSAppleEventManager");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSAppleEventManager");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSAppleEventManager");
};

pub fn NSDateFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_getObjectValue_forString_range_error_ = CachedSelector.init("getObjectValue:forString:range:error:");
      pub fn getObjectValueforStringrangeerror(self: *Self, __obj:  ?* id, __string:  * NSString, __rangep:  [*c] _NSRange, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* id,  * NSString,  [*c] _NSRange,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjectValue_forString_range_error_.get(), __obj, __string, __rangep, __an_error, );
 }}
var sel_stringFromDate_ = CachedSelector.init("stringFromDate:");
      pub fn stringFromDate(self: *Self, __date:  * NSDate, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromDate_.get(), __date, );
 }}
var sel_dateFromString_ = CachedSelector.init("dateFromString:");
      pub fn dateFromString(self: *Self, __string:  * NSString, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateFromString_.get(), __string, );
 }}
var sel_localizedStringFromDate_dateStyle_timeStyle_ = CachedSelector.init("localizedStringFromDate:dateStyle:timeStyle:");
      pub fn localizedStringFromDatedateStyletimeStyle(__date:  * NSDate, __dstyle: NSDateFormatterStyle, __tstyle: NSDateFormatterStyle, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSDate, NSDateFormatterStyle, NSDateFormatterStyle, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localizedStringFromDate_dateStyle_timeStyle_.get(), __date, __dstyle, __tstyle, );
 }}
var sel_dateFormatFromTemplate_options_locale_ = CachedSelector.init("dateFormatFromTemplate:options:locale:");
      pub fn dateFormatFromTemplateoptionslocale(__tmplate:  * NSString, __opts: c_ulong, __locale:  ?* NSLocale, )  ?* NSString {{
           return @as(*const fn(Class, SEL,  * NSString, c_ulong,  ?* NSLocale, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(class.get(), sel_dateFormatFromTemplate_options_locale_.get(), __tmplate, __opts, __locale, );
 }}
var sel_setLocalizedDateFormatFromTemplate_ = CachedSelector.init("setLocalizedDateFormatFromTemplate:");
      pub fn setLocalizedDateFormatFromTemplate(self: *Self, __dateFormatTemplate:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocalizedDateFormatFromTemplate_.get(), __dateFormatTemplate, );
 }}
var sel_formattingContext = CachedSelector.init("formattingContext");
      pub fn formattingContext(self: *Self, ) NSFormattingContext {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSFormattingContext, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formattingContext.get(), );
 }}
var sel_setFormattingContext_ = CachedSelector.init("setFormattingContext:");
      pub fn setFormattingContext(self: *Self, __formattingContext: NSFormattingContext, ) void {{
           return @as(*const fn(*Self, SEL, NSFormattingContext, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormattingContext_.get(), __formattingContext, );
 }}
var sel_defaultFormatterBehavior = CachedSelector.init("defaultFormatterBehavior");
      pub fn defaultFormatterBehavior() NSDateFormatterBehavior {{
           return @as(*const fn(Class, SEL, ) callconv(.C) NSDateFormatterBehavior, @ptrCast(&objc_msgSend))(class.get(), sel_defaultFormatterBehavior.get(), );
 }}
var sel_setDefaultFormatterBehavior_ = CachedSelector.init("setDefaultFormatterBehavior:");
      pub fn setDefaultFormatterBehavior(__defaultFormatterBehavior: NSDateFormatterBehavior, ) void {{
           return @as(*const fn(Class, SEL, NSDateFormatterBehavior, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setDefaultFormatterBehavior_.get(), __defaultFormatterBehavior, );
 }}
var sel_dateFormat = CachedSelector.init("dateFormat");
      pub fn dateFormat(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateFormat.get(), );
 }}
var sel_setDateFormat_ = CachedSelector.init("setDateFormat:");
      pub fn setDateFormat(self: *Self, __dateFormat:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDateFormat_.get(), __dateFormat, );
 }}
var sel_dateStyle = CachedSelector.init("dateStyle");
      pub fn dateStyle(self: *Self, ) NSDateFormatterStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDateFormatterStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateStyle.get(), );
 }}
var sel_setDateStyle_ = CachedSelector.init("setDateStyle:");
      pub fn setDateStyle(self: *Self, __dateStyle: NSDateFormatterStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSDateFormatterStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDateStyle_.get(), __dateStyle, );
 }}
var sel_timeStyle = CachedSelector.init("timeStyle");
      pub fn timeStyle(self: *Self, ) NSDateFormatterStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDateFormatterStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeStyle.get(), );
 }}
var sel_setTimeStyle_ = CachedSelector.init("setTimeStyle:");
      pub fn setTimeStyle(self: *Self, __timeStyle: NSDateFormatterStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSDateFormatterStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeStyle_.get(), __timeStyle, );
 }}
var sel_locale = CachedSelector.init("locale");
      pub fn locale(self: *Self, )  * NSLocale {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locale.get(), );
 }}
var sel_setLocale_ = CachedSelector.init("setLocale:");
      pub fn setLocale(self: *Self, __locale:  ?* NSLocale, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocale_.get(), __locale, );
 }}
var sel_generatesCalendarDates = CachedSelector.init("generatesCalendarDates");
      pub fn generatesCalendarDates(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_generatesCalendarDates.get(), );
 }}
var sel_setGeneratesCalendarDates_ = CachedSelector.init("setGeneratesCalendarDates:");
      pub fn setGeneratesCalendarDates(self: *Self, __generatesCalendarDates: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGeneratesCalendarDates_.get(), __generatesCalendarDates, );
 }}
var sel_formatterBehavior = CachedSelector.init("formatterBehavior");
      pub fn formatterBehavior(self: *Self, ) NSDateFormatterBehavior {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDateFormatterBehavior, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formatterBehavior.get(), );
 }}
var sel_setFormatterBehavior_ = CachedSelector.init("setFormatterBehavior:");
      pub fn setFormatterBehavior(self: *Self, __formatterBehavior: NSDateFormatterBehavior, ) void {{
           return @as(*const fn(*Self, SEL, NSDateFormatterBehavior, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormatterBehavior_.get(), __formatterBehavior, );
 }}
var sel_timeZone = CachedSelector.init("timeZone");
      pub fn timeZone(self: *Self, )  * NSTimeZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSTimeZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeZone.get(), );
 }}
var sel_setTimeZone_ = CachedSelector.init("setTimeZone:");
      pub fn setTimeZone(self: *Self, __timeZone:  ?* NSTimeZone, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSTimeZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeZone_.get(), __timeZone, );
 }}
var sel_calendar = CachedSelector.init("calendar");
      pub fn calendar(self: *Self, )  * NSCalendar {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSCalendar, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_calendar.get(), );
 }}
var sel_setCalendar_ = CachedSelector.init("setCalendar:");
      pub fn setCalendar(self: *Self, __calendar:  ?* NSCalendar, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSCalendar, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCalendar_.get(), __calendar, );
 }}
var sel_isLenient = CachedSelector.init("isLenient");
      pub fn isLenient(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLenient.get(), );
 }}
var sel_setLenient_ = CachedSelector.init("setLenient:");
      pub fn setLenient(self: *Self, __lenient: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLenient_.get(), __lenient, );
 }}
var sel_twoDigitStartDate = CachedSelector.init("twoDigitStartDate");
      pub fn twoDigitStartDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_twoDigitStartDate.get(), );
 }}
var sel_setTwoDigitStartDate_ = CachedSelector.init("setTwoDigitStartDate:");
      pub fn setTwoDigitStartDate(self: *Self, __twoDigitStartDate:  ?* NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTwoDigitStartDate_.get(), __twoDigitStartDate, );
 }}
var sel_defaultDate = CachedSelector.init("defaultDate");
      pub fn defaultDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_defaultDate.get(), );
 }}
var sel_setDefaultDate_ = CachedSelector.init("setDefaultDate:");
      pub fn setDefaultDate(self: *Self, __defaultDate:  ?* NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDefaultDate_.get(), __defaultDate, );
 }}
var sel_eraSymbols = CachedSelector.init("eraSymbols");
      pub fn eraSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_eraSymbols.get(), );
 }}
var sel_setEraSymbols_ = CachedSelector.init("setEraSymbols:");
      pub fn setEraSymbols(self: *Self, __eraSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEraSymbols_.get(), __eraSymbols, );
 }}
var sel_monthSymbols = CachedSelector.init("monthSymbols");
      pub fn monthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_monthSymbols.get(), );
 }}
var sel_setMonthSymbols_ = CachedSelector.init("setMonthSymbols:");
      pub fn setMonthSymbols(self: *Self, __monthSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMonthSymbols_.get(), __monthSymbols, );
 }}
var sel_shortMonthSymbols = CachedSelector.init("shortMonthSymbols");
      pub fn shortMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortMonthSymbols.get(), );
 }}
var sel_setShortMonthSymbols_ = CachedSelector.init("setShortMonthSymbols:");
      pub fn setShortMonthSymbols(self: *Self, __shortMonthSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShortMonthSymbols_.get(), __shortMonthSymbols, );
 }}
var sel_weekdaySymbols = CachedSelector.init("weekdaySymbols");
      pub fn weekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_weekdaySymbols.get(), );
 }}
var sel_setWeekdaySymbols_ = CachedSelector.init("setWeekdaySymbols:");
      pub fn setWeekdaySymbols(self: *Self, __weekdaySymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWeekdaySymbols_.get(), __weekdaySymbols, );
 }}
var sel_shortWeekdaySymbols = CachedSelector.init("shortWeekdaySymbols");
      pub fn shortWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortWeekdaySymbols.get(), );
 }}
var sel_setShortWeekdaySymbols_ = CachedSelector.init("setShortWeekdaySymbols:");
      pub fn setShortWeekdaySymbols(self: *Self, __shortWeekdaySymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShortWeekdaySymbols_.get(), __shortWeekdaySymbols, );
 }}
var sel_AMSymbol = CachedSelector.init("AMSymbol");
      pub fn AMSymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_AMSymbol.get(), );
 }}
var sel_setAMSymbol_ = CachedSelector.init("setAMSymbol:");
      pub fn setAMSymbol(self: *Self, __AMSymbol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAMSymbol_.get(), __AMSymbol, );
 }}
var sel_PMSymbol = CachedSelector.init("PMSymbol");
      pub fn PMSymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_PMSymbol.get(), );
 }}
var sel_setPMSymbol_ = CachedSelector.init("setPMSymbol:");
      pub fn setPMSymbol(self: *Self, __PMSymbol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPMSymbol_.get(), __PMSymbol, );
 }}
var sel_longEraSymbols = CachedSelector.init("longEraSymbols");
      pub fn longEraSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_longEraSymbols.get(), );
 }}
var sel_setLongEraSymbols_ = CachedSelector.init("setLongEraSymbols:");
      pub fn setLongEraSymbols(self: *Self, __longEraSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLongEraSymbols_.get(), __longEraSymbols, );
 }}
var sel_veryShortMonthSymbols = CachedSelector.init("veryShortMonthSymbols");
      pub fn veryShortMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_veryShortMonthSymbols.get(), );
 }}
var sel_setVeryShortMonthSymbols_ = CachedSelector.init("setVeryShortMonthSymbols:");
      pub fn setVeryShortMonthSymbols(self: *Self, __veryShortMonthSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVeryShortMonthSymbols_.get(), __veryShortMonthSymbols, );
 }}
var sel_standaloneMonthSymbols = CachedSelector.init("standaloneMonthSymbols");
      pub fn standaloneMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standaloneMonthSymbols.get(), );
 }}
var sel_setStandaloneMonthSymbols_ = CachedSelector.init("setStandaloneMonthSymbols:");
      pub fn setStandaloneMonthSymbols(self: *Self, __standaloneMonthSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandaloneMonthSymbols_.get(), __standaloneMonthSymbols, );
 }}
var sel_shortStandaloneMonthSymbols = CachedSelector.init("shortStandaloneMonthSymbols");
      pub fn shortStandaloneMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortStandaloneMonthSymbols.get(), );
 }}
var sel_setShortStandaloneMonthSymbols_ = CachedSelector.init("setShortStandaloneMonthSymbols:");
      pub fn setShortStandaloneMonthSymbols(self: *Self, __shortStandaloneMonthSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShortStandaloneMonthSymbols_.get(), __shortStandaloneMonthSymbols, );
 }}
var sel_veryShortStandaloneMonthSymbols = CachedSelector.init("veryShortStandaloneMonthSymbols");
      pub fn veryShortStandaloneMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_veryShortStandaloneMonthSymbols.get(), );
 }}
var sel_setVeryShortStandaloneMonthSymbols_ = CachedSelector.init("setVeryShortStandaloneMonthSymbols:");
      pub fn setVeryShortStandaloneMonthSymbols(self: *Self, __veryShortStandaloneMonthSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVeryShortStandaloneMonthSymbols_.get(), __veryShortStandaloneMonthSymbols, );
 }}
var sel_veryShortWeekdaySymbols = CachedSelector.init("veryShortWeekdaySymbols");
      pub fn veryShortWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_veryShortWeekdaySymbols.get(), );
 }}
var sel_setVeryShortWeekdaySymbols_ = CachedSelector.init("setVeryShortWeekdaySymbols:");
      pub fn setVeryShortWeekdaySymbols(self: *Self, __veryShortWeekdaySymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVeryShortWeekdaySymbols_.get(), __veryShortWeekdaySymbols, );
 }}
var sel_standaloneWeekdaySymbols = CachedSelector.init("standaloneWeekdaySymbols");
      pub fn standaloneWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standaloneWeekdaySymbols.get(), );
 }}
var sel_setStandaloneWeekdaySymbols_ = CachedSelector.init("setStandaloneWeekdaySymbols:");
      pub fn setStandaloneWeekdaySymbols(self: *Self, __standaloneWeekdaySymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandaloneWeekdaySymbols_.get(), __standaloneWeekdaySymbols, );
 }}
var sel_shortStandaloneWeekdaySymbols = CachedSelector.init("shortStandaloneWeekdaySymbols");
      pub fn shortStandaloneWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortStandaloneWeekdaySymbols.get(), );
 }}
var sel_setShortStandaloneWeekdaySymbols_ = CachedSelector.init("setShortStandaloneWeekdaySymbols:");
      pub fn setShortStandaloneWeekdaySymbols(self: *Self, __shortStandaloneWeekdaySymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShortStandaloneWeekdaySymbols_.get(), __shortStandaloneWeekdaySymbols, );
 }}
var sel_veryShortStandaloneWeekdaySymbols = CachedSelector.init("veryShortStandaloneWeekdaySymbols");
      pub fn veryShortStandaloneWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_veryShortStandaloneWeekdaySymbols.get(), );
 }}
var sel_setVeryShortStandaloneWeekdaySymbols_ = CachedSelector.init("setVeryShortStandaloneWeekdaySymbols:");
      pub fn setVeryShortStandaloneWeekdaySymbols(self: *Self, __veryShortStandaloneWeekdaySymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVeryShortStandaloneWeekdaySymbols_.get(), __veryShortStandaloneWeekdaySymbols, );
 }}
var sel_quarterSymbols = CachedSelector.init("quarterSymbols");
      pub fn quarterSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_quarterSymbols.get(), );
 }}
var sel_setQuarterSymbols_ = CachedSelector.init("setQuarterSymbols:");
      pub fn setQuarterSymbols(self: *Self, __quarterSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQuarterSymbols_.get(), __quarterSymbols, );
 }}
var sel_shortQuarterSymbols = CachedSelector.init("shortQuarterSymbols");
      pub fn shortQuarterSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortQuarterSymbols.get(), );
 }}
var sel_setShortQuarterSymbols_ = CachedSelector.init("setShortQuarterSymbols:");
      pub fn setShortQuarterSymbols(self: *Self, __shortQuarterSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShortQuarterSymbols_.get(), __shortQuarterSymbols, );
 }}
var sel_standaloneQuarterSymbols = CachedSelector.init("standaloneQuarterSymbols");
      pub fn standaloneQuarterSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standaloneQuarterSymbols.get(), );
 }}
var sel_setStandaloneQuarterSymbols_ = CachedSelector.init("setStandaloneQuarterSymbols:");
      pub fn setStandaloneQuarterSymbols(self: *Self, __standaloneQuarterSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandaloneQuarterSymbols_.get(), __standaloneQuarterSymbols, );
 }}
var sel_shortStandaloneQuarterSymbols = CachedSelector.init("shortStandaloneQuarterSymbols");
      pub fn shortStandaloneQuarterSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortStandaloneQuarterSymbols.get(), );
 }}
var sel_setShortStandaloneQuarterSymbols_ = CachedSelector.init("setShortStandaloneQuarterSymbols:");
      pub fn setShortStandaloneQuarterSymbols(self: *Self, __shortStandaloneQuarterSymbols:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setShortStandaloneQuarterSymbols_.get(), __shortStandaloneQuarterSymbols, );
 }}
var sel_gregorianStartDate = CachedSelector.init("gregorianStartDate");
      pub fn gregorianStartDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_gregorianStartDate.get(), );
 }}
var sel_setGregorianStartDate_ = CachedSelector.init("setGregorianStartDate:");
      pub fn setGregorianStartDate(self: *Self, __gregorianStartDate:  ?* NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGregorianStartDate_.get(), __gregorianStartDate, );
 }}
var sel_doesRelativeDateFormatting = CachedSelector.init("doesRelativeDateFormatting");
      pub fn doesRelativeDateFormatting(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doesRelativeDateFormatting.get(), );
 }}
var sel_setDoesRelativeDateFormatting_ = CachedSelector.init("setDoesRelativeDateFormatting:");
      pub fn setDoesRelativeDateFormatting(self: *Self, __doesRelativeDateFormatting: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDoesRelativeDateFormatting_.get(), __doesRelativeDateFormatting, );
 }}
var sel_initWithDateFormat_allowNaturalLanguage_ = CachedSelector.init("initWithDateFormat:allowNaturalLanguage:");
      pub fn initWithDateFormatallowNaturalLanguage(self: *Self, __format:  * NSString, __flag: c_int, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDateFormat_allowNaturalLanguage_.get(), __format, __flag, );
 }}
var sel_allowsNaturalLanguage = CachedSelector.init("allowsNaturalLanguage");
      pub fn allowsNaturalLanguage(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsNaturalLanguage.get(), );
 }}
  };
}

pub const NSDateFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSDateFormatterInterfaceMixin(Self, "NSDateFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDateFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSDateFormatter");
};

pub fn NSLengthFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stringFromValue_unit_ = CachedSelector.init("stringFromValue:unit:");
      pub fn stringFromValueunit(self: *Self, __value: f64, __unit: NSLengthFormatterUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, NSLengthFormatterUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromValue_unit_.get(), __value, __unit, );
 }}
var sel_stringFromMeters_ = CachedSelector.init("stringFromMeters:");
      pub fn stringFromMeters(self: *Self, __numberInMeters: f64, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromMeters_.get(), __numberInMeters, );
 }}
var sel_unitStringFromValue_unit_ = CachedSelector.init("unitStringFromValue:unit:");
      pub fn unitStringFromValueunit(self: *Self, __value: f64, __unit: NSLengthFormatterUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, NSLengthFormatterUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStringFromValue_unit_.get(), __value, __unit, );
 }}
var sel_unitStringFromMeters_usedUnit_ = CachedSelector.init("unitStringFromMeters:usedUnit:");
      pub fn unitStringFromMetersusedUnit(self: *Self, __numberInMeters: f64, __unitp:  [*c] NSLengthFormatterUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64,  [*c] NSLengthFormatterUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStringFromMeters_usedUnit_.get(), __numberInMeters, __unitp, );
 }}
var sel_getObjectValue_forString_errorDescription_ = CachedSelector.init("getObjectValue:forString:errorDescription:");
      pub fn getObjectValueforStringerrorDescription(self: *Self, __obj:  ?* id, __string:  * NSString, __an_error:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* id,  * NSString,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjectValue_forString_errorDescription_.get(), __obj, __string, __an_error, );
 }}
var sel_numberFormatter = CachedSelector.init("numberFormatter");
      pub fn numberFormatter(self: *Self, )  * NSNumberFormatter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSNumberFormatter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberFormatter.get(), );
 }}
var sel_setNumberFormatter_ = CachedSelector.init("setNumberFormatter:");
      pub fn setNumberFormatter(self: *Self, __numberFormatter:  ?* NSNumberFormatter, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNumberFormatter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNumberFormatter_.get(), __numberFormatter, );
 }}
var sel_unitStyle = CachedSelector.init("unitStyle");
      pub fn unitStyle(self: *Self, ) NSFormattingUnitStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSFormattingUnitStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStyle.get(), );
 }}
var sel_setUnitStyle_ = CachedSelector.init("setUnitStyle:");
      pub fn setUnitStyle(self: *Self, __unitStyle: NSFormattingUnitStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSFormattingUnitStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUnitStyle_.get(), __unitStyle, );
 }}
var sel_isForPersonHeightUse = CachedSelector.init("isForPersonHeightUse");
      pub fn isForPersonHeightUse(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isForPersonHeightUse.get(), );
 }}
var sel_setForPersonHeightUse_ = CachedSelector.init("setForPersonHeightUse:");
      pub fn setForPersonHeightUse(self: *Self, __forPersonHeightUse: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setForPersonHeightUse_.get(), __forPersonHeightUse, );
 }}
  };
}

pub const NSLengthFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSLengthFormatterInterfaceMixin(Self, "NSLengthFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSLengthFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSLengthFormatter");
};

pub fn NSUserNotificationCenterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_scheduleNotification_ = CachedSelector.init("scheduleNotification:");
      pub fn scheduleNotification(self: *Self, __notification:  * NSUserNotification, ) void {{
           return @as(*const fn(*Self, SEL,  * NSUserNotification, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduleNotification_.get(), __notification, );
 }}
var sel_removeScheduledNotification_ = CachedSelector.init("removeScheduledNotification:");
      pub fn removeScheduledNotification(self: *Self, __notification:  * NSUserNotification, ) void {{
           return @as(*const fn(*Self, SEL,  * NSUserNotification, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeScheduledNotification_.get(), __notification, );
 }}
var sel_deliverNotification_ = CachedSelector.init("deliverNotification:");
      pub fn deliverNotification(self: *Self, __notification:  * NSUserNotification, ) void {{
           return @as(*const fn(*Self, SEL,  * NSUserNotification, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_deliverNotification_.get(), __notification, );
 }}
var sel_removeDeliveredNotification_ = CachedSelector.init("removeDeliveredNotification:");
      pub fn removeDeliveredNotification(self: *Self, __notification:  * NSUserNotification, ) void {{
           return @as(*const fn(*Self, SEL,  * NSUserNotification, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeDeliveredNotification_.get(), __notification, );
 }}
var sel_removeAllDeliveredNotifications = CachedSelector.init("removeAllDeliveredNotifications");
      pub fn removeAllDeliveredNotifications(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllDeliveredNotifications.get(), );
 }}
var sel_defaultUserNotificationCenter = CachedSelector.init("defaultUserNotificationCenter");
      pub fn defaultUserNotificationCenter()  * NSUserNotificationCenter {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUserNotificationCenter, @ptrCast(&objc_msgSend))(class.get(), sel_defaultUserNotificationCenter.get(), );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSUserNotificationCenterDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSUserNotificationCenterDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSUserNotificationCenterDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSUserNotificationCenterDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_scheduledNotifications = CachedSelector.init("scheduledNotifications");
      pub fn scheduledNotifications(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduledNotifications.get(), );
 }}
var sel_setScheduledNotifications_ = CachedSelector.init("setScheduledNotifications:");
      pub fn setScheduledNotifications(self: *Self, __scheduledNotifications:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScheduledNotifications_.get(), __scheduledNotifications, );
 }}
var sel_deliveredNotifications = CachedSelector.init("deliveredNotifications");
      pub fn deliveredNotifications(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_deliveredNotifications.get(), );
 }}
  };
}

pub const NSUserNotificationCenter = opaque {
  const Self = @This();
  pub usingnamespace NSUserNotificationCenterInterfaceMixin(Self, "NSUserNotificationCenter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserNotificationCenter");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUserNotificationCenter");
};

pub fn NSUserAutomatorTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_executeWithInput_completionHandler_ = CachedSelector.init("executeWithInput:completionHandler:");
      pub fn executeWithInputcompletionHandler(self: *Self, __input:  ?* NSSecureCoding, __handler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSSecureCoding, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeWithInput_completionHandler_.get(), __input, __handler, );
 }}
var sel_variables = CachedSelector.init("variables");
      pub fn variables(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_variables.get(), );
 }}
var sel_setVariables_ = CachedSelector.init("setVariables:");
      pub fn setVariables(self: *Self, __variables:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVariables_.get(), __variables, );
 }}
  };
}

pub const NSUserAutomatorTask = opaque {
  const Self = @This();
  pub usingnamespace NSUserAutomatorTaskInterfaceMixin(Self, "NSUserAutomatorTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserAutomatorTask");
  pub usingnamespace NSUserScriptTaskInterfaceMixin(Self, "NSUserAutomatorTask");
};

pub fn NSFileVersionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_currentVersionOfItemAtURL_ = CachedSelector.init("currentVersionOfItemAtURL:");
      pub fn currentVersionOfItemAtURL(__url:  * NSURL, )  ?* NSFileVersion {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  ?* NSFileVersion, @ptrCast(&objc_msgSend))(class.get(), sel_currentVersionOfItemAtURL_.get(), __url, );
 }}
var sel_otherVersionsOfItemAtURL_ = CachedSelector.init("otherVersionsOfItemAtURL:");
      pub fn otherVersionsOfItemAtURL(__url:  * NSURL, )  ?* NSArray {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_otherVersionsOfItemAtURL_.get(), __url, );
 }}
var sel_unresolvedConflictVersionsOfItemAtURL_ = CachedSelector.init("unresolvedConflictVersionsOfItemAtURL:");
      pub fn unresolvedConflictVersionsOfItemAtURL(__url:  * NSURL, )  ?* NSArray {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_unresolvedConflictVersionsOfItemAtURL_.get(), __url, );
 }}
var sel_getNonlocalVersionsOfItemAtURL_completionHandler_ = CachedSelector.init("getNonlocalVersionsOfItemAtURL:completionHandler:");
      pub fn getNonlocalVersionsOfItemAtURLcompletionHandler(__url:  * NSURL, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(Class, SEL,  * NSURL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_getNonlocalVersionsOfItemAtURL_completionHandler_.get(), __url, __completionHandler, );
 }}
var sel_versionOfItemAtURL_forPersistentIdentifier_ = CachedSelector.init("versionOfItemAtURL:forPersistentIdentifier:");
      pub fn versionOfItemAtURLforPersistentIdentifier(__url:  * NSURL, __persistentIdentifier: id, )  ?* NSFileVersion {{
           return @as(*const fn(Class, SEL,  * NSURL, id, ) callconv(.C)  ?* NSFileVersion, @ptrCast(&objc_msgSend))(class.get(), sel_versionOfItemAtURL_forPersistentIdentifier_.get(), __url, __persistentIdentifier, );
 }}
var sel_addVersionOfItemAtURL_withContentsOfURL_options_error_ = CachedSelector.init("addVersionOfItemAtURL:withContentsOfURL:options:error:");
      pub fn addVersionOfItemAtURLwithContentsOfURLoptionserror(__url:  * NSURL, __contentsURL:  * NSURL, __options: NSFileVersionAddingOptions, __outError:  [*c]  ?* NSError, )  ?* NSFileVersion {{
           return @as(*const fn(Class, SEL,  * NSURL,  * NSURL, NSFileVersionAddingOptions,  [*c]  ?* NSError, ) callconv(.C)  ?* NSFileVersion, @ptrCast(&objc_msgSend))(class.get(), sel_addVersionOfItemAtURL_withContentsOfURL_options_error_.get(), __url, __contentsURL, __options, __outError, );
 }}
var sel_temporaryDirectoryURLForNewVersionOfItemAtURL_ = CachedSelector.init("temporaryDirectoryURLForNewVersionOfItemAtURL:");
      pub fn temporaryDirectoryURLForNewVersionOfItemAtURL(__url:  * NSURL, )  * NSURL {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(class.get(), sel_temporaryDirectoryURLForNewVersionOfItemAtURL_.get(), __url, );
 }}
var sel_replaceItemAtURL_options_error_ = CachedSelector.init("replaceItemAtURL:options:error:");
      pub fn replaceItemAtURLoptionserror(self: *Self, __url:  * NSURL, __options: NSFileVersionReplacingOptions, __an_error:  [*c]  ?* NSError, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSFileVersionReplacingOptions,  [*c]  ?* NSError, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceItemAtURL_options_error_.get(), __url, __options, __an_error, );
 }}
var sel_removeAndReturnError_ = CachedSelector.init("removeAndReturnError:");
      pub fn removeAndReturnError(self: *Self, __outError:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAndReturnError_.get(), __outError, );
 }}
var sel_removeOtherVersionsOfItemAtURL_error_ = CachedSelector.init("removeOtherVersionsOfItemAtURL:error:");
      pub fn removeOtherVersionsOfItemAtURLerror(__url:  * NSURL, __outError:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_removeOtherVersionsOfItemAtURL_error_.get(), __url, __outError, );
 }}
var sel_URL = CachedSelector.init("URL");
      pub fn URL(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL.get(), );
 }}
var sel_localizedName = CachedSelector.init("localizedName");
      pub fn localizedName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedName.get(), );
 }}
var sel_localizedNameOfSavingComputer = CachedSelector.init("localizedNameOfSavingComputer");
      pub fn localizedNameOfSavingComputer(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedNameOfSavingComputer.get(), );
 }}
var sel_originatorNameComponents = CachedSelector.init("originatorNameComponents");
      pub fn originatorNameComponents(self: *Self, )  ?* NSPersonNameComponents {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSPersonNameComponents, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_originatorNameComponents.get(), );
 }}
var sel_modificationDate = CachedSelector.init("modificationDate");
      pub fn modificationDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_modificationDate.get(), );
 }}
var sel_persistentIdentifier = CachedSelector.init("persistentIdentifier");
      pub fn persistentIdentifier(self: *Self, )  * NSCoding {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSCoding, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_persistentIdentifier.get(), );
 }}
var sel_isConflict = CachedSelector.init("isConflict");
      pub fn isConflict(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isConflict.get(), );
 }}
var sel_isResolved = CachedSelector.init("isResolved");
      pub fn isResolved(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isResolved.get(), );
 }}
var sel_setResolved_ = CachedSelector.init("setResolved:");
      pub fn setResolved(self: *Self, __resolved: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setResolved_.get(), __resolved, );
 }}
var sel_isDiscardable = CachedSelector.init("isDiscardable");
      pub fn isDiscardable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDiscardable.get(), );
 }}
var sel_setDiscardable_ = CachedSelector.init("setDiscardable:");
      pub fn setDiscardable(self: *Self, __discardable: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDiscardable_.get(), __discardable, );
 }}
var sel_hasLocalContents = CachedSelector.init("hasLocalContents");
      pub fn hasLocalContents(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasLocalContents.get(), );
 }}
var sel_hasThumbnail = CachedSelector.init("hasThumbnail");
      pub fn hasThumbnail(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasThumbnail.get(), );
 }}
  };
}

pub const NSFileVersion = opaque {
  const Self = @This();
  pub usingnamespace NSFileVersionInterfaceMixin(Self, "NSFileVersion");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileVersion");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSFileVersion");
};

pub fn MTLPrimitiveAccelerationStructureDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_descriptor.get(), );
 }}
var sel_geometryDescriptors = CachedSelector.init("geometryDescriptors");
      pub fn geometryDescriptors(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_geometryDescriptors.get(), );
 }}
var sel_setGeometryDescriptors_ = CachedSelector.init("setGeometryDescriptors:");
      pub fn setGeometryDescriptors(self: *Self, __geometryDescriptors:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGeometryDescriptors_.get(), __geometryDescriptors, );
 }}
var sel_motionStartBorderMode = CachedSelector.init("motionStartBorderMode");
      pub fn motionStartBorderMode(self: *Self, ) MTLMotionBorderMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLMotionBorderMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionStartBorderMode.get(), );
 }}
var sel_setMotionStartBorderMode_ = CachedSelector.init("setMotionStartBorderMode:");
      pub fn setMotionStartBorderMode(self: *Self, __motionStartBorderMode: MTLMotionBorderMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLMotionBorderMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionStartBorderMode_.get(), __motionStartBorderMode, );
 }}
var sel_motionEndBorderMode = CachedSelector.init("motionEndBorderMode");
      pub fn motionEndBorderMode(self: *Self, ) MTLMotionBorderMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLMotionBorderMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionEndBorderMode.get(), );
 }}
var sel_setMotionEndBorderMode_ = CachedSelector.init("setMotionEndBorderMode:");
      pub fn setMotionEndBorderMode(self: *Self, __motionEndBorderMode: MTLMotionBorderMode, ) void {{
           return @as(*const fn(*Self, SEL, MTLMotionBorderMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionEndBorderMode_.get(), __motionEndBorderMode, );
 }}
var sel_motionStartTime = CachedSelector.init("motionStartTime");
      pub fn motionStartTime(self: *Self, ) f32 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionStartTime.get(), );
 }}
var sel_setMotionStartTime_ = CachedSelector.init("setMotionStartTime:");
      pub fn setMotionStartTime(self: *Self, __motionStartTime: f32, ) void {{
           return @as(*const fn(*Self, SEL, f32, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionStartTime_.get(), __motionStartTime, );
 }}
var sel_motionEndTime = CachedSelector.init("motionEndTime");
      pub fn motionEndTime(self: *Self, ) f32 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionEndTime.get(), );
 }}
var sel_setMotionEndTime_ = CachedSelector.init("setMotionEndTime:");
      pub fn setMotionEndTime(self: *Self, __motionEndTime: f32, ) void {{
           return @as(*const fn(*Self, SEL, f32, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionEndTime_.get(), __motionEndTime, );
 }}
var sel_motionKeyframeCount = CachedSelector.init("motionKeyframeCount");
      pub fn motionKeyframeCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionKeyframeCount.get(), );
 }}
var sel_setMotionKeyframeCount_ = CachedSelector.init("setMotionKeyframeCount:");
      pub fn setMotionKeyframeCount(self: *Self, __motionKeyframeCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionKeyframeCount_.get(), __motionKeyframeCount, );
 }}
  };
}

pub const MTLPrimitiveAccelerationStructureDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLPrimitiveAccelerationStructureDescriptorInterfaceMixin(Self, "MTLPrimitiveAccelerationStructureDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLPrimitiveAccelerationStructureDescriptor");
  pub usingnamespace MTLAccelerationStructureDescriptorInterfaceMixin(Self, "MTLPrimitiveAccelerationStructureDescriptor");
};

pub fn NSUserDefaultsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_resetStandardUserDefaults = CachedSelector.init("resetStandardUserDefaults");
      pub fn resetStandardUserDefaults() void {{
           return @as(*const fn(Class, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_resetStandardUserDefaults.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithSuiteName_ = CachedSelector.init("initWithSuiteName:");
      pub fn initWithSuiteName(self: *Self, __suitename:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSuiteName_.get(), __suitename, );
 }}
var sel_initWithUser_ = CachedSelector.init("initWithUser:");
      pub fn initWithUser(self: *Self, __username:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUser_.get(), __username, );
 }}
var sel_objectForKey_ = CachedSelector.init("objectForKey:");
      pub fn objectForKey(self: *Self, __defaultName:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectForKey_.get(), __defaultName, );
 }}
var sel_setObject_forKey_ = CachedSelector.init("setObject:forKey:");
      pub fn setObjectforKey(self: *Self, __value: id, __defaultName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_forKey_.get(), __value, __defaultName, );
 }}
var sel_removeObjectForKey_ = CachedSelector.init("removeObjectForKey:");
      pub fn removeObjectForKey(self: *Self, __defaultName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectForKey_.get(), __defaultName, );
 }}
var sel_stringForKey_ = CachedSelector.init("stringForKey:");
      pub fn stringForKey(self: *Self, __defaultName:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringForKey_.get(), __defaultName, );
 }}
var sel_arrayForKey_ = CachedSelector.init("arrayForKey:");
      pub fn arrayForKey(self: *Self, __defaultName:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayForKey_.get(), __defaultName, );
 }}
var sel_dictionaryForKey_ = CachedSelector.init("dictionaryForKey:");
      pub fn dictionaryForKey(self: *Self, __defaultName:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dictionaryForKey_.get(), __defaultName, );
 }}
var sel_dataForKey_ = CachedSelector.init("dataForKey:");
      pub fn dataForKey(self: *Self, __defaultName:  * NSString, )  ?* NSData {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataForKey_.get(), __defaultName, );
 }}
var sel_stringArrayForKey_ = CachedSelector.init("stringArrayForKey:");
      pub fn stringArrayForKey(self: *Self, __defaultName:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringArrayForKey_.get(), __defaultName, );
 }}
var sel_integerForKey_ = CachedSelector.init("integerForKey:");
      pub fn integerForKey(self: *Self, __defaultName:  * NSString, ) c_long {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_integerForKey_.get(), __defaultName, );
 }}
var sel_floatForKey_ = CachedSelector.init("floatForKey:");
      pub fn floatForKey(self: *Self, __defaultName:  * NSString, ) f32 {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_floatForKey_.get(), __defaultName, );
 }}
var sel_doubleForKey_ = CachedSelector.init("doubleForKey:");
      pub fn doubleForKey(self: *Self, __defaultName:  * NSString, ) f64 {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_doubleForKey_.get(), __defaultName, );
 }}
var sel_boolForKey_ = CachedSelector.init("boolForKey:");
      pub fn boolForKey(self: *Self, __defaultName:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_boolForKey_.get(), __defaultName, );
 }}
var sel_URLForKey_ = CachedSelector.init("URLForKey:");
      pub fn URLForKey(self: *Self, __defaultName:  * NSString, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URLForKey_.get(), __defaultName, );
 }}
var sel_setInteger_forKey_ = CachedSelector.init("setInteger:forKey:");
      pub fn setIntegerforKey(self: *Self, __value: c_long, __defaultName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_long,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInteger_forKey_.get(), __value, __defaultName, );
 }}
var sel_setFloat_forKey_ = CachedSelector.init("setFloat:forKey:");
      pub fn setFloatforKey(self: *Self, __value: f32, __defaultName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, f32,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFloat_forKey_.get(), __value, __defaultName, );
 }}
var sel_setDouble_forKey_ = CachedSelector.init("setDouble:forKey:");
      pub fn setDoubleforKey(self: *Self, __value: f64, __defaultName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, f64,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDouble_forKey_.get(), __value, __defaultName, );
 }}
var sel_setBool_forKey_ = CachedSelector.init("setBool:forKey:");
      pub fn setBoolforKey(self: *Self, __value: c_int, __defaultName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_int,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBool_forKey_.get(), __value, __defaultName, );
 }}
var sel_setURL_forKey_ = CachedSelector.init("setURL:forKey:");
      pub fn setURLforKey(self: *Self, __url:  ?* NSURL, __defaultName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setURL_forKey_.get(), __url, __defaultName, );
 }}
var sel_registerDefaults_ = CachedSelector.init("registerDefaults:");
      pub fn registerDefaults(self: *Self, __registrationDictionary:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerDefaults_.get(), __registrationDictionary, );
 }}
var sel_addSuiteNamed_ = CachedSelector.init("addSuiteNamed:");
      pub fn addSuiteNamed(self: *Self, __suiteName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addSuiteNamed_.get(), __suiteName, );
 }}
var sel_removeSuiteNamed_ = CachedSelector.init("removeSuiteNamed:");
      pub fn removeSuiteNamed(self: *Self, __suiteName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeSuiteNamed_.get(), __suiteName, );
 }}
var sel_dictionaryRepresentation = CachedSelector.init("dictionaryRepresentation");
      pub fn dictionaryRepresentation(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dictionaryRepresentation.get(), );
 }}
var sel_volatileDomainForName_ = CachedSelector.init("volatileDomainForName:");
      pub fn volatileDomainForName(self: *Self, __domainName:  * NSString, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_volatileDomainForName_.get(), __domainName, );
 }}
var sel_setVolatileDomain_forName_ = CachedSelector.init("setVolatileDomain:forName:");
      pub fn setVolatileDomainforName(self: *Self, __domain:  * NSDictionary, __domainName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVolatileDomain_forName_.get(), __domain, __domainName, );
 }}
var sel_removeVolatileDomainForName_ = CachedSelector.init("removeVolatileDomainForName:");
      pub fn removeVolatileDomainForName(self: *Self, __domainName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeVolatileDomainForName_.get(), __domainName, );
 }}
var sel_persistentDomainNames = CachedSelector.init("persistentDomainNames");
      pub fn persistentDomainNames(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_persistentDomainNames.get(), );
 }}
var sel_persistentDomainForName_ = CachedSelector.init("persistentDomainForName:");
      pub fn persistentDomainForName(self: *Self, __domainName:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_persistentDomainForName_.get(), __domainName, );
 }}
var sel_setPersistentDomain_forName_ = CachedSelector.init("setPersistentDomain:forName:");
      pub fn setPersistentDomainforName(self: *Self, __domain:  * NSDictionary, __domainName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPersistentDomain_forName_.get(), __domain, __domainName, );
 }}
var sel_removePersistentDomainForName_ = CachedSelector.init("removePersistentDomainForName:");
      pub fn removePersistentDomainForName(self: *Self, __domainName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removePersistentDomainForName_.get(), __domainName, );
 }}
var sel_synchronize = CachedSelector.init("synchronize");
      pub fn synchronize(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_synchronize.get(), );
 }}
var sel_objectIsForcedForKey_ = CachedSelector.init("objectIsForcedForKey:");
      pub fn objectIsForcedForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectIsForcedForKey_.get(), __key, );
 }}
var sel_objectIsForcedForKey_inDomain_ = CachedSelector.init("objectIsForcedForKey:inDomain:");
      pub fn objectIsForcedForKeyinDomain(self: *Self, __key:  * NSString, __domain:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectIsForcedForKey_inDomain_.get(), __key, __domain, );
 }}
var sel_standardUserDefaults = CachedSelector.init("standardUserDefaults");
      pub fn standardUserDefaults()  * NSUserDefaults {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUserDefaults, @ptrCast(&objc_msgSend))(class.get(), sel_standardUserDefaults.get(), );
 }}
var sel_volatileDomainNames = CachedSelector.init("volatileDomainNames");
      pub fn volatileDomainNames(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_volatileDomainNames.get(), );
 }}
  };
}

pub const NSUserDefaults = opaque {
  const Self = @This();
  pub usingnamespace NSUserDefaultsInterfaceMixin(Self, "NSUserDefaults");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserDefaults");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUserDefaults");
};

pub fn NSOrderedCollectionDifferenceInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithChanges_ = CachedSelector.init("initWithChanges:");
      pub fn initWithChanges(self: *Self, __changes:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithChanges_.get(), __changes, );
 }}
var sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_ = CachedSelector.init("initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:");
      pub fn initWithInsertIndexesinsertedObjectsremoveIndexesremovedObjectsadditionalChanges(self: *Self, __inserts:  * NSIndexSet, __insertedObjects:  ?* NSArray, __removes:  * NSIndexSet, __removedObjects:  ?* NSArray, __changes:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet,  ?* NSArray,  * NSIndexSet,  ?* NSArray,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_.get(), __inserts, __insertedObjects, __removes, __removedObjects, __changes, );
 }}
var sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_ = CachedSelector.init("initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:");
      pub fn initWithInsertIndexesinsertedObjectsremoveIndexesremovedObjects(self: *Self, __inserts:  * NSIndexSet, __insertedObjects:  ?* NSArray, __removes:  * NSIndexSet, __removedObjects:  ?* NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet,  ?* NSArray,  * NSIndexSet,  ?* NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_.get(), __inserts, __insertedObjects, __removes, __removedObjects, );
 }}
var sel_differenceByTransformingChangesWithBlock_ = CachedSelector.init("differenceByTransformingChangesWithBlock:");
      pub fn differenceByTransformingChangesWithBlock(self: *Self, __block: ?*u8, )  * NSOrderedCollectionDifference {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C)  * NSOrderedCollectionDifference, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_differenceByTransformingChangesWithBlock_.get(), __block, );
 }}
var sel_inverseDifference = CachedSelector.init("inverseDifference");
      pub fn inverseDifference(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_inverseDifference.get(), );
 }}
var sel_insertions = CachedSelector.init("insertions");
      pub fn insertions(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertions.get(), );
 }}
var sel_removals = CachedSelector.init("removals");
      pub fn removals(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removals.get(), );
 }}
var sel_hasChanges = CachedSelector.init("hasChanges");
      pub fn hasChanges(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasChanges.get(), );
 }}
  };
}

pub const NSOrderedCollectionDifference = opaque {
  const Self = @This();
  pub usingnamespace NSOrderedCollectionDifferenceInterfaceMixin(Self, "NSOrderedCollectionDifference");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSOrderedCollectionDifference");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSOrderedCollectionDifference");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSOrderedCollectionDifference");
};

pub fn NSDateInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithTimeIntervalSinceReferenceDate_ = CachedSelector.init("initWithTimeIntervalSinceReferenceDate:");
      pub fn initWithTimeIntervalSinceReferenceDate(self: *Self, __ti: f64, ) *Self {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTimeIntervalSinceReferenceDate_.get(), __ti, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_timeIntervalSinceReferenceDate = CachedSelector.init("timeIntervalSinceReferenceDate");
      pub fn timeIntervalSinceReferenceDate(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeIntervalSinceReferenceDate.get(), );
 }}
var sel_timeIntervalSinceDate_ = CachedSelector.init("timeIntervalSinceDate:");
      pub fn timeIntervalSinceDate(self: *Self, __anotherDate:  * NSDate, ) f64 {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeIntervalSinceDate_.get(), __anotherDate, );
 }}
var sel_addTimeInterval_ = CachedSelector.init("addTimeInterval:");
      pub fn addTimeInterval(self: *Self, __seconds: f64, ) id {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addTimeInterval_.get(), __seconds, );
 }}
var sel_dateByAddingTimeInterval_ = CachedSelector.init("dateByAddingTimeInterval:");
      pub fn dateByAddingTimeInterval(self: *Self, __ti: f64, ) *Self {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateByAddingTimeInterval_.get(), __ti, );
 }}
var sel_earlierDate_ = CachedSelector.init("earlierDate:");
      pub fn earlierDate(self: *Self, __anotherDate:  * NSDate, )  * NSDate {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_earlierDate_.get(), __anotherDate, );
 }}
var sel_laterDate_ = CachedSelector.init("laterDate:");
      pub fn laterDate(self: *Self, __anotherDate:  * NSDate, )  * NSDate {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_laterDate_.get(), __anotherDate, );
 }}
var sel_compare_ = CachedSelector.init("compare:");
      pub fn compare(self: *Self, __other:  * NSDate, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_.get(), __other, );
 }}
var sel_isEqualToDate_ = CachedSelector.init("isEqualToDate:");
      pub fn isEqualToDate(self: *Self, __otherDate:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToDate_.get(), __otherDate, );
 }}
var sel_descriptionWithLocale_ = CachedSelector.init("descriptionWithLocale:");
      pub fn descriptionWithLocale(self: *Self, __locale: id, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_.get(), __locale, );
 }}
var sel_timeIntervalSinceNow = CachedSelector.init("timeIntervalSinceNow");
      pub fn timeIntervalSinceNow(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeIntervalSinceNow.get(), );
 }}
var sel_timeIntervalSince1970 = CachedSelector.init("timeIntervalSince1970");
      pub fn timeIntervalSince1970(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeIntervalSince1970.get(), );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_date = CachedSelector.init("date");
      pub fn date() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_date.get(), );
 }}
var sel_dateWithTimeIntervalSinceNow_ = CachedSelector.init("dateWithTimeIntervalSinceNow:");
      pub fn dateWithTimeIntervalSinceNow(__secs: f64, ) *Self {{
           return @as(*const fn(Class, SEL, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithTimeIntervalSinceNow_.get(), __secs, );
 }}
var sel_dateWithTimeIntervalSinceReferenceDate_ = CachedSelector.init("dateWithTimeIntervalSinceReferenceDate:");
      pub fn dateWithTimeIntervalSinceReferenceDate(__ti: f64, ) *Self {{
           return @as(*const fn(Class, SEL, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithTimeIntervalSinceReferenceDate_.get(), __ti, );
 }}
var sel_dateWithTimeIntervalSince1970_ = CachedSelector.init("dateWithTimeIntervalSince1970:");
      pub fn dateWithTimeIntervalSince1970(__secs: f64, ) *Self {{
           return @as(*const fn(Class, SEL, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithTimeIntervalSince1970_.get(), __secs, );
 }}
var sel_dateWithTimeInterval_sinceDate_ = CachedSelector.init("dateWithTimeInterval:sinceDate:");
      pub fn dateWithTimeIntervalsinceDate(__secsToBeAdded: f64, __date:  * NSDate, ) *Self {{
           return @as(*const fn(Class, SEL, f64,  * NSDate, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithTimeInterval_sinceDate_.get(), __secsToBeAdded, __date, );
 }}
var sel_initWithTimeIntervalSinceNow_ = CachedSelector.init("initWithTimeIntervalSinceNow:");
      pub fn initWithTimeIntervalSinceNow(self: *Self, __secs: f64, ) *Self {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTimeIntervalSinceNow_.get(), __secs, );
 }}
var sel_initWithTimeIntervalSince1970_ = CachedSelector.init("initWithTimeIntervalSince1970:");
      pub fn initWithTimeIntervalSince1970(self: *Self, __secs: f64, ) *Self {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTimeIntervalSince1970_.get(), __secs, );
 }}
var sel_initWithTimeInterval_sinceDate_ = CachedSelector.init("initWithTimeInterval:sinceDate:");
      pub fn initWithTimeIntervalsinceDate(self: *Self, __secsToBeAdded: f64, __date:  * NSDate, ) *Self {{
           return @as(*const fn(*Self, SEL, f64,  * NSDate, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTimeInterval_sinceDate_.get(), __secsToBeAdded, __date, );
 }}
var sel_distantFuture = CachedSelector.init("distantFuture");
      pub fn distantFuture()  * NSDate {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(class.get(), sel_distantFuture.get(), );
 }}
var sel_distantPast = CachedSelector.init("distantPast");
      pub fn distantPast()  * NSDate {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(class.get(), sel_distantPast.get(), );
 }}
var sel_now = CachedSelector.init("now");
      pub fn now()  * NSDate {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(class.get(), sel_now.get(), );
 }}
var sel_dateWithNaturalLanguageString_locale_ = CachedSelector.init("dateWithNaturalLanguageString:locale:");
      pub fn dateWithNaturalLanguageStringlocale(__string:  * NSString, __locale: id, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithNaturalLanguageString_locale_.get(), __string, __locale, );
 }}
var sel_dateWithNaturalLanguageString_ = CachedSelector.init("dateWithNaturalLanguageString:");
      pub fn dateWithNaturalLanguageString(__string:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithNaturalLanguageString_.get(), __string, );
 }}
var sel_dateWithString_ = CachedSelector.init("dateWithString:");
      pub fn dateWithString(__aString:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithString_.get(), __aString, );
 }}
var sel_dateWithCalendarFormat_timeZone_ = CachedSelector.init("dateWithCalendarFormat:timeZone:");
      pub fn dateWithCalendarFormattimeZone(self: *Self, __format:  ?* NSString, __aTimeZone:  ?* NSTimeZone, )  * NSCalendarDate {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSTimeZone, ) callconv(.C)  * NSCalendarDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateWithCalendarFormat_timeZone_.get(), __format, __aTimeZone, );
 }}
var sel_descriptionWithCalendarFormat_timeZone_locale_ = CachedSelector.init("descriptionWithCalendarFormat:timeZone:locale:");
      pub fn descriptionWithCalendarFormattimeZonelocale(self: *Self, __format:  ?* NSString, __aTimeZone:  ?* NSTimeZone, __locale: id, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  ?* NSTimeZone, id, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithCalendarFormat_timeZone_locale_.get(), __format, __aTimeZone, __locale, );
 }}
var sel_initWithString_ = CachedSelector.init("initWithString:");
      pub fn initWithString(self: *Self, __description:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_.get(), __description, );
 }}
  };
}

pub const NSDate = opaque {
  const Self = @This();
  pub usingnamespace NSDateInterfaceMixin(Self, "NSDate");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSDate");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSDate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDate");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSDate");
};

pub fn NSScriptObjectSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectSpecifierWithDescriptor_ = CachedSelector.init("objectSpecifierWithDescriptor:");
      pub fn objectSpecifierWithDescriptor(__descriptor:  * NSAppleEventDescriptor, )  ?* NSScriptObjectSpecifier {{
           return @as(*const fn(Class, SEL,  * NSAppleEventDescriptor, ) callconv(.C)  ?* NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(class.get(), sel_objectSpecifierWithDescriptor_.get(), __descriptor, );
 }}
var sel_initWithContainerSpecifier_key_ = CachedSelector.init("initWithContainerSpecifier:key:");
      pub fn initWithContainerSpecifierkey(self: *Self, __container:  * NSScriptObjectSpecifier, __property:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptObjectSpecifier,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContainerSpecifier_key_.get(), __container, __property, );
 }}
var sel_initWithContainerClassDescription_containerSpecifier_key_ = CachedSelector.init("initWithContainerClassDescription:containerSpecifier:key:");
      pub fn initWithContainerClassDescriptioncontainerSpecifierkey(self: *Self, __classDesc:  * NSScriptClassDescription, __container:  ?* NSScriptObjectSpecifier, __property:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptClassDescription,  ?* NSScriptObjectSpecifier,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContainerClassDescription_containerSpecifier_key_.get(), __classDesc, __container, __property, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_indicesOfObjectsByEvaluatingWithContainer_count_ = CachedSelector.init("indicesOfObjectsByEvaluatingWithContainer:count:");
      pub fn indicesOfObjectsByEvaluatingWithContainercount(self: *Self, __container: id, __count:  [*c] c_long, )  [*c] c_long {{
           return @as(*const fn(*Self, SEL, id,  [*c] c_long, ) callconv(.C)  [*c] c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indicesOfObjectsByEvaluatingWithContainer_count_.get(), __container, __count, );
 }}
var sel_objectsByEvaluatingWithContainers_ = CachedSelector.init("objectsByEvaluatingWithContainers:");
      pub fn objectsByEvaluatingWithContainers(self: *Self, __containers: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectsByEvaluatingWithContainers_.get(), __containers, );
 }}
var sel_childSpecifier = CachedSelector.init("childSpecifier");
      pub fn childSpecifier(self: *Self, )  ?* NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_childSpecifier.get(), );
 }}
var sel_setChildSpecifier_ = CachedSelector.init("setChildSpecifier:");
      pub fn setChildSpecifier(self: *Self, __childSpecifier:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setChildSpecifier_.get(), __childSpecifier, );
 }}
var sel_containerSpecifier = CachedSelector.init("containerSpecifier");
      pub fn containerSpecifier(self: *Self, )  ?* NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containerSpecifier.get(), );
 }}
var sel_setContainerSpecifier_ = CachedSelector.init("setContainerSpecifier:");
      pub fn setContainerSpecifier(self: *Self, __containerSpecifier:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setContainerSpecifier_.get(), __containerSpecifier, );
 }}
var sel_containerIsObjectBeingTested = CachedSelector.init("containerIsObjectBeingTested");
      pub fn containerIsObjectBeingTested(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containerIsObjectBeingTested.get(), );
 }}
var sel_setContainerIsObjectBeingTested_ = CachedSelector.init("setContainerIsObjectBeingTested:");
      pub fn setContainerIsObjectBeingTested(self: *Self, __containerIsObjectBeingTested: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setContainerIsObjectBeingTested_.get(), __containerIsObjectBeingTested, );
 }}
var sel_containerIsRangeContainerObject = CachedSelector.init("containerIsRangeContainerObject");
      pub fn containerIsRangeContainerObject(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containerIsRangeContainerObject.get(), );
 }}
var sel_setContainerIsRangeContainerObject_ = CachedSelector.init("setContainerIsRangeContainerObject:");
      pub fn setContainerIsRangeContainerObject(self: *Self, __containerIsRangeContainerObject: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setContainerIsRangeContainerObject_.get(), __containerIsRangeContainerObject, );
 }}
var sel_key = CachedSelector.init("key");
      pub fn key(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_key.get(), );
 }}
var sel_setKey_ = CachedSelector.init("setKey:");
      pub fn setKey(self: *Self, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setKey_.get(), __key, );
 }}
var sel_containerClassDescription = CachedSelector.init("containerClassDescription");
      pub fn containerClassDescription(self: *Self, )  ?* NSScriptClassDescription {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptClassDescription, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containerClassDescription.get(), );
 }}
var sel_setContainerClassDescription_ = CachedSelector.init("setContainerClassDescription:");
      pub fn setContainerClassDescription(self: *Self, __containerClassDescription:  ?* NSScriptClassDescription, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptClassDescription, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setContainerClassDescription_.get(), __containerClassDescription, );
 }}
var sel_keyClassDescription = CachedSelector.init("keyClassDescription");
      pub fn keyClassDescription(self: *Self, )  ?* NSScriptClassDescription {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptClassDescription, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keyClassDescription.get(), );
 }}
var sel_objectsByEvaluatingSpecifier = CachedSelector.init("objectsByEvaluatingSpecifier");
      pub fn objectsByEvaluatingSpecifier(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectsByEvaluatingSpecifier.get(), );
 }}
var sel_evaluationErrorNumber = CachedSelector.init("evaluationErrorNumber");
      pub fn evaluationErrorNumber(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_evaluationErrorNumber.get(), );
 }}
var sel_setEvaluationErrorNumber_ = CachedSelector.init("setEvaluationErrorNumber:");
      pub fn setEvaluationErrorNumber(self: *Self, __evaluationErrorNumber: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEvaluationErrorNumber_.get(), __evaluationErrorNumber, );
 }}
var sel_evaluationErrorSpecifier = CachedSelector.init("evaluationErrorSpecifier");
      pub fn evaluationErrorSpecifier(self: *Self, )  ?* NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_evaluationErrorSpecifier.get(), );
 }}
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor(self: *Self, )  * NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptor.get(), );
 }}
  };
}

pub const NSScriptObjectSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSScriptObjectSpecifier");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSScriptObjectSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSScriptObjectSpecifier");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSScriptObjectSpecifier");
};

pub fn NSRelativeDateTimeFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_localizedStringFromDateComponents_ = CachedSelector.init("localizedStringFromDateComponents:");
      pub fn localizedStringFromDateComponents(self: *Self, __dateComponents:  * NSDateComponents, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSDateComponents, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringFromDateComponents_.get(), __dateComponents, );
 }}
var sel_localizedStringFromTimeInterval_ = CachedSelector.init("localizedStringFromTimeInterval:");
      pub fn localizedStringFromTimeInterval(self: *Self, __timeInterval: f64, )  * NSString {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringFromTimeInterval_.get(), __timeInterval, );
 }}
var sel_localizedStringForDate_relativeToDate_ = CachedSelector.init("localizedStringForDate:relativeToDate:");
      pub fn localizedStringForDaterelativeToDate(self: *Self, __date:  * NSDate, __referenceDate:  * NSDate, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDate, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedStringForDate_relativeToDate_.get(), __date, __referenceDate, );
 }}
var sel_stringForObjectValue_ = CachedSelector.init("stringForObjectValue:");
      pub fn stringForObjectValue(self: *Self, __obj: id, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringForObjectValue_.get(), __obj, );
 }}
var sel_dateTimeStyle = CachedSelector.init("dateTimeStyle");
      pub fn dateTimeStyle(self: *Self, ) NSRelativeDateTimeFormatterStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSRelativeDateTimeFormatterStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateTimeStyle.get(), );
 }}
var sel_setDateTimeStyle_ = CachedSelector.init("setDateTimeStyle:");
      pub fn setDateTimeStyle(self: *Self, __dateTimeStyle: NSRelativeDateTimeFormatterStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSRelativeDateTimeFormatterStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDateTimeStyle_.get(), __dateTimeStyle, );
 }}
var sel_unitsStyle = CachedSelector.init("unitsStyle");
      pub fn unitsStyle(self: *Self, ) NSRelativeDateTimeFormatterUnitsStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSRelativeDateTimeFormatterUnitsStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitsStyle.get(), );
 }}
var sel_setUnitsStyle_ = CachedSelector.init("setUnitsStyle:");
      pub fn setUnitsStyle(self: *Self, __unitsStyle: NSRelativeDateTimeFormatterUnitsStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSRelativeDateTimeFormatterUnitsStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUnitsStyle_.get(), __unitsStyle, );
 }}
var sel_formattingContext = CachedSelector.init("formattingContext");
      pub fn formattingContext(self: *Self, ) NSFormattingContext {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSFormattingContext, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formattingContext.get(), );
 }}
var sel_setFormattingContext_ = CachedSelector.init("setFormattingContext:");
      pub fn setFormattingContext(self: *Self, __formattingContext: NSFormattingContext, ) void {{
           return @as(*const fn(*Self, SEL, NSFormattingContext, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormattingContext_.get(), __formattingContext, );
 }}
var sel_calendar = CachedSelector.init("calendar");
      pub fn calendar(self: *Self, )  * NSCalendar {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSCalendar, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_calendar.get(), );
 }}
var sel_setCalendar_ = CachedSelector.init("setCalendar:");
      pub fn setCalendar(self: *Self, __calendar:  ?* NSCalendar, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSCalendar, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCalendar_.get(), __calendar, );
 }}
var sel_locale = CachedSelector.init("locale");
      pub fn locale(self: *Self, )  * NSLocale {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locale.get(), );
 }}
var sel_setLocale_ = CachedSelector.init("setLocale:");
      pub fn setLocale(self: *Self, __locale:  ?* NSLocale, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocale_.get(), __locale, );
 }}
  };
}

pub const NSRelativeDateTimeFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSRelativeDateTimeFormatterInterfaceMixin(Self, "NSRelativeDateTimeFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSRelativeDateTimeFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSRelativeDateTimeFormatter");
};

pub fn MTLAccelerationStructureGeometryDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_intersectionFunctionTableOffset = CachedSelector.init("intersectionFunctionTableOffset");
      pub fn intersectionFunctionTableOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectionFunctionTableOffset.get(), );
 }}
var sel_setIntersectionFunctionTableOffset_ = CachedSelector.init("setIntersectionFunctionTableOffset:");
      pub fn setIntersectionFunctionTableOffset(self: *Self, __intersectionFunctionTableOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIntersectionFunctionTableOffset_.get(), __intersectionFunctionTableOffset, );
 }}
var sel_opaque = CachedSelector.init("opaque");
      pub fn _opaque(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_opaque.get(), );
 }}
var sel_setOpaque_ = CachedSelector.init("setOpaque:");
      pub fn setOpaque(self: *Self, ___opaque: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOpaque_.get(), ___opaque, );
 }}
var sel_allowDuplicateIntersectionFunctionInvocation = CachedSelector.init("allowDuplicateIntersectionFunctionInvocation");
      pub fn allowDuplicateIntersectionFunctionInvocation(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowDuplicateIntersectionFunctionInvocation.get(), );
 }}
var sel_setAllowDuplicateIntersectionFunctionInvocation_ = CachedSelector.init("setAllowDuplicateIntersectionFunctionInvocation:");
      pub fn setAllowDuplicateIntersectionFunctionInvocation(self: *Self, __allowDuplicateIntersectionFunctionInvocation: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowDuplicateIntersectionFunctionInvocation_.get(), __allowDuplicateIntersectionFunctionInvocation, );
 }}
var sel_label = CachedSelector.init("label");
      pub fn label(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_label.get(), );
 }}
var sel_setLabel_ = CachedSelector.init("setLabel:");
      pub fn setLabel(self: *Self, __label:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLabel_.get(), __label, );
 }}
var sel_primitiveDataBuffer = CachedSelector.init("primitiveDataBuffer");
      pub fn primitiveDataBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_primitiveDataBuffer.get(), );
 }}
var sel_setPrimitiveDataBuffer_ = CachedSelector.init("setPrimitiveDataBuffer:");
      pub fn setPrimitiveDataBuffer(self: *Self, __primitiveDataBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPrimitiveDataBuffer_.get(), __primitiveDataBuffer, );
 }}
var sel_primitiveDataBufferOffset = CachedSelector.init("primitiveDataBufferOffset");
      pub fn primitiveDataBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_primitiveDataBufferOffset.get(), );
 }}
var sel_setPrimitiveDataBufferOffset_ = CachedSelector.init("setPrimitiveDataBufferOffset:");
      pub fn setPrimitiveDataBufferOffset(self: *Self, __primitiveDataBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPrimitiveDataBufferOffset_.get(), __primitiveDataBufferOffset, );
 }}
var sel_primitiveDataStride = CachedSelector.init("primitiveDataStride");
      pub fn primitiveDataStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_primitiveDataStride.get(), );
 }}
var sel_setPrimitiveDataStride_ = CachedSelector.init("setPrimitiveDataStride:");
      pub fn setPrimitiveDataStride(self: *Self, __primitiveDataStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPrimitiveDataStride_.get(), __primitiveDataStride, );
 }}
var sel_primitiveDataElementSize = CachedSelector.init("primitiveDataElementSize");
      pub fn primitiveDataElementSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_primitiveDataElementSize.get(), );
 }}
var sel_setPrimitiveDataElementSize_ = CachedSelector.init("setPrimitiveDataElementSize:");
      pub fn setPrimitiveDataElementSize(self: *Self, __primitiveDataElementSize: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPrimitiveDataElementSize_.get(), __primitiveDataElementSize, );
 }}
  };
}

pub const MTLAccelerationStructureGeometryDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureGeometryDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLAccelerationStructureGeometryDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructureGeometryDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLAccelerationStructureGeometryDescriptor");
};

pub fn NSURLSessionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sessionWithConfiguration_ = CachedSelector.init("sessionWithConfiguration:");
      pub fn sessionWithConfiguration(__configuration:  * NSURLSessionConfiguration, )  * NSURLSession {{
           return @as(*const fn(Class, SEL,  * NSURLSessionConfiguration, ) callconv(.C)  * NSURLSession, @ptrCast(&objc_msgSend))(class.get(), sel_sessionWithConfiguration_.get(), __configuration, );
 }}
var sel_sessionWithConfiguration_delegate_delegateQueue_ = CachedSelector.init("sessionWithConfiguration:delegate:delegateQueue:");
      pub fn sessionWithConfigurationdelegatedelegateQueue(__configuration:  * NSURLSessionConfiguration, __delegate:  ?* NSURLSessionDelegate, __queue:  ?* NSOperationQueue, )  * NSURLSession {{
           return @as(*const fn(Class, SEL,  * NSURLSessionConfiguration,  ?* NSURLSessionDelegate,  ?* NSOperationQueue, ) callconv(.C)  * NSURLSession, @ptrCast(&objc_msgSend))(class.get(), sel_sessionWithConfiguration_delegate_delegateQueue_.get(), __configuration, __delegate, __queue, );
 }}
var sel_finishTasksAndInvalidate = CachedSelector.init("finishTasksAndInvalidate");
      pub fn finishTasksAndInvalidate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_finishTasksAndInvalidate.get(), );
 }}
var sel_invalidateAndCancel = CachedSelector.init("invalidateAndCancel");
      pub fn invalidateAndCancel(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invalidateAndCancel.get(), );
 }}
var sel_resetWithCompletionHandler_ = CachedSelector.init("resetWithCompletionHandler:");
      pub fn resetWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resetWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_flushWithCompletionHandler_ = CachedSelector.init("flushWithCompletionHandler:");
      pub fn flushWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_flushWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_getTasksWithCompletionHandler_ = CachedSelector.init("getTasksWithCompletionHandler:");
      pub fn getTasksWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getTasksWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_getAllTasksWithCompletionHandler_ = CachedSelector.init("getAllTasksWithCompletionHandler:");
      pub fn getAllTasksWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getAllTasksWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_dataTaskWithRequest_ = CachedSelector.init("dataTaskWithRequest:");
      pub fn dataTaskWithRequest(self: *Self, __request:  * NSURLRequest, )  * NSURLSessionDataTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, ) callconv(.C)  * NSURLSessionDataTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataTaskWithRequest_.get(), __request, );
 }}
var sel_dataTaskWithURL_ = CachedSelector.init("dataTaskWithURL:");
      pub fn dataTaskWithURL(self: *Self, __url:  * NSURL, )  * NSURLSessionDataTask {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C)  * NSURLSessionDataTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataTaskWithURL_.get(), __url, );
 }}
var sel_uploadTaskWithRequest_fromFile_ = CachedSelector.init("uploadTaskWithRequest:fromFile:");
      pub fn uploadTaskWithRequestfromFile(self: *Self, __request:  * NSURLRequest, __fileURL:  * NSURL, )  * NSURLSessionUploadTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest,  * NSURL, ) callconv(.C)  * NSURLSessionUploadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uploadTaskWithRequest_fromFile_.get(), __request, __fileURL, );
 }}
var sel_uploadTaskWithRequest_fromData_ = CachedSelector.init("uploadTaskWithRequest:fromData:");
      pub fn uploadTaskWithRequestfromData(self: *Self, __request:  * NSURLRequest, __bodyData:  * NSData, )  * NSURLSessionUploadTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest,  * NSData, ) callconv(.C)  * NSURLSessionUploadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uploadTaskWithRequest_fromData_.get(), __request, __bodyData, );
 }}
var sel_uploadTaskWithResumeData_ = CachedSelector.init("uploadTaskWithResumeData:");
      pub fn uploadTaskWithResumeData(self: *Self, __resumeData:  * NSData, )  * NSURLSessionUploadTask {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C)  * NSURLSessionUploadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uploadTaskWithResumeData_.get(), __resumeData, );
 }}
var sel_uploadTaskWithStreamedRequest_ = CachedSelector.init("uploadTaskWithStreamedRequest:");
      pub fn uploadTaskWithStreamedRequest(self: *Self, __request:  * NSURLRequest, )  * NSURLSessionUploadTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, ) callconv(.C)  * NSURLSessionUploadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uploadTaskWithStreamedRequest_.get(), __request, );
 }}
var sel_downloadTaskWithRequest_ = CachedSelector.init("downloadTaskWithRequest:");
      pub fn downloadTaskWithRequest(self: *Self, __request:  * NSURLRequest, )  * NSURLSessionDownloadTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, ) callconv(.C)  * NSURLSessionDownloadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_downloadTaskWithRequest_.get(), __request, );
 }}
var sel_downloadTaskWithURL_ = CachedSelector.init("downloadTaskWithURL:");
      pub fn downloadTaskWithURL(self: *Self, __url:  * NSURL, )  * NSURLSessionDownloadTask {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C)  * NSURLSessionDownloadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_downloadTaskWithURL_.get(), __url, );
 }}
var sel_downloadTaskWithResumeData_ = CachedSelector.init("downloadTaskWithResumeData:");
      pub fn downloadTaskWithResumeData(self: *Self, __resumeData:  * NSData, )  * NSURLSessionDownloadTask {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C)  * NSURLSessionDownloadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_downloadTaskWithResumeData_.get(), __resumeData, );
 }}
var sel_streamTaskWithHostName_port_ = CachedSelector.init("streamTaskWithHostName:port:");
      pub fn streamTaskWithHostNameport(self: *Self, __hostname:  * NSString, __port: c_long, )  * NSURLSessionStreamTask {{
           return @as(*const fn(*Self, SEL,  * NSString, c_long, ) callconv(.C)  * NSURLSessionStreamTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_streamTaskWithHostName_port_.get(), __hostname, __port, );
 }}
var sel_streamTaskWithNetService_ = CachedSelector.init("streamTaskWithNetService:");
      pub fn streamTaskWithNetService(self: *Self, __service:  * NSNetService, )  * NSURLSessionStreamTask {{
           return @as(*const fn(*Self, SEL,  * NSNetService, ) callconv(.C)  * NSURLSessionStreamTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_streamTaskWithNetService_.get(), __service, );
 }}
var sel_webSocketTaskWithURL_ = CachedSelector.init("webSocketTaskWithURL:");
      pub fn webSocketTaskWithURL(self: *Self, __url:  * NSURL, )  * NSURLSessionWebSocketTask {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C)  * NSURLSessionWebSocketTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_webSocketTaskWithURL_.get(), __url, );
 }}
var sel_webSocketTaskWithURL_protocols_ = CachedSelector.init("webSocketTaskWithURL:protocols:");
      pub fn webSocketTaskWithURLprotocols(self: *Self, __url:  * NSURL, __protocols:  * NSArray, )  * NSURLSessionWebSocketTask {{
           return @as(*const fn(*Self, SEL,  * NSURL,  * NSArray, ) callconv(.C)  * NSURLSessionWebSocketTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_webSocketTaskWithURL_protocols_.get(), __url, __protocols, );
 }}
var sel_webSocketTaskWithRequest_ = CachedSelector.init("webSocketTaskWithRequest:");
      pub fn webSocketTaskWithRequest(self: *Self, __request:  * NSURLRequest, )  * NSURLSessionWebSocketTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, ) callconv(.C)  * NSURLSessionWebSocketTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_webSocketTaskWithRequest_.get(), __request, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_sharedSession = CachedSelector.init("sharedSession");
      pub fn sharedSession()  * NSURLSession {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSURLSession, @ptrCast(&objc_msgSend))(class.get(), sel_sharedSession.get(), );
 }}
var sel_delegateQueue = CachedSelector.init("delegateQueue");
      pub fn delegateQueue(self: *Self, )  * NSOperationQueue {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSOperationQueue, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegateQueue.get(), );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSURLSessionDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLSessionDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_configuration = CachedSelector.init("configuration");
      pub fn configuration(self: *Self, )  * NSURLSessionConfiguration {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURLSessionConfiguration, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_configuration.get(), );
 }}
var sel_sessionDescription = CachedSelector.init("sessionDescription");
      pub fn sessionDescription(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sessionDescription.get(), );
 }}
var sel_setSessionDescription_ = CachedSelector.init("setSessionDescription:");
      pub fn setSessionDescription(self: *Self, __sessionDescription:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSessionDescription_.get(), __sessionDescription, );
 }}
var sel_dataTaskWithRequest_completionHandler_ = CachedSelector.init("dataTaskWithRequest:completionHandler:");
      pub fn dataTaskWithRequestcompletionHandler(self: *Self, __request:  * NSURLRequest, __completionHandler: ?*u8, )  * NSURLSessionDataTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, ?*u8, ) callconv(.C)  * NSURLSessionDataTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataTaskWithRequest_completionHandler_.get(), __request, __completionHandler, );
 }}
var sel_dataTaskWithURL_completionHandler_ = CachedSelector.init("dataTaskWithURL:completionHandler:");
      pub fn dataTaskWithURLcompletionHandler(self: *Self, __url:  * NSURL, __completionHandler: ?*u8, )  * NSURLSessionDataTask {{
           return @as(*const fn(*Self, SEL,  * NSURL, ?*u8, ) callconv(.C)  * NSURLSessionDataTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataTaskWithURL_completionHandler_.get(), __url, __completionHandler, );
 }}
var sel_uploadTaskWithRequest_fromFile_completionHandler_ = CachedSelector.init("uploadTaskWithRequest:fromFile:completionHandler:");
      pub fn uploadTaskWithRequestfromFilecompletionHandler(self: *Self, __request:  * NSURLRequest, __fileURL:  * NSURL, __completionHandler: ?*u8, )  * NSURLSessionUploadTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest,  * NSURL, ?*u8, ) callconv(.C)  * NSURLSessionUploadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uploadTaskWithRequest_fromFile_completionHandler_.get(), __request, __fileURL, __completionHandler, );
 }}
var sel_uploadTaskWithRequest_fromData_completionHandler_ = CachedSelector.init("uploadTaskWithRequest:fromData:completionHandler:");
      pub fn uploadTaskWithRequestfromDatacompletionHandler(self: *Self, __request:  * NSURLRequest, __bodyData:  ?* NSData, __completionHandler: ?*u8, )  * NSURLSessionUploadTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest,  ?* NSData, ?*u8, ) callconv(.C)  * NSURLSessionUploadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uploadTaskWithRequest_fromData_completionHandler_.get(), __request, __bodyData, __completionHandler, );
 }}
var sel_uploadTaskWithResumeData_completionHandler_ = CachedSelector.init("uploadTaskWithResumeData:completionHandler:");
      pub fn uploadTaskWithResumeDatacompletionHandler(self: *Self, __resumeData:  * NSData, __completionHandler: ?*u8, )  * NSURLSessionUploadTask {{
           return @as(*const fn(*Self, SEL,  * NSData, ?*u8, ) callconv(.C)  * NSURLSessionUploadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_uploadTaskWithResumeData_completionHandler_.get(), __resumeData, __completionHandler, );
 }}
var sel_downloadTaskWithRequest_completionHandler_ = CachedSelector.init("downloadTaskWithRequest:completionHandler:");
      pub fn downloadTaskWithRequestcompletionHandler(self: *Self, __request:  * NSURLRequest, __completionHandler: ?*u8, )  * NSURLSessionDownloadTask {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, ?*u8, ) callconv(.C)  * NSURLSessionDownloadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_downloadTaskWithRequest_completionHandler_.get(), __request, __completionHandler, );
 }}
var sel_downloadTaskWithURL_completionHandler_ = CachedSelector.init("downloadTaskWithURL:completionHandler:");
      pub fn downloadTaskWithURLcompletionHandler(self: *Self, __url:  * NSURL, __completionHandler: ?*u8, )  * NSURLSessionDownloadTask {{
           return @as(*const fn(*Self, SEL,  * NSURL, ?*u8, ) callconv(.C)  * NSURLSessionDownloadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_downloadTaskWithURL_completionHandler_.get(), __url, __completionHandler, );
 }}
var sel_downloadTaskWithResumeData_completionHandler_ = CachedSelector.init("downloadTaskWithResumeData:completionHandler:");
      pub fn downloadTaskWithResumeDatacompletionHandler(self: *Self, __resumeData:  * NSData, __completionHandler: ?*u8, )  * NSURLSessionDownloadTask {{
           return @as(*const fn(*Self, SEL,  * NSData, ?*u8, ) callconv(.C)  * NSURLSessionDownloadTask, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_downloadTaskWithResumeData_completionHandler_.get(), __resumeData, __completionHandler, );
 }}
  };
}

pub const NSURLSession = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionInterfaceMixin(Self, "NSURLSession");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSession");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLSession");
};

pub fn NSMorphologyCustomPronounInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_isSupportedForLanguage_ = CachedSelector.init("isSupportedForLanguage:");
      pub fn isSupportedForLanguage(__language:  * NSString, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_isSupportedForLanguage_.get(), __language, );
 }}
var sel_requiredKeysForLanguage_ = CachedSelector.init("requiredKeysForLanguage:");
      pub fn requiredKeysForLanguage(__language:  * NSString, )  * NSArray {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_requiredKeysForLanguage_.get(), __language, );
 }}
var sel_subjectForm = CachedSelector.init("subjectForm");
      pub fn subjectForm(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_subjectForm.get(), );
 }}
var sel_setSubjectForm_ = CachedSelector.init("setSubjectForm:");
      pub fn setSubjectForm(self: *Self, __subjectForm:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSubjectForm_.get(), __subjectForm, );
 }}
var sel_objectForm = CachedSelector.init("objectForm");
      pub fn objectForm(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectForm.get(), );
 }}
var sel_setObjectForm_ = CachedSelector.init("setObjectForm:");
      pub fn setObjectForm(self: *Self, __objectForm:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObjectForm_.get(), __objectForm, );
 }}
var sel_possessiveForm = CachedSelector.init("possessiveForm");
      pub fn possessiveForm(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_possessiveForm.get(), );
 }}
var sel_setPossessiveForm_ = CachedSelector.init("setPossessiveForm:");
      pub fn setPossessiveForm(self: *Self, __possessiveForm:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPossessiveForm_.get(), __possessiveForm, );
 }}
var sel_possessiveAdjectiveForm = CachedSelector.init("possessiveAdjectiveForm");
      pub fn possessiveAdjectiveForm(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_possessiveAdjectiveForm.get(), );
 }}
var sel_setPossessiveAdjectiveForm_ = CachedSelector.init("setPossessiveAdjectiveForm:");
      pub fn setPossessiveAdjectiveForm(self: *Self, __possessiveAdjectiveForm:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPossessiveAdjectiveForm_.get(), __possessiveAdjectiveForm, );
 }}
var sel_reflexiveForm = CachedSelector.init("reflexiveForm");
      pub fn reflexiveForm(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reflexiveForm.get(), );
 }}
var sel_setReflexiveForm_ = CachedSelector.init("setReflexiveForm:");
      pub fn setReflexiveForm(self: *Self, __reflexiveForm:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReflexiveForm_.get(), __reflexiveForm, );
 }}
  };
}

pub const NSMorphologyCustomPronoun = opaque {
  const Self = @This();
  pub usingnamespace NSMorphologyCustomPronounInterfaceMixin(Self, "NSMorphologyCustomPronoun");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSMorphologyCustomPronoun");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSMorphologyCustomPronoun");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMorphologyCustomPronoun");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMorphologyCustomPronoun");
};

pub fn MTLResourceStatePassSampleBufferAttachmentDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __attachmentIndex: c_ulong, )  * MTLResourceStatePassSampleBufferAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLResourceStatePassSampleBufferAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __attachmentIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attachment:  ?* MTLResourceStatePassSampleBufferAttachmentDescriptor, __attachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLResourceStatePassSampleBufferAttachmentDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attachment, __attachmentIndex, );
 }}
  };
}

pub const MTLResourceStatePassSampleBufferAttachmentDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLResourceStatePassSampleBufferAttachmentDescriptorArrayInterfaceMixin(Self, "MTLResourceStatePassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLResourceStatePassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLResourceStatePassSampleBufferAttachmentDescriptorArray");
};

pub fn NSInvocationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_invocationWithMethodSignature_ = CachedSelector.init("invocationWithMethodSignature:");
      pub fn invocationWithMethodSignature(__sig:  * NSMethodSignature, )  * NSInvocation {{
           return @as(*const fn(Class, SEL,  * NSMethodSignature, ) callconv(.C)  * NSInvocation, @ptrCast(&objc_msgSend))(class.get(), sel_invocationWithMethodSignature_.get(), __sig, );
 }}
var sel_retainArguments = CachedSelector.init("retainArguments");
      pub fn retainArguments(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_retainArguments.get(), );
 }}
var sel_getReturnValue_ = CachedSelector.init("getReturnValue:");
      pub fn getReturnValue(self: *Self, __retLoc:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getReturnValue_.get(), __retLoc, );
 }}
var sel_setReturnValue_ = CachedSelector.init("setReturnValue:");
      pub fn setReturnValue(self: *Self, __retLoc:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReturnValue_.get(), __retLoc, );
 }}
var sel_getArgument_atIndex_ = CachedSelector.init("getArgument:atIndex:");
      pub fn getArgumentatIndex(self: *Self, __argumentLocation:  [*c] void, __idx: c_long, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getArgument_atIndex_.get(), __argumentLocation, __idx, );
 }}
var sel_setArgument_atIndex_ = CachedSelector.init("setArgument:atIndex:");
      pub fn setArgumentatIndex(self: *Self, __argumentLocation:  [*c] void, __idx: c_long, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] void, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArgument_atIndex_.get(), __argumentLocation, __idx, );
 }}
var sel_invoke = CachedSelector.init("invoke");
      pub fn invoke(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invoke.get(), );
 }}
var sel_invokeWithTarget_ = CachedSelector.init("invokeWithTarget:");
      pub fn invokeWithTarget(self: *Self, __target: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invokeWithTarget_.get(), __target, );
 }}
var sel_invokeUsingIMP_ = CachedSelector.init("invokeUsingIMP:");
      pub fn invokeUsingIMP(self: *Self, __imp:  [*c] ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invokeUsingIMP_.get(), __imp, );
 }}
var sel_methodSignature = CachedSelector.init("methodSignature");
      pub fn methodSignature(self: *Self, )  * NSMethodSignature {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSMethodSignature, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_methodSignature.get(), );
 }}
var sel_argumentsRetained = CachedSelector.init("argumentsRetained");
      pub fn argumentsRetained(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_argumentsRetained.get(), );
 }}
var sel_target = CachedSelector.init("target");
      pub fn target(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_target.get(), );
 }}
var sel_setTarget_ = CachedSelector.init("setTarget:");
      pub fn setTarget(self: *Self, __target: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTarget_.get(), __target, );
 }}
var sel_selector = CachedSelector.init("selector");
      pub fn selector(self: *Self, ) SEL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) SEL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_selector.get(), );
 }}
var sel_setSelector_ = CachedSelector.init("setSelector:");
      pub fn setSelector(self: *Self, __selector: SEL, ) void {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSelector_.get(), __selector, );
 }}
  };
}

pub const NSInvocation = opaque {
  const Self = @This();
  pub usingnamespace NSInvocationInterfaceMixin(Self, "NSInvocation");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSInvocation");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSInvocation");
};

pub fn NSMessagePortInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSMessagePort = opaque {
  const Self = @This();
  pub usingnamespace NSMessagePortInterfaceMixin(Self, "NSMessagePort");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMessagePort");
  pub usingnamespace NSPortInterfaceMixin(Self, "NSMessagePort");
};

pub fn NSPortNameServerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_systemDefaultPortNameServer = CachedSelector.init("systemDefaultPortNameServer");
      pub fn systemDefaultPortNameServer()  * NSPortNameServer {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSPortNameServer, @ptrCast(&objc_msgSend))(class.get(), sel_systemDefaultPortNameServer.get(), );
 }}
var sel_portForName_ = CachedSelector.init("portForName:");
      pub fn portForName(self: *Self, __name:  * NSString, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portForName_.get(), __name, );
 }}
var sel_portForName_host_ = CachedSelector.init("portForName:host:");
      pub fn portForNamehost(self: *Self, __name:  * NSString, __host:  ?* NSString, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portForName_host_.get(), __name, __host, );
 }}
var sel_registerPort_name_ = CachedSelector.init("registerPort:name:");
      pub fn registerPortname(self: *Self, __port:  * NSPort, __name:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSPort,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerPort_name_.get(), __port, __name, );
 }}
var sel_removePortForName_ = CachedSelector.init("removePortForName:");
      pub fn removePortForName(self: *Self, __name:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removePortForName_.get(), __name, );
 }}
  };
}

pub const NSPortNameServer = opaque {
  const Self = @This();
  pub usingnamespace NSPortNameServerInterfaceMixin(Self, "NSPortNameServer");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPortNameServer");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPortNameServer");
};

pub fn NSExistsCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSExistsCommand = opaque {
  const Self = @This();
  pub usingnamespace NSExistsCommandInterfaceMixin(Self, "NSExistsCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSExistsCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSExistsCommand");
};

pub fn NSUnitInformationStorageInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_bytes = CachedSelector.init("bytes");
      pub fn bytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_bytes.get(), );
 }}
var sel_bits = CachedSelector.init("bits");
      pub fn bits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_bits.get(), );
 }}
var sel_nibbles = CachedSelector.init("nibbles");
      pub fn nibbles()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_nibbles.get(), );
 }}
var sel_yottabytes = CachedSelector.init("yottabytes");
      pub fn yottabytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_yottabytes.get(), );
 }}
var sel_zettabytes = CachedSelector.init("zettabytes");
      pub fn zettabytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_zettabytes.get(), );
 }}
var sel_exabytes = CachedSelector.init("exabytes");
      pub fn exabytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_exabytes.get(), );
 }}
var sel_petabytes = CachedSelector.init("petabytes");
      pub fn petabytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_petabytes.get(), );
 }}
var sel_terabytes = CachedSelector.init("terabytes");
      pub fn terabytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_terabytes.get(), );
 }}
var sel_gigabytes = CachedSelector.init("gigabytes");
      pub fn gigabytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_gigabytes.get(), );
 }}
var sel_megabytes = CachedSelector.init("megabytes");
      pub fn megabytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_megabytes.get(), );
 }}
var sel_kilobytes = CachedSelector.init("kilobytes");
      pub fn kilobytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_kilobytes.get(), );
 }}
var sel_yottabits = CachedSelector.init("yottabits");
      pub fn yottabits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_yottabits.get(), );
 }}
var sel_zettabits = CachedSelector.init("zettabits");
      pub fn zettabits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_zettabits.get(), );
 }}
var sel_exabits = CachedSelector.init("exabits");
      pub fn exabits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_exabits.get(), );
 }}
var sel_petabits = CachedSelector.init("petabits");
      pub fn petabits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_petabits.get(), );
 }}
var sel_terabits = CachedSelector.init("terabits");
      pub fn terabits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_terabits.get(), );
 }}
var sel_gigabits = CachedSelector.init("gigabits");
      pub fn gigabits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_gigabits.get(), );
 }}
var sel_megabits = CachedSelector.init("megabits");
      pub fn megabits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_megabits.get(), );
 }}
var sel_kilobits = CachedSelector.init("kilobits");
      pub fn kilobits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_kilobits.get(), );
 }}
var sel_yobibytes = CachedSelector.init("yobibytes");
      pub fn yobibytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_yobibytes.get(), );
 }}
var sel_zebibytes = CachedSelector.init("zebibytes");
      pub fn zebibytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_zebibytes.get(), );
 }}
var sel_exbibytes = CachedSelector.init("exbibytes");
      pub fn exbibytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_exbibytes.get(), );
 }}
var sel_pebibytes = CachedSelector.init("pebibytes");
      pub fn pebibytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_pebibytes.get(), );
 }}
var sel_tebibytes = CachedSelector.init("tebibytes");
      pub fn tebibytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_tebibytes.get(), );
 }}
var sel_gibibytes = CachedSelector.init("gibibytes");
      pub fn gibibytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_gibibytes.get(), );
 }}
var sel_mebibytes = CachedSelector.init("mebibytes");
      pub fn mebibytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_mebibytes.get(), );
 }}
var sel_kibibytes = CachedSelector.init("kibibytes");
      pub fn kibibytes()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_kibibytes.get(), );
 }}
var sel_yobibits = CachedSelector.init("yobibits");
      pub fn yobibits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_yobibits.get(), );
 }}
var sel_zebibits = CachedSelector.init("zebibits");
      pub fn zebibits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_zebibits.get(), );
 }}
var sel_exbibits = CachedSelector.init("exbibits");
      pub fn exbibits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_exbibits.get(), );
 }}
var sel_pebibits = CachedSelector.init("pebibits");
      pub fn pebibits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_pebibits.get(), );
 }}
var sel_tebibits = CachedSelector.init("tebibits");
      pub fn tebibits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_tebibits.get(), );
 }}
var sel_gibibits = CachedSelector.init("gibibits");
      pub fn gibibits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_gibibits.get(), );
 }}
var sel_mebibits = CachedSelector.init("mebibits");
      pub fn mebibits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_mebibits.get(), );
 }}
var sel_kibibits = CachedSelector.init("kibibits");
      pub fn kibibits()  * NSUnitInformationStorage {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitInformationStorage, @ptrCast(&objc_msgSend))(class.get(), sel_kibibits.get(), );
 }}
  };
}

pub const NSUnitInformationStorage = opaque {
  const Self = @This();
  pub usingnamespace NSUnitInformationStorageInterfaceMixin(Self, "NSUnitInformationStorage");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitInformationStorage");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitInformationStorage");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitInformationStorage");
};

pub fn NSOutputStreamInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_write_maxLength_ = CachedSelector.init("write:maxLength:");
      pub fn writemaxLength(self: *Self, __buffer:  [*c] u8, __len: c_ulong, ) c_long {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_write_maxLength_.get(), __buffer, __len, );
 }}
var sel_initToMemory = CachedSelector.init("initToMemory");
      pub fn initToMemory(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initToMemory.get(), );
 }}
var sel_initToBuffer_capacity_ = CachedSelector.init("initToBuffer:capacity:");
      pub fn initToBuffercapacity(self: *Self, __buffer:  [*c] u8, __capacity: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initToBuffer_capacity_.get(), __buffer, __capacity, );
 }}
var sel_initWithURL_append_ = CachedSelector.init("initWithURL:append:");
      pub fn initWithURLappend(self: *Self, __url:  * NSURL, __shouldAppend: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_append_.get(), __url, __shouldAppend, );
 }}
var sel_hasSpaceAvailable = CachedSelector.init("hasSpaceAvailable");
      pub fn hasSpaceAvailable(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasSpaceAvailable.get(), );
 }}
var sel_initToFileAtPath_append_ = CachedSelector.init("initToFileAtPath:append:");
      pub fn initToFileAtPathappend(self: *Self, __path:  * NSString, __shouldAppend: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initToFileAtPath_append_.get(), __path, __shouldAppend, );
 }}
var sel_outputStreamToMemory = CachedSelector.init("outputStreamToMemory");
      pub fn outputStreamToMemory() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_outputStreamToMemory.get(), );
 }}
var sel_outputStreamToBuffer_capacity_ = CachedSelector.init("outputStreamToBuffer:capacity:");
      pub fn outputStreamToBuffercapacity(__buffer:  [*c] u8, __capacity: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL,  [*c] u8, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_outputStreamToBuffer_capacity_.get(), __buffer, __capacity, );
 }}
var sel_outputStreamToFileAtPath_append_ = CachedSelector.init("outputStreamToFileAtPath:append:");
      pub fn outputStreamToFileAtPathappend(__path:  * NSString, __shouldAppend: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_outputStreamToFileAtPath_append_.get(), __path, __shouldAppend, );
 }}
var sel_outputStreamWithURL_append_ = CachedSelector.init("outputStreamWithURL:append:");
      pub fn outputStreamWithURLappend(__url:  * NSURL, __shouldAppend: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_outputStreamWithURL_append_.get(), __url, __shouldAppend, );
 }}
  };
}

pub const NSOutputStream = opaque {
  const Self = @This();
  pub usingnamespace NSOutputStreamInterfaceMixin(Self, "NSOutputStream");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSOutputStream");
  pub usingnamespace NSStreamInterfaceMixin(Self, "NSOutputStream");
};

pub fn NSQuitCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_saveOptions = CachedSelector.init("saveOptions");
      pub fn saveOptions(self: *Self, ) NSSaveOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSSaveOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_saveOptions.get(), );
 }}
  };
}

pub const NSQuitCommand = opaque {
  const Self = @This();
  pub usingnamespace NSQuitCommandInterfaceMixin(Self, "NSQuitCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSQuitCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSQuitCommand");
};

pub fn MTLRenderPassSampleBufferAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sampleBuffer = CachedSelector.init("sampleBuffer");
      pub fn sampleBuffer(self: *Self, )  ?* MTLCounterSampleBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCounterSampleBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBuffer.get(), );
 }}
var sel_setSampleBuffer_ = CachedSelector.init("setSampleBuffer:");
      pub fn setSampleBuffer(self: *Self, __sampleBuffer:  ?* MTLCounterSampleBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLCounterSampleBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSampleBuffer_.get(), __sampleBuffer, );
 }}
var sel_startOfVertexSampleIndex = CachedSelector.init("startOfVertexSampleIndex");
      pub fn startOfVertexSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startOfVertexSampleIndex.get(), );
 }}
var sel_setStartOfVertexSampleIndex_ = CachedSelector.init("setStartOfVertexSampleIndex:");
      pub fn setStartOfVertexSampleIndex(self: *Self, __startOfVertexSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStartOfVertexSampleIndex_.get(), __startOfVertexSampleIndex, );
 }}
var sel_endOfVertexSampleIndex = CachedSelector.init("endOfVertexSampleIndex");
      pub fn endOfVertexSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endOfVertexSampleIndex.get(), );
 }}
var sel_setEndOfVertexSampleIndex_ = CachedSelector.init("setEndOfVertexSampleIndex:");
      pub fn setEndOfVertexSampleIndex(self: *Self, __endOfVertexSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEndOfVertexSampleIndex_.get(), __endOfVertexSampleIndex, );
 }}
var sel_startOfFragmentSampleIndex = CachedSelector.init("startOfFragmentSampleIndex");
      pub fn startOfFragmentSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startOfFragmentSampleIndex.get(), );
 }}
var sel_setStartOfFragmentSampleIndex_ = CachedSelector.init("setStartOfFragmentSampleIndex:");
      pub fn setStartOfFragmentSampleIndex(self: *Self, __startOfFragmentSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStartOfFragmentSampleIndex_.get(), __startOfFragmentSampleIndex, );
 }}
var sel_endOfFragmentSampleIndex = CachedSelector.init("endOfFragmentSampleIndex");
      pub fn endOfFragmentSampleIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endOfFragmentSampleIndex.get(), );
 }}
var sel_setEndOfFragmentSampleIndex_ = CachedSelector.init("setEndOfFragmentSampleIndex:");
      pub fn setEndOfFragmentSampleIndex(self: *Self, __endOfFragmentSampleIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEndOfFragmentSampleIndex_.get(), __endOfFragmentSampleIndex, );
 }}
  };
}

pub const MTLRenderPassSampleBufferAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPassSampleBufferAttachmentDescriptorInterfaceMixin(Self, "MTLRenderPassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLRenderPassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPassSampleBufferAttachmentDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPassSampleBufferAttachmentDescriptor");
};

pub fn MTLBinaryArchiveDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_url = CachedSelector.init("url");
      pub fn url(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_url.get(), );
 }}
var sel_setUrl_ = CachedSelector.init("setUrl:");
      pub fn setUrl(self: *Self, __url:  ?* NSURL, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUrl_.get(), __url, );
 }}
  };
}

pub const MTLBinaryArchiveDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLBinaryArchiveDescriptorInterfaceMixin(Self, "MTLBinaryArchiveDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLBinaryArchiveDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBinaryArchiveDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLBinaryArchiveDescriptor");
};

pub fn NSOperationQueueInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addOperation_ = CachedSelector.init("addOperation:");
      pub fn addOperation(self: *Self, __op:  * NSOperation, ) void {{
           return @as(*const fn(*Self, SEL,  * NSOperation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addOperation_.get(), __op, );
 }}
var sel_addOperations_waitUntilFinished_ = CachedSelector.init("addOperations:waitUntilFinished:");
      pub fn addOperationswaitUntilFinished(self: *Self, __ops:  * NSArray, __wait: c_int, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addOperations_waitUntilFinished_.get(), __ops, __wait, );
 }}
var sel_addOperationWithBlock_ = CachedSelector.init("addOperationWithBlock:");
      pub fn addOperationWithBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addOperationWithBlock_.get(), __block, );
 }}
var sel_addBarrierBlock_ = CachedSelector.init("addBarrierBlock:");
      pub fn addBarrierBlock(self: *Self, __barrier: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addBarrierBlock_.get(), __barrier, );
 }}
var sel_cancelAllOperations = CachedSelector.init("cancelAllOperations");
      pub fn cancelAllOperations(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancelAllOperations.get(), );
 }}
var sel_waitUntilAllOperationsAreFinished = CachedSelector.init("waitUntilAllOperationsAreFinished");
      pub fn waitUntilAllOperationsAreFinished(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitUntilAllOperationsAreFinished.get(), );
 }}
var sel_progress = CachedSelector.init("progress");
      pub fn progress(self: *Self, )  * NSProgress {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_progress.get(), );
 }}
var sel_maxConcurrentOperationCount = CachedSelector.init("maxConcurrentOperationCount");
      pub fn maxConcurrentOperationCount(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxConcurrentOperationCount.get(), );
 }}
var sel_setMaxConcurrentOperationCount_ = CachedSelector.init("setMaxConcurrentOperationCount:");
      pub fn setMaxConcurrentOperationCount(self: *Self, __maxConcurrentOperationCount: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxConcurrentOperationCount_.get(), __maxConcurrentOperationCount, );
 }}
var sel_isSuspended = CachedSelector.init("isSuspended");
      pub fn isSuspended(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSuspended.get(), );
 }}
var sel_setSuspended_ = CachedSelector.init("setSuspended:");
      pub fn setSuspended(self: *Self, __suspended: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSuspended_.get(), __suspended, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
var sel_qualityOfService = CachedSelector.init("qualityOfService");
      pub fn qualityOfService(self: *Self, ) NSQualityOfService {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSQualityOfService, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_qualityOfService.get(), );
 }}
var sel_setQualityOfService_ = CachedSelector.init("setQualityOfService:");
      pub fn setQualityOfService(self: *Self, __qualityOfService: NSQualityOfService, ) void {{
           return @as(*const fn(*Self, SEL, NSQualityOfService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQualityOfService_.get(), __qualityOfService, );
 }}
var sel_underlyingQueue = CachedSelector.init("underlyingQueue");
      pub fn underlyingQueue(self: *Self, )  ?* NSObject {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSObject, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_underlyingQueue.get(), );
 }}
var sel_setUnderlyingQueue_ = CachedSelector.init("setUnderlyingQueue:");
      pub fn setUnderlyingQueue(self: *Self, __underlyingQueue:  ?* NSObject, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSObject, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUnderlyingQueue_.get(), __underlyingQueue, );
 }}
var sel_currentQueue = CachedSelector.init("currentQueue");
      pub fn currentQueue()  ?* NSOperationQueue {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  ?* NSOperationQueue, @ptrCast(&objc_msgSend))(class.get(), sel_currentQueue.get(), );
 }}
var sel_mainQueue = CachedSelector.init("mainQueue");
      pub fn mainQueue()  * NSOperationQueue {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSOperationQueue, @ptrCast(&objc_msgSend))(class.get(), sel_mainQueue.get(), );
 }}
var sel_operations = CachedSelector.init("operations");
      pub fn operations(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_operations.get(), );
 }}
var sel_operationCount = CachedSelector.init("operationCount");
      pub fn operationCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_operationCount.get(), );
 }}
  };
}

pub const NSOperationQueue = opaque {
  const Self = @This();
  pub usingnamespace NSOperationQueueInterfaceMixin(Self, "NSOperationQueue");
  pub usingnamespace NSProgressReportingProtocolMixin(Self, "NSOperationQueue");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSOperationQueue");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSOperationQueue");
};

pub fn NSMetadataItemInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithURL_ = CachedSelector.init("initWithURL:");
      pub fn initWithURL(self: *Self, __url:  * NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_.get(), __url, );
 }}
var sel_valueForAttribute_ = CachedSelector.init("valueForAttribute:");
      pub fn valueForAttribute(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForAttribute_.get(), __key, );
 }}
var sel_valuesForAttributes_ = CachedSelector.init("valuesForAttributes:");
      pub fn valuesForAttributes(self: *Self, __keys:  * NSArray, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valuesForAttributes_.get(), __keys, );
 }}
var sel_attributes = CachedSelector.init("attributes");
      pub fn attributes(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributes.get(), );
 }}
  };
}

pub const NSMetadataItem = opaque {
  const Self = @This();
  pub usingnamespace NSMetadataItemInterfaceMixin(Self, "NSMetadataItem");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMetadataItem");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMetadataItem");
};

pub fn NSXMLDocumentInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithXMLString_options_error_ = CachedSelector.init("initWithXMLString:options:error:");
      pub fn initWithXMLStringoptionserror(self: *Self, __string:  * NSString, __mask: NSXMLNodeOptions, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, NSXMLNodeOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithXMLString_options_error_.get(), __string, __mask, __an_error, );
 }}
var sel_initWithContentsOfURL_options_error_ = CachedSelector.init("initWithContentsOfURL:options:error:");
      pub fn initWithContentsOfURLoptionserror(self: *Self, __url:  * NSURL, __mask: NSXMLNodeOptions, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSXMLNodeOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_options_error_.get(), __url, __mask, __an_error, );
 }}
var sel_initWithData_options_error_ = CachedSelector.init("initWithData:options:error:");
      pub fn initWithDataoptionserror(self: *Self, __data:  * NSData, __mask: NSXMLNodeOptions, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, NSXMLNodeOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithData_options_error_.get(), __data, __mask, __an_error, );
 }}
var sel_initWithRootElement_ = CachedSelector.init("initWithRootElement:");
      pub fn initWithRootElement(self: *Self, __element:  ?* NSXMLElement, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSXMLElement, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithRootElement_.get(), __element, );
 }}
var sel_replacementClassForClass_ = CachedSelector.init("replacementClassForClass:");
      pub fn replacementClassForClass(__cls: Class, ) Class {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(class.get(), sel_replacementClassForClass_.get(), __cls, );
 }}
var sel_setRootElement_ = CachedSelector.init("setRootElement:");
      pub fn setRootElement(self: *Self, __root:  * NSXMLElement, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLElement, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRootElement_.get(), __root, );
 }}
var sel_rootElement = CachedSelector.init("rootElement");
      pub fn rootElement(self: *Self, )  ?* NSXMLElement {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXMLElement, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rootElement.get(), );
 }}
var sel_insertChild_atIndex_ = CachedSelector.init("insertChild:atIndex:");
      pub fn insertChildatIndex(self: *Self, __child:  * NSXMLNode, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLNode, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertChild_atIndex_.get(), __child, __index, );
 }}
var sel_insertChildren_atIndex_ = CachedSelector.init("insertChildren:atIndex:");
      pub fn insertChildrenatIndex(self: *Self, __children:  * NSArray, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertChildren_atIndex_.get(), __children, __index, );
 }}
var sel_removeChildAtIndex_ = CachedSelector.init("removeChildAtIndex:");
      pub fn removeChildAtIndex(self: *Self, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeChildAtIndex_.get(), __index, );
 }}
var sel_setChildren_ = CachedSelector.init("setChildren:");
      pub fn setChildren(self: *Self, __children:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setChildren_.get(), __children, );
 }}
var sel_addChild_ = CachedSelector.init("addChild:");
      pub fn addChild(self: *Self, __child:  * NSXMLNode, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLNode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addChild_.get(), __child, );
 }}
var sel_replaceChildAtIndex_withNode_ = CachedSelector.init("replaceChildAtIndex:withNode:");
      pub fn replaceChildAtIndexwithNode(self: *Self, __index: c_ulong, __node:  * NSXMLNode, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong,  * NSXMLNode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceChildAtIndex_withNode_.get(), __index, __node, );
 }}
var sel_XMLDataWithOptions_ = CachedSelector.init("XMLDataWithOptions:");
      pub fn XMLDataWithOptions(self: *Self, __options: NSXMLNodeOptions, )  * NSData {{
           return @as(*const fn(*Self, SEL, NSXMLNodeOptions, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_XMLDataWithOptions_.get(), __options, );
 }}
var sel_objectByApplyingXSLT_arguments_error_ = CachedSelector.init("objectByApplyingXSLT:arguments:error:");
      pub fn objectByApplyingXSLTargumentserror(self: *Self, __xslt:  * NSData, __arguments:  ?* NSDictionary, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(*Self, SEL,  * NSData,  ?* NSDictionary,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectByApplyingXSLT_arguments_error_.get(), __xslt, __arguments, __an_error, );
 }}
var sel_objectByApplyingXSLTString_arguments_error_ = CachedSelector.init("objectByApplyingXSLTString:arguments:error:");
      pub fn objectByApplyingXSLTStringargumentserror(self: *Self, __xslt:  * NSString, __arguments:  ?* NSDictionary, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSDictionary,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectByApplyingXSLTString_arguments_error_.get(), __xslt, __arguments, __an_error, );
 }}
var sel_objectByApplyingXSLTAtURL_arguments_error_ = CachedSelector.init("objectByApplyingXSLTAtURL:arguments:error:");
      pub fn objectByApplyingXSLTAtURLargumentserror(self: *Self, __xsltURL:  * NSURL, __argument:  ?* NSDictionary, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(*Self, SEL,  * NSURL,  ?* NSDictionary,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectByApplyingXSLTAtURL_arguments_error_.get(), __xsltURL, __argument, __an_error, );
 }}
var sel_validateAndReturnError_ = CachedSelector.init("validateAndReturnError:");
      pub fn validateAndReturnError(self: *Self, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_validateAndReturnError_.get(), __an_error, );
 }}
var sel_characterEncoding = CachedSelector.init("characterEncoding");
      pub fn characterEncoding(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_characterEncoding.get(), );
 }}
var sel_setCharacterEncoding_ = CachedSelector.init("setCharacterEncoding:");
      pub fn setCharacterEncoding(self: *Self, __characterEncoding:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCharacterEncoding_.get(), __characterEncoding, );
 }}
var sel_version = CachedSelector.init("version");
      pub fn version(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_version.get(), );
 }}
var sel_setVersion_ = CachedSelector.init("setVersion:");
      pub fn setVersion(self: *Self, __version:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVersion_.get(), __version, );
 }}
var sel_isStandalone = CachedSelector.init("isStandalone");
      pub fn isStandalone(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isStandalone.get(), );
 }}
var sel_setStandalone_ = CachedSelector.init("setStandalone:");
      pub fn setStandalone(self: *Self, __standalone: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStandalone_.get(), __standalone, );
 }}
var sel_documentContentKind = CachedSelector.init("documentContentKind");
      pub fn documentContentKind(self: *Self, ) NSXMLDocumentContentKind {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSXMLDocumentContentKind, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_documentContentKind.get(), );
 }}
var sel_setDocumentContentKind_ = CachedSelector.init("setDocumentContentKind:");
      pub fn setDocumentContentKind(self: *Self, __documentContentKind: NSXMLDocumentContentKind, ) void {{
           return @as(*const fn(*Self, SEL, NSXMLDocumentContentKind, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDocumentContentKind_.get(), __documentContentKind, );
 }}
var sel_MIMEType = CachedSelector.init("MIMEType");
      pub fn MIMEType(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_MIMEType.get(), );
 }}
var sel_setMIMEType_ = CachedSelector.init("setMIMEType:");
      pub fn setMIMEType(self: *Self, __MIMEType:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMIMEType_.get(), __MIMEType, );
 }}
var sel_DTD = CachedSelector.init("DTD");
      pub fn DTD(self: *Self, )  ?* NSXMLDTD {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXMLDTD, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_DTD.get(), );
 }}
var sel_setDTD_ = CachedSelector.init("setDTD:");
      pub fn setDTD(self: *Self, __DTD:  ?* NSXMLDTD, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSXMLDTD, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDTD_.get(), __DTD, );
 }}
var sel_XMLData = CachedSelector.init("XMLData");
      pub fn XMLData(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_XMLData.get(), );
 }}
  };
}

pub const NSXMLDocument = opaque {
  const Self = @This();
  pub usingnamespace NSXMLDocumentInterfaceMixin(Self, "NSXMLDocument");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXMLDocument");
  pub usingnamespace NSXMLNodeInterfaceMixin(Self, "NSXMLDocument");
};

pub fn NSMorphologyInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_grammaticalGender = CachedSelector.init("grammaticalGender");
      pub fn grammaticalGender(self: *Self, ) NSGrammaticalGender {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSGrammaticalGender, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_grammaticalGender.get(), );
 }}
var sel_setGrammaticalGender_ = CachedSelector.init("setGrammaticalGender:");
      pub fn setGrammaticalGender(self: *Self, __grammaticalGender: NSGrammaticalGender, ) void {{
           return @as(*const fn(*Self, SEL, NSGrammaticalGender, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGrammaticalGender_.get(), __grammaticalGender, );
 }}
var sel_partOfSpeech = CachedSelector.init("partOfSpeech");
      pub fn partOfSpeech(self: *Self, ) NSGrammaticalPartOfSpeech {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSGrammaticalPartOfSpeech, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_partOfSpeech.get(), );
 }}
var sel_setPartOfSpeech_ = CachedSelector.init("setPartOfSpeech:");
      pub fn setPartOfSpeech(self: *Self, __partOfSpeech: NSGrammaticalPartOfSpeech, ) void {{
           return @as(*const fn(*Self, SEL, NSGrammaticalPartOfSpeech, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPartOfSpeech_.get(), __partOfSpeech, );
 }}
var sel_number = CachedSelector.init("number");
      pub fn number(self: *Self, ) NSGrammaticalNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSGrammaticalNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_number.get(), );
 }}
var sel_setNumber_ = CachedSelector.init("setNumber:");
      pub fn setNumber(self: *Self, __number: NSGrammaticalNumber, ) void {{
           return @as(*const fn(*Self, SEL, NSGrammaticalNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNumber_.get(), __number, );
 }}
var sel_grammaticalCase = CachedSelector.init("grammaticalCase");
      pub fn grammaticalCase(self: *Self, ) NSGrammaticalCase {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSGrammaticalCase, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_grammaticalCase.get(), );
 }}
var sel_setGrammaticalCase_ = CachedSelector.init("setGrammaticalCase:");
      pub fn setGrammaticalCase(self: *Self, __grammaticalCase: NSGrammaticalCase, ) void {{
           return @as(*const fn(*Self, SEL, NSGrammaticalCase, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGrammaticalCase_.get(), __grammaticalCase, );
 }}
var sel_determination = CachedSelector.init("determination");
      pub fn determination(self: *Self, ) NSGrammaticalDetermination {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSGrammaticalDetermination, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_determination.get(), );
 }}
var sel_setDetermination_ = CachedSelector.init("setDetermination:");
      pub fn setDetermination(self: *Self, __determination: NSGrammaticalDetermination, ) void {{
           return @as(*const fn(*Self, SEL, NSGrammaticalDetermination, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDetermination_.get(), __determination, );
 }}
var sel_grammaticalPerson = CachedSelector.init("grammaticalPerson");
      pub fn grammaticalPerson(self: *Self, ) NSGrammaticalPerson {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSGrammaticalPerson, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_grammaticalPerson.get(), );
 }}
var sel_setGrammaticalPerson_ = CachedSelector.init("setGrammaticalPerson:");
      pub fn setGrammaticalPerson(self: *Self, __grammaticalPerson: NSGrammaticalPerson, ) void {{
           return @as(*const fn(*Self, SEL, NSGrammaticalPerson, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGrammaticalPerson_.get(), __grammaticalPerson, );
 }}
var sel_pronounType = CachedSelector.init("pronounType");
      pub fn pronounType(self: *Self, ) NSGrammaticalPronounType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSGrammaticalPronounType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pronounType.get(), );
 }}
var sel_setPronounType_ = CachedSelector.init("setPronounType:");
      pub fn setPronounType(self: *Self, __pronounType: NSGrammaticalPronounType, ) void {{
           return @as(*const fn(*Self, SEL, NSGrammaticalPronounType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPronounType_.get(), __pronounType, );
 }}
var sel_definiteness = CachedSelector.init("definiteness");
      pub fn definiteness(self: *Self, ) NSGrammaticalDefiniteness {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSGrammaticalDefiniteness, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_definiteness.get(), );
 }}
var sel_setDefiniteness_ = CachedSelector.init("setDefiniteness:");
      pub fn setDefiniteness(self: *Self, __definiteness: NSGrammaticalDefiniteness, ) void {{
           return @as(*const fn(*Self, SEL, NSGrammaticalDefiniteness, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDefiniteness_.get(), __definiteness, );
 }}
var sel_customPronounForLanguage_ = CachedSelector.init("customPronounForLanguage:");
      pub fn customPronounForLanguage(self: *Self, __language:  * NSString, )  ?* NSMorphologyCustomPronoun {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSMorphologyCustomPronoun, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_customPronounForLanguage_.get(), __language, );
 }}
var sel_setCustomPronoun_forLanguage_error_ = CachedSelector.init("setCustomPronoun:forLanguage:error:");
      pub fn setCustomPronounforLanguageerror(self: *Self, __features:  ?* NSMorphologyCustomPronoun, __language:  * NSString, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* NSMorphologyCustomPronoun,  * NSString,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCustomPronoun_forLanguage_error_.get(), __features, __language, __an_error, );
 }}
var sel_isUnspecified = CachedSelector.init("isUnspecified");
      pub fn isUnspecified(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isUnspecified.get(), );
 }}
var sel_userMorphology = CachedSelector.init("userMorphology");
      pub fn userMorphology()  * NSMorphology {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSMorphology, @ptrCast(&objc_msgSend))(class.get(), sel_userMorphology.get(), );
 }}
  };
}

pub const NSMorphology = opaque {
  const Self = @This();
  pub usingnamespace NSMorphologyInterfaceMixin(Self, "NSMorphology");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSMorphology");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSMorphology");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMorphology");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSMorphology");
};

pub fn MTLFunctionConstantInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
var sel_index = CachedSelector.init("index");
      pub fn index(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_index.get(), );
 }}
var sel_required = CachedSelector.init("required");
      pub fn required(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_required.get(), );
 }}
  };
}

pub const MTLFunctionConstant = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionConstantInterfaceMixin(Self, "MTLFunctionConstant");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionConstant");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLFunctionConstant");
};

pub fn NSXPCConnectionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithServiceName_ = CachedSelector.init("initWithServiceName:");
      pub fn initWithServiceName(self: *Self, __serviceName:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithServiceName_.get(), __serviceName, );
 }}
var sel_initWithMachServiceName_options_ = CachedSelector.init("initWithMachServiceName:options:");
      pub fn initWithMachServiceNameoptions(self: *Self, __name:  * NSString, __options: NSXPCConnectionOptions, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, NSXPCConnectionOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMachServiceName_options_.get(), __name, __options, );
 }}
var sel_initWithListenerEndpoint_ = CachedSelector.init("initWithListenerEndpoint:");
      pub fn initWithListenerEndpoint(self: *Self, __endpoint:  * NSXPCListenerEndpoint, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSXPCListenerEndpoint, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithListenerEndpoint_.get(), __endpoint, );
 }}
var sel_remoteObjectProxyWithErrorHandler_ = CachedSelector.init("remoteObjectProxyWithErrorHandler:");
      pub fn remoteObjectProxyWithErrorHandler(self: *Self, __handler: ?*u8, ) id {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remoteObjectProxyWithErrorHandler_.get(), __handler, );
 }}
var sel_synchronousRemoteObjectProxyWithErrorHandler_ = CachedSelector.init("synchronousRemoteObjectProxyWithErrorHandler:");
      pub fn synchronousRemoteObjectProxyWithErrorHandler(self: *Self, __handler: ?*u8, ) id {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_synchronousRemoteObjectProxyWithErrorHandler_.get(), __handler, );
 }}
var sel_resume = CachedSelector.init("resume");
      pub fn _resume(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resume.get(), );
 }}
var sel_suspend = CachedSelector.init("suspend");
      pub fn _suspend(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suspend.get(), );
 }}
var sel_activate = CachedSelector.init("activate");
      pub fn activate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_activate.get(), );
 }}
var sel_invalidate = CachedSelector.init("invalidate");
      pub fn invalidate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invalidate.get(), );
 }}
var sel_currentConnection = CachedSelector.init("currentConnection");
      pub fn currentConnection()  ?* NSXPCConnection {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  ?* NSXPCConnection, @ptrCast(&objc_msgSend))(class.get(), sel_currentConnection.get(), );
 }}
var sel_scheduleSendBarrierBlock_ = CachedSelector.init("scheduleSendBarrierBlock:");
      pub fn scheduleSendBarrierBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduleSendBarrierBlock_.get(), __block, );
 }}
var sel_setCodeSigningRequirement_ = CachedSelector.init("setCodeSigningRequirement:");
      pub fn setCodeSigningRequirement(self: *Self, __requirement:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCodeSigningRequirement_.get(), __requirement, );
 }}
var sel_serviceName = CachedSelector.init("serviceName");
      pub fn serviceName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_serviceName.get(), );
 }}
var sel_endpoint = CachedSelector.init("endpoint");
      pub fn endpoint(self: *Self, )  * NSXPCListenerEndpoint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSXPCListenerEndpoint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endpoint.get(), );
 }}
var sel_exportedInterface = CachedSelector.init("exportedInterface");
      pub fn exportedInterface(self: *Self, )  ?* NSXPCInterface {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXPCInterface, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_exportedInterface.get(), );
 }}
var sel_setExportedInterface_ = CachedSelector.init("setExportedInterface:");
      pub fn setExportedInterface(self: *Self, __exportedInterface:  ?* NSXPCInterface, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSXPCInterface, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setExportedInterface_.get(), __exportedInterface, );
 }}
var sel_exportedObject = CachedSelector.init("exportedObject");
      pub fn exportedObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_exportedObject.get(), );
 }}
var sel_setExportedObject_ = CachedSelector.init("setExportedObject:");
      pub fn setExportedObject(self: *Self, __exportedObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setExportedObject_.get(), __exportedObject, );
 }}
var sel_remoteObjectInterface = CachedSelector.init("remoteObjectInterface");
      pub fn remoteObjectInterface(self: *Self, )  ?* NSXPCInterface {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXPCInterface, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remoteObjectInterface.get(), );
 }}
var sel_setRemoteObjectInterface_ = CachedSelector.init("setRemoteObjectInterface:");
      pub fn setRemoteObjectInterface(self: *Self, __remoteObjectInterface:  ?* NSXPCInterface, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSXPCInterface, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRemoteObjectInterface_.get(), __remoteObjectInterface, );
 }}
var sel_remoteObjectProxy = CachedSelector.init("remoteObjectProxy");
      pub fn remoteObjectProxy(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remoteObjectProxy.get(), );
 }}
var sel_interruptionHandler = CachedSelector.init("interruptionHandler");
      pub fn interruptionHandler(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_interruptionHandler.get(), );
 }}
var sel_setInterruptionHandler_ = CachedSelector.init("setInterruptionHandler:");
      pub fn setInterruptionHandler(self: *Self, __interruptionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInterruptionHandler_.get(), __interruptionHandler, );
 }}
var sel_invalidationHandler = CachedSelector.init("invalidationHandler");
      pub fn invalidationHandler(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invalidationHandler.get(), );
 }}
var sel_setInvalidationHandler_ = CachedSelector.init("setInvalidationHandler:");
      pub fn setInvalidationHandler(self: *Self, __invalidationHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInvalidationHandler_.get(), __invalidationHandler, );
 }}
var sel_auditSessionIdentifier = CachedSelector.init("auditSessionIdentifier");
      pub fn auditSessionIdentifier(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_auditSessionIdentifier.get(), );
 }}
var sel_processIdentifier = CachedSelector.init("processIdentifier");
      pub fn processIdentifier(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_processIdentifier.get(), );
 }}
var sel_effectiveUserIdentifier = CachedSelector.init("effectiveUserIdentifier");
      pub fn effectiveUserIdentifier(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_effectiveUserIdentifier.get(), );
 }}
var sel_effectiveGroupIdentifier = CachedSelector.init("effectiveGroupIdentifier");
      pub fn effectiveGroupIdentifier(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_effectiveGroupIdentifier.get(), );
 }}
  };
}

pub const NSXPCConnection = opaque {
  const Self = @This();
  pub usingnamespace NSXPCConnectionInterfaceMixin(Self, "NSXPCConnection");
  pub usingnamespace NSXPCProxyCreatingProtocolMixin(Self, "NSXPCConnection");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXPCConnection");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSXPCConnection");
};

pub fn NSRangeSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier_ = CachedSelector.init("initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:");
      pub fn initWithContainerClassDescriptioncontainerSpecifierkeystartSpecifierendSpecifier(self: *Self, __classDesc:  * NSScriptClassDescription, __container:  ?* NSScriptObjectSpecifier, __property:  * NSString, __startSpec:  ?* NSScriptObjectSpecifier, __endSpec:  ?* NSScriptObjectSpecifier, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptClassDescription,  ?* NSScriptObjectSpecifier,  * NSString,  ?* NSScriptObjectSpecifier,  ?* NSScriptObjectSpecifier, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier_.get(), __classDesc, __container, __property, __startSpec, __endSpec, );
 }}
var sel_startSpecifier = CachedSelector.init("startSpecifier");
      pub fn startSpecifier(self: *Self, )  ?* NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startSpecifier.get(), );
 }}
var sel_setStartSpecifier_ = CachedSelector.init("setStartSpecifier:");
      pub fn setStartSpecifier(self: *Self, __startSpecifier:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStartSpecifier_.get(), __startSpecifier, );
 }}
var sel_endSpecifier = CachedSelector.init("endSpecifier");
      pub fn endSpecifier(self: *Self, )  ?* NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endSpecifier.get(), );
 }}
var sel_setEndSpecifier_ = CachedSelector.init("setEndSpecifier:");
      pub fn setEndSpecifier(self: *Self, __endSpecifier:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEndSpecifier_.get(), __endSpecifier, );
 }}
  };
}

pub const NSRangeSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSRangeSpecifierInterfaceMixin(Self, "NSRangeSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSRangeSpecifier");
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSRangeSpecifier");
};

pub fn MTLIntersectionFunctionDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const MTLIntersectionFunctionDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLIntersectionFunctionDescriptorInterfaceMixin(Self, "MTLIntersectionFunctionDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLIntersectionFunctionDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIntersectionFunctionDescriptor");
  pub usingnamespace MTLFunctionDescriptorInterfaceMixin(Self, "MTLIntersectionFunctionDescriptor");
};

pub fn MTLAttributeDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_format = CachedSelector.init("format");
      pub fn format(self: *Self, ) MTLAttributeFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAttributeFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_format.get(), );
 }}
var sel_setFormat_ = CachedSelector.init("setFormat:");
      pub fn setFormat(self: *Self, __format: MTLAttributeFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLAttributeFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormat_.get(), __format, );
 }}
var sel_offset = CachedSelector.init("offset");
      pub fn offset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_offset.get(), );
 }}
var sel_setOffset_ = CachedSelector.init("setOffset:");
      pub fn setOffset(self: *Self, __offset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOffset_.get(), __offset, );
 }}
var sel_bufferIndex = CachedSelector.init("bufferIndex");
      pub fn bufferIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bufferIndex.get(), );
 }}
var sel_setBufferIndex_ = CachedSelector.init("setBufferIndex:");
      pub fn setBufferIndex(self: *Self, __bufferIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setBufferIndex_.get(), __bufferIndex, );
 }}
  };
}

pub const MTLAttributeDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAttributeDescriptorInterfaceMixin(Self, "MTLAttributeDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLAttributeDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAttributeDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLAttributeDescriptor");
};

pub fn NSUnitEnergyInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_kilojoules = CachedSelector.init("kilojoules");
      pub fn kilojoules()  * NSUnitEnergy {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitEnergy, @ptrCast(&objc_msgSend))(class.get(), sel_kilojoules.get(), );
 }}
var sel_joules = CachedSelector.init("joules");
      pub fn joules()  * NSUnitEnergy {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitEnergy, @ptrCast(&objc_msgSend))(class.get(), sel_joules.get(), );
 }}
var sel_kilocalories = CachedSelector.init("kilocalories");
      pub fn kilocalories()  * NSUnitEnergy {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitEnergy, @ptrCast(&objc_msgSend))(class.get(), sel_kilocalories.get(), );
 }}
var sel_calories = CachedSelector.init("calories");
      pub fn calories()  * NSUnitEnergy {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitEnergy, @ptrCast(&objc_msgSend))(class.get(), sel_calories.get(), );
 }}
var sel_kilowattHours = CachedSelector.init("kilowattHours");
      pub fn kilowattHours()  * NSUnitEnergy {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitEnergy, @ptrCast(&objc_msgSend))(class.get(), sel_kilowattHours.get(), );
 }}
  };
}

pub const NSUnitEnergy = opaque {
  const Self = @This();
  pub usingnamespace NSUnitEnergyInterfaceMixin(Self, "NSUnitEnergy");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitEnergy");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitEnergy");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitEnergy");
};

pub fn NSNumberFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_getObjectValue_forString_range_error_ = CachedSelector.init("getObjectValue:forString:range:error:");
      pub fn getObjectValueforStringrangeerror(self: *Self, __obj:  ?* id, __string:  * NSString, __rangep:  [*c] _NSRange, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* id,  * NSString,  [*c] _NSRange,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjectValue_forString_range_error_.get(), __obj, __string, __rangep, __an_error, );
 }}
var sel_stringFromNumber_ = CachedSelector.init("stringFromNumber:");
      pub fn stringFromNumber(self: *Self, __number:  * NSNumber, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSNumber, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromNumber_.get(), __number, );
 }}
var sel_numberFromString_ = CachedSelector.init("numberFromString:");
      pub fn numberFromString(self: *Self, __string:  * NSString, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberFromString_.get(), __string, );
 }}
var sel_localizedStringFromNumber_numberStyle_ = CachedSelector.init("localizedStringFromNumber:numberStyle:");
      pub fn localizedStringFromNumbernumberStyle(__num:  * NSNumber, __nstyle: NSNumberFormatterStyle, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSNumber, NSNumberFormatterStyle, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localizedStringFromNumber_numberStyle_.get(), __num, __nstyle, );
 }}
var sel_defaultFormatterBehavior = CachedSelector.init("defaultFormatterBehavior");
      pub fn defaultFormatterBehavior() NSNumberFormatterBehavior {{
           return @as(*const fn(Class, SEL, ) callconv(.C) NSNumberFormatterBehavior, @ptrCast(&objc_msgSend))(class.get(), sel_defaultFormatterBehavior.get(), );
 }}
var sel_setDefaultFormatterBehavior_ = CachedSelector.init("setDefaultFormatterBehavior:");
      pub fn setDefaultFormatterBehavior(__behavior: NSNumberFormatterBehavior, ) void {{
           return @as(*const fn(Class, SEL, NSNumberFormatterBehavior, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setDefaultFormatterBehavior_.get(), __behavior, );
 }}
var sel_formattingContext = CachedSelector.init("formattingContext");
      pub fn formattingContext(self: *Self, ) NSFormattingContext {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSFormattingContext, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formattingContext.get(), );
 }}
var sel_setFormattingContext_ = CachedSelector.init("setFormattingContext:");
      pub fn setFormattingContext(self: *Self, __formattingContext: NSFormattingContext, ) void {{
           return @as(*const fn(*Self, SEL, NSFormattingContext, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormattingContext_.get(), __formattingContext, );
 }}
var sel_numberStyle = CachedSelector.init("numberStyle");
      pub fn numberStyle(self: *Self, ) NSNumberFormatterStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSNumberFormatterStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberStyle.get(), );
 }}
var sel_setNumberStyle_ = CachedSelector.init("setNumberStyle:");
      pub fn setNumberStyle(self: *Self, __numberStyle: NSNumberFormatterStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSNumberFormatterStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNumberStyle_.get(), __numberStyle, );
 }}
var sel_locale = CachedSelector.init("locale");
      pub fn locale(self: *Self, )  * NSLocale {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locale.get(), );
 }}
var sel_setLocale_ = CachedSelector.init("setLocale:");
      pub fn setLocale(self: *Self, __locale:  ?* NSLocale, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocale_.get(), __locale, );
 }}
var sel_generatesDecimalNumbers = CachedSelector.init("generatesDecimalNumbers");
      pub fn generatesDecimalNumbers(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_generatesDecimalNumbers.get(), );
 }}
var sel_setGeneratesDecimalNumbers_ = CachedSelector.init("setGeneratesDecimalNumbers:");
      pub fn setGeneratesDecimalNumbers(self: *Self, __generatesDecimalNumbers: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGeneratesDecimalNumbers_.get(), __generatesDecimalNumbers, );
 }}
var sel_formatterBehavior = CachedSelector.init("formatterBehavior");
      pub fn formatterBehavior(self: *Self, ) NSNumberFormatterBehavior {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSNumberFormatterBehavior, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formatterBehavior.get(), );
 }}
var sel_setFormatterBehavior_ = CachedSelector.init("setFormatterBehavior:");
      pub fn setFormatterBehavior(self: *Self, __formatterBehavior: NSNumberFormatterBehavior, ) void {{
           return @as(*const fn(*Self, SEL, NSNumberFormatterBehavior, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormatterBehavior_.get(), __formatterBehavior, );
 }}
var sel_negativeFormat = CachedSelector.init("negativeFormat");
      pub fn negativeFormat(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_negativeFormat.get(), );
 }}
var sel_setNegativeFormat_ = CachedSelector.init("setNegativeFormat:");
      pub fn setNegativeFormat(self: *Self, __negativeFormat:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNegativeFormat_.get(), __negativeFormat, );
 }}
var sel_textAttributesForNegativeValues = CachedSelector.init("textAttributesForNegativeValues");
      pub fn textAttributesForNegativeValues(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textAttributesForNegativeValues.get(), );
 }}
var sel_setTextAttributesForNegativeValues_ = CachedSelector.init("setTextAttributesForNegativeValues:");
      pub fn setTextAttributesForNegativeValues(self: *Self, __textAttributesForNegativeValues:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextAttributesForNegativeValues_.get(), __textAttributesForNegativeValues, );
 }}
var sel_positiveFormat = CachedSelector.init("positiveFormat");
      pub fn positiveFormat(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_positiveFormat.get(), );
 }}
var sel_setPositiveFormat_ = CachedSelector.init("setPositiveFormat:");
      pub fn setPositiveFormat(self: *Self, __positiveFormat:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPositiveFormat_.get(), __positiveFormat, );
 }}
var sel_textAttributesForPositiveValues = CachedSelector.init("textAttributesForPositiveValues");
      pub fn textAttributesForPositiveValues(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textAttributesForPositiveValues.get(), );
 }}
var sel_setTextAttributesForPositiveValues_ = CachedSelector.init("setTextAttributesForPositiveValues:");
      pub fn setTextAttributesForPositiveValues(self: *Self, __textAttributesForPositiveValues:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextAttributesForPositiveValues_.get(), __textAttributesForPositiveValues, );
 }}
var sel_allowsFloats = CachedSelector.init("allowsFloats");
      pub fn allowsFloats(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allowsFloats.get(), );
 }}
var sel_setAllowsFloats_ = CachedSelector.init("setAllowsFloats:");
      pub fn setAllowsFloats(self: *Self, __allowsFloats: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAllowsFloats_.get(), __allowsFloats, );
 }}
var sel_decimalSeparator = CachedSelector.init("decimalSeparator");
      pub fn decimalSeparator(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decimalSeparator.get(), );
 }}
var sel_setDecimalSeparator_ = CachedSelector.init("setDecimalSeparator:");
      pub fn setDecimalSeparator(self: *Self, __decimalSeparator:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDecimalSeparator_.get(), __decimalSeparator, );
 }}
var sel_alwaysShowsDecimalSeparator = CachedSelector.init("alwaysShowsDecimalSeparator");
      pub fn alwaysShowsDecimalSeparator(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_alwaysShowsDecimalSeparator.get(), );
 }}
var sel_setAlwaysShowsDecimalSeparator_ = CachedSelector.init("setAlwaysShowsDecimalSeparator:");
      pub fn setAlwaysShowsDecimalSeparator(self: *Self, __alwaysShowsDecimalSeparator: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAlwaysShowsDecimalSeparator_.get(), __alwaysShowsDecimalSeparator, );
 }}
var sel_currencyDecimalSeparator = CachedSelector.init("currencyDecimalSeparator");
      pub fn currencyDecimalSeparator(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currencyDecimalSeparator.get(), );
 }}
var sel_setCurrencyDecimalSeparator_ = CachedSelector.init("setCurrencyDecimalSeparator:");
      pub fn setCurrencyDecimalSeparator(self: *Self, __currencyDecimalSeparator:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurrencyDecimalSeparator_.get(), __currencyDecimalSeparator, );
 }}
var sel_usesGroupingSeparator = CachedSelector.init("usesGroupingSeparator");
      pub fn usesGroupingSeparator(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_usesGroupingSeparator.get(), );
 }}
var sel_setUsesGroupingSeparator_ = CachedSelector.init("setUsesGroupingSeparator:");
      pub fn setUsesGroupingSeparator(self: *Self, __usesGroupingSeparator: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUsesGroupingSeparator_.get(), __usesGroupingSeparator, );
 }}
var sel_groupingSeparator = CachedSelector.init("groupingSeparator");
      pub fn groupingSeparator(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_groupingSeparator.get(), );
 }}
var sel_setGroupingSeparator_ = CachedSelector.init("setGroupingSeparator:");
      pub fn setGroupingSeparator(self: *Self, __groupingSeparator:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGroupingSeparator_.get(), __groupingSeparator, );
 }}
var sel_zeroSymbol = CachedSelector.init("zeroSymbol");
      pub fn zeroSymbol(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_zeroSymbol.get(), );
 }}
var sel_setZeroSymbol_ = CachedSelector.init("setZeroSymbol:");
      pub fn setZeroSymbol(self: *Self, __zeroSymbol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setZeroSymbol_.get(), __zeroSymbol, );
 }}
var sel_textAttributesForZero = CachedSelector.init("textAttributesForZero");
      pub fn textAttributesForZero(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textAttributesForZero.get(), );
 }}
var sel_setTextAttributesForZero_ = CachedSelector.init("setTextAttributesForZero:");
      pub fn setTextAttributesForZero(self: *Self, __textAttributesForZero:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextAttributesForZero_.get(), __textAttributesForZero, );
 }}
var sel_nilSymbol = CachedSelector.init("nilSymbol");
      pub fn nilSymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nilSymbol.get(), );
 }}
var sel_setNilSymbol_ = CachedSelector.init("setNilSymbol:");
      pub fn setNilSymbol(self: *Self, __nilSymbol:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNilSymbol_.get(), __nilSymbol, );
 }}
var sel_textAttributesForNil = CachedSelector.init("textAttributesForNil");
      pub fn textAttributesForNil(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textAttributesForNil.get(), );
 }}
var sel_setTextAttributesForNil_ = CachedSelector.init("setTextAttributesForNil:");
      pub fn setTextAttributesForNil(self: *Self, __textAttributesForNil:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextAttributesForNil_.get(), __textAttributesForNil, );
 }}
var sel_notANumberSymbol = CachedSelector.init("notANumberSymbol");
      pub fn notANumberSymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_notANumberSymbol.get(), );
 }}
var sel_setNotANumberSymbol_ = CachedSelector.init("setNotANumberSymbol:");
      pub fn setNotANumberSymbol(self: *Self, __notANumberSymbol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNotANumberSymbol_.get(), __notANumberSymbol, );
 }}
var sel_textAttributesForNotANumber = CachedSelector.init("textAttributesForNotANumber");
      pub fn textAttributesForNotANumber(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textAttributesForNotANumber.get(), );
 }}
var sel_setTextAttributesForNotANumber_ = CachedSelector.init("setTextAttributesForNotANumber:");
      pub fn setTextAttributesForNotANumber(self: *Self, __textAttributesForNotANumber:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextAttributesForNotANumber_.get(), __textAttributesForNotANumber, );
 }}
var sel_positiveInfinitySymbol = CachedSelector.init("positiveInfinitySymbol");
      pub fn positiveInfinitySymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_positiveInfinitySymbol.get(), );
 }}
var sel_setPositiveInfinitySymbol_ = CachedSelector.init("setPositiveInfinitySymbol:");
      pub fn setPositiveInfinitySymbol(self: *Self, __positiveInfinitySymbol:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPositiveInfinitySymbol_.get(), __positiveInfinitySymbol, );
 }}
var sel_textAttributesForPositiveInfinity = CachedSelector.init("textAttributesForPositiveInfinity");
      pub fn textAttributesForPositiveInfinity(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textAttributesForPositiveInfinity.get(), );
 }}
var sel_setTextAttributesForPositiveInfinity_ = CachedSelector.init("setTextAttributesForPositiveInfinity:");
      pub fn setTextAttributesForPositiveInfinity(self: *Self, __textAttributesForPositiveInfinity:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextAttributesForPositiveInfinity_.get(), __textAttributesForPositiveInfinity, );
 }}
var sel_negativeInfinitySymbol = CachedSelector.init("negativeInfinitySymbol");
      pub fn negativeInfinitySymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_negativeInfinitySymbol.get(), );
 }}
var sel_setNegativeInfinitySymbol_ = CachedSelector.init("setNegativeInfinitySymbol:");
      pub fn setNegativeInfinitySymbol(self: *Self, __negativeInfinitySymbol:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNegativeInfinitySymbol_.get(), __negativeInfinitySymbol, );
 }}
var sel_textAttributesForNegativeInfinity = CachedSelector.init("textAttributesForNegativeInfinity");
      pub fn textAttributesForNegativeInfinity(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_textAttributesForNegativeInfinity.get(), );
 }}
var sel_setTextAttributesForNegativeInfinity_ = CachedSelector.init("setTextAttributesForNegativeInfinity:");
      pub fn setTextAttributesForNegativeInfinity(self: *Self, __textAttributesForNegativeInfinity:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTextAttributesForNegativeInfinity_.get(), __textAttributesForNegativeInfinity, );
 }}
var sel_positivePrefix = CachedSelector.init("positivePrefix");
      pub fn positivePrefix(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_positivePrefix.get(), );
 }}
var sel_setPositivePrefix_ = CachedSelector.init("setPositivePrefix:");
      pub fn setPositivePrefix(self: *Self, __positivePrefix:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPositivePrefix_.get(), __positivePrefix, );
 }}
var sel_positiveSuffix = CachedSelector.init("positiveSuffix");
      pub fn positiveSuffix(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_positiveSuffix.get(), );
 }}
var sel_setPositiveSuffix_ = CachedSelector.init("setPositiveSuffix:");
      pub fn setPositiveSuffix(self: *Self, __positiveSuffix:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPositiveSuffix_.get(), __positiveSuffix, );
 }}
var sel_negativePrefix = CachedSelector.init("negativePrefix");
      pub fn negativePrefix(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_negativePrefix.get(), );
 }}
var sel_setNegativePrefix_ = CachedSelector.init("setNegativePrefix:");
      pub fn setNegativePrefix(self: *Self, __negativePrefix:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNegativePrefix_.get(), __negativePrefix, );
 }}
var sel_negativeSuffix = CachedSelector.init("negativeSuffix");
      pub fn negativeSuffix(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_negativeSuffix.get(), );
 }}
var sel_setNegativeSuffix_ = CachedSelector.init("setNegativeSuffix:");
      pub fn setNegativeSuffix(self: *Self, __negativeSuffix:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNegativeSuffix_.get(), __negativeSuffix, );
 }}
var sel_currencyCode = CachedSelector.init("currencyCode");
      pub fn currencyCode(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currencyCode.get(), );
 }}
var sel_setCurrencyCode_ = CachedSelector.init("setCurrencyCode:");
      pub fn setCurrencyCode(self: *Self, __currencyCode:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurrencyCode_.get(), __currencyCode, );
 }}
var sel_currencySymbol = CachedSelector.init("currencySymbol");
      pub fn currencySymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currencySymbol.get(), );
 }}
var sel_setCurrencySymbol_ = CachedSelector.init("setCurrencySymbol:");
      pub fn setCurrencySymbol(self: *Self, __currencySymbol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurrencySymbol_.get(), __currencySymbol, );
 }}
var sel_internationalCurrencySymbol = CachedSelector.init("internationalCurrencySymbol");
      pub fn internationalCurrencySymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_internationalCurrencySymbol.get(), );
 }}
var sel_setInternationalCurrencySymbol_ = CachedSelector.init("setInternationalCurrencySymbol:");
      pub fn setInternationalCurrencySymbol(self: *Self, __internationalCurrencySymbol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInternationalCurrencySymbol_.get(), __internationalCurrencySymbol, );
 }}
var sel_percentSymbol = CachedSelector.init("percentSymbol");
      pub fn percentSymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_percentSymbol.get(), );
 }}
var sel_setPercentSymbol_ = CachedSelector.init("setPercentSymbol:");
      pub fn setPercentSymbol(self: *Self, __percentSymbol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPercentSymbol_.get(), __percentSymbol, );
 }}
var sel_perMillSymbol = CachedSelector.init("perMillSymbol");
      pub fn perMillSymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_perMillSymbol.get(), );
 }}
var sel_setPerMillSymbol_ = CachedSelector.init("setPerMillSymbol:");
      pub fn setPerMillSymbol(self: *Self, __perMillSymbol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPerMillSymbol_.get(), __perMillSymbol, );
 }}
var sel_minusSign = CachedSelector.init("minusSign");
      pub fn minusSign(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minusSign.get(), );
 }}
var sel_setMinusSign_ = CachedSelector.init("setMinusSign:");
      pub fn setMinusSign(self: *Self, __minusSign:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMinusSign_.get(), __minusSign, );
 }}
var sel_plusSign = CachedSelector.init("plusSign");
      pub fn plusSign(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_plusSign.get(), );
 }}
var sel_setPlusSign_ = CachedSelector.init("setPlusSign:");
      pub fn setPlusSign(self: *Self, __plusSign:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPlusSign_.get(), __plusSign, );
 }}
var sel_exponentSymbol = CachedSelector.init("exponentSymbol");
      pub fn exponentSymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_exponentSymbol.get(), );
 }}
var sel_setExponentSymbol_ = CachedSelector.init("setExponentSymbol:");
      pub fn setExponentSymbol(self: *Self, __exponentSymbol:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setExponentSymbol_.get(), __exponentSymbol, );
 }}
var sel_groupingSize = CachedSelector.init("groupingSize");
      pub fn groupingSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_groupingSize.get(), );
 }}
var sel_setGroupingSize_ = CachedSelector.init("setGroupingSize:");
      pub fn setGroupingSize(self: *Self, __groupingSize: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setGroupingSize_.get(), __groupingSize, );
 }}
var sel_secondaryGroupingSize = CachedSelector.init("secondaryGroupingSize");
      pub fn secondaryGroupingSize(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_secondaryGroupingSize.get(), );
 }}
var sel_setSecondaryGroupingSize_ = CachedSelector.init("setSecondaryGroupingSize:");
      pub fn setSecondaryGroupingSize(self: *Self, __secondaryGroupingSize: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSecondaryGroupingSize_.get(), __secondaryGroupingSize, );
 }}
var sel_multiplier = CachedSelector.init("multiplier");
      pub fn multiplier(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_multiplier.get(), );
 }}
var sel_setMultiplier_ = CachedSelector.init("setMultiplier:");
      pub fn setMultiplier(self: *Self, __multiplier:  ?* NSNumber, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMultiplier_.get(), __multiplier, );
 }}
var sel_formatWidth = CachedSelector.init("formatWidth");
      pub fn formatWidth(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_formatWidth.get(), );
 }}
var sel_setFormatWidth_ = CachedSelector.init("setFormatWidth:");
      pub fn setFormatWidth(self: *Self, __formatWidth: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormatWidth_.get(), __formatWidth, );
 }}
var sel_paddingCharacter = CachedSelector.init("paddingCharacter");
      pub fn paddingCharacter(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_paddingCharacter.get(), );
 }}
var sel_setPaddingCharacter_ = CachedSelector.init("setPaddingCharacter:");
      pub fn setPaddingCharacter(self: *Self, __paddingCharacter:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPaddingCharacter_.get(), __paddingCharacter, );
 }}
var sel_paddingPosition = CachedSelector.init("paddingPosition");
      pub fn paddingPosition(self: *Self, ) NSNumberFormatterPadPosition {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSNumberFormatterPadPosition, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_paddingPosition.get(), );
 }}
var sel_setPaddingPosition_ = CachedSelector.init("setPaddingPosition:");
      pub fn setPaddingPosition(self: *Self, __paddingPosition: NSNumberFormatterPadPosition, ) void {{
           return @as(*const fn(*Self, SEL, NSNumberFormatterPadPosition, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPaddingPosition_.get(), __paddingPosition, );
 }}
var sel_roundingMode = CachedSelector.init("roundingMode");
      pub fn roundingMode(self: *Self, ) NSNumberFormatterRoundingMode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSNumberFormatterRoundingMode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_roundingMode.get(), );
 }}
var sel_setRoundingMode_ = CachedSelector.init("setRoundingMode:");
      pub fn setRoundingMode(self: *Self, __roundingMode: NSNumberFormatterRoundingMode, ) void {{
           return @as(*const fn(*Self, SEL, NSNumberFormatterRoundingMode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRoundingMode_.get(), __roundingMode, );
 }}
var sel_roundingIncrement = CachedSelector.init("roundingIncrement");
      pub fn roundingIncrement(self: *Self, )  * NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_roundingIncrement.get(), );
 }}
var sel_setRoundingIncrement_ = CachedSelector.init("setRoundingIncrement:");
      pub fn setRoundingIncrement(self: *Self, __roundingIncrement:  ?* NSNumber, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRoundingIncrement_.get(), __roundingIncrement, );
 }}
var sel_minimumIntegerDigits = CachedSelector.init("minimumIntegerDigits");
      pub fn minimumIntegerDigits(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minimumIntegerDigits.get(), );
 }}
var sel_setMinimumIntegerDigits_ = CachedSelector.init("setMinimumIntegerDigits:");
      pub fn setMinimumIntegerDigits(self: *Self, __minimumIntegerDigits: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMinimumIntegerDigits_.get(), __minimumIntegerDigits, );
 }}
var sel_maximumIntegerDigits = CachedSelector.init("maximumIntegerDigits");
      pub fn maximumIntegerDigits(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maximumIntegerDigits.get(), );
 }}
var sel_setMaximumIntegerDigits_ = CachedSelector.init("setMaximumIntegerDigits:");
      pub fn setMaximumIntegerDigits(self: *Self, __maximumIntegerDigits: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaximumIntegerDigits_.get(), __maximumIntegerDigits, );
 }}
var sel_minimumFractionDigits = CachedSelector.init("minimumFractionDigits");
      pub fn minimumFractionDigits(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minimumFractionDigits.get(), );
 }}
var sel_setMinimumFractionDigits_ = CachedSelector.init("setMinimumFractionDigits:");
      pub fn setMinimumFractionDigits(self: *Self, __minimumFractionDigits: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMinimumFractionDigits_.get(), __minimumFractionDigits, );
 }}
var sel_maximumFractionDigits = CachedSelector.init("maximumFractionDigits");
      pub fn maximumFractionDigits(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maximumFractionDigits.get(), );
 }}
var sel_setMaximumFractionDigits_ = CachedSelector.init("setMaximumFractionDigits:");
      pub fn setMaximumFractionDigits(self: *Self, __maximumFractionDigits: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaximumFractionDigits_.get(), __maximumFractionDigits, );
 }}
var sel_minimum = CachedSelector.init("minimum");
      pub fn minimum(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minimum.get(), );
 }}
var sel_setMinimum_ = CachedSelector.init("setMinimum:");
      pub fn setMinimum(self: *Self, __minimum:  ?* NSNumber, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMinimum_.get(), __minimum, );
 }}
var sel_maximum = CachedSelector.init("maximum");
      pub fn maximum(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maximum.get(), );
 }}
var sel_setMaximum_ = CachedSelector.init("setMaximum:");
      pub fn setMaximum(self: *Self, __maximum:  ?* NSNumber, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNumber, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaximum_.get(), __maximum, );
 }}
var sel_currencyGroupingSeparator = CachedSelector.init("currencyGroupingSeparator");
      pub fn currencyGroupingSeparator(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currencyGroupingSeparator.get(), );
 }}
var sel_setCurrencyGroupingSeparator_ = CachedSelector.init("setCurrencyGroupingSeparator:");
      pub fn setCurrencyGroupingSeparator(self: *Self, __currencyGroupingSeparator:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurrencyGroupingSeparator_.get(), __currencyGroupingSeparator, );
 }}
var sel_isLenient = CachedSelector.init("isLenient");
      pub fn isLenient(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLenient.get(), );
 }}
var sel_setLenient_ = CachedSelector.init("setLenient:");
      pub fn setLenient(self: *Self, __lenient: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLenient_.get(), __lenient, );
 }}
var sel_usesSignificantDigits = CachedSelector.init("usesSignificantDigits");
      pub fn usesSignificantDigits(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_usesSignificantDigits.get(), );
 }}
var sel_setUsesSignificantDigits_ = CachedSelector.init("setUsesSignificantDigits:");
      pub fn setUsesSignificantDigits(self: *Self, __usesSignificantDigits: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUsesSignificantDigits_.get(), __usesSignificantDigits, );
 }}
var sel_minimumSignificantDigits = CachedSelector.init("minimumSignificantDigits");
      pub fn minimumSignificantDigits(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minimumSignificantDigits.get(), );
 }}
var sel_setMinimumSignificantDigits_ = CachedSelector.init("setMinimumSignificantDigits:");
      pub fn setMinimumSignificantDigits(self: *Self, __minimumSignificantDigits: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMinimumSignificantDigits_.get(), __minimumSignificantDigits, );
 }}
var sel_maximumSignificantDigits = CachedSelector.init("maximumSignificantDigits");
      pub fn maximumSignificantDigits(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maximumSignificantDigits.get(), );
 }}
var sel_setMaximumSignificantDigits_ = CachedSelector.init("setMaximumSignificantDigits:");
      pub fn setMaximumSignificantDigits(self: *Self, __maximumSignificantDigits: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaximumSignificantDigits_.get(), __maximumSignificantDigits, );
 }}
var sel_isPartialStringValidationEnabled = CachedSelector.init("isPartialStringValidationEnabled");
      pub fn isPartialStringValidationEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPartialStringValidationEnabled.get(), );
 }}
var sel_setPartialStringValidationEnabled_ = CachedSelector.init("setPartialStringValidationEnabled:");
      pub fn setPartialStringValidationEnabled(self: *Self, __partialStringValidationEnabled: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPartialStringValidationEnabled_.get(), __partialStringValidationEnabled, );
 }}
var sel_hasThousandSeparators = CachedSelector.init("hasThousandSeparators");
      pub fn hasThousandSeparators(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hasThousandSeparators.get(), );
 }}
var sel_setHasThousandSeparators_ = CachedSelector.init("setHasThousandSeparators:");
      pub fn setHasThousandSeparators(self: *Self, __hasThousandSeparators: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHasThousandSeparators_.get(), __hasThousandSeparators, );
 }}
var sel_thousandSeparator = CachedSelector.init("thousandSeparator");
      pub fn thousandSeparator(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_thousandSeparator.get(), );
 }}
var sel_setThousandSeparator_ = CachedSelector.init("setThousandSeparator:");
      pub fn setThousandSeparator(self: *Self, __thousandSeparator:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setThousandSeparator_.get(), __thousandSeparator, );
 }}
var sel_localizesFormat = CachedSelector.init("localizesFormat");
      pub fn localizesFormat(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizesFormat.get(), );
 }}
var sel_setLocalizesFormat_ = CachedSelector.init("setLocalizesFormat:");
      pub fn setLocalizesFormat(self: *Self, __localizesFormat: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocalizesFormat_.get(), __localizesFormat, );
 }}
var sel_format = CachedSelector.init("format");
      pub fn format(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_format.get(), );
 }}
var sel_setFormat_ = CachedSelector.init("setFormat:");
      pub fn setFormat(self: *Self, __format:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFormat_.get(), __format, );
 }}
var sel_attributedStringForZero = CachedSelector.init("attributedStringForZero");
      pub fn attributedStringForZero(self: *Self, )  * NSAttributedString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributedStringForZero.get(), );
 }}
var sel_setAttributedStringForZero_ = CachedSelector.init("setAttributedStringForZero:");
      pub fn setAttributedStringForZero(self: *Self, __attributedStringForZero:  * NSAttributedString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributedStringForZero_.get(), __attributedStringForZero, );
 }}
var sel_attributedStringForNil = CachedSelector.init("attributedStringForNil");
      pub fn attributedStringForNil(self: *Self, )  * NSAttributedString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributedStringForNil.get(), );
 }}
var sel_setAttributedStringForNil_ = CachedSelector.init("setAttributedStringForNil:");
      pub fn setAttributedStringForNil(self: *Self, __attributedStringForNil:  * NSAttributedString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributedStringForNil_.get(), __attributedStringForNil, );
 }}
var sel_attributedStringForNotANumber = CachedSelector.init("attributedStringForNotANumber");
      pub fn attributedStringForNotANumber(self: *Self, )  * NSAttributedString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributedStringForNotANumber.get(), );
 }}
var sel_setAttributedStringForNotANumber_ = CachedSelector.init("setAttributedStringForNotANumber:");
      pub fn setAttributedStringForNotANumber(self: *Self, __attributedStringForNotANumber:  * NSAttributedString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAttributedString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributedStringForNotANumber_.get(), __attributedStringForNotANumber, );
 }}
var sel_roundingBehavior = CachedSelector.init("roundingBehavior");
      pub fn roundingBehavior(self: *Self, )  * NSDecimalNumberHandler {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDecimalNumberHandler, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_roundingBehavior.get(), );
 }}
var sel_setRoundingBehavior_ = CachedSelector.init("setRoundingBehavior:");
      pub fn setRoundingBehavior(self: *Self, __roundingBehavior:  * NSDecimalNumberHandler, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDecimalNumberHandler, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRoundingBehavior_.get(), __roundingBehavior, );
 }}
  };
}

pub const NSNumberFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSNumberFormatterInterfaceMixin(Self, "NSNumberFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSNumberFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSNumberFormatter");
};

pub fn MTLRenderPassSampleBufferAttachmentDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __attachmentIndex: c_ulong, )  * MTLRenderPassSampleBufferAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLRenderPassSampleBufferAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __attachmentIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attachment:  ?* MTLRenderPassSampleBufferAttachmentDescriptor, __attachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLRenderPassSampleBufferAttachmentDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attachment, __attachmentIndex, );
 }}
  };
}

pub const MTLRenderPassSampleBufferAttachmentDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPassSampleBufferAttachmentDescriptorArrayInterfaceMixin(Self, "MTLRenderPassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPassSampleBufferAttachmentDescriptorArray");
};

pub fn MTLRasterizationRateLayerArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __layerIndex: c_ulong, )  ?* MTLRasterizationRateLayerDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  ?* MTLRasterizationRateLayerDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __layerIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __layer:  ?* MTLRasterizationRateLayerDescriptor, __layerIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLRasterizationRateLayerDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __layer, __layerIndex, );
 }}
  };
}

pub const MTLRasterizationRateLayerArray = opaque {
  const Self = @This();
  pub usingnamespace MTLRasterizationRateLayerArrayInterfaceMixin(Self, "MTLRasterizationRateLayerArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRasterizationRateLayerArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRasterizationRateLayerArray");
};

pub fn MTLCommandBufferDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_retainedReferences = CachedSelector.init("retainedReferences");
      pub fn retainedReferences(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_retainedReferences.get(), );
 }}
var sel_setRetainedReferences_ = CachedSelector.init("setRetainedReferences:");
      pub fn setRetainedReferences(self: *Self, __retainedReferences: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRetainedReferences_.get(), __retainedReferences, );
 }}
var sel_errorOptions = CachedSelector.init("errorOptions");
      pub fn errorOptions(self: *Self, ) MTLCommandBufferErrorOption {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCommandBufferErrorOption, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_errorOptions.get(), );
 }}
var sel_setErrorOptions_ = CachedSelector.init("setErrorOptions:");
      pub fn setErrorOptions(self: *Self, __errorOptions: MTLCommandBufferErrorOption, ) void {{
           return @as(*const fn(*Self, SEL, MTLCommandBufferErrorOption, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setErrorOptions_.get(), __errorOptions, );
 }}
  };
}

pub const MTLCommandBufferDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLCommandBufferDescriptorInterfaceMixin(Self, "MTLCommandBufferDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLCommandBufferDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCommandBufferDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLCommandBufferDescriptor");
};

pub fn MTLRenderPassDepthAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_clearDepth = CachedSelector.init("clearDepth");
      pub fn clearDepth(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_clearDepth.get(), );
 }}
var sel_setClearDepth_ = CachedSelector.init("setClearDepth:");
      pub fn setClearDepth(self: *Self, __clearDepth: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setClearDepth_.get(), __clearDepth, );
 }}
var sel_depthResolveFilter = CachedSelector.init("depthResolveFilter");
      pub fn depthResolveFilter(self: *Self, ) MTLMultisampleDepthResolveFilter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLMultisampleDepthResolveFilter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_depthResolveFilter.get(), );
 }}
var sel_setDepthResolveFilter_ = CachedSelector.init("setDepthResolveFilter:");
      pub fn setDepthResolveFilter(self: *Self, __depthResolveFilter: MTLMultisampleDepthResolveFilter, ) void {{
           return @as(*const fn(*Self, SEL, MTLMultisampleDepthResolveFilter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDepthResolveFilter_.get(), __depthResolveFilter, );
 }}
  };
}

pub const MTLRenderPassDepthAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPassDepthAttachmentDescriptorInterfaceMixin(Self, "MTLRenderPassDepthAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPassDepthAttachmentDescriptor");
  pub usingnamespace MTLRenderPassAttachmentDescriptorInterfaceMixin(Self, "MTLRenderPassDepthAttachmentDescriptor");
};

pub fn NSLinguisticTaggerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithTagSchemes_options_ = CachedSelector.init("initWithTagSchemes:options:");
      pub fn initWithTagSchemesoptions(self: *Self, __tagSchemes:  * NSArray, __opts: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTagSchemes_options_.get(), __tagSchemes, __opts, );
 }}
var sel_availableTagSchemesForUnit_language_ = CachedSelector.init("availableTagSchemesForUnit:language:");
      pub fn availableTagSchemesForUnitlanguage(__unit: NSLinguisticTaggerUnit, __language:  * NSString, )  * NSArray {{
           return @as(*const fn(Class, SEL, NSLinguisticTaggerUnit,  * NSString, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_availableTagSchemesForUnit_language_.get(), __unit, __language, );
 }}
var sel_availableTagSchemesForLanguage_ = CachedSelector.init("availableTagSchemesForLanguage:");
      pub fn availableTagSchemesForLanguage(__language:  * NSString, )  * NSArray {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_availableTagSchemesForLanguage_.get(), __language, );
 }}
var sel_setOrthography_range_ = CachedSelector.init("setOrthography:range:");
      pub fn setOrthographyrange(self: *Self, __orthography:  ?* NSOrthography, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSOrthography, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOrthography_range_.get(), __orthography, __range, );
 }}
var sel_orthographyAtIndex_effectiveRange_ = CachedSelector.init("orthographyAtIndex:effectiveRange:");
      pub fn orthographyAtIndexeffectiveRange(self: *Self, __charIndex: c_ulong, __effectiveRange:  [*c] _NSRange, )  ?* NSOrthography {{
           return @as(*const fn(*Self, SEL, c_ulong,  [*c] _NSRange, ) callconv(.C)  ?* NSOrthography, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_orthographyAtIndex_effectiveRange_.get(), __charIndex, __effectiveRange, );
 }}
var sel_stringEditedInRange_changeInLength_ = CachedSelector.init("stringEditedInRange:changeInLength:");
      pub fn stringEditedInRangechangeInLength(self: *Self, __newRange: _NSRange, __delta: c_long, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringEditedInRange_changeInLength_.get(), __newRange, __delta, );
 }}
var sel_tokenRangeAtIndex_unit_ = CachedSelector.init("tokenRangeAtIndex:unit:");
      pub fn tokenRangeAtIndexunit(self: *Self, __charIndex: c_ulong, __unit: NSLinguisticTaggerUnit, ) _NSRange {{
           return @as(*const fn(*Self, SEL, c_ulong, NSLinguisticTaggerUnit, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tokenRangeAtIndex_unit_.get(), __charIndex, __unit, );
 }}
var sel_sentenceRangeForRange_ = CachedSelector.init("sentenceRangeForRange:");
      pub fn sentenceRangeForRange(self: *Self, __range: _NSRange, ) _NSRange {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sentenceRangeForRange_.get(), __range, );
 }}
var sel_enumerateTagsInRange_unit_scheme_options_usingBlock_ = CachedSelector.init("enumerateTagsInRange:unit:scheme:options:usingBlock:");
      pub fn enumerateTagsInRangeunitschemeoptionsusingBlock(self: *Self, __range: _NSRange, __unit: NSLinguisticTaggerUnit, __scheme:  * NSString, __options: NSLinguisticTaggerOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, NSLinguisticTaggerUnit,  * NSString, NSLinguisticTaggerOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateTagsInRange_unit_scheme_options_usingBlock_.get(), __range, __unit, __scheme, __options, __block, );
 }}
var sel_tagAtIndex_unit_scheme_tokenRange_ = CachedSelector.init("tagAtIndex:unit:scheme:tokenRange:");
      pub fn tagAtIndexunitschemetokenRange(self: *Self, __charIndex: c_ulong, __unit: NSLinguisticTaggerUnit, __scheme:  * NSString, __tokenRange:  [*c] _NSRange, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, c_ulong, NSLinguisticTaggerUnit,  * NSString,  [*c] _NSRange, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tagAtIndex_unit_scheme_tokenRange_.get(), __charIndex, __unit, __scheme, __tokenRange, );
 }}
var sel_tagsInRange_unit_scheme_options_tokenRanges_ = CachedSelector.init("tagsInRange:unit:scheme:options:tokenRanges:");
      pub fn tagsInRangeunitschemeoptionstokenRanges(self: *Self, __range: _NSRange, __unit: NSLinguisticTaggerUnit, __scheme:  * NSString, __options: NSLinguisticTaggerOptions, __tokenRanges:  [*c]  ?* NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL, _NSRange, NSLinguisticTaggerUnit,  * NSString, NSLinguisticTaggerOptions,  [*c]  ?* NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tagsInRange_unit_scheme_options_tokenRanges_.get(), __range, __unit, __scheme, __options, __tokenRanges, );
 }}
var sel_enumerateTagsInRange_scheme_options_usingBlock_ = CachedSelector.init("enumerateTagsInRange:scheme:options:usingBlock:");
      pub fn enumerateTagsInRangeschemeoptionsusingBlock(self: *Self, __range: _NSRange, __tagScheme:  * NSString, __opts: NSLinguisticTaggerOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSString, NSLinguisticTaggerOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateTagsInRange_scheme_options_usingBlock_.get(), __range, __tagScheme, __opts, __block, );
 }}
var sel_tagAtIndex_scheme_tokenRange_sentenceRange_ = CachedSelector.init("tagAtIndex:scheme:tokenRange:sentenceRange:");
      pub fn tagAtIndexschemetokenRangesentenceRange(self: *Self, __charIndex: c_ulong, __scheme:  * NSString, __tokenRange:  [*c] _NSRange, __sentenceRange:  [*c] _NSRange, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, c_ulong,  * NSString,  [*c] _NSRange,  [*c] _NSRange, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tagAtIndex_scheme_tokenRange_sentenceRange_.get(), __charIndex, __scheme, __tokenRange, __sentenceRange, );
 }}
var sel_tagsInRange_scheme_options_tokenRanges_ = CachedSelector.init("tagsInRange:scheme:options:tokenRanges:");
      pub fn tagsInRangeschemeoptionstokenRanges(self: *Self, __range: _NSRange, __tagScheme:  * NSString, __opts: NSLinguisticTaggerOptions, __tokenRanges:  [*c]  ?* NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSString, NSLinguisticTaggerOptions,  [*c]  ?* NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tagsInRange_scheme_options_tokenRanges_.get(), __range, __tagScheme, __opts, __tokenRanges, );
 }}
var sel_dominantLanguageForString_ = CachedSelector.init("dominantLanguageForString:");
      pub fn dominantLanguageForString(__string:  * NSString, )  ?* NSString {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(class.get(), sel_dominantLanguageForString_.get(), __string, );
 }}
var sel_tagForString_atIndex_unit_scheme_orthography_tokenRange_ = CachedSelector.init("tagForString:atIndex:unit:scheme:orthography:tokenRange:");
      pub fn tagForStringatIndexunitschemeorthographytokenRange(__string:  * NSString, __charIndex: c_ulong, __unit: NSLinguisticTaggerUnit, __scheme:  * NSString, __orthography:  ?* NSOrthography, __tokenRange:  [*c] _NSRange, )  ?* NSString {{
           return @as(*const fn(Class, SEL,  * NSString, c_ulong, NSLinguisticTaggerUnit,  * NSString,  ?* NSOrthography,  [*c] _NSRange, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(class.get(), sel_tagForString_atIndex_unit_scheme_orthography_tokenRange_.get(), __string, __charIndex, __unit, __scheme, __orthography, __tokenRange, );
 }}
var sel_tagsForString_range_unit_scheme_options_orthography_tokenRanges_ = CachedSelector.init("tagsForString:range:unit:scheme:options:orthography:tokenRanges:");
      pub fn tagsForStringrangeunitschemeoptionsorthographytokenRanges(__string:  * NSString, __range: _NSRange, __unit: NSLinguisticTaggerUnit, __scheme:  * NSString, __options: NSLinguisticTaggerOptions, __orthography:  ?* NSOrthography, __tokenRanges:  [*c]  ?* NSArray, )  * NSArray {{
           return @as(*const fn(Class, SEL,  * NSString, _NSRange, NSLinguisticTaggerUnit,  * NSString, NSLinguisticTaggerOptions,  ?* NSOrthography,  [*c]  ?* NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_tagsForString_range_unit_scheme_options_orthography_tokenRanges_.get(), __string, __range, __unit, __scheme, __options, __orthography, __tokenRanges, );
 }}
var sel_enumerateTagsForString_range_unit_scheme_options_orthography_usingBlock_ = CachedSelector.init("enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:");
      pub fn enumerateTagsForStringrangeunitschemeoptionsorthographyusingBlock(__string:  * NSString, __range: _NSRange, __unit: NSLinguisticTaggerUnit, __scheme:  * NSString, __options: NSLinguisticTaggerOptions, __orthography:  ?* NSOrthography, __block: ?*u8, ) void {{
           return @as(*const fn(Class, SEL,  * NSString, _NSRange, NSLinguisticTaggerUnit,  * NSString, NSLinguisticTaggerOptions,  ?* NSOrthography, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_enumerateTagsForString_range_unit_scheme_options_orthography_usingBlock_.get(), __string, __range, __unit, __scheme, __options, __orthography, __block, );
 }}
var sel_possibleTagsAtIndex_scheme_tokenRange_sentenceRange_scores_ = CachedSelector.init("possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:");
      pub fn possibleTagsAtIndexschemetokenRangesentenceRangescores(self: *Self, __charIndex: c_ulong, __tagScheme:  * NSString, __tokenRange:  [*c] _NSRange, __sentenceRange:  [*c] _NSRange, __scores:  [*c]  ?* NSArray, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, c_ulong,  * NSString,  [*c] _NSRange,  [*c] _NSRange,  [*c]  ?* NSArray, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_possibleTagsAtIndex_scheme_tokenRange_sentenceRange_scores_.get(), __charIndex, __tagScheme, __tokenRange, __sentenceRange, __scores, );
 }}
var sel_tagSchemes = CachedSelector.init("tagSchemes");
      pub fn tagSchemes(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tagSchemes.get(), );
 }}
var sel_string = CachedSelector.init("string");
      pub fn string(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_string.get(), );
 }}
var sel_setString_ = CachedSelector.init("setString:");
      pub fn setString(self: *Self, __string:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setString_.get(), __string, );
 }}
var sel_dominantLanguage = CachedSelector.init("dominantLanguage");
      pub fn dominantLanguage(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dominantLanguage.get(), );
 }}
  };
}

pub const NSLinguisticTagger = opaque {
  const Self = @This();
  pub usingnamespace NSLinguisticTaggerInterfaceMixin(Self, "NSLinguisticTagger");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSLinguisticTagger");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSLinguisticTagger");
};

pub fn NSErrorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithDomain_code_userInfo_ = CachedSelector.init("initWithDomain:code:userInfo:");
      pub fn initWithDomaincodeuserInfo(self: *Self, __domain:  * NSString, __code: c_long, __dict:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, c_long,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithDomain_code_userInfo_.get(), __domain, __code, __dict, );
 }}
var sel_errorWithDomain_code_userInfo_ = CachedSelector.init("errorWithDomain:code:userInfo:");
      pub fn errorWithDomaincodeuserInfo(__domain:  * NSString, __code: c_long, __dict:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, c_long,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_errorWithDomain_code_userInfo_.get(), __domain, __code, __dict, );
 }}
var sel_setUserInfoValueProviderForDomain_provider_ = CachedSelector.init("setUserInfoValueProviderForDomain:provider:");
      pub fn setUserInfoValueProviderForDomainprovider(__errorDomain:  * NSString, __provider: ?*u8, ) void {{
           return @as(*const fn(Class, SEL,  * NSString, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setUserInfoValueProviderForDomain_provider_.get(), __errorDomain, __provider, );
 }}
var sel_userInfoValueProviderForDomain_ = CachedSelector.init("userInfoValueProviderForDomain:");
      pub fn userInfoValueProviderForDomain(__errorDomain:  * NSString, ) ?*u8 {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(class.get(), sel_userInfoValueProviderForDomain_.get(), __errorDomain, );
 }}
var sel_domain = CachedSelector.init("domain");
      pub fn domain(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_domain.get(), );
 }}
var sel_code = CachedSelector.init("code");
      pub fn code(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_code.get(), );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
var sel_localizedDescription = CachedSelector.init("localizedDescription");
      pub fn localizedDescription(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedDescription.get(), );
 }}
var sel_localizedFailureReason = CachedSelector.init("localizedFailureReason");
      pub fn localizedFailureReason(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedFailureReason.get(), );
 }}
var sel_localizedRecoverySuggestion = CachedSelector.init("localizedRecoverySuggestion");
      pub fn localizedRecoverySuggestion(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedRecoverySuggestion.get(), );
 }}
var sel_localizedRecoveryOptions = CachedSelector.init("localizedRecoveryOptions");
      pub fn localizedRecoveryOptions(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedRecoveryOptions.get(), );
 }}
var sel_recoveryAttempter = CachedSelector.init("recoveryAttempter");
      pub fn recoveryAttempter(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_recoveryAttempter.get(), );
 }}
var sel_helpAnchor = CachedSelector.init("helpAnchor");
      pub fn helpAnchor(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_helpAnchor.get(), );
 }}
var sel_underlyingErrors = CachedSelector.init("underlyingErrors");
      pub fn underlyingErrors(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_underlyingErrors.get(), );
 }}
  };
}

pub const NSError = opaque {
  const Self = @This();
  pub usingnamespace NSErrorInterfaceMixin(Self, "NSError");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSError");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSError");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSError");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSError");
};

pub fn NSMutableOrderedSetInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_insertObject_atIndex_ = CachedSelector.init("insertObject:atIndex:");
      pub fn insertObjectatIndex(self: *Self, __object: id, __idx: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, id, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertObject_atIndex_.get(), __object, __idx, );
 }}
var sel_removeObjectAtIndex_ = CachedSelector.init("removeObjectAtIndex:");
      pub fn removeObjectAtIndex(self: *Self, __idx: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectAtIndex_.get(), __idx, );
 }}
var sel_replaceObjectAtIndex_withObject_ = CachedSelector.init("replaceObjectAtIndex:withObject:");
      pub fn replaceObjectAtIndexwithObject(self: *Self, __idx: c_ulong, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceObjectAtIndex_withObject_.get(), __idx, __object, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithCapacity_ = CachedSelector.init("initWithCapacity:");
      pub fn initWithCapacity(self: *Self, __numItems: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCapacity_.get(), __numItems, );
 }}
var sel_addObject_ = CachedSelector.init("addObject:");
      pub fn addObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObject_.get(), __object, );
 }}
var sel_addObjects_count_ = CachedSelector.init("addObjects:count:");
      pub fn addObjectscount(self: *Self, __objects: [*c]id, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, [*c]id, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObjects_count_.get(), __objects, __count, );
 }}
var sel_addObjectsFromArray_ = CachedSelector.init("addObjectsFromArray:");
      pub fn addObjectsFromArray(self: *Self, __array:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObjectsFromArray_.get(), __array, );
 }}
var sel_exchangeObjectAtIndex_withObjectAtIndex_ = CachedSelector.init("exchangeObjectAtIndex:withObjectAtIndex:");
      pub fn exchangeObjectAtIndexwithObjectAtIndex(self: *Self, __idx1: c_ulong, __idx2: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_exchangeObjectAtIndex_withObjectAtIndex_.get(), __idx1, __idx2, );
 }}
var sel_moveObjectsAtIndexes_toIndex_ = CachedSelector.init("moveObjectsAtIndexes:toIndex:");
      pub fn moveObjectsAtIndexestoIndex(self: *Self, __indexes:  * NSIndexSet, __idx: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_moveObjectsAtIndexes_toIndex_.get(), __indexes, __idx, );
 }}
var sel_insertObjects_atIndexes_ = CachedSelector.init("insertObjects:atIndexes:");
      pub fn insertObjectsatIndexes(self: *Self, __objects:  * NSArray, __indexes:  * NSIndexSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray,  * NSIndexSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertObjects_atIndexes_.get(), __objects, __indexes, );
 }}
var sel_setObject_atIndex_ = CachedSelector.init("setObject:atIndex:");
      pub fn setObjectatIndex(self: *Self, __obj: id, __idx: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, id, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndex_.get(), __obj, __idx, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __obj: id, __idx: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, id, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __obj, __idx, );
 }}
var sel_replaceObjectsInRange_withObjects_count_ = CachedSelector.init("replaceObjectsInRange:withObjects:count:");
      pub fn replaceObjectsInRangewithObjectscount(self: *Self, __range: _NSRange, __objects: [*c]id, __count: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, [*c]id, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceObjectsInRange_withObjects_count_.get(), __range, __objects, __count, );
 }}
var sel_replaceObjectsAtIndexes_withObjects_ = CachedSelector.init("replaceObjectsAtIndexes:withObjects:");
      pub fn replaceObjectsAtIndexeswithObjects(self: *Self, __indexes:  * NSIndexSet, __objects:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceObjectsAtIndexes_withObjects_.get(), __indexes, __objects, );
 }}
var sel_removeObjectsInRange_ = CachedSelector.init("removeObjectsInRange:");
      pub fn removeObjectsInRange(self: *Self, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectsInRange_.get(), __range, );
 }}
var sel_removeObjectsAtIndexes_ = CachedSelector.init("removeObjectsAtIndexes:");
      pub fn removeObjectsAtIndexes(self: *Self, __indexes:  * NSIndexSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectsAtIndexes_.get(), __indexes, );
 }}
var sel_removeAllObjects = CachedSelector.init("removeAllObjects");
      pub fn removeAllObjects(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllObjects.get(), );
 }}
var sel_removeObject_ = CachedSelector.init("removeObject:");
      pub fn removeObject(self: *Self, __object: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObject_.get(), __object, );
 }}
var sel_removeObjectsInArray_ = CachedSelector.init("removeObjectsInArray:");
      pub fn removeObjectsInArray(self: *Self, __array:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectsInArray_.get(), __array, );
 }}
var sel_intersectOrderedSet_ = CachedSelector.init("intersectOrderedSet:");
      pub fn intersectOrderedSet(self: *Self, __other:  * NSOrderedSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectOrderedSet_.get(), __other, );
 }}
var sel_minusOrderedSet_ = CachedSelector.init("minusOrderedSet:");
      pub fn minusOrderedSet(self: *Self, __other:  * NSOrderedSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minusOrderedSet_.get(), __other, );
 }}
var sel_unionOrderedSet_ = CachedSelector.init("unionOrderedSet:");
      pub fn unionOrderedSet(self: *Self, __other:  * NSOrderedSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unionOrderedSet_.get(), __other, );
 }}
var sel_intersectSet_ = CachedSelector.init("intersectSet:");
      pub fn intersectSet(self: *Self, __other:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectSet_.get(), __other, );
 }}
var sel_minusSet_ = CachedSelector.init("minusSet:");
      pub fn minusSet(self: *Self, __other:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minusSet_.get(), __other, );
 }}
var sel_unionSet_ = CachedSelector.init("unionSet:");
      pub fn unionSet(self: *Self, __other:  * NSSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unionSet_.get(), __other, );
 }}
var sel_sortUsingComparator_ = CachedSelector.init("sortUsingComparator:");
      pub fn sortUsingComparator(self: *Self, __cmptr: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortUsingComparator_.get(), __cmptr, );
 }}
var sel_sortWithOptions_usingComparator_ = CachedSelector.init("sortWithOptions:usingComparator:");
      pub fn sortWithOptionsusingComparator(self: *Self, __opts: NSSortOptions, __cmptr: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSSortOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortWithOptions_usingComparator_.get(), __opts, __cmptr, );
 }}
var sel_sortRange_options_usingComparator_ = CachedSelector.init("sortRange:options:usingComparator:");
      pub fn sortRangeoptionsusingComparator(self: *Self, __range: _NSRange, __opts: NSSortOptions, __cmptr: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, NSSortOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortRange_options_usingComparator_.get(), __range, __opts, __cmptr, );
 }}
var sel_orderedSetWithCapacity_ = CachedSelector.init("orderedSetWithCapacity:");
      pub fn orderedSetWithCapacity(__numItems: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithCapacity_.get(), __numItems, );
 }}
var sel_applyDifference_ = CachedSelector.init("applyDifference:");
      pub fn applyDifference(self: *Self, __difference:  * NSOrderedCollectionDifference, ) void {{
           return @as(*const fn(*Self, SEL,  * NSOrderedCollectionDifference, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_applyDifference_.get(), __difference, );
 }}
var sel_sortUsingDescriptors_ = CachedSelector.init("sortUsingDescriptors:");
      pub fn sortUsingDescriptors(self: *Self, __sortDescriptors:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortUsingDescriptors_.get(), __sortDescriptors, );
 }}
var sel_filterUsingPredicate_ = CachedSelector.init("filterUsingPredicate:");
      pub fn filterUsingPredicate(self: *Self, __p:  * NSPredicate, ) void {{
           return @as(*const fn(*Self, SEL,  * NSPredicate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_filterUsingPredicate_.get(), __p, );
 }}
  };
}

pub const NSMutableOrderedSet = opaque {
  const Self = @This();
  pub usingnamespace NSMutableOrderedSetInterfaceMixin(Self, "NSMutableOrderedSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableOrderedSet");
  pub usingnamespace NSOrderedSetInterfaceMixin(Self, "NSMutableOrderedSet");
};

pub fn NSFileAccessIntentInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_readingIntentWithURL_options_ = CachedSelector.init("readingIntentWithURL:options:");
      pub fn readingIntentWithURLoptions(__url:  * NSURL, __options: NSFileCoordinatorReadingOptions, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, NSFileCoordinatorReadingOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_readingIntentWithURL_options_.get(), __url, __options, );
 }}
var sel_writingIntentWithURL_options_ = CachedSelector.init("writingIntentWithURL:options:");
      pub fn writingIntentWithURLoptions(__url:  * NSURL, __options: NSFileCoordinatorWritingOptions, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSURL, NSFileCoordinatorWritingOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_writingIntentWithURL_options_.get(), __url, __options, );
 }}
var sel_URL = CachedSelector.init("URL");
      pub fn URL(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL.get(), );
 }}
  };
}

pub const NSFileAccessIntent = opaque {
  const Self = @This();
  pub usingnamespace NSFileAccessIntentInterfaceMixin(Self, "NSFileAccessIntent");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileAccessIntent");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSFileAccessIntent");
};

pub fn NSInflectionRuleInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_automaticRule = CachedSelector.init("automaticRule");
      pub fn automaticRule()  * NSInflectionRule {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSInflectionRule, @ptrCast(&objc_msgSend))(class.get(), sel_automaticRule.get(), );
 }}
var sel_canInflectLanguage_ = CachedSelector.init("canInflectLanguage:");
      pub fn canInflectLanguage(__language:  * NSString, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_canInflectLanguage_.get(), __language, );
 }}
var sel_canInflectPreferredLocalization = CachedSelector.init("canInflectPreferredLocalization");
      pub fn canInflectPreferredLocalization() c_int {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_canInflectPreferredLocalization.get(), );
 }}
  };
}

pub const NSInflectionRule = opaque {
  const Self = @This();
  pub usingnamespace NSInflectionRuleInterfaceMixin(Self, "NSInflectionRule");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSInflectionRule");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSInflectionRule");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSInflectionRule");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSInflectionRule");
};

pub fn NSConditionLockInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCondition_ = CachedSelector.init("initWithCondition:");
      pub fn initWithCondition(self: *Self, __condition: c_long, ) *Self {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCondition_.get(), __condition, );
 }}
var sel_lockWhenCondition_ = CachedSelector.init("lockWhenCondition:");
      pub fn lockWhenCondition(self: *Self, __condition: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lockWhenCondition_.get(), __condition, );
 }}
var sel_tryLock = CachedSelector.init("tryLock");
      pub fn tryLock(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tryLock.get(), );
 }}
var sel_tryLockWhenCondition_ = CachedSelector.init("tryLockWhenCondition:");
      pub fn tryLockWhenCondition(self: *Self, __condition: c_long, ) c_int {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tryLockWhenCondition_.get(), __condition, );
 }}
var sel_unlockWithCondition_ = CachedSelector.init("unlockWithCondition:");
      pub fn unlockWithCondition(self: *Self, __condition: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unlockWithCondition_.get(), __condition, );
 }}
var sel_lockBeforeDate_ = CachedSelector.init("lockBeforeDate:");
      pub fn lockBeforeDate(self: *Self, __limit:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lockBeforeDate_.get(), __limit, );
 }}
var sel_lockWhenCondition_beforeDate_ = CachedSelector.init("lockWhenCondition:beforeDate:");
      pub fn lockWhenConditionbeforeDate(self: *Self, __condition: c_long, __limit:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL, c_long,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lockWhenCondition_beforeDate_.get(), __condition, __limit, );
 }}
var sel_condition = CachedSelector.init("condition");
      pub fn condition(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_condition.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
  };
}

pub const NSConditionLock = opaque {
  const Self = @This();
  pub usingnamespace NSConditionLockInterfaceMixin(Self, "NSConditionLock");
  pub usingnamespace NSLockingProtocolMixin(Self, "NSConditionLock");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSConditionLock");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSConditionLock");
};

pub fn NSPointerFunctionsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithOptions_ = CachedSelector.init("initWithOptions:");
      pub fn initWithOptions(self: *Self, __options: NSPointerFunctionsOptions, ) *Self {{
           return @as(*const fn(*Self, SEL, NSPointerFunctionsOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithOptions_.get(), __options, );
 }}
var sel_pointerFunctionsWithOptions_ = CachedSelector.init("pointerFunctionsWithOptions:");
      pub fn pointerFunctionsWithOptions(__options: NSPointerFunctionsOptions, )  * NSPointerFunctions {{
           return @as(*const fn(Class, SEL, NSPointerFunctionsOptions, ) callconv(.C)  * NSPointerFunctions, @ptrCast(&objc_msgSend))(class.get(), sel_pointerFunctionsWithOptions_.get(), __options, );
 }}
var sel_hashFunction = CachedSelector.init("hashFunction");
      pub fn hashFunction(self: *Self, )  [*c] ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hashFunction.get(), );
 }}
var sel_setHashFunction_ = CachedSelector.init("setHashFunction:");
      pub fn setHashFunction(self: *Self, __hashFunction:  [*c] ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHashFunction_.get(), __hashFunction, );
 }}
var sel_isEqualFunction = CachedSelector.init("isEqualFunction");
      pub fn isEqualFunction(self: *Self, )  [*c] ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualFunction.get(), );
 }}
var sel_setIsEqualFunction_ = CachedSelector.init("setIsEqualFunction:");
      pub fn setIsEqualFunction(self: *Self, __isEqualFunction:  [*c] ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIsEqualFunction_.get(), __isEqualFunction, );
 }}
var sel_sizeFunction = CachedSelector.init("sizeFunction");
      pub fn sizeFunction(self: *Self, )  [*c] ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sizeFunction.get(), );
 }}
var sel_setSizeFunction_ = CachedSelector.init("setSizeFunction:");
      pub fn setSizeFunction(self: *Self, __sizeFunction:  [*c] ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSizeFunction_.get(), __sizeFunction, );
 }}
var sel_descriptionFunction = CachedSelector.init("descriptionFunction");
      pub fn descriptionFunction(self: *Self, )  [*c] ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionFunction.get(), );
 }}
var sel_setDescriptionFunction_ = CachedSelector.init("setDescriptionFunction:");
      pub fn setDescriptionFunction(self: *Self, __descriptionFunction:  [*c] ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDescriptionFunction_.get(), __descriptionFunction, );
 }}
var sel_relinquishFunction = CachedSelector.init("relinquishFunction");
      pub fn relinquishFunction(self: *Self, )  [*c] ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_relinquishFunction.get(), );
 }}
var sel_setRelinquishFunction_ = CachedSelector.init("setRelinquishFunction:");
      pub fn setRelinquishFunction(self: *Self, __relinquishFunction:  [*c] ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRelinquishFunction_.get(), __relinquishFunction, );
 }}
var sel_acquireFunction = CachedSelector.init("acquireFunction");
      pub fn acquireFunction(self: *Self, )  [*c] ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  [*c] ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_acquireFunction.get(), );
 }}
var sel_setAcquireFunction_ = CachedSelector.init("setAcquireFunction:");
      pub fn setAcquireFunction(self: *Self, __acquireFunction:  [*c] ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAcquireFunction_.get(), __acquireFunction, );
 }}
var sel_usesStrongWriteBarrier = CachedSelector.init("usesStrongWriteBarrier");
      pub fn usesStrongWriteBarrier(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_usesStrongWriteBarrier.get(), );
 }}
var sel_setUsesStrongWriteBarrier_ = CachedSelector.init("setUsesStrongWriteBarrier:");
      pub fn setUsesStrongWriteBarrier(self: *Self, __usesStrongWriteBarrier: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUsesStrongWriteBarrier_.get(), __usesStrongWriteBarrier, );
 }}
var sel_usesWeakReadAndWriteBarriers = CachedSelector.init("usesWeakReadAndWriteBarriers");
      pub fn usesWeakReadAndWriteBarriers(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_usesWeakReadAndWriteBarriers.get(), );
 }}
var sel_setUsesWeakReadAndWriteBarriers_ = CachedSelector.init("setUsesWeakReadAndWriteBarriers:");
      pub fn setUsesWeakReadAndWriteBarriers(self: *Self, __usesWeakReadAndWriteBarriers: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUsesWeakReadAndWriteBarriers_.get(), __usesWeakReadAndWriteBarriers, );
 }}
  };
}

pub const NSPointerFunctions = opaque {
  const Self = @This();
  pub usingnamespace NSPointerFunctionsInterfaceMixin(Self, "NSPointerFunctions");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSPointerFunctions");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPointerFunctions");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPointerFunctions");
};

pub fn MTLRenderPassColorAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_clearColor = CachedSelector.init("clearColor");
      pub fn clearColor(self: *Self, ) MTLClearColor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLClearColor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_clearColor.get(), );
 }}
var sel_setClearColor_ = CachedSelector.init("setClearColor:");
      pub fn setClearColor(self: *Self, __clearColor: MTLClearColor, ) void {{
           return @as(*const fn(*Self, SEL, MTLClearColor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setClearColor_.get(), __clearColor, );
 }}
  };
}

pub const MTLRenderPassColorAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPassColorAttachmentDescriptorInterfaceMixin(Self, "MTLRenderPassColorAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPassColorAttachmentDescriptor");
  pub usingnamespace MTLRenderPassAttachmentDescriptorInterfaceMixin(Self, "MTLRenderPassColorAttachmentDescriptor");
};

pub fn MTLVertexDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_vertexDescriptor = CachedSelector.init("vertexDescriptor");
      pub fn vertexDescriptor()  * MTLVertexDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLVertexDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_vertexDescriptor.get(), );
 }}
var sel_reset = CachedSelector.init("reset");
      pub fn reset(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reset.get(), );
 }}
var sel_layouts = CachedSelector.init("layouts");
      pub fn layouts(self: *Self, )  * MTLVertexBufferLayoutDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLVertexBufferLayoutDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_layouts.get(), );
 }}
var sel_attributes = CachedSelector.init("attributes");
      pub fn attributes(self: *Self, )  * MTLVertexAttributeDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLVertexAttributeDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributes.get(), );
 }}
  };
}

pub const MTLVertexDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLVertexDescriptorInterfaceMixin(Self, "MTLVertexDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLVertexDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLVertexDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLVertexDescriptor");
};

pub fn MTLAccelerationStructureCurveGeometryDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_descriptor.get(), );
 }}
var sel_controlPointBuffer = CachedSelector.init("controlPointBuffer");
      pub fn controlPointBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlPointBuffer.get(), );
 }}
var sel_setControlPointBuffer_ = CachedSelector.init("setControlPointBuffer:");
      pub fn setControlPointBuffer(self: *Self, __controlPointBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlPointBuffer_.get(), __controlPointBuffer, );
 }}
var sel_controlPointBufferOffset = CachedSelector.init("controlPointBufferOffset");
      pub fn controlPointBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlPointBufferOffset.get(), );
 }}
var sel_setControlPointBufferOffset_ = CachedSelector.init("setControlPointBufferOffset:");
      pub fn setControlPointBufferOffset(self: *Self, __controlPointBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlPointBufferOffset_.get(), __controlPointBufferOffset, );
 }}
var sel_controlPointCount = CachedSelector.init("controlPointCount");
      pub fn controlPointCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlPointCount.get(), );
 }}
var sel_setControlPointCount_ = CachedSelector.init("setControlPointCount:");
      pub fn setControlPointCount(self: *Self, __controlPointCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlPointCount_.get(), __controlPointCount, );
 }}
var sel_controlPointStride = CachedSelector.init("controlPointStride");
      pub fn controlPointStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlPointStride.get(), );
 }}
var sel_setControlPointStride_ = CachedSelector.init("setControlPointStride:");
      pub fn setControlPointStride(self: *Self, __controlPointStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlPointStride_.get(), __controlPointStride, );
 }}
var sel_controlPointFormat = CachedSelector.init("controlPointFormat");
      pub fn controlPointFormat(self: *Self, ) MTLAttributeFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAttributeFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlPointFormat.get(), );
 }}
var sel_setControlPointFormat_ = CachedSelector.init("setControlPointFormat:");
      pub fn setControlPointFormat(self: *Self, __controlPointFormat: MTLAttributeFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLAttributeFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlPointFormat_.get(), __controlPointFormat, );
 }}
var sel_radiusBuffer = CachedSelector.init("radiusBuffer");
      pub fn radiusBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_radiusBuffer.get(), );
 }}
var sel_setRadiusBuffer_ = CachedSelector.init("setRadiusBuffer:");
      pub fn setRadiusBuffer(self: *Self, __radiusBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRadiusBuffer_.get(), __radiusBuffer, );
 }}
var sel_radiusBufferOffset = CachedSelector.init("radiusBufferOffset");
      pub fn radiusBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_radiusBufferOffset.get(), );
 }}
var sel_setRadiusBufferOffset_ = CachedSelector.init("setRadiusBufferOffset:");
      pub fn setRadiusBufferOffset(self: *Self, __radiusBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRadiusBufferOffset_.get(), __radiusBufferOffset, );
 }}
var sel_radiusFormat = CachedSelector.init("radiusFormat");
      pub fn radiusFormat(self: *Self, ) MTLAttributeFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAttributeFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_radiusFormat.get(), );
 }}
var sel_setRadiusFormat_ = CachedSelector.init("setRadiusFormat:");
      pub fn setRadiusFormat(self: *Self, __radiusFormat: MTLAttributeFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLAttributeFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRadiusFormat_.get(), __radiusFormat, );
 }}
var sel_radiusStride = CachedSelector.init("radiusStride");
      pub fn radiusStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_radiusStride.get(), );
 }}
var sel_setRadiusStride_ = CachedSelector.init("setRadiusStride:");
      pub fn setRadiusStride(self: *Self, __radiusStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRadiusStride_.get(), __radiusStride, );
 }}
var sel_indexBuffer = CachedSelector.init("indexBuffer");
      pub fn indexBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexBuffer.get(), );
 }}
var sel_setIndexBuffer_ = CachedSelector.init("setIndexBuffer:");
      pub fn setIndexBuffer(self: *Self, __indexBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexBuffer_.get(), __indexBuffer, );
 }}
var sel_indexBufferOffset = CachedSelector.init("indexBufferOffset");
      pub fn indexBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexBufferOffset.get(), );
 }}
var sel_setIndexBufferOffset_ = CachedSelector.init("setIndexBufferOffset:");
      pub fn setIndexBufferOffset(self: *Self, __indexBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexBufferOffset_.get(), __indexBufferOffset, );
 }}
var sel_indexType = CachedSelector.init("indexType");
      pub fn indexType(self: *Self, ) MTLIndexType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLIndexType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexType.get(), );
 }}
var sel_setIndexType_ = CachedSelector.init("setIndexType:");
      pub fn setIndexType(self: *Self, __indexType: MTLIndexType, ) void {{
           return @as(*const fn(*Self, SEL, MTLIndexType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndexType_.get(), __indexType, );
 }}
var sel_segmentCount = CachedSelector.init("segmentCount");
      pub fn segmentCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_segmentCount.get(), );
 }}
var sel_setSegmentCount_ = CachedSelector.init("setSegmentCount:");
      pub fn setSegmentCount(self: *Self, __segmentCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSegmentCount_.get(), __segmentCount, );
 }}
var sel_segmentControlPointCount = CachedSelector.init("segmentControlPointCount");
      pub fn segmentControlPointCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_segmentControlPointCount.get(), );
 }}
var sel_setSegmentControlPointCount_ = CachedSelector.init("setSegmentControlPointCount:");
      pub fn setSegmentControlPointCount(self: *Self, __segmentControlPointCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSegmentControlPointCount_.get(), __segmentControlPointCount, );
 }}
var sel_curveType = CachedSelector.init("curveType");
      pub fn curveType(self: *Self, ) MTLCurveType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCurveType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_curveType.get(), );
 }}
var sel_setCurveType_ = CachedSelector.init("setCurveType:");
      pub fn setCurveType(self: *Self, __curveType: MTLCurveType, ) void {{
           return @as(*const fn(*Self, SEL, MTLCurveType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurveType_.get(), __curveType, );
 }}
var sel_curveBasis = CachedSelector.init("curveBasis");
      pub fn curveBasis(self: *Self, ) MTLCurveBasis {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCurveBasis, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_curveBasis.get(), );
 }}
var sel_setCurveBasis_ = CachedSelector.init("setCurveBasis:");
      pub fn setCurveBasis(self: *Self, __curveBasis: MTLCurveBasis, ) void {{
           return @as(*const fn(*Self, SEL, MTLCurveBasis, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurveBasis_.get(), __curveBasis, );
 }}
var sel_curveEndCaps = CachedSelector.init("curveEndCaps");
      pub fn curveEndCaps(self: *Self, ) MTLCurveEndCaps {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLCurveEndCaps, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_curveEndCaps.get(), );
 }}
var sel_setCurveEndCaps_ = CachedSelector.init("setCurveEndCaps:");
      pub fn setCurveEndCaps(self: *Self, __curveEndCaps: MTLCurveEndCaps, ) void {{
           return @as(*const fn(*Self, SEL, MTLCurveEndCaps, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCurveEndCaps_.get(), __curveEndCaps, );
 }}
  };
}

pub const MTLAccelerationStructureCurveGeometryDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructureCurveGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureCurveGeometryDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructureCurveGeometryDescriptor");
  pub usingnamespace MTLAccelerationStructureGeometryDescriptorInterfaceMixin(Self, "MTLAccelerationStructureCurveGeometryDescriptor");
};

pub fn MTLCaptureManagerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sharedCaptureManager = CachedSelector.init("sharedCaptureManager");
      pub fn sharedCaptureManager()  * MTLCaptureManager {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLCaptureManager, @ptrCast(&objc_msgSend))(class.get(), sel_sharedCaptureManager.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_newCaptureScopeWithDevice_ = CachedSelector.init("newCaptureScopeWithDevice:");
      pub fn newCaptureScopeWithDevice(self: *Self, __device:  * MTLDevice, )  * MTLCaptureScope {{
           return @as(*const fn(*Self, SEL,  * MTLDevice, ) callconv(.C)  * MTLCaptureScope, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newCaptureScopeWithDevice_.get(), __device, );
 }}
var sel_newCaptureScopeWithCommandQueue_ = CachedSelector.init("newCaptureScopeWithCommandQueue:");
      pub fn newCaptureScopeWithCommandQueue(self: *Self, __commandQueue:  * MTLCommandQueue, )  * MTLCaptureScope {{
           return @as(*const fn(*Self, SEL,  * MTLCommandQueue, ) callconv(.C)  * MTLCaptureScope, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_newCaptureScopeWithCommandQueue_.get(), __commandQueue, );
 }}
var sel_supportsDestination_ = CachedSelector.init("supportsDestination:");
      pub fn supportsDestination(self: *Self, __destination: MTLCaptureDestination, ) c_int {{
           return @as(*const fn(*Self, SEL, MTLCaptureDestination, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_supportsDestination_.get(), __destination, );
 }}
var sel_startCaptureWithDescriptor_error_ = CachedSelector.init("startCaptureWithDescriptor:error:");
      pub fn startCaptureWithDescriptorerror(self: *Self, __descriptor:  * MTLCaptureDescriptor, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * MTLCaptureDescriptor,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startCaptureWithDescriptor_error_.get(), __descriptor, __an_error, );
 }}
var sel_startCaptureWithDevice_ = CachedSelector.init("startCaptureWithDevice:");
      pub fn startCaptureWithDevice(self: *Self, __device:  * MTLDevice, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLDevice, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startCaptureWithDevice_.get(), __device, );
 }}
var sel_startCaptureWithCommandQueue_ = CachedSelector.init("startCaptureWithCommandQueue:");
      pub fn startCaptureWithCommandQueue(self: *Self, __commandQueue:  * MTLCommandQueue, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLCommandQueue, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startCaptureWithCommandQueue_.get(), __commandQueue, );
 }}
var sel_startCaptureWithScope_ = CachedSelector.init("startCaptureWithScope:");
      pub fn startCaptureWithScope(self: *Self, __captureScope:  * MTLCaptureScope, ) void {{
           return @as(*const fn(*Self, SEL,  * MTLCaptureScope, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startCaptureWithScope_.get(), __captureScope, );
 }}
var sel_stopCapture = CachedSelector.init("stopCapture");
      pub fn stopCapture(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stopCapture.get(), );
 }}
var sel_defaultCaptureScope = CachedSelector.init("defaultCaptureScope");
      pub fn defaultCaptureScope(self: *Self, )  ?* MTLCaptureScope {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLCaptureScope, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_defaultCaptureScope.get(), );
 }}
var sel_setDefaultCaptureScope_ = CachedSelector.init("setDefaultCaptureScope:");
      pub fn setDefaultCaptureScope(self: *Self, __defaultCaptureScope:  ?* MTLCaptureScope, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLCaptureScope, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDefaultCaptureScope_.get(), __defaultCaptureScope, );
 }}
var sel_isCapturing = CachedSelector.init("isCapturing");
      pub fn isCapturing(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isCapturing.get(), );
 }}
  };
}

pub const MTLCaptureManager = opaque {
  const Self = @This();
  pub usingnamespace MTLCaptureManagerInterfaceMixin(Self, "MTLCaptureManager");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLCaptureManager");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLCaptureManager");
};

pub fn NSOperationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_start = CachedSelector.init("start");
      pub fn start(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_start.get(), );
 }}
var sel_main = CachedSelector.init("main");
      pub fn main(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_main.get(), );
 }}
var sel_cancel = CachedSelector.init("cancel");
      pub fn cancel(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancel.get(), );
 }}
var sel_addDependency_ = CachedSelector.init("addDependency:");
      pub fn addDependency(self: *Self, __op:  * NSOperation, ) void {{
           return @as(*const fn(*Self, SEL,  * NSOperation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addDependency_.get(), __op, );
 }}
var sel_removeDependency_ = CachedSelector.init("removeDependency:");
      pub fn removeDependency(self: *Self, __op:  * NSOperation, ) void {{
           return @as(*const fn(*Self, SEL,  * NSOperation, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeDependency_.get(), __op, );
 }}
var sel_waitUntilFinished = CachedSelector.init("waitUntilFinished");
      pub fn waitUntilFinished(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_waitUntilFinished.get(), );
 }}
var sel_isCancelled = CachedSelector.init("isCancelled");
      pub fn isCancelled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isCancelled.get(), );
 }}
var sel_isExecuting = CachedSelector.init("isExecuting");
      pub fn isExecuting(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isExecuting.get(), );
 }}
var sel_isFinished = CachedSelector.init("isFinished");
      pub fn isFinished(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isFinished.get(), );
 }}
var sel_isConcurrent = CachedSelector.init("isConcurrent");
      pub fn isConcurrent(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isConcurrent.get(), );
 }}
var sel_isAsynchronous = CachedSelector.init("isAsynchronous");
      pub fn isAsynchronous(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isAsynchronous.get(), );
 }}
var sel_isReady = CachedSelector.init("isReady");
      pub fn isReady(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isReady.get(), );
 }}
var sel_dependencies = CachedSelector.init("dependencies");
      pub fn dependencies(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dependencies.get(), );
 }}
var sel_queuePriority = CachedSelector.init("queuePriority");
      pub fn queuePriority(self: *Self, ) NSOperationQueuePriority {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSOperationQueuePriority, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_queuePriority.get(), );
 }}
var sel_setQueuePriority_ = CachedSelector.init("setQueuePriority:");
      pub fn setQueuePriority(self: *Self, __queuePriority: NSOperationQueuePriority, ) void {{
           return @as(*const fn(*Self, SEL, NSOperationQueuePriority, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQueuePriority_.get(), __queuePriority, );
 }}
var sel_completionBlock = CachedSelector.init("completionBlock");
      pub fn completionBlock(self: *Self, ) ?*u8 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) ?*u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_completionBlock.get(), );
 }}
var sel_setCompletionBlock_ = CachedSelector.init("setCompletionBlock:");
      pub fn setCompletionBlock(self: *Self, __completionBlock: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCompletionBlock_.get(), __completionBlock, );
 }}
var sel_threadPriority = CachedSelector.init("threadPriority");
      pub fn threadPriority(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_threadPriority.get(), );
 }}
var sel_setThreadPriority_ = CachedSelector.init("setThreadPriority:");
      pub fn setThreadPriority(self: *Self, __threadPriority: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setThreadPriority_.get(), __threadPriority, );
 }}
var sel_qualityOfService = CachedSelector.init("qualityOfService");
      pub fn qualityOfService(self: *Self, ) NSQualityOfService {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSQualityOfService, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_qualityOfService.get(), );
 }}
var sel_setQualityOfService_ = CachedSelector.init("setQualityOfService:");
      pub fn setQualityOfService(self: *Self, __qualityOfService: NSQualityOfService, ) void {{
           return @as(*const fn(*Self, SEL, NSQualityOfService, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQualityOfService_.get(), __qualityOfService, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
  };
}

pub const NSOperation = opaque {
  const Self = @This();
  pub usingnamespace NSOperationInterfaceMixin(Self, "NSOperation");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSOperation");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSOperation");
};

pub fn MTLBufferLayoutDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __index: c_ulong, )  * MTLBufferLayoutDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLBufferLayoutDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __index, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __bufferDesc:  ?* MTLBufferLayoutDescriptor, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBufferLayoutDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __bufferDesc, __index, );
 }}
  };
}

pub const MTLBufferLayoutDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLBufferLayoutDescriptorArrayInterfaceMixin(Self, "MTLBufferLayoutDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLBufferLayoutDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLBufferLayoutDescriptorArray");
};

pub fn NSURLCacheInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithMemoryCapacity_diskCapacity_diskPath_ = CachedSelector.init("initWithMemoryCapacity:diskCapacity:diskPath:");
      pub fn initWithMemoryCapacitydiskCapacitydiskPath(self: *Self, __memoryCapacity: c_ulong, __diskCapacity: c_ulong, __path:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMemoryCapacity_diskCapacity_diskPath_.get(), __memoryCapacity, __diskCapacity, __path, );
 }}
var sel_initWithMemoryCapacity_diskCapacity_directoryURL_ = CachedSelector.init("initWithMemoryCapacity:diskCapacity:directoryURL:");
      pub fn initWithMemoryCapacitydiskCapacitydirectoryURL(self: *Self, __memoryCapacity: c_ulong, __diskCapacity: c_ulong, __directoryURL:  ?* NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL, c_ulong, c_ulong,  ?* NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMemoryCapacity_diskCapacity_directoryURL_.get(), __memoryCapacity, __diskCapacity, __directoryURL, );
 }}
var sel_cachedResponseForRequest_ = CachedSelector.init("cachedResponseForRequest:");
      pub fn cachedResponseForRequest(self: *Self, __request:  * NSURLRequest, )  ?* NSCachedURLResponse {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, ) callconv(.C)  ?* NSCachedURLResponse, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cachedResponseForRequest_.get(), __request, );
 }}
var sel_storeCachedResponse_forRequest_ = CachedSelector.init("storeCachedResponse:forRequest:");
      pub fn storeCachedResponseforRequest(self: *Self, __cachedResponse:  * NSCachedURLResponse, __request:  * NSURLRequest, ) void {{
           return @as(*const fn(*Self, SEL,  * NSCachedURLResponse,  * NSURLRequest, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storeCachedResponse_forRequest_.get(), __cachedResponse, __request, );
 }}
var sel_removeCachedResponseForRequest_ = CachedSelector.init("removeCachedResponseForRequest:");
      pub fn removeCachedResponseForRequest(self: *Self, __request:  * NSURLRequest, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCachedResponseForRequest_.get(), __request, );
 }}
var sel_removeAllCachedResponses = CachedSelector.init("removeAllCachedResponses");
      pub fn removeAllCachedResponses(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllCachedResponses.get(), );
 }}
var sel_removeCachedResponsesSinceDate_ = CachedSelector.init("removeCachedResponsesSinceDate:");
      pub fn removeCachedResponsesSinceDate(self: *Self, __date:  * NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCachedResponsesSinceDate_.get(), __date, );
 }}
var sel_sharedURLCache = CachedSelector.init("sharedURLCache");
      pub fn sharedURLCache()  * NSURLCache {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSURLCache, @ptrCast(&objc_msgSend))(class.get(), sel_sharedURLCache.get(), );
 }}
var sel_setSharedURLCache_ = CachedSelector.init("setSharedURLCache:");
      pub fn setSharedURLCache(__sharedURLCache:  * NSURLCache, ) void {{
           return @as(*const fn(Class, SEL,  * NSURLCache, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setSharedURLCache_.get(), __sharedURLCache, );
 }}
var sel_memoryCapacity = CachedSelector.init("memoryCapacity");
      pub fn memoryCapacity(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_memoryCapacity.get(), );
 }}
var sel_setMemoryCapacity_ = CachedSelector.init("setMemoryCapacity:");
      pub fn setMemoryCapacity(self: *Self, __memoryCapacity: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMemoryCapacity_.get(), __memoryCapacity, );
 }}
var sel_diskCapacity = CachedSelector.init("diskCapacity");
      pub fn diskCapacity(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_diskCapacity.get(), );
 }}
var sel_setDiskCapacity_ = CachedSelector.init("setDiskCapacity:");
      pub fn setDiskCapacity(self: *Self, __diskCapacity: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDiskCapacity_.get(), __diskCapacity, );
 }}
var sel_currentMemoryUsage = CachedSelector.init("currentMemoryUsage");
      pub fn currentMemoryUsage(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentMemoryUsage.get(), );
 }}
var sel_currentDiskUsage = CachedSelector.init("currentDiskUsage");
      pub fn currentDiskUsage(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentDiskUsage.get(), );
 }}
var sel_storeCachedResponse_forDataTask_ = CachedSelector.init("storeCachedResponse:forDataTask:");
      pub fn storeCachedResponseforDataTask(self: *Self, __cachedResponse:  * NSCachedURLResponse, __dataTask:  * NSURLSessionDataTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSCachedURLResponse,  * NSURLSessionDataTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_storeCachedResponse_forDataTask_.get(), __cachedResponse, __dataTask, );
 }}
var sel_getCachedResponseForDataTask_completionHandler_ = CachedSelector.init("getCachedResponseForDataTask:completionHandler:");
      pub fn getCachedResponseForDataTaskcompletionHandler(self: *Self, __dataTask:  * NSURLSessionDataTask, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSessionDataTask, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getCachedResponseForDataTask_completionHandler_.get(), __dataTask, __completionHandler, );
 }}
var sel_removeCachedResponseForDataTask_ = CachedSelector.init("removeCachedResponseForDataTask:");
      pub fn removeCachedResponseForDataTask(self: *Self, __dataTask:  * NSURLSessionDataTask, ) void {{
           return @as(*const fn(*Self, SEL,  * NSURLSessionDataTask, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeCachedResponseForDataTask_.get(), __dataTask, );
 }}
  };
}

pub const NSURLCache = opaque {
  const Self = @This();
  pub usingnamespace NSURLCacheInterfaceMixin(Self, "NSURLCache");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLCache");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLCache");
};

pub fn NSBundleResourceRequestInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithTags_ = CachedSelector.init("initWithTags:");
      pub fn initWithTags(self: *Self, __tags:  * NSSet, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTags_.get(), __tags, );
 }}
var sel_initWithTags_bundle_ = CachedSelector.init("initWithTags:bundle:");
      pub fn initWithTagsbundle(self: *Self, __tags:  * NSSet, __bundle:  * NSBundle, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSSet,  * NSBundle, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTags_bundle_.get(), __tags, __bundle, );
 }}
var sel_beginAccessingResourcesWithCompletionHandler_ = CachedSelector.init("beginAccessingResourcesWithCompletionHandler:");
      pub fn beginAccessingResourcesWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_beginAccessingResourcesWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_conditionallyBeginAccessingResourcesWithCompletionHandler_ = CachedSelector.init("conditionallyBeginAccessingResourcesWithCompletionHandler:");
      pub fn conditionallyBeginAccessingResourcesWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_conditionallyBeginAccessingResourcesWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_endAccessingResources = CachedSelector.init("endAccessingResources");
      pub fn endAccessingResources(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endAccessingResources.get(), );
 }}
var sel_loadingPriority = CachedSelector.init("loadingPriority");
      pub fn loadingPriority(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadingPriority.get(), );
 }}
var sel_setLoadingPriority_ = CachedSelector.init("setLoadingPriority:");
      pub fn setLoadingPriority(self: *Self, __loadingPriority: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLoadingPriority_.get(), __loadingPriority, );
 }}
var sel_tags = CachedSelector.init("tags");
      pub fn tags(self: *Self, )  * NSSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tags.get(), );
 }}
var sel_bundle = CachedSelector.init("bundle");
      pub fn bundle(self: *Self, )  * NSBundle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSBundle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bundle.get(), );
 }}
var sel_progress = CachedSelector.init("progress");
      pub fn progress(self: *Self, )  * NSProgress {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_progress.get(), );
 }}
  };
}

pub const NSBundleResourceRequest = opaque {
  const Self = @This();
  pub usingnamespace NSBundleResourceRequestInterfaceMixin(Self, "NSBundleResourceRequest");
  pub usingnamespace NSProgressReportingProtocolMixin(Self, "NSBundleResourceRequest");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSBundleResourceRequest");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSBundleResourceRequest");
};

pub fn NSDateIntervalFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stringFromDate_toDate_ = CachedSelector.init("stringFromDate:toDate:");
      pub fn stringFromDatetoDate(self: *Self, __fromDate:  * NSDate, __toDate:  * NSDate, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDate, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromDate_toDate_.get(), __fromDate, __toDate, );
 }}
var sel_stringFromDateInterval_ = CachedSelector.init("stringFromDateInterval:");
      pub fn stringFromDateInterval(self: *Self, __dateInterval:  * NSDateInterval, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSDateInterval, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromDateInterval_.get(), __dateInterval, );
 }}
var sel_locale = CachedSelector.init("locale");
      pub fn locale(self: *Self, )  * NSLocale {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locale.get(), );
 }}
var sel_setLocale_ = CachedSelector.init("setLocale:");
      pub fn setLocale(self: *Self, __locale:  ?* NSLocale, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocale_.get(), __locale, );
 }}
var sel_calendar = CachedSelector.init("calendar");
      pub fn calendar(self: *Self, )  * NSCalendar {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSCalendar, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_calendar.get(), );
 }}
var sel_setCalendar_ = CachedSelector.init("setCalendar:");
      pub fn setCalendar(self: *Self, __calendar:  ?* NSCalendar, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSCalendar, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCalendar_.get(), __calendar, );
 }}
var sel_timeZone = CachedSelector.init("timeZone");
      pub fn timeZone(self: *Self, )  * NSTimeZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSTimeZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeZone.get(), );
 }}
var sel_setTimeZone_ = CachedSelector.init("setTimeZone:");
      pub fn setTimeZone(self: *Self, __timeZone:  ?* NSTimeZone, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSTimeZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeZone_.get(), __timeZone, );
 }}
var sel_dateTemplate = CachedSelector.init("dateTemplate");
      pub fn dateTemplate(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateTemplate.get(), );
 }}
var sel_setDateTemplate_ = CachedSelector.init("setDateTemplate:");
      pub fn setDateTemplate(self: *Self, __dateTemplate:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDateTemplate_.get(), __dateTemplate, );
 }}
var sel_dateStyle = CachedSelector.init("dateStyle");
      pub fn dateStyle(self: *Self, ) NSDateIntervalFormatterStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDateIntervalFormatterStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateStyle.get(), );
 }}
var sel_setDateStyle_ = CachedSelector.init("setDateStyle:");
      pub fn setDateStyle(self: *Self, __dateStyle: NSDateIntervalFormatterStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSDateIntervalFormatterStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDateStyle_.get(), __dateStyle, );
 }}
var sel_timeStyle = CachedSelector.init("timeStyle");
      pub fn timeStyle(self: *Self, ) NSDateIntervalFormatterStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDateIntervalFormatterStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeStyle.get(), );
 }}
var sel_setTimeStyle_ = CachedSelector.init("setTimeStyle:");
      pub fn setTimeStyle(self: *Self, __timeStyle: NSDateIntervalFormatterStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSDateIntervalFormatterStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeStyle_.get(), __timeStyle, );
 }}
  };
}

pub const NSDateIntervalFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSDateIntervalFormatterInterfaceMixin(Self, "NSDateIntervalFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDateIntervalFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSDateIntervalFormatter");
};

pub fn NSUnitConverterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_baseUnitValueFromValue_ = CachedSelector.init("baseUnitValueFromValue:");
      pub fn baseUnitValueFromValue(self: *Self, __value: f64, ) f64 {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_baseUnitValueFromValue_.get(), __value, );
 }}
var sel_valueFromBaseUnitValue_ = CachedSelector.init("valueFromBaseUnitValue:");
      pub fn valueFromBaseUnitValue(self: *Self, __baseUnitValue: f64, ) f64 {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueFromBaseUnitValue_.get(), __baseUnitValue, );
 }}
  };
}

pub const NSUnitConverter = opaque {
  const Self = @This();
  pub usingnamespace NSUnitConverterInterfaceMixin(Self, "NSUnitConverter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitConverter");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUnitConverter");
};

pub fn NSMutableIndexSetInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_addIndexes_ = CachedSelector.init("addIndexes:");
      pub fn addIndexes(self: *Self, __indexSet:  * NSIndexSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addIndexes_.get(), __indexSet, );
 }}
var sel_removeIndexes_ = CachedSelector.init("removeIndexes:");
      pub fn removeIndexes(self: *Self, __indexSet:  * NSIndexSet, ) void {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeIndexes_.get(), __indexSet, );
 }}
var sel_removeAllIndexes = CachedSelector.init("removeAllIndexes");
      pub fn removeAllIndexes(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllIndexes.get(), );
 }}
var sel_addIndex_ = CachedSelector.init("addIndex:");
      pub fn addIndex(self: *Self, __value: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addIndex_.get(), __value, );
 }}
var sel_removeIndex_ = CachedSelector.init("removeIndex:");
      pub fn removeIndex(self: *Self, __value: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeIndex_.get(), __value, );
 }}
var sel_addIndexesInRange_ = CachedSelector.init("addIndexesInRange:");
      pub fn addIndexesInRange(self: *Self, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addIndexesInRange_.get(), __range, );
 }}
var sel_removeIndexesInRange_ = CachedSelector.init("removeIndexesInRange:");
      pub fn removeIndexesInRange(self: *Self, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeIndexesInRange_.get(), __range, );
 }}
var sel_shiftIndexesStartingAtIndex_by_ = CachedSelector.init("shiftIndexesStartingAtIndex:by:");
      pub fn shiftIndexesStartingAtIndexby(self: *Self, __index: c_ulong, __delta: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shiftIndexesStartingAtIndex_by_.get(), __index, __delta, );
 }}
  };
}

pub const NSMutableIndexSet = opaque {
  const Self = @This();
  pub usingnamespace NSMutableIndexSetInterfaceMixin(Self, "NSMutableIndexSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableIndexSet");
  pub usingnamespace NSIndexSetInterfaceMixin(Self, "NSMutableIndexSet");
};

pub fn NSKeyedArchiverInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initRequiringSecureCoding_ = CachedSelector.init("initRequiringSecureCoding:");
      pub fn initRequiringSecureCoding(self: *Self, __requiresSecureCoding: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initRequiringSecureCoding_.get(), __requiresSecureCoding, );
 }}
var sel_archivedDataWithRootObject_requiringSecureCoding_error_ = CachedSelector.init("archivedDataWithRootObject:requiringSecureCoding:error:");
      pub fn archivedDataWithRootObjectrequiringSecureCodingerror(__object: id, __requiresSecureCoding: c_int, __an_error:  [*c]  ?* NSError, )  ?* NSData {{
           return @as(*const fn(Class, SEL, id, c_int,  [*c]  ?* NSError, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(class.get(), sel_archivedDataWithRootObject_requiringSecureCoding_error_.get(), __object, __requiresSecureCoding, __an_error, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initForWritingWithMutableData_ = CachedSelector.init("initForWritingWithMutableData:");
      pub fn initForWritingWithMutableData(self: *Self, __data:  * NSMutableData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSMutableData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initForWritingWithMutableData_.get(), __data, );
 }}
var sel_archivedDataWithRootObject_ = CachedSelector.init("archivedDataWithRootObject:");
      pub fn archivedDataWithRootObject(__rootObject: id, )  * NSData {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(class.get(), sel_archivedDataWithRootObject_.get(), __rootObject, );
 }}
var sel_archiveRootObject_toFile_ = CachedSelector.init("archiveRootObject:toFile:");
      pub fn archiveRootObjecttoFile(__rootObject: id, __path:  * NSString, ) c_int {{
           return @as(*const fn(Class, SEL, id,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_archiveRootObject_toFile_.get(), __rootObject, __path, );
 }}
var sel_finishEncoding = CachedSelector.init("finishEncoding");
      pub fn finishEncoding(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_finishEncoding.get(), );
 }}
var sel_setClassName_forClass_ = CachedSelector.init("setClassName:forClass:");
      pub fn setClassNameforClass(__codedName:  ?* NSString, __cls: Class, ) void {{
           return @as(*const fn(Class, SEL,  ?* NSString, Class, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setClassName_forClass_.get(), __codedName, __cls, );
 }}
var sel_classNameForClass_ = CachedSelector.init("classNameForClass:");
      pub fn classNameForClass(__cls: Class, )  ?* NSString {{
           return @as(*const fn(Class, SEL, Class, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(class.get(), sel_classNameForClass_.get(), __cls, );
 }}
var sel_encodeObject_forKey_ = CachedSelector.init("encodeObject:forKey:");
      pub fn encodeObjectforKey(self: *Self, __object: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeObject_forKey_.get(), __object, __key, );
 }}
var sel_encodeConditionalObject_forKey_ = CachedSelector.init("encodeConditionalObject:forKey:");
      pub fn encodeConditionalObjectforKey(self: *Self, __object: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeConditionalObject_forKey_.get(), __object, __key, );
 }}
var sel_encodeBool_forKey_ = CachedSelector.init("encodeBool:forKey:");
      pub fn encodeBoolforKey(self: *Self, __value: c_int, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_int,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeBool_forKey_.get(), __value, __key, );
 }}
var sel_encodeInt_forKey_ = CachedSelector.init("encodeInt:forKey:");
      pub fn encodeIntforKey(self: *Self, __value: c_int, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_int,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeInt_forKey_.get(), __value, __key, );
 }}
var sel_encodeInt32_forKey_ = CachedSelector.init("encodeInt32:forKey:");
      pub fn encodeInt32forKey(self: *Self, __value: c_int, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_int,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeInt32_forKey_.get(), __value, __key, );
 }}
var sel_encodeInt64_forKey_ = CachedSelector.init("encodeInt64:forKey:");
      pub fn encodeInt64forKey(self: *Self, __value: c_longlong, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, c_longlong,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeInt64_forKey_.get(), __value, __key, );
 }}
var sel_encodeFloat_forKey_ = CachedSelector.init("encodeFloat:forKey:");
      pub fn encodeFloatforKey(self: *Self, __value: f32, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, f32,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeFloat_forKey_.get(), __value, __key, );
 }}
var sel_encodeDouble_forKey_ = CachedSelector.init("encodeDouble:forKey:");
      pub fn encodeDoubleforKey(self: *Self, __value: f64, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, f64,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeDouble_forKey_.get(), __value, __key, );
 }}
var sel_encodeBytes_length_forKey_ = CachedSelector.init("encodeBytes:length:forKey:");
      pub fn encodeByteslengthforKey(self: *Self, __bytes:  [*c] u8, __length: c_ulong, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] u8, c_ulong,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodeBytes_length_forKey_.get(), __bytes, __length, __key, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSKeyedArchiverDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSKeyedArchiverDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSKeyedArchiverDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSKeyedArchiverDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_outputFormat = CachedSelector.init("outputFormat");
      pub fn outputFormat(self: *Self, ) NSPropertyListFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSPropertyListFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_outputFormat.get(), );
 }}
var sel_setOutputFormat_ = CachedSelector.init("setOutputFormat:");
      pub fn setOutputFormat(self: *Self, __outputFormat: NSPropertyListFormat, ) void {{
           return @as(*const fn(*Self, SEL, NSPropertyListFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOutputFormat_.get(), __outputFormat, );
 }}
var sel_encodedData = CachedSelector.init("encodedData");
      pub fn encodedData(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_encodedData.get(), );
 }}
var sel_requiresSecureCoding = CachedSelector.init("requiresSecureCoding");
      pub fn requiresSecureCoding(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requiresSecureCoding.get(), );
 }}
var sel_setRequiresSecureCoding_ = CachedSelector.init("setRequiresSecureCoding:");
      pub fn setRequiresSecureCoding(self: *Self, __requiresSecureCoding: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRequiresSecureCoding_.get(), __requiresSecureCoding, );
 }}
  };
}

pub const NSKeyedArchiver = opaque {
  const Self = @This();
  pub usingnamespace NSKeyedArchiverInterfaceMixin(Self, "NSKeyedArchiver");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSKeyedArchiver");
  pub usingnamespace NSCoderInterfaceMixin(Self, "NSKeyedArchiver");
};

pub fn NSAffineTransformInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_transform = CachedSelector.init("transform");
      pub fn transform()  * NSAffineTransform {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSAffineTransform, @ptrCast(&objc_msgSend))(class.get(), sel_transform.get(), );
 }}
var sel_initWithTransform_ = CachedSelector.init("initWithTransform:");
      pub fn initWithTransform(self: *Self, __transform:  * NSAffineTransform, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSAffineTransform, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithTransform_.get(), __transform, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_translateXBy_yBy_ = CachedSelector.init("translateXBy:yBy:");
      pub fn translateXByyBy(self: *Self, __deltaX: f64, __deltaY: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_translateXBy_yBy_.get(), __deltaX, __deltaY, );
 }}
var sel_rotateByDegrees_ = CachedSelector.init("rotateByDegrees:");
      pub fn rotateByDegrees(self: *Self, __angle: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rotateByDegrees_.get(), __angle, );
 }}
var sel_rotateByRadians_ = CachedSelector.init("rotateByRadians:");
      pub fn rotateByRadians(self: *Self, __angle: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rotateByRadians_.get(), __angle, );
 }}
var sel_scaleBy_ = CachedSelector.init("scaleBy:");
      pub fn scaleBy(self: *Self, __scale: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scaleBy_.get(), __scale, );
 }}
var sel_scaleXBy_yBy_ = CachedSelector.init("scaleXBy:yBy:");
      pub fn scaleXByyBy(self: *Self, __scaleX: f64, __scaleY: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scaleXBy_yBy_.get(), __scaleX, __scaleY, );
 }}
var sel_invert = CachedSelector.init("invert");
      pub fn invert(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invert.get(), );
 }}
var sel_appendTransform_ = CachedSelector.init("appendTransform:");
      pub fn appendTransform(self: *Self, __transform:  * NSAffineTransform, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAffineTransform, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appendTransform_.get(), __transform, );
 }}
var sel_prependTransform_ = CachedSelector.init("prependTransform:");
      pub fn prependTransform(self: *Self, __transform:  * NSAffineTransform, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAffineTransform, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_prependTransform_.get(), __transform, );
 }}
var sel_transformPoint_ = CachedSelector.init("transformPoint:");
      pub fn transformPoint(self: *Self, __aPoint: CGPoint, ) CGPoint {{
           return @as(*const fn(*Self, SEL, CGPoint, ) callconv(.C) CGPoint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transformPoint_.get(), __aPoint, );
 }}
var sel_transformSize_ = CachedSelector.init("transformSize:");
      pub fn transformSize(self: *Self, __aSize: CGSize, ) CGSize {{
           return @as(*const fn(*Self, SEL, CGSize, ) callconv(.C) CGSize, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transformSize_.get(), __aSize, );
 }}
var sel_transformStruct = CachedSelector.init("transformStruct");
      pub fn transformStruct(self: *Self, ) NSAffineTransformStruct {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSAffineTransformStruct, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transformStruct.get(), );
 }}
var sel_setTransformStruct_ = CachedSelector.init("setTransformStruct:");
      pub fn setTransformStruct(self: *Self, __transformStruct: NSAffineTransformStruct, ) void {{
           return @as(*const fn(*Self, SEL, NSAffineTransformStruct, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTransformStruct_.get(), __transformStruct, );
 }}
  };
}

pub const NSAffineTransform = opaque {
  const Self = @This();
  pub usingnamespace NSAffineTransformInterfaceMixin(Self, "NSAffineTransform");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSAffineTransform");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSAffineTransform");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSAffineTransform");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSAffineTransform");
};

pub fn NSDimensionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithSymbol_converter_ = CachedSelector.init("initWithSymbol:converter:");
      pub fn initWithSymbolconverter(self: *Self, __symbol:  * NSString, __converter:  * NSUnitConverter, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSUnitConverter, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSymbol_converter_.get(), __symbol, __converter, );
 }}
var sel_baseUnit = CachedSelector.init("baseUnit");
      pub fn baseUnit() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_baseUnit.get(), );
 }}
var sel_converter = CachedSelector.init("converter");
      pub fn converter(self: *Self, )  * NSUnitConverter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSUnitConverter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_converter.get(), );
 }}
  };
}

pub const NSDimension = opaque {
  const Self = @This();
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSDimension");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSDimension");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDimension");
  pub usingnamespace NSUnitInterfaceMixin(Self, "NSDimension");
};

pub fn NSKeyedUnarchiverInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initForReadingFromData_error_ = CachedSelector.init("initForReadingFromData:error:");
      pub fn initForReadingFromDataerror(self: *Self, __data:  * NSData, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initForReadingFromData_error_.get(), __data, __an_error, );
 }}
var sel_unarchivedObjectOfClass_fromData_error_ = CachedSelector.init("unarchivedObjectOfClass:fromData:error:");
      pub fn unarchivedObjectOfClassfromDataerror(__cls: Class, __data:  * NSData, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(Class, SEL, Class,  * NSData,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_unarchivedObjectOfClass_fromData_error_.get(), __cls, __data, __an_error, );
 }}
var sel_unarchivedArrayOfObjectsOfClass_fromData_error_ = CachedSelector.init("unarchivedArrayOfObjectsOfClass:fromData:error:");
      pub fn unarchivedArrayOfObjectsOfClassfromDataerror(__cls: Class, __data:  * NSData, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(Class, SEL, Class,  * NSData,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_unarchivedArrayOfObjectsOfClass_fromData_error_.get(), __cls, __data, __an_error, );
 }}
var sel_unarchivedDictionaryWithKeysOfClass_objectsOfClass_fromData_error_ = CachedSelector.init("unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:");
      pub fn unarchivedDictionaryWithKeysOfClassobjectsOfClassfromDataerror(__keyCls: Class, __valueCls: Class, __data:  * NSData, __an_error:  [*c]  ?* NSError, )  ?* NSDictionary {{
           return @as(*const fn(Class, SEL, Class, Class,  * NSData,  [*c]  ?* NSError, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_unarchivedDictionaryWithKeysOfClass_objectsOfClass_fromData_error_.get(), __keyCls, __valueCls, __data, __an_error, );
 }}
var sel_unarchivedObjectOfClasses_fromData_error_ = CachedSelector.init("unarchivedObjectOfClasses:fromData:error:");
      pub fn unarchivedObjectOfClassesfromDataerror(__classes:  * NSSet, __data:  * NSData, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(Class, SEL,  * NSSet,  * NSData,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_unarchivedObjectOfClasses_fromData_error_.get(), __classes, __data, __an_error, );
 }}
var sel_unarchivedArrayOfObjectsOfClasses_fromData_error_ = CachedSelector.init("unarchivedArrayOfObjectsOfClasses:fromData:error:");
      pub fn unarchivedArrayOfObjectsOfClassesfromDataerror(__classes:  * NSSet, __data:  * NSData, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(Class, SEL,  * NSSet,  * NSData,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_unarchivedArrayOfObjectsOfClasses_fromData_error_.get(), __classes, __data, __an_error, );
 }}
var sel_unarchivedDictionaryWithKeysOfClasses_objectsOfClasses_fromData_error_ = CachedSelector.init("unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:");
      pub fn unarchivedDictionaryWithKeysOfClassesobjectsOfClassesfromDataerror(__keyClasses:  * NSSet, __valueClasses:  * NSSet, __data:  * NSData, __an_error:  [*c]  ?* NSError, )  ?* NSDictionary {{
           return @as(*const fn(Class, SEL,  * NSSet,  * NSSet,  * NSData,  [*c]  ?* NSError, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_unarchivedDictionaryWithKeysOfClasses_objectsOfClasses_fromData_error_.get(), __keyClasses, __valueClasses, __data, __an_error, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initForReadingWithData_ = CachedSelector.init("initForReadingWithData:");
      pub fn initForReadingWithData(self: *Self, __data:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initForReadingWithData_.get(), __data, );
 }}
var sel_unarchiveObjectWithData_ = CachedSelector.init("unarchiveObjectWithData:");
      pub fn unarchiveObjectWithData(__data:  * NSData, ) id {{
           return @as(*const fn(Class, SEL,  * NSData, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_unarchiveObjectWithData_.get(), __data, );
 }}
var sel_unarchiveTopLevelObjectWithData_error_ = CachedSelector.init("unarchiveTopLevelObjectWithData:error:");
      pub fn unarchiveTopLevelObjectWithDataerror(__data:  * NSData, __an_error:  [*c]  ?* NSError, ) id {{
           return @as(*const fn(Class, SEL,  * NSData,  [*c]  ?* NSError, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_unarchiveTopLevelObjectWithData_error_.get(), __data, __an_error, );
 }}
var sel_unarchiveObjectWithFile_ = CachedSelector.init("unarchiveObjectWithFile:");
      pub fn unarchiveObjectWithFile(__path:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_unarchiveObjectWithFile_.get(), __path, );
 }}
var sel_finishDecoding = CachedSelector.init("finishDecoding");
      pub fn finishDecoding(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_finishDecoding.get(), );
 }}
var sel_setClass_forClassName_ = CachedSelector.init("setClass:forClassName:");
      pub fn setClassforClassName(__cls: Class, __codedName:  * NSString, ) void {{
           return @as(*const fn(Class, SEL, Class,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setClass_forClassName_.get(), __cls, __codedName, );
 }}
var sel_classForClassName_ = CachedSelector.init("classForClassName:");
      pub fn classForClassName(__codedName:  * NSString, ) Class {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) Class, @ptrCast(&objc_msgSend))(class.get(), sel_classForClassName_.get(), __codedName, );
 }}
var sel_containsValueForKey_ = CachedSelector.init("containsValueForKey:");
      pub fn containsValueForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsValueForKey_.get(), __key, );
 }}
var sel_decodeObjectForKey_ = CachedSelector.init("decodeObjectForKey:");
      pub fn decodeObjectForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeObjectForKey_.get(), __key, );
 }}
var sel_decodeBoolForKey_ = CachedSelector.init("decodeBoolForKey:");
      pub fn decodeBoolForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeBoolForKey_.get(), __key, );
 }}
var sel_decodeIntForKey_ = CachedSelector.init("decodeIntForKey:");
      pub fn decodeIntForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeIntForKey_.get(), __key, );
 }}
var sel_decodeInt32ForKey_ = CachedSelector.init("decodeInt32ForKey:");
      pub fn decodeInt32ForKey(self: *Self, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeInt32ForKey_.get(), __key, );
 }}
var sel_decodeInt64ForKey_ = CachedSelector.init("decodeInt64ForKey:");
      pub fn decodeInt64ForKey(self: *Self, __key:  * NSString, ) c_longlong {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeInt64ForKey_.get(), __key, );
 }}
var sel_decodeFloatForKey_ = CachedSelector.init("decodeFloatForKey:");
      pub fn decodeFloatForKey(self: *Self, __key:  * NSString, ) f32 {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeFloatForKey_.get(), __key, );
 }}
var sel_decodeDoubleForKey_ = CachedSelector.init("decodeDoubleForKey:");
      pub fn decodeDoubleForKey(self: *Self, __key:  * NSString, ) f64 {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeDoubleForKey_.get(), __key, );
 }}
var sel_decodeBytesForKey_returnedLength_ = CachedSelector.init("decodeBytesForKey:returnedLength:");
      pub fn decodeBytesForKeyreturnedLength(self: *Self, __key:  * NSString, __lengthp:  [*c] c_ulong, )  [*c] u8 {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c] c_ulong, ) callconv(.C)  [*c] u8, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodeBytesForKey_returnedLength_.get(), __key, __lengthp, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSKeyedUnarchiverDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSKeyedUnarchiverDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSKeyedUnarchiverDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSKeyedUnarchiverDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_requiresSecureCoding = CachedSelector.init("requiresSecureCoding");
      pub fn requiresSecureCoding(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requiresSecureCoding.get(), );
 }}
var sel_setRequiresSecureCoding_ = CachedSelector.init("setRequiresSecureCoding:");
      pub fn setRequiresSecureCoding(self: *Self, __requiresSecureCoding: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRequiresSecureCoding_.get(), __requiresSecureCoding, );
 }}
var sel_decodingFailurePolicy = CachedSelector.init("decodingFailurePolicy");
      pub fn decodingFailurePolicy(self: *Self, ) NSDecodingFailurePolicy {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSDecodingFailurePolicy, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_decodingFailurePolicy.get(), );
 }}
var sel_setDecodingFailurePolicy_ = CachedSelector.init("setDecodingFailurePolicy:");
      pub fn setDecodingFailurePolicy(self: *Self, __decodingFailurePolicy: NSDecodingFailurePolicy, ) void {{
           return @as(*const fn(*Self, SEL, NSDecodingFailurePolicy, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDecodingFailurePolicy_.get(), __decodingFailurePolicy, );
 }}
  };
}

pub const NSKeyedUnarchiver = opaque {
  const Self = @This();
  pub usingnamespace NSKeyedUnarchiverInterfaceMixin(Self, "NSKeyedUnarchiver");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSKeyedUnarchiver");
  pub usingnamespace NSCoderInterfaceMixin(Self, "NSKeyedUnarchiver");
};

pub fn MTLTypeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_dataType = CachedSelector.init("dataType");
      pub fn dataType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dataType.get(), );
 }}
  };
}

pub const MTLType = opaque {
  const Self = @This();
  pub usingnamespace MTLTypeInterfaceMixin(Self, "MTLType");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLType");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLType");
};

pub fn MTLTileRenderPipelineColorAttachmentDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_pixelFormat = CachedSelector.init("pixelFormat");
      pub fn pixelFormat(self: *Self, ) MTLPixelFormat {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLPixelFormat, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pixelFormat.get(), );
 }}
var sel_setPixelFormat_ = CachedSelector.init("setPixelFormat:");
      pub fn setPixelFormat(self: *Self, __pixelFormat: MTLPixelFormat, ) void {{
           return @as(*const fn(*Self, SEL, MTLPixelFormat, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPixelFormat_.get(), __pixelFormat, );
 }}
  };
}

pub const MTLTileRenderPipelineColorAttachmentDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLTileRenderPipelineColorAttachmentDescriptorInterfaceMixin(Self, "MTLTileRenderPipelineColorAttachmentDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLTileRenderPipelineColorAttachmentDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLTileRenderPipelineColorAttachmentDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLTileRenderPipelineColorAttachmentDescriptor");
};

pub fn NSArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndex_ = CachedSelector.init("objectAtIndex:");
      pub fn objectAtIndex(self: *Self, __index: c_ulong, ) id {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndex_.get(), __index, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithObjects_count_ = CachedSelector.init("initWithObjects:count:");
      pub fn initWithObjectscount(self: *Self, __objects: [*c]id, __cnt: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, [*c]id, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjects_count_.get(), __objects, __cnt, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_count = CachedSelector.init("count");
      pub fn count(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_count.get(), );
 }}
var sel_arrayByAddingObject_ = CachedSelector.init("arrayByAddingObject:");
      pub fn arrayByAddingObject(self: *Self, __anObject: id, )  * NSArray {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayByAddingObject_.get(), __anObject, );
 }}
var sel_arrayByAddingObjectsFromArray_ = CachedSelector.init("arrayByAddingObjectsFromArray:");
      pub fn arrayByAddingObjectsFromArray(self: *Self, __otherArray:  * NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayByAddingObjectsFromArray_.get(), __otherArray, );
 }}
var sel_componentsJoinedByString_ = CachedSelector.init("componentsJoinedByString:");
      pub fn componentsJoinedByString(self: *Self, __separator:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_componentsJoinedByString_.get(), __separator, );
 }}
var sel_containsObject_ = CachedSelector.init("containsObject:");
      pub fn containsObject(self: *Self, __anObject: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsObject_.get(), __anObject, );
 }}
var sel_descriptionWithLocale_ = CachedSelector.init("descriptionWithLocale:");
      pub fn descriptionWithLocale(self: *Self, __locale: id, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_.get(), __locale, );
 }}
var sel_descriptionWithLocale_indent_ = CachedSelector.init("descriptionWithLocale:indent:");
      pub fn descriptionWithLocaleindent(self: *Self, __locale: id, __level: c_ulong, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, c_ulong, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_indent_.get(), __locale, __level, );
 }}
var sel_firstObjectCommonWithArray_ = CachedSelector.init("firstObjectCommonWithArray:");
      pub fn firstObjectCommonWithArray(self: *Self, __otherArray:  * NSArray, ) id {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_firstObjectCommonWithArray_.get(), __otherArray, );
 }}
var sel_getObjects_range_ = CachedSelector.init("getObjects:range:");
      pub fn getObjectsrange(self: *Self, __objects: [*c]id, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c]id, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjects_range_.get(), __objects, __range, );
 }}
var sel_indexOfObject_ = CachedSelector.init("indexOfObject:");
      pub fn indexOfObject(self: *Self, __anObject: id, ) c_ulong {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObject_.get(), __anObject, );
 }}
var sel_indexOfObject_inRange_ = CachedSelector.init("indexOfObject:inRange:");
      pub fn indexOfObjectinRange(self: *Self, __anObject: id, __range: _NSRange, ) c_ulong {{
           return @as(*const fn(*Self, SEL, id, _NSRange, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObject_inRange_.get(), __anObject, __range, );
 }}
var sel_indexOfObjectIdenticalTo_ = CachedSelector.init("indexOfObjectIdenticalTo:");
      pub fn indexOfObjectIdenticalTo(self: *Self, __anObject: id, ) c_ulong {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObjectIdenticalTo_.get(), __anObject, );
 }}
var sel_indexOfObjectIdenticalTo_inRange_ = CachedSelector.init("indexOfObjectIdenticalTo:inRange:");
      pub fn indexOfObjectIdenticalToinRange(self: *Self, __anObject: id, __range: _NSRange, ) c_ulong {{
           return @as(*const fn(*Self, SEL, id, _NSRange, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObjectIdenticalTo_inRange_.get(), __anObject, __range, );
 }}
var sel_isEqualToArray_ = CachedSelector.init("isEqualToArray:");
      pub fn isEqualToArray(self: *Self, __otherArray:  * NSArray, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToArray_.get(), __otherArray, );
 }}
var sel_objectEnumerator = CachedSelector.init("objectEnumerator");
      pub fn objectEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectEnumerator.get(), );
 }}
var sel_reverseObjectEnumerator = CachedSelector.init("reverseObjectEnumerator");
      pub fn reverseObjectEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reverseObjectEnumerator.get(), );
 }}
var sel_sortedArrayUsingFunction_context_ = CachedSelector.init("sortedArrayUsingFunction:context:");
      pub fn sortedArrayUsingFunctioncontext(self: *Self, __comparator:  [*c] ?*u8, __context:  [*c] void, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8,  [*c] void, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayUsingFunction_context_.get(), __comparator, __context, );
 }}
var sel_sortedArrayUsingFunction_context_hint_ = CachedSelector.init("sortedArrayUsingFunction:context:hint:");
      pub fn sortedArrayUsingFunctioncontexthint(self: *Self, __comparator:  [*c] ?*u8, __context:  [*c] void, __hint:  ?* NSData, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  [*c] ?*u8,  [*c] void,  ?* NSData, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayUsingFunction_context_hint_.get(), __comparator, __context, __hint, );
 }}
var sel_sortedArrayUsingSelector_ = CachedSelector.init("sortedArrayUsingSelector:");
      pub fn sortedArrayUsingSelector(self: *Self, __comparator: SEL, )  * NSArray {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayUsingSelector_.get(), __comparator, );
 }}
var sel_subarrayWithRange_ = CachedSelector.init("subarrayWithRange:");
      pub fn subarrayWithRange(self: *Self, __range: _NSRange, )  * NSArray {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_subarrayWithRange_.get(), __range, );
 }}
var sel_writeToURL_error_ = CachedSelector.init("writeToURL:error:");
      pub fn writeToURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToURL_error_.get(), __url, __an_error, );
 }}
var sel_makeObjectsPerformSelector_ = CachedSelector.init("makeObjectsPerformSelector:");
      pub fn makeObjectsPerformSelector(self: *Self, __aSelector: SEL, ) void {{
           return @as(*const fn(*Self, SEL, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_makeObjectsPerformSelector_.get(), __aSelector, );
 }}
var sel_makeObjectsPerformSelector_withObject_ = CachedSelector.init("makeObjectsPerformSelector:withObject:");
      pub fn makeObjectsPerformSelectorwithObject(self: *Self, __aSelector: SEL, __argument: id, ) void {{
           return @as(*const fn(*Self, SEL, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_makeObjectsPerformSelector_withObject_.get(), __aSelector, __argument, );
 }}
var sel_objectsAtIndexes_ = CachedSelector.init("objectsAtIndexes:");
      pub fn objectsAtIndexes(self: *Self, __indexes:  * NSIndexSet, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectsAtIndexes_.get(), __indexes, );
 }}
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __idx: c_ulong, ) id {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __idx, );
 }}
var sel_enumerateObjectsUsingBlock_ = CachedSelector.init("enumerateObjectsUsingBlock:");
      pub fn enumerateObjectsUsingBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateObjectsUsingBlock_.get(), __block, );
 }}
var sel_enumerateObjectsWithOptions_usingBlock_ = CachedSelector.init("enumerateObjectsWithOptions:usingBlock:");
      pub fn enumerateObjectsWithOptionsusingBlock(self: *Self, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateObjectsWithOptions_usingBlock_.get(), __opts, __block, );
 }}
var sel_enumerateObjectsAtIndexes_options_usingBlock_ = CachedSelector.init("enumerateObjectsAtIndexes:options:usingBlock:");
      pub fn enumerateObjectsAtIndexesoptionsusingBlock(self: *Self, __s:  * NSIndexSet, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateObjectsAtIndexes_options_usingBlock_.get(), __s, __opts, __block, );
 }}
var sel_indexOfObjectPassingTest_ = CachedSelector.init("indexOfObjectPassingTest:");
      pub fn indexOfObjectPassingTest(self: *Self, __predicate: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObjectPassingTest_.get(), __predicate, );
 }}
var sel_indexOfObjectWithOptions_passingTest_ = CachedSelector.init("indexOfObjectWithOptions:passingTest:");
      pub fn indexOfObjectWithOptionspassingTest(self: *Self, __opts: NSEnumerationOptions, __predicate: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObjectWithOptions_passingTest_.get(), __opts, __predicate, );
 }}
var sel_indexOfObjectAtIndexes_options_passingTest_ = CachedSelector.init("indexOfObjectAtIndexes:options:passingTest:");
      pub fn indexOfObjectAtIndexesoptionspassingTest(self: *Self, __s:  * NSIndexSet, __opts: NSEnumerationOptions, __predicate: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, NSEnumerationOptions, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObjectAtIndexes_options_passingTest_.get(), __s, __opts, __predicate, );
 }}
var sel_indexesOfObjectsPassingTest_ = CachedSelector.init("indexesOfObjectsPassingTest:");
      pub fn indexesOfObjectsPassingTest(self: *Self, __predicate: ?*u8, )  * NSIndexSet {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C)  * NSIndexSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexesOfObjectsPassingTest_.get(), __predicate, );
 }}
var sel_indexesOfObjectsWithOptions_passingTest_ = CachedSelector.init("indexesOfObjectsWithOptions:passingTest:");
      pub fn indexesOfObjectsWithOptionspassingTest(self: *Self, __opts: NSEnumerationOptions, __predicate: ?*u8, )  * NSIndexSet {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C)  * NSIndexSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexesOfObjectsWithOptions_passingTest_.get(), __opts, __predicate, );
 }}
var sel_indexesOfObjectsAtIndexes_options_passingTest_ = CachedSelector.init("indexesOfObjectsAtIndexes:options:passingTest:");
      pub fn indexesOfObjectsAtIndexesoptionspassingTest(self: *Self, __s:  * NSIndexSet, __opts: NSEnumerationOptions, __predicate: ?*u8, )  * NSIndexSet {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, NSEnumerationOptions, ?*u8, ) callconv(.C)  * NSIndexSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexesOfObjectsAtIndexes_options_passingTest_.get(), __s, __opts, __predicate, );
 }}
var sel_sortedArrayUsingComparator_ = CachedSelector.init("sortedArrayUsingComparator:");
      pub fn sortedArrayUsingComparator(self: *Self, __cmptr: ?*u8, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayUsingComparator_.get(), __cmptr, );
 }}
var sel_sortedArrayWithOptions_usingComparator_ = CachedSelector.init("sortedArrayWithOptions:usingComparator:");
      pub fn sortedArrayWithOptionsusingComparator(self: *Self, __opts: NSSortOptions, __cmptr: ?*u8, )  * NSArray {{
           return @as(*const fn(*Self, SEL, NSSortOptions, ?*u8, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayWithOptions_usingComparator_.get(), __opts, __cmptr, );
 }}
var sel_indexOfObject_inSortedRange_options_usingComparator_ = CachedSelector.init("indexOfObject:inSortedRange:options:usingComparator:");
      pub fn indexOfObjectinSortedRangeoptionsusingComparator(self: *Self, __obj: id, __r: _NSRange, __opts: NSBinarySearchingOptions, __cmp: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL, id, _NSRange, NSBinarySearchingOptions, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObject_inSortedRange_options_usingComparator_.get(), __obj, __r, __opts, __cmp, );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_firstObject = CachedSelector.init("firstObject");
      pub fn firstObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_firstObject.get(), );
 }}
var sel_lastObject = CachedSelector.init("lastObject");
      pub fn lastObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lastObject.get(), );
 }}
var sel_sortedArrayHint = CachedSelector.init("sortedArrayHint");
      pub fn sortedArrayHint(self: *Self, )  * NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayHint.get(), );
 }}
var sel_array = CachedSelector.init("array");
      pub fn array() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_array.get(), );
 }}
var sel_arrayWithObject_ = CachedSelector.init("arrayWithObject:");
      pub fn arrayWithObject(__anObject: id, ) *Self {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithObject_.get(), __anObject, );
 }}
var sel_arrayWithObjects_count_ = CachedSelector.init("arrayWithObjects:count:");
      pub fn arrayWithObjectscount(__objects: [*c]id, __cnt: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, [*c]id, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithObjects_count_.get(), __objects, __cnt, );
 }}
var sel_arrayWithObjects_ = CachedSelector.init("arrayWithObjects:");
      pub fn arrayWithObjects(__firstObj: id, ) *Self {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithObjects_.get(), __firstObj, );
 }}
var sel_arrayWithArray_ = CachedSelector.init("arrayWithArray:");
      pub fn arrayWithArray(__array:  * NSArray, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithArray_.get(), __array, );
 }}
var sel_initWithObjects_ = CachedSelector.init("initWithObjects:");
      pub fn initWithObjects(self: *Self, __firstObj: id, ) *Self {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjects_.get(), __firstObj, );
 }}
var sel_initWithArray_ = CachedSelector.init("initWithArray:");
      pub fn initWithArray(self: *Self, __array:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithArray_.get(), __array, );
 }}
var sel_initWithArray_copyItems_ = CachedSelector.init("initWithArray:copyItems:");
      pub fn initWithArraycopyItems(self: *Self, __array:  * NSArray, __flag: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithArray_copyItems_.get(), __array, __flag, );
 }}
var sel_initWithContentsOfURL_error_ = CachedSelector.init("initWithContentsOfURL:error:");
      pub fn initWithContentsOfURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_error_.get(), __url, __an_error, );
 }}
var sel_arrayWithContentsOfURL_error_ = CachedSelector.init("arrayWithContentsOfURL:error:");
      pub fn arrayWithContentsOfURLerror(__url:  * NSURL, __an_error:  [*c]  ?* NSError, )  ?* NSArray {{
           return @as(*const fn(Class, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithContentsOfURL_error_.get(), __url, __an_error, );
 }}
var sel_differenceFromArray_withOptions_usingEquivalenceTest_ = CachedSelector.init("differenceFromArray:withOptions:usingEquivalenceTest:");
      pub fn differenceFromArraywithOptionsusingEquivalenceTest(self: *Self, __other:  * NSArray, __options: NSOrderedCollectionDifferenceCalculationOptions, __block: ?*u8, )  * NSOrderedCollectionDifference {{
           return @as(*const fn(*Self, SEL,  * NSArray, NSOrderedCollectionDifferenceCalculationOptions, ?*u8, ) callconv(.C)  * NSOrderedCollectionDifference, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_differenceFromArray_withOptions_usingEquivalenceTest_.get(), __other, __options, __block, );
 }}
var sel_differenceFromArray_withOptions_ = CachedSelector.init("differenceFromArray:withOptions:");
      pub fn differenceFromArraywithOptions(self: *Self, __other:  * NSArray, __options: NSOrderedCollectionDifferenceCalculationOptions, )  * NSOrderedCollectionDifference {{
           return @as(*const fn(*Self, SEL,  * NSArray, NSOrderedCollectionDifferenceCalculationOptions, ) callconv(.C)  * NSOrderedCollectionDifference, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_differenceFromArray_withOptions_.get(), __other, __options, );
 }}
var sel_differenceFromArray_ = CachedSelector.init("differenceFromArray:");
      pub fn differenceFromArray(self: *Self, __other:  * NSArray, )  * NSOrderedCollectionDifference {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSOrderedCollectionDifference, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_differenceFromArray_.get(), __other, );
 }}
var sel_arrayByApplyingDifference_ = CachedSelector.init("arrayByApplyingDifference:");
      pub fn arrayByApplyingDifference(self: *Self, __difference:  * NSOrderedCollectionDifference, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSOrderedCollectionDifference, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arrayByApplyingDifference_.get(), __difference, );
 }}
var sel_getObjects_ = CachedSelector.init("getObjects:");
      pub fn getObjects(self: *Self, __objects: [*c]id, ) void {{
           return @as(*const fn(*Self, SEL, [*c]id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjects_.get(), __objects, );
 }}
var sel_arrayWithContentsOfFile_ = CachedSelector.init("arrayWithContentsOfFile:");
      pub fn arrayWithContentsOfFile(__path:  * NSString, )  ?* NSArray {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithContentsOfFile_.get(), __path, );
 }}
var sel_arrayWithContentsOfURL_ = CachedSelector.init("arrayWithContentsOfURL:");
      pub fn arrayWithContentsOfURL(__url:  * NSURL, )  ?* NSArray {{
           return @as(*const fn(Class, SEL,  * NSURL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_arrayWithContentsOfURL_.get(), __url, );
 }}
var sel_initWithContentsOfFile_ = CachedSelector.init("initWithContentsOfFile:");
      pub fn initWithContentsOfFile(self: *Self, __path:  * NSString, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfFile_.get(), __path, );
 }}
var sel_initWithContentsOfURL_ = CachedSelector.init("initWithContentsOfURL:");
      pub fn initWithContentsOfURL(self: *Self, __url:  * NSURL, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithContentsOfURL_.get(), __url, );
 }}
var sel_writeToFile_atomically_ = CachedSelector.init("writeToFile:atomically:");
      pub fn writeToFileatomically(self: *Self, __path:  * NSString, __useAuxiliaryFile: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToFile_atomically_.get(), __path, __useAuxiliaryFile, );
 }}
var sel_writeToURL_atomically_ = CachedSelector.init("writeToURL:atomically:");
      pub fn writeToURLatomically(self: *Self, __url:  * NSURL, __atomically: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToURL_atomically_.get(), __url, __atomically, );
 }}
var sel_pathsMatchingExtensions_ = CachedSelector.init("pathsMatchingExtensions:");
      pub fn pathsMatchingExtensions(self: *Self, __filterTypes:  * NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_pathsMatchingExtensions_.get(), __filterTypes, );
 }}
var sel_valueForKey_ = CachedSelector.init("valueForKey:");
      pub fn valueForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForKey_.get(), __key, );
 }}
var sel_setValue_forKey_ = CachedSelector.init("setValue:forKey:");
      pub fn setValueforKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValue_forKey_.get(), __value, __key, );
 }}
var sel_addObserver_toObjectsAtIndexes_forKeyPath_options_context_ = CachedSelector.init("addObserver:toObjectsAtIndexes:forKeyPath:options:context:");
      pub fn addObservertoObjectsAtIndexesforKeyPathoptionscontext(self: *Self, __observer:  * NSObject, __indexes:  * NSIndexSet, __keyPath:  * NSString, __options: NSKeyValueObservingOptions, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSIndexSet,  * NSString, NSKeyValueObservingOptions,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObserver_toObjectsAtIndexes_forKeyPath_options_context_.get(), __observer, __indexes, __keyPath, __options, __context, );
 }}
var sel_removeObserver_fromObjectsAtIndexes_forKeyPath_context_ = CachedSelector.init("removeObserver:fromObjectsAtIndexes:forKeyPath:context:");
      pub fn removeObserverfromObjectsAtIndexesforKeyPathcontext(self: *Self, __observer:  * NSObject, __indexes:  * NSIndexSet, __keyPath:  * NSString, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSIndexSet,  * NSString,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_fromObjectsAtIndexes_forKeyPath_context_.get(), __observer, __indexes, __keyPath, __context, );
 }}
var sel_removeObserver_fromObjectsAtIndexes_forKeyPath_ = CachedSelector.init("removeObserver:fromObjectsAtIndexes:forKeyPath:");
      pub fn removeObserverfromObjectsAtIndexesforKeyPath(self: *Self, __observer:  * NSObject, __indexes:  * NSIndexSet, __keyPath:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSIndexSet,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_fromObjectsAtIndexes_forKeyPath_.get(), __observer, __indexes, __keyPath, );
 }}
var sel_addObserver_forKeyPath_options_context_ = CachedSelector.init("addObserver:forKeyPath:options:context:");
      pub fn addObserverforKeyPathoptionscontext(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, __options: NSKeyValueObservingOptions, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString, NSKeyValueObservingOptions,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObserver_forKeyPath_options_context_.get(), __observer, __keyPath, __options, __context, );
 }}
var sel_removeObserver_forKeyPath_context_ = CachedSelector.init("removeObserver:forKeyPath:context:");
      pub fn removeObserverforKeyPathcontext(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_forKeyPath_context_.get(), __observer, __keyPath, __context, );
 }}
var sel_removeObserver_forKeyPath_ = CachedSelector.init("removeObserver:forKeyPath:");
      pub fn removeObserverforKeyPath(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_forKeyPath_.get(), __observer, __keyPath, );
 }}
var sel_sortedArrayUsingDescriptors_ = CachedSelector.init("sortedArrayUsingDescriptors:");
      pub fn sortedArrayUsingDescriptors(self: *Self, __sortDescriptors:  * NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayUsingDescriptors_.get(), __sortDescriptors, );
 }}
var sel_filteredArrayUsingPredicate_ = CachedSelector.init("filteredArrayUsingPredicate:");
      pub fn filteredArrayUsingPredicate(self: *Self, __predicate:  * NSPredicate, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSPredicate, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_filteredArrayUsingPredicate_.get(), __predicate, );
 }}
  };
}

pub const NSArray = opaque {
  const Self = @This();
  pub usingnamespace NSArrayInterfaceMixin(Self, "NSArray");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSArray");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSArray");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSArray");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSArray");
};

pub fn MTLFunctionStitchingGraphInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithFunctionName_nodes_outputNode_attributes_ = CachedSelector.init("initWithFunctionName:nodes:outputNode:attributes:");
      pub fn initWithFunctionNamenodesoutputNodeattributes(self: *Self, __functionName:  * NSString, __nodes:  * NSArray, __outputNode:  ?* MTLFunctionStitchingFunctionNode, __attributes:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSArray,  ?* MTLFunctionStitchingFunctionNode,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithFunctionName_nodes_outputNode_attributes_.get(), __functionName, __nodes, __outputNode, __attributes, );
 }}
var sel_functionName = CachedSelector.init("functionName");
      pub fn functionName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_functionName.get(), );
 }}
var sel_setFunctionName_ = CachedSelector.init("setFunctionName:");
      pub fn setFunctionName(self: *Self, __functionName:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFunctionName_.get(), __functionName, );
 }}
var sel_nodes = CachedSelector.init("nodes");
      pub fn nodes(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nodes.get(), );
 }}
var sel_setNodes_ = CachedSelector.init("setNodes:");
      pub fn setNodes(self: *Self, __nodes:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNodes_.get(), __nodes, );
 }}
var sel_outputNode = CachedSelector.init("outputNode");
      pub fn outputNode(self: *Self, )  ?* MTLFunctionStitchingFunctionNode {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLFunctionStitchingFunctionNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_outputNode.get(), );
 }}
var sel_setOutputNode_ = CachedSelector.init("setOutputNode:");
      pub fn setOutputNode(self: *Self, __outputNode:  ?* MTLFunctionStitchingFunctionNode, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLFunctionStitchingFunctionNode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setOutputNode_.get(), __outputNode, );
 }}
var sel_attributes = CachedSelector.init("attributes");
      pub fn attributes(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributes.get(), );
 }}
var sel_setAttributes_ = CachedSelector.init("setAttributes:");
      pub fn setAttributes(self: *Self, __attributes:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributes_.get(), __attributes, );
 }}
  };
}

pub const MTLFunctionStitchingGraph = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionStitchingGraphInterfaceMixin(Self, "MTLFunctionStitchingGraph");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLFunctionStitchingGraph");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionStitchingGraph");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLFunctionStitchingGraph");
};

pub fn NSOrderedSetInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndex_ = CachedSelector.init("objectAtIndex:");
      pub fn objectAtIndex(self: *Self, __idx: c_ulong, ) id {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndex_.get(), __idx, );
 }}
var sel_indexOfObject_ = CachedSelector.init("indexOfObject:");
      pub fn indexOfObject(self: *Self, __object: id, ) c_ulong {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObject_.get(), __object, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithObjects_count_ = CachedSelector.init("initWithObjects:count:");
      pub fn initWithObjectscount(self: *Self, __objects: [*c]id, __cnt: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, [*c]id, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjects_count_.get(), __objects, __cnt, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __coder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __coder, );
 }}
var sel_count = CachedSelector.init("count");
      pub fn count(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_count.get(), );
 }}
var sel_getObjects_range_ = CachedSelector.init("getObjects:range:");
      pub fn getObjectsrange(self: *Self, __objects: [*c]id, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, [*c]id, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjects_range_.get(), __objects, __range, );
 }}
var sel_objectsAtIndexes_ = CachedSelector.init("objectsAtIndexes:");
      pub fn objectsAtIndexes(self: *Self, __indexes:  * NSIndexSet, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectsAtIndexes_.get(), __indexes, );
 }}
var sel_isEqualToOrderedSet_ = CachedSelector.init("isEqualToOrderedSet:");
      pub fn isEqualToOrderedSet(self: *Self, __other:  * NSOrderedSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToOrderedSet_.get(), __other, );
 }}
var sel_containsObject_ = CachedSelector.init("containsObject:");
      pub fn containsObject(self: *Self, __object: id, ) c_int {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_containsObject_.get(), __object, );
 }}
var sel_intersectsOrderedSet_ = CachedSelector.init("intersectsOrderedSet:");
      pub fn intersectsOrderedSet(self: *Self, __other:  * NSOrderedSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectsOrderedSet_.get(), __other, );
 }}
var sel_intersectsSet_ = CachedSelector.init("intersectsSet:");
      pub fn intersectsSet(self: *Self, __set:  * NSSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_intersectsSet_.get(), __set, );
 }}
var sel_isSubsetOfOrderedSet_ = CachedSelector.init("isSubsetOfOrderedSet:");
      pub fn isSubsetOfOrderedSet(self: *Self, __other:  * NSOrderedSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSubsetOfOrderedSet_.get(), __other, );
 }}
var sel_isSubsetOfSet_ = CachedSelector.init("isSubsetOfSet:");
      pub fn isSubsetOfSet(self: *Self, __set:  * NSSet, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSubsetOfSet_.get(), __set, );
 }}
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __idx: c_ulong, ) id {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __idx, );
 }}
var sel_objectEnumerator = CachedSelector.init("objectEnumerator");
      pub fn objectEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectEnumerator.get(), );
 }}
var sel_reverseObjectEnumerator = CachedSelector.init("reverseObjectEnumerator");
      pub fn reverseObjectEnumerator(self: *Self, )  * NSEnumerator {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSEnumerator, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reverseObjectEnumerator.get(), );
 }}
var sel_enumerateObjectsUsingBlock_ = CachedSelector.init("enumerateObjectsUsingBlock:");
      pub fn enumerateObjectsUsingBlock(self: *Self, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateObjectsUsingBlock_.get(), __block, );
 }}
var sel_enumerateObjectsWithOptions_usingBlock_ = CachedSelector.init("enumerateObjectsWithOptions:usingBlock:");
      pub fn enumerateObjectsWithOptionsusingBlock(self: *Self, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateObjectsWithOptions_usingBlock_.get(), __opts, __block, );
 }}
var sel_enumerateObjectsAtIndexes_options_usingBlock_ = CachedSelector.init("enumerateObjectsAtIndexes:options:usingBlock:");
      pub fn enumerateObjectsAtIndexesoptionsusingBlock(self: *Self, __s:  * NSIndexSet, __opts: NSEnumerationOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, NSEnumerationOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateObjectsAtIndexes_options_usingBlock_.get(), __s, __opts, __block, );
 }}
var sel_indexOfObjectPassingTest_ = CachedSelector.init("indexOfObjectPassingTest:");
      pub fn indexOfObjectPassingTest(self: *Self, __predicate: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObjectPassingTest_.get(), __predicate, );
 }}
var sel_indexOfObjectWithOptions_passingTest_ = CachedSelector.init("indexOfObjectWithOptions:passingTest:");
      pub fn indexOfObjectWithOptionspassingTest(self: *Self, __opts: NSEnumerationOptions, __predicate: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObjectWithOptions_passingTest_.get(), __opts, __predicate, );
 }}
var sel_indexOfObjectAtIndexes_options_passingTest_ = CachedSelector.init("indexOfObjectAtIndexes:options:passingTest:");
      pub fn indexOfObjectAtIndexesoptionspassingTest(self: *Self, __s:  * NSIndexSet, __opts: NSEnumerationOptions, __predicate: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, NSEnumerationOptions, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObjectAtIndexes_options_passingTest_.get(), __s, __opts, __predicate, );
 }}
var sel_indexesOfObjectsPassingTest_ = CachedSelector.init("indexesOfObjectsPassingTest:");
      pub fn indexesOfObjectsPassingTest(self: *Self, __predicate: ?*u8, )  * NSIndexSet {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C)  * NSIndexSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexesOfObjectsPassingTest_.get(), __predicate, );
 }}
var sel_indexesOfObjectsWithOptions_passingTest_ = CachedSelector.init("indexesOfObjectsWithOptions:passingTest:");
      pub fn indexesOfObjectsWithOptionspassingTest(self: *Self, __opts: NSEnumerationOptions, __predicate: ?*u8, )  * NSIndexSet {{
           return @as(*const fn(*Self, SEL, NSEnumerationOptions, ?*u8, ) callconv(.C)  * NSIndexSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexesOfObjectsWithOptions_passingTest_.get(), __opts, __predicate, );
 }}
var sel_indexesOfObjectsAtIndexes_options_passingTest_ = CachedSelector.init("indexesOfObjectsAtIndexes:options:passingTest:");
      pub fn indexesOfObjectsAtIndexesoptionspassingTest(self: *Self, __s:  * NSIndexSet, __opts: NSEnumerationOptions, __predicate: ?*u8, )  * NSIndexSet {{
           return @as(*const fn(*Self, SEL,  * NSIndexSet, NSEnumerationOptions, ?*u8, ) callconv(.C)  * NSIndexSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexesOfObjectsAtIndexes_options_passingTest_.get(), __s, __opts, __predicate, );
 }}
var sel_indexOfObject_inSortedRange_options_usingComparator_ = CachedSelector.init("indexOfObject:inSortedRange:options:usingComparator:");
      pub fn indexOfObjectinSortedRangeoptionsusingComparator(self: *Self, __object: id, __range: _NSRange, __opts: NSBinarySearchingOptions, __cmp: ?*u8, ) c_ulong {{
           return @as(*const fn(*Self, SEL, id, _NSRange, NSBinarySearchingOptions, ?*u8, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_indexOfObject_inSortedRange_options_usingComparator_.get(), __object, __range, __opts, __cmp, );
 }}
var sel_sortedArrayUsingComparator_ = CachedSelector.init("sortedArrayUsingComparator:");
      pub fn sortedArrayUsingComparator(self: *Self, __cmptr: ?*u8, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayUsingComparator_.get(), __cmptr, );
 }}
var sel_sortedArrayWithOptions_usingComparator_ = CachedSelector.init("sortedArrayWithOptions:usingComparator:");
      pub fn sortedArrayWithOptionsusingComparator(self: *Self, __opts: NSSortOptions, __cmptr: ?*u8, )  * NSArray {{
           return @as(*const fn(*Self, SEL, NSSortOptions, ?*u8, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayWithOptions_usingComparator_.get(), __opts, __cmptr, );
 }}
var sel_descriptionWithLocale_ = CachedSelector.init("descriptionWithLocale:");
      pub fn descriptionWithLocale(self: *Self, __locale: id, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_.get(), __locale, );
 }}
var sel_descriptionWithLocale_indent_ = CachedSelector.init("descriptionWithLocale:indent:");
      pub fn descriptionWithLocaleindent(self: *Self, __locale: id, __level: c_ulong, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, c_ulong, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_indent_.get(), __locale, __level, );
 }}
var sel_firstObject = CachedSelector.init("firstObject");
      pub fn firstObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_firstObject.get(), );
 }}
var sel_lastObject = CachedSelector.init("lastObject");
      pub fn lastObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lastObject.get(), );
 }}
var sel_reversedOrderedSet = CachedSelector.init("reversedOrderedSet");
      pub fn reversedOrderedSet(self: *Self, )  * NSOrderedSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSOrderedSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reversedOrderedSet.get(), );
 }}
var sel_array = CachedSelector.init("array");
      pub fn array(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_array.get(), );
 }}
var sel_set = CachedSelector.init("set");
      pub fn set(self: *Self, )  * NSSet {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_set.get(), );
 }}
var sel_description = CachedSelector.init("description");
      pub fn description(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_description.get(), );
 }}
var sel_orderedSet = CachedSelector.init("orderedSet");
      pub fn orderedSet() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSet.get(), );
 }}
var sel_orderedSetWithObject_ = CachedSelector.init("orderedSetWithObject:");
      pub fn orderedSetWithObject(__object: id, ) *Self {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithObject_.get(), __object, );
 }}
var sel_orderedSetWithObjects_count_ = CachedSelector.init("orderedSetWithObjects:count:");
      pub fn orderedSetWithObjectscount(__objects: [*c]id, __cnt: c_ulong, ) *Self {{
           return @as(*const fn(Class, SEL, [*c]id, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithObjects_count_.get(), __objects, __cnt, );
 }}
var sel_orderedSetWithObjects_ = CachedSelector.init("orderedSetWithObjects:");
      pub fn orderedSetWithObjects(__firstObj: id, ) *Self {{
           return @as(*const fn(Class, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithObjects_.get(), __firstObj, );
 }}
var sel_orderedSetWithOrderedSet_ = CachedSelector.init("orderedSetWithOrderedSet:");
      pub fn orderedSetWithOrderedSet(__set:  * NSOrderedSet, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSOrderedSet, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithOrderedSet_.get(), __set, );
 }}
var sel_orderedSetWithOrderedSet_range_copyItems_ = CachedSelector.init("orderedSetWithOrderedSet:range:copyItems:");
      pub fn orderedSetWithOrderedSetrangecopyItems(__set:  * NSOrderedSet, __range: _NSRange, __flag: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSOrderedSet, _NSRange, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithOrderedSet_range_copyItems_.get(), __set, __range, __flag, );
 }}
var sel_orderedSetWithArray_ = CachedSelector.init("orderedSetWithArray:");
      pub fn orderedSetWithArray(__array:  * NSArray, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithArray_.get(), __array, );
 }}
var sel_orderedSetWithArray_range_copyItems_ = CachedSelector.init("orderedSetWithArray:range:copyItems:");
      pub fn orderedSetWithArrayrangecopyItems(__array:  * NSArray, __range: _NSRange, __flag: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSArray, _NSRange, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithArray_range_copyItems_.get(), __array, __range, __flag, );
 }}
var sel_orderedSetWithSet_ = CachedSelector.init("orderedSetWithSet:");
      pub fn orderedSetWithSet(__set:  * NSSet, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSSet, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithSet_.get(), __set, );
 }}
var sel_orderedSetWithSet_copyItems_ = CachedSelector.init("orderedSetWithSet:copyItems:");
      pub fn orderedSetWithSetcopyItems(__set:  * NSSet, __flag: c_int, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSSet, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_orderedSetWithSet_copyItems_.get(), __set, __flag, );
 }}
var sel_initWithObject_ = CachedSelector.init("initWithObject:");
      pub fn initWithObject(self: *Self, __object: id, ) *Self {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObject_.get(), __object, );
 }}
var sel_initWithObjects_ = CachedSelector.init("initWithObjects:");
      pub fn initWithObjects(self: *Self, __firstObj: id, ) *Self {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjects_.get(), __firstObj, );
 }}
var sel_initWithOrderedSet_ = CachedSelector.init("initWithOrderedSet:");
      pub fn initWithOrderedSet(self: *Self, __set:  * NSOrderedSet, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithOrderedSet_.get(), __set, );
 }}
var sel_initWithOrderedSet_copyItems_ = CachedSelector.init("initWithOrderedSet:copyItems:");
      pub fn initWithOrderedSetcopyItems(self: *Self, __set:  * NSOrderedSet, __flag: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithOrderedSet_copyItems_.get(), __set, __flag, );
 }}
var sel_initWithOrderedSet_range_copyItems_ = CachedSelector.init("initWithOrderedSet:range:copyItems:");
      pub fn initWithOrderedSetrangecopyItems(self: *Self, __set:  * NSOrderedSet, __range: _NSRange, __flag: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, _NSRange, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithOrderedSet_range_copyItems_.get(), __set, __range, __flag, );
 }}
var sel_initWithArray_ = CachedSelector.init("initWithArray:");
      pub fn initWithArray(self: *Self, __array:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithArray_.get(), __array, );
 }}
var sel_initWithArray_copyItems_ = CachedSelector.init("initWithArray:copyItems:");
      pub fn initWithArraycopyItems(self: *Self, __set:  * NSArray, __flag: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithArray_copyItems_.get(), __set, __flag, );
 }}
var sel_initWithArray_range_copyItems_ = CachedSelector.init("initWithArray:range:copyItems:");
      pub fn initWithArrayrangecopyItems(self: *Self, __set:  * NSArray, __range: _NSRange, __flag: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSArray, _NSRange, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithArray_range_copyItems_.get(), __set, __range, __flag, );
 }}
var sel_initWithSet_ = CachedSelector.init("initWithSet:");
      pub fn initWithSet(self: *Self, __set:  * NSSet, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSSet, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSet_.get(), __set, );
 }}
var sel_initWithSet_copyItems_ = CachedSelector.init("initWithSet:copyItems:");
      pub fn initWithSetcopyItems(self: *Self, __set:  * NSSet, __flag: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSSet, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSet_copyItems_.get(), __set, __flag, );
 }}
var sel_differenceFromOrderedSet_withOptions_usingEquivalenceTest_ = CachedSelector.init("differenceFromOrderedSet:withOptions:usingEquivalenceTest:");
      pub fn differenceFromOrderedSetwithOptionsusingEquivalenceTest(self: *Self, __other:  * NSOrderedSet, __options: NSOrderedCollectionDifferenceCalculationOptions, __block: ?*u8, )  * NSOrderedCollectionDifference {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, NSOrderedCollectionDifferenceCalculationOptions, ?*u8, ) callconv(.C)  * NSOrderedCollectionDifference, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_differenceFromOrderedSet_withOptions_usingEquivalenceTest_.get(), __other, __options, __block, );
 }}
var sel_differenceFromOrderedSet_withOptions_ = CachedSelector.init("differenceFromOrderedSet:withOptions:");
      pub fn differenceFromOrderedSetwithOptions(self: *Self, __other:  * NSOrderedSet, __options: NSOrderedCollectionDifferenceCalculationOptions, )  * NSOrderedCollectionDifference {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, NSOrderedCollectionDifferenceCalculationOptions, ) callconv(.C)  * NSOrderedCollectionDifference, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_differenceFromOrderedSet_withOptions_.get(), __other, __options, );
 }}
var sel_differenceFromOrderedSet_ = CachedSelector.init("differenceFromOrderedSet:");
      pub fn differenceFromOrderedSet(self: *Self, __other:  * NSOrderedSet, )  * NSOrderedCollectionDifference {{
           return @as(*const fn(*Self, SEL,  * NSOrderedSet, ) callconv(.C)  * NSOrderedCollectionDifference, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_differenceFromOrderedSet_.get(), __other, );
 }}
var sel_orderedSetByApplyingDifference_ = CachedSelector.init("orderedSetByApplyingDifference:");
      pub fn orderedSetByApplyingDifference(self: *Self, __difference:  * NSOrderedCollectionDifference, )  ?* NSOrderedSet {{
           return @as(*const fn(*Self, SEL,  * NSOrderedCollectionDifference, ) callconv(.C)  ?* NSOrderedSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_orderedSetByApplyingDifference_.get(), __difference, );
 }}
var sel_valueForKey_ = CachedSelector.init("valueForKey:");
      pub fn valueForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForKey_.get(), __key, );
 }}
var sel_setValue_forKey_ = CachedSelector.init("setValue:forKey:");
      pub fn setValueforKey(self: *Self, __value: id, __key:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValue_forKey_.get(), __value, __key, );
 }}
var sel_addObserver_forKeyPath_options_context_ = CachedSelector.init("addObserver:forKeyPath:options:context:");
      pub fn addObserverforKeyPathoptionscontext(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, __options: NSKeyValueObservingOptions, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString, NSKeyValueObservingOptions,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addObserver_forKeyPath_options_context_.get(), __observer, __keyPath, __options, __context, );
 }}
var sel_removeObserver_forKeyPath_context_ = CachedSelector.init("removeObserver:forKeyPath:context:");
      pub fn removeObserverforKeyPathcontext(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, __context:  [*c] void, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString,  [*c] void, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_forKeyPath_context_.get(), __observer, __keyPath, __context, );
 }}
var sel_removeObserver_forKeyPath_ = CachedSelector.init("removeObserver:forKeyPath:");
      pub fn removeObserverforKeyPath(self: *Self, __observer:  * NSObject, __keyPath:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSObject,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObserver_forKeyPath_.get(), __observer, __keyPath, );
 }}
var sel_sortedArrayUsingDescriptors_ = CachedSelector.init("sortedArrayUsingDescriptors:");
      pub fn sortedArrayUsingDescriptors(self: *Self, __sortDescriptors:  * NSArray, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sortedArrayUsingDescriptors_.get(), __sortDescriptors, );
 }}
var sel_filteredOrderedSetUsingPredicate_ = CachedSelector.init("filteredOrderedSetUsingPredicate:");
      pub fn filteredOrderedSetUsingPredicate(self: *Self, __p:  * NSPredicate, )  * NSOrderedSet {{
           return @as(*const fn(*Self, SEL,  * NSPredicate, ) callconv(.C)  * NSOrderedSet, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_filteredOrderedSetUsingPredicate_.get(), __p, );
 }}
  };
}

pub const NSOrderedSet = opaque {
  const Self = @This();
  pub usingnamespace NSOrderedSetInterfaceMixin(Self, "NSOrderedSet");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSOrderedSet");
  pub usingnamespace NSMutableCopyingProtocolMixin(Self, "NSOrderedSet");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSOrderedSet");
  pub usingnamespace NSFastEnumerationProtocolMixin(Self, "NSOrderedSet");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSOrderedSet");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSOrderedSet");
};

pub fn NSDistributedLockInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_lockWithPath_ = CachedSelector.init("lockWithPath:");
      pub fn lockWithPath(__path:  * NSString, )  ?* NSDistributedLock {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSDistributedLock, @ptrCast(&objc_msgSend))(class.get(), sel_lockWithPath_.get(), __path, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithPath_ = CachedSelector.init("initWithPath:");
      pub fn initWithPath(self: *Self, __path:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithPath_.get(), __path, );
 }}
var sel_tryLock = CachedSelector.init("tryLock");
      pub fn tryLock(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tryLock.get(), );
 }}
var sel_unlock = CachedSelector.init("unlock");
      pub fn unlock(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unlock.get(), );
 }}
var sel_breakLock = CachedSelector.init("breakLock");
      pub fn breakLock(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_breakLock.get(), );
 }}
var sel_lockDate = CachedSelector.init("lockDate");
      pub fn lockDate(self: *Self, )  * NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_lockDate.get(), );
 }}
  };
}

pub const NSDistributedLock = opaque {
  const Self = @This();
  pub usingnamespace NSDistributedLockInterfaceMixin(Self, "NSDistributedLock");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDistributedLock");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSDistributedLock");
};

pub fn NSHostInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_currentHost = CachedSelector.init("currentHost");
      pub fn currentHost() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_currentHost.get(), );
 }}
var sel_hostWithName_ = CachedSelector.init("hostWithName:");
      pub fn hostWithName(__name:  ?* NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_hostWithName_.get(), __name, );
 }}
var sel_hostWithAddress_ = CachedSelector.init("hostWithAddress:");
      pub fn hostWithAddress(__address:  * NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_hostWithAddress_.get(), __address, );
 }}
var sel_isEqualToHost_ = CachedSelector.init("isEqualToHost:");
      pub fn isEqualToHost(self: *Self, __aHost:  * NSHost, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSHost, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isEqualToHost_.get(), __aHost, );
 }}
var sel_setHostCacheEnabled_ = CachedSelector.init("setHostCacheEnabled:");
      pub fn setHostCacheEnabled(__flag: c_int, ) void {{
           return @as(*const fn(Class, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setHostCacheEnabled_.get(), __flag, );
 }}
var sel_isHostCacheEnabled = CachedSelector.init("isHostCacheEnabled");
      pub fn isHostCacheEnabled() c_int {{
           return @as(*const fn(Class, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_isHostCacheEnabled.get(), );
 }}
var sel_flushHostCache = CachedSelector.init("flushHostCache");
      pub fn flushHostCache() void {{
           return @as(*const fn(Class, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_flushHostCache.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_names = CachedSelector.init("names");
      pub fn names(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_names.get(), );
 }}
var sel_address = CachedSelector.init("address");
      pub fn address(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_address.get(), );
 }}
var sel_addresses = CachedSelector.init("addresses");
      pub fn addresses(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addresses.get(), );
 }}
var sel_localizedName = CachedSelector.init("localizedName");
      pub fn localizedName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localizedName.get(), );
 }}
  };
}

pub const NSHost = opaque {
  const Self = @This();
  pub usingnamespace NSHostInterfaceMixin(Self, "NSHost");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSHost");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSHost");
};

pub fn MTLFunctionStitchingFunctionNodeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithName_arguments_controlDependencies_ = CachedSelector.init("initWithName:arguments:controlDependencies:");
      pub fn initWithNameargumentscontrolDependencies(self: *Self, __name:  * NSString, __arguments:  * NSArray, __controlDependencies:  * NSArray, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSArray,  * NSArray, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithName_arguments_controlDependencies_.get(), __name, __arguments, __controlDependencies, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
var sel_arguments = CachedSelector.init("arguments");
      pub fn arguments(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arguments.get(), );
 }}
var sel_setArguments_ = CachedSelector.init("setArguments:");
      pub fn setArguments(self: *Self, __arguments:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArguments_.get(), __arguments, );
 }}
var sel_controlDependencies = CachedSelector.init("controlDependencies");
      pub fn controlDependencies(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_controlDependencies.get(), );
 }}
var sel_setControlDependencies_ = CachedSelector.init("setControlDependencies:");
      pub fn setControlDependencies(self: *Self, __controlDependencies:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setControlDependencies_.get(), __controlDependencies, );
 }}
  };
}

pub const MTLFunctionStitchingFunctionNode = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionStitchingFunctionNodeInterfaceMixin(Self, "MTLFunctionStitchingFunctionNode");
  pub usingnamespace MTLFunctionStitchingNodeProtocolMixin(Self, "MTLFunctionStitchingFunctionNode");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionStitchingFunctionNode");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLFunctionStitchingFunctionNode");
};

pub fn NSFileWrapperInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithURL_options_error_ = CachedSelector.init("initWithURL:options:error:");
      pub fn initWithURLoptionserror(self: *Self, __url:  * NSURL, __options: NSFileWrapperReadingOptions, __outError:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSFileWrapperReadingOptions,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_options_error_.get(), __url, __options, __outError, );
 }}
var sel_initDirectoryWithFileWrappers_ = CachedSelector.init("initDirectoryWithFileWrappers:");
      pub fn initDirectoryWithFileWrappers(self: *Self, __childrenByPreferredName:  * NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initDirectoryWithFileWrappers_.get(), __childrenByPreferredName, );
 }}
var sel_initRegularFileWithContents_ = CachedSelector.init("initRegularFileWithContents:");
      pub fn initRegularFileWithContents(self: *Self, __contents:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initRegularFileWithContents_.get(), __contents, );
 }}
var sel_initSymbolicLinkWithDestinationURL_ = CachedSelector.init("initSymbolicLinkWithDestinationURL:");
      pub fn initSymbolicLinkWithDestinationURL(self: *Self, __url:  * NSURL, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initSymbolicLinkWithDestinationURL_.get(), __url, );
 }}
var sel_initWithSerializedRepresentation_ = CachedSelector.init("initWithSerializedRepresentation:");
      pub fn initWithSerializedRepresentation(self: *Self, __serializeRepresentation:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSerializedRepresentation_.get(), __serializeRepresentation, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_matchesContentsOfURL_ = CachedSelector.init("matchesContentsOfURL:");
      pub fn matchesContentsOfURL(self: *Self, __url:  * NSURL, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_matchesContentsOfURL_.get(), __url, );
 }}
var sel_readFromURL_options_error_ = CachedSelector.init("readFromURL:options:error:");
      pub fn readFromURLoptionserror(self: *Self, __url:  * NSURL, __options: NSFileWrapperReadingOptions, __outError:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSFileWrapperReadingOptions,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_readFromURL_options_error_.get(), __url, __options, __outError, );
 }}
var sel_writeToURL_options_originalContentsURL_error_ = CachedSelector.init("writeToURL:options:originalContentsURL:error:");
      pub fn writeToURLoptionsoriginalContentsURLerror(self: *Self, __url:  * NSURL, __options: NSFileWrapperWritingOptions, __originalContentsURL:  ?* NSURL, __outError:  [*c]  ?* NSError, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSURL, NSFileWrapperWritingOptions,  ?* NSURL,  [*c]  ?* NSError, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToURL_options_originalContentsURL_error_.get(), __url, __options, __originalContentsURL, __outError, );
 }}
var sel_addFileWrapper_ = CachedSelector.init("addFileWrapper:");
      pub fn addFileWrapper(self: *Self, __child:  * NSFileWrapper, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSFileWrapper, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addFileWrapper_.get(), __child, );
 }}
var sel_addRegularFileWithContents_preferredFilename_ = CachedSelector.init("addRegularFileWithContents:preferredFilename:");
      pub fn addRegularFileWithContentspreferredFilename(self: *Self, __data:  * NSData, __fileName:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSData,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addRegularFileWithContents_preferredFilename_.get(), __data, __fileName, );
 }}
var sel_removeFileWrapper_ = CachedSelector.init("removeFileWrapper:");
      pub fn removeFileWrapper(self: *Self, __child:  * NSFileWrapper, ) void {{
           return @as(*const fn(*Self, SEL,  * NSFileWrapper, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeFileWrapper_.get(), __child, );
 }}
var sel_keyForFileWrapper_ = CachedSelector.init("keyForFileWrapper:");
      pub fn keyForFileWrapper(self: *Self, __child:  * NSFileWrapper, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSFileWrapper, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_keyForFileWrapper_.get(), __child, );
 }}
var sel_isDirectory = CachedSelector.init("isDirectory");
      pub fn isDirectory(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDirectory.get(), );
 }}
var sel_isRegularFile = CachedSelector.init("isRegularFile");
      pub fn isRegularFile(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isRegularFile.get(), );
 }}
var sel_isSymbolicLink = CachedSelector.init("isSymbolicLink");
      pub fn isSymbolicLink(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSymbolicLink.get(), );
 }}
var sel_preferredFilename = CachedSelector.init("preferredFilename");
      pub fn preferredFilename(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_preferredFilename.get(), );
 }}
var sel_setPreferredFilename_ = CachedSelector.init("setPreferredFilename:");
      pub fn setPreferredFilename(self: *Self, __preferredFilename:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPreferredFilename_.get(), __preferredFilename, );
 }}
var sel_filename = CachedSelector.init("filename");
      pub fn filename(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_filename.get(), );
 }}
var sel_setFilename_ = CachedSelector.init("setFilename:");
      pub fn setFilename(self: *Self, __filename:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFilename_.get(), __filename, );
 }}
var sel_fileAttributes = CachedSelector.init("fileAttributes");
      pub fn fileAttributes(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileAttributes.get(), );
 }}
var sel_setFileAttributes_ = CachedSelector.init("setFileAttributes:");
      pub fn setFileAttributes(self: *Self, __fileAttributes:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFileAttributes_.get(), __fileAttributes, );
 }}
var sel_serializedRepresentation = CachedSelector.init("serializedRepresentation");
      pub fn serializedRepresentation(self: *Self, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_serializedRepresentation.get(), );
 }}
var sel_fileWrappers = CachedSelector.init("fileWrappers");
      pub fn fileWrappers(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fileWrappers.get(), );
 }}
var sel_regularFileContents = CachedSelector.init("regularFileContents");
      pub fn regularFileContents(self: *Self, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_regularFileContents.get(), );
 }}
var sel_symbolicLinkDestinationURL = CachedSelector.init("symbolicLinkDestinationURL");
      pub fn symbolicLinkDestinationURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_symbolicLinkDestinationURL.get(), );
 }}
var sel_initWithPath_ = CachedSelector.init("initWithPath:");
      pub fn initWithPath(self: *Self, __path:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithPath_.get(), __path, );
 }}
var sel_initSymbolicLinkWithDestination_ = CachedSelector.init("initSymbolicLinkWithDestination:");
      pub fn initSymbolicLinkWithDestination(self: *Self, __path:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initSymbolicLinkWithDestination_.get(), __path, );
 }}
var sel_needsToBeUpdatedFromPath_ = CachedSelector.init("needsToBeUpdatedFromPath:");
      pub fn needsToBeUpdatedFromPath(self: *Self, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_needsToBeUpdatedFromPath_.get(), __path, );
 }}
var sel_updateFromPath_ = CachedSelector.init("updateFromPath:");
      pub fn updateFromPath(self: *Self, __path:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_updateFromPath_.get(), __path, );
 }}
var sel_writeToFile_atomically_updateFilenames_ = CachedSelector.init("writeToFile:atomically:updateFilenames:");
      pub fn writeToFileatomicallyupdateFilenames(self: *Self, __path:  * NSString, __atomicFlag: c_int, __updateFilenamesFlag: c_int, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, c_int, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_writeToFile_atomically_updateFilenames_.get(), __path, __atomicFlag, __updateFilenamesFlag, );
 }}
var sel_addFileWithPath_ = CachedSelector.init("addFileWithPath:");
      pub fn addFileWithPath(self: *Self, __path:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addFileWithPath_.get(), __path, );
 }}
var sel_addSymbolicLinkWithDestination_preferredFilename_ = CachedSelector.init("addSymbolicLinkWithDestination:preferredFilename:");
      pub fn addSymbolicLinkWithDestinationpreferredFilename(self: *Self, __path:  * NSString, __filename:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addSymbolicLinkWithDestination_preferredFilename_.get(), __path, __filename, );
 }}
var sel_symbolicLinkDestination = CachedSelector.init("symbolicLinkDestination");
      pub fn symbolicLinkDestination(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_symbolicLinkDestination.get(), );
 }}
  };
}

pub const NSFileWrapper = opaque {
  const Self = @This();
  pub usingnamespace NSFileWrapperInterfaceMixin(Self, "NSFileWrapper");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSFileWrapper");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileWrapper");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSFileWrapper");
};

pub fn NSURLSessionTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_cancel = CachedSelector.init("cancel");
      pub fn cancel(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancel.get(), );
 }}
var sel_suspend = CachedSelector.init("suspend");
      pub fn _suspend(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suspend.get(), );
 }}
var sel_resume = CachedSelector.init("resume");
      pub fn _resume(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resume.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_taskIdentifier = CachedSelector.init("taskIdentifier");
      pub fn taskIdentifier(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_taskIdentifier.get(), );
 }}
var sel_originalRequest = CachedSelector.init("originalRequest");
      pub fn originalRequest(self: *Self, )  ?* NSURLRequest {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLRequest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_originalRequest.get(), );
 }}
var sel_currentRequest = CachedSelector.init("currentRequest");
      pub fn currentRequest(self: *Self, )  ?* NSURLRequest {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLRequest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentRequest.get(), );
 }}
var sel_response = CachedSelector.init("response");
      pub fn response(self: *Self, )  ?* NSURLResponse {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLResponse, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_response.get(), );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSURLSessionTaskDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLSessionTaskDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSURLSessionTaskDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSURLSessionTaskDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_progress = CachedSelector.init("progress");
      pub fn progress(self: *Self, )  * NSProgress {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSProgress, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_progress.get(), );
 }}
var sel_earliestBeginDate = CachedSelector.init("earliestBeginDate");
      pub fn earliestBeginDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_earliestBeginDate.get(), );
 }}
var sel_setEarliestBeginDate_ = CachedSelector.init("setEarliestBeginDate:");
      pub fn setEarliestBeginDate(self: *Self, __earliestBeginDate:  ?* NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEarliestBeginDate_.get(), __earliestBeginDate, );
 }}
var sel_countOfBytesClientExpectsToSend = CachedSelector.init("countOfBytesClientExpectsToSend");
      pub fn countOfBytesClientExpectsToSend(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfBytesClientExpectsToSend.get(), );
 }}
var sel_setCountOfBytesClientExpectsToSend_ = CachedSelector.init("setCountOfBytesClientExpectsToSend:");
      pub fn setCountOfBytesClientExpectsToSend(self: *Self, __countOfBytesClientExpectsToSend: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCountOfBytesClientExpectsToSend_.get(), __countOfBytesClientExpectsToSend, );
 }}
var sel_countOfBytesClientExpectsToReceive = CachedSelector.init("countOfBytesClientExpectsToReceive");
      pub fn countOfBytesClientExpectsToReceive(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfBytesClientExpectsToReceive.get(), );
 }}
var sel_setCountOfBytesClientExpectsToReceive_ = CachedSelector.init("setCountOfBytesClientExpectsToReceive:");
      pub fn setCountOfBytesClientExpectsToReceive(self: *Self, __countOfBytesClientExpectsToReceive: c_longlong, ) void {{
           return @as(*const fn(*Self, SEL, c_longlong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCountOfBytesClientExpectsToReceive_.get(), __countOfBytesClientExpectsToReceive, );
 }}
var sel_countOfBytesSent = CachedSelector.init("countOfBytesSent");
      pub fn countOfBytesSent(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfBytesSent.get(), );
 }}
var sel_countOfBytesReceived = CachedSelector.init("countOfBytesReceived");
      pub fn countOfBytesReceived(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfBytesReceived.get(), );
 }}
var sel_countOfBytesExpectedToSend = CachedSelector.init("countOfBytesExpectedToSend");
      pub fn countOfBytesExpectedToSend(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfBytesExpectedToSend.get(), );
 }}
var sel_countOfBytesExpectedToReceive = CachedSelector.init("countOfBytesExpectedToReceive");
      pub fn countOfBytesExpectedToReceive(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfBytesExpectedToReceive.get(), );
 }}
var sel_taskDescription = CachedSelector.init("taskDescription");
      pub fn taskDescription(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_taskDescription.get(), );
 }}
var sel_setTaskDescription_ = CachedSelector.init("setTaskDescription:");
      pub fn setTaskDescription(self: *Self, __taskDescription:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTaskDescription_.get(), __taskDescription, );
 }}
var sel_state = CachedSelector.init("state");
      pub fn state(self: *Self, ) NSURLSessionTaskState {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLSessionTaskState, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_state.get(), );
 }}
var sel_error = CachedSelector.init("error");
      pub fn _error(self: *Self, )  ?* NSError {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSError, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_error.get(), );
 }}
var sel_priority = CachedSelector.init("priority");
      pub fn priority(self: *Self, ) f32 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f32, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_priority.get(), );
 }}
var sel_setPriority_ = CachedSelector.init("setPriority:");
      pub fn setPriority(self: *Self, __priority: f32, ) void {{
           return @as(*const fn(*Self, SEL, f32, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPriority_.get(), __priority, );
 }}
var sel_prefersIncrementalDelivery = CachedSelector.init("prefersIncrementalDelivery");
      pub fn prefersIncrementalDelivery(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_prefersIncrementalDelivery.get(), );
 }}
var sel_setPrefersIncrementalDelivery_ = CachedSelector.init("setPrefersIncrementalDelivery:");
      pub fn setPrefersIncrementalDelivery(self: *Self, __prefersIncrementalDelivery: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPrefersIncrementalDelivery_.get(), __prefersIncrementalDelivery, );
 }}
  };
}

pub const NSURLSessionTask = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionTaskInterfaceMixin(Self, "NSURLSessionTask");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSURLSessionTask");
  pub usingnamespace NSProgressReportingProtocolMixin(Self, "NSURLSessionTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionTask");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLSessionTask");
};

pub fn NSPortInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_port = CachedSelector.init("port");
      pub fn port()  * NSPort {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSPort, @ptrCast(&objc_msgSend))(class.get(), sel_port.get(), );
 }}
var sel_invalidate = CachedSelector.init("invalidate");
      pub fn invalidate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invalidate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __anObject:  ?* NSPortDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSPortDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __anObject, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSPortDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSPortDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_scheduleInRunLoop_forMode_ = CachedSelector.init("scheduleInRunLoop:forMode:");
      pub fn scheduleInRunLoopforMode(self: *Self, __runLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduleInRunLoop_forMode_.get(), __runLoop, __mode, );
 }}
var sel_removeFromRunLoop_forMode_ = CachedSelector.init("removeFromRunLoop:forMode:");
      pub fn removeFromRunLoopforMode(self: *Self, __runLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeFromRunLoop_forMode_.get(), __runLoop, __mode, );
 }}
var sel_sendBeforeDate_components_from_reserved_ = CachedSelector.init("sendBeforeDate:components:from:reserved:");
      pub fn sendBeforeDatecomponentsfromreserved(self: *Self, __limitDate:  * NSDate, __components:  ?* NSMutableArray, __receivePort:  ?* NSPort, __headerSpaceReserved: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate,  ?* NSMutableArray,  ?* NSPort, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sendBeforeDate_components_from_reserved_.get(), __limitDate, __components, __receivePort, __headerSpaceReserved, );
 }}
var sel_sendBeforeDate_msgid_components_from_reserved_ = CachedSelector.init("sendBeforeDate:msgid:components:from:reserved:");
      pub fn sendBeforeDatemsgidcomponentsfromreserved(self: *Self, __limitDate:  * NSDate, __msgID: c_ulong, __components:  ?* NSMutableArray, __receivePort:  ?* NSPort, __headerSpaceReserved: c_ulong, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, c_ulong,  ?* NSMutableArray,  ?* NSPort, c_ulong, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sendBeforeDate_msgid_components_from_reserved_.get(), __limitDate, __msgID, __components, __receivePort, __headerSpaceReserved, );
 }}
var sel_addConnection_toRunLoop_forMode_ = CachedSelector.init("addConnection:toRunLoop:forMode:");
      pub fn addConnectiontoRunLoopforMode(self: *Self, __conn:  * NSConnection, __runLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSConnection,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addConnection_toRunLoop_forMode_.get(), __conn, __runLoop, __mode, );
 }}
var sel_removeConnection_fromRunLoop_forMode_ = CachedSelector.init("removeConnection:fromRunLoop:forMode:");
      pub fn removeConnectionfromRunLoopforMode(self: *Self, __conn:  * NSConnection, __runLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSConnection,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeConnection_fromRunLoop_forMode_.get(), __conn, __runLoop, __mode, );
 }}
var sel_isValid = CachedSelector.init("isValid");
      pub fn isValid(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isValid.get(), );
 }}
var sel_reservedSpaceLength = CachedSelector.init("reservedSpaceLength");
      pub fn reservedSpaceLength(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reservedSpaceLength.get(), );
 }}
  };
}

pub const NSPort = opaque {
  const Self = @This();
  pub usingnamespace NSPortInterfaceMixin(Self, "NSPort");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSPort");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSPort");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPort");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSPort");
};

pub fn NSURLSessionUploadTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_cancelByProducingResumeData_ = CachedSelector.init("cancelByProducingResumeData:");
      pub fn cancelByProducingResumeData(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancelByProducingResumeData_.get(), __completionHandler, );
 }}
  };
}

pub const NSURLSessionUploadTask = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionUploadTaskInterfaceMixin(Self, "NSURLSessionUploadTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionUploadTask");
  pub usingnamespace NSURLSessionDataTaskInterfaceMixin(Self, "NSURLSessionUploadTask");
};

pub fn NSUserScriptTaskInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithURL_error_ = CachedSelector.init("initWithURL:error:");
      pub fn initWithURLerror(self: *Self, __url:  * NSURL, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_error_.get(), __url, __an_error, );
 }}
var sel_executeWithCompletionHandler_ = CachedSelector.init("executeWithCompletionHandler:");
      pub fn executeWithCompletionHandler(self: *Self, __handler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeWithCompletionHandler_.get(), __handler, );
 }}
var sel_scriptURL = CachedSelector.init("scriptURL");
      pub fn scriptURL(self: *Self, )  * NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptURL.get(), );
 }}
  };
}

pub const NSUserScriptTask = opaque {
  const Self = @This();
  pub usingnamespace NSUserScriptTaskInterfaceMixin(Self, "NSUserScriptTask");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUserScriptTask");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUserScriptTask");
};

pub fn NSHTTPCookieInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithProperties_ = CachedSelector.init("initWithProperties:");
      pub fn initWithProperties(self: *Self, __properties:  * NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithProperties_.get(), __properties, );
 }}
var sel_cookieWithProperties_ = CachedSelector.init("cookieWithProperties:");
      pub fn cookieWithProperties(__properties:  * NSDictionary, )  ?* NSHTTPCookie {{
           return @as(*const fn(Class, SEL,  * NSDictionary, ) callconv(.C)  ?* NSHTTPCookie, @ptrCast(&objc_msgSend))(class.get(), sel_cookieWithProperties_.get(), __properties, );
 }}
var sel_requestHeaderFieldsWithCookies_ = CachedSelector.init("requestHeaderFieldsWithCookies:");
      pub fn requestHeaderFieldsWithCookies(__cookies:  * NSArray, )  * NSDictionary {{
           return @as(*const fn(Class, SEL,  * NSArray, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(class.get(), sel_requestHeaderFieldsWithCookies_.get(), __cookies, );
 }}
var sel_cookiesWithResponseHeaderFields_forURL_ = CachedSelector.init("cookiesWithResponseHeaderFields:forURL:");
      pub fn cookiesWithResponseHeaderFieldsforURL(__headerFields:  * NSDictionary, __URL:  * NSURL, )  * NSArray {{
           return @as(*const fn(Class, SEL,  * NSDictionary,  * NSURL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_cookiesWithResponseHeaderFields_forURL_.get(), __headerFields, __URL, );
 }}
var sel_properties = CachedSelector.init("properties");
      pub fn properties(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_properties.get(), );
 }}
var sel_version = CachedSelector.init("version");
      pub fn version(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_version.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_value = CachedSelector.init("value");
      pub fn value(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_value.get(), );
 }}
var sel_expiresDate = CachedSelector.init("expiresDate");
      pub fn expiresDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_expiresDate.get(), );
 }}
var sel_isSessionOnly = CachedSelector.init("isSessionOnly");
      pub fn isSessionOnly(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSessionOnly.get(), );
 }}
var sel_domain = CachedSelector.init("domain");
      pub fn domain(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_domain.get(), );
 }}
var sel_path = CachedSelector.init("path");
      pub fn path(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_path.get(), );
 }}
var sel_isSecure = CachedSelector.init("isSecure");
      pub fn isSecure(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isSecure.get(), );
 }}
var sel_isHTTPOnly = CachedSelector.init("isHTTPOnly");
      pub fn isHTTPOnly(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isHTTPOnly.get(), );
 }}
var sel_comment = CachedSelector.init("comment");
      pub fn comment(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_comment.get(), );
 }}
var sel_commentURL = CachedSelector.init("commentURL");
      pub fn commentURL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commentURL.get(), );
 }}
var sel_portList = CachedSelector.init("portList");
      pub fn portList(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portList.get(), );
 }}
var sel_sameSitePolicy = CachedSelector.init("sameSitePolicy");
      pub fn sameSitePolicy(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sameSitePolicy.get(), );
 }}
  };
}

pub const NSHTTPCookie = opaque {
  const Self = @This();
  pub usingnamespace NSHTTPCookieInterfaceMixin(Self, "NSHTTPCookie");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSHTTPCookie");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSHTTPCookie");
};

pub fn NSOrderedCollectionChangeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_changeWithObject_type_index_ = CachedSelector.init("changeWithObject:type:index:");
      pub fn changeWithObjecttypeindex(__anObject: id, __a_type: NSCollectionChangeType, __index: c_ulong, )  * NSOrderedCollectionChange {{
           return @as(*const fn(Class, SEL, id, NSCollectionChangeType, c_ulong, ) callconv(.C)  * NSOrderedCollectionChange, @ptrCast(&objc_msgSend))(class.get(), sel_changeWithObject_type_index_.get(), __anObject, __a_type, __index, );
 }}
var sel_changeWithObject_type_index_associatedIndex_ = CachedSelector.init("changeWithObject:type:index:associatedIndex:");
      pub fn changeWithObjecttypeindexassociatedIndex(__anObject: id, __a_type: NSCollectionChangeType, __index: c_ulong, __associatedIndex: c_ulong, )  * NSOrderedCollectionChange {{
           return @as(*const fn(Class, SEL, id, NSCollectionChangeType, c_ulong, c_ulong, ) callconv(.C)  * NSOrderedCollectionChange, @ptrCast(&objc_msgSend))(class.get(), sel_changeWithObject_type_index_associatedIndex_.get(), __anObject, __a_type, __index, __associatedIndex, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithObject_type_index_ = CachedSelector.init("initWithObject:type:index:");
      pub fn initWithObjecttypeindex(self: *Self, __anObject: id, __a_type: NSCollectionChangeType, __index: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, id, NSCollectionChangeType, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObject_type_index_.get(), __anObject, __a_type, __index, );
 }}
var sel_initWithObject_type_index_associatedIndex_ = CachedSelector.init("initWithObject:type:index:associatedIndex:");
      pub fn initWithObjecttypeindexassociatedIndex(self: *Self, __anObject: id, __a_type: NSCollectionChangeType, __index: c_ulong, __associatedIndex: c_ulong, ) *Self {{
           return @as(*const fn(*Self, SEL, id, NSCollectionChangeType, c_ulong, c_ulong, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObject_type_index_associatedIndex_.get(), __anObject, __a_type, __index, __associatedIndex, );
 }}
var sel_object = CachedSelector.init("object");
      pub fn object(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_object.get(), );
 }}
var sel_changeType = CachedSelector.init("changeType");
      pub fn changeType(self: *Self, ) NSCollectionChangeType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSCollectionChangeType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_changeType.get(), );
 }}
var sel_index = CachedSelector.init("index");
      pub fn index(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_index.get(), );
 }}
var sel_associatedIndex = CachedSelector.init("associatedIndex");
      pub fn associatedIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_associatedIndex.get(), );
 }}
  };
}

pub const NSOrderedCollectionChange = opaque {
  const Self = @This();
  pub usingnamespace NSOrderedCollectionChangeInterfaceMixin(Self, "NSOrderedCollectionChange");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSOrderedCollectionChange");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSOrderedCollectionChange");
};

pub fn NSMiddleSpecifierInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
  };
}

pub const NSMiddleSpecifier = opaque {
  const Self = @This();
  pub usingnamespace NSMiddleSpecifierInterfaceMixin(Self, "NSMiddleSpecifier");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMiddleSpecifier");
  pub usingnamespace NSScriptObjectSpecifierInterfaceMixin(Self, "NSMiddleSpecifier");
};

pub fn NSCalendarInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_calendarWithIdentifier_ = CachedSelector.init("calendarWithIdentifier:");
      pub fn calendarWithIdentifier(__calendarIdentifierConstant:  * NSString, )  ?* NSCalendar {{
           return @as(*const fn(Class, SEL,  * NSString, ) callconv(.C)  ?* NSCalendar, @ptrCast(&objc_msgSend))(class.get(), sel_calendarWithIdentifier_.get(), __calendarIdentifierConstant, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithCalendarIdentifier_ = CachedSelector.init("initWithCalendarIdentifier:");
      pub fn initWithCalendarIdentifier(self: *Self, __ident:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCalendarIdentifier_.get(), __ident, );
 }}
var sel_minimumRangeOfUnit_ = CachedSelector.init("minimumRangeOfUnit:");
      pub fn minimumRangeOfUnit(self: *Self, __unit: NSCalendarUnit, ) _NSRange {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minimumRangeOfUnit_.get(), __unit, );
 }}
var sel_maximumRangeOfUnit_ = CachedSelector.init("maximumRangeOfUnit:");
      pub fn maximumRangeOfUnit(self: *Self, __unit: NSCalendarUnit, ) _NSRange {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maximumRangeOfUnit_.get(), __unit, );
 }}
var sel_rangeOfUnit_inUnit_forDate_ = CachedSelector.init("rangeOfUnit:inUnit:forDate:");
      pub fn rangeOfUnitinUnitforDate(self: *Self, __smaller: NSCalendarUnit, __larger: NSCalendarUnit, __date:  * NSDate, ) _NSRange {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit, NSCalendarUnit,  * NSDate, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfUnit_inUnit_forDate_.get(), __smaller, __larger, __date, );
 }}
var sel_ordinalityOfUnit_inUnit_forDate_ = CachedSelector.init("ordinalityOfUnit:inUnit:forDate:");
      pub fn ordinalityOfUnitinUnitforDate(self: *Self, __smaller: NSCalendarUnit, __larger: NSCalendarUnit, __date:  * NSDate, ) c_ulong {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit, NSCalendarUnit,  * NSDate, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_ordinalityOfUnit_inUnit_forDate_.get(), __smaller, __larger, __date, );
 }}
var sel_rangeOfUnit_startDate_interval_forDate_ = CachedSelector.init("rangeOfUnit:startDate:interval:forDate:");
      pub fn rangeOfUnitstartDateintervalforDate(self: *Self, __unit: NSCalendarUnit, __datep:  [*c]  ?* NSDate, __tip:  [*c] f64, __date:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit,  [*c]  ?* NSDate,  [*c] f64,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfUnit_startDate_interval_forDate_.get(), __unit, __datep, __tip, __date, );
 }}
var sel_dateFromComponents_ = CachedSelector.init("dateFromComponents:");
      pub fn dateFromComponents(self: *Self, __comps:  * NSDateComponents, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL,  * NSDateComponents, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateFromComponents_.get(), __comps, );
 }}
var sel_components_fromDate_ = CachedSelector.init("components:fromDate:");
      pub fn componentsfromDate(self: *Self, __unitFlags: NSCalendarUnit, __date:  * NSDate, )  * NSDateComponents {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit,  * NSDate, ) callconv(.C)  * NSDateComponents, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_components_fromDate_.get(), __unitFlags, __date, );
 }}
var sel_dateByAddingComponents_toDate_options_ = CachedSelector.init("dateByAddingComponents:toDate:options:");
      pub fn dateByAddingComponentstoDateoptions(self: *Self, __comps:  * NSDateComponents, __date:  * NSDate, __opts: NSCalendarOptions, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL,  * NSDateComponents,  * NSDate, NSCalendarOptions, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateByAddingComponents_toDate_options_.get(), __comps, __date, __opts, );
 }}
var sel_components_fromDate_toDate_options_ = CachedSelector.init("components:fromDate:toDate:options:");
      pub fn componentsfromDatetoDateoptions(self: *Self, __unitFlags: NSCalendarUnit, __startingDate:  * NSDate, __resultDate:  * NSDate, __opts: NSCalendarOptions, )  * NSDateComponents {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit,  * NSDate,  * NSDate, NSCalendarOptions, ) callconv(.C)  * NSDateComponents, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_components_fromDate_toDate_options_.get(), __unitFlags, __startingDate, __resultDate, __opts, );
 }}
var sel_getEra_year_month_day_fromDate_ = CachedSelector.init("getEra:year:month:day:fromDate:");
      pub fn getErayearmonthdayfromDate(self: *Self, __eraValuePointer:  [*c] c_long, __yearValuePointer:  [*c] c_long, __monthValuePointer:  [*c] c_long, __dayValuePointer:  [*c] c_long, __date:  * NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_long,  [*c] c_long,  [*c] c_long,  [*c] c_long,  * NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getEra_year_month_day_fromDate_.get(), __eraValuePointer, __yearValuePointer, __monthValuePointer, __dayValuePointer, __date, );
 }}
var sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_ = CachedSelector.init("getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:");
      pub fn getErayearForWeekOfYearweekOfYearweekdayfromDate(self: *Self, __eraValuePointer:  [*c] c_long, __yearValuePointer:  [*c] c_long, __weekValuePointer:  [*c] c_long, __weekdayValuePointer:  [*c] c_long, __date:  * NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_long,  [*c] c_long,  [*c] c_long,  [*c] c_long,  * NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_.get(), __eraValuePointer, __yearValuePointer, __weekValuePointer, __weekdayValuePointer, __date, );
 }}
var sel_getHour_minute_second_nanosecond_fromDate_ = CachedSelector.init("getHour:minute:second:nanosecond:fromDate:");
      pub fn getHourminutesecondnanosecondfromDate(self: *Self, __hourValuePointer:  [*c] c_long, __minuteValuePointer:  [*c] c_long, __secondValuePointer:  [*c] c_long, __nanosecondValuePointer:  [*c] c_long, __date:  * NSDate, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_long,  [*c] c_long,  [*c] c_long,  [*c] c_long,  * NSDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getHour_minute_second_nanosecond_fromDate_.get(), __hourValuePointer, __minuteValuePointer, __secondValuePointer, __nanosecondValuePointer, __date, );
 }}
var sel_component_fromDate_ = CachedSelector.init("component:fromDate:");
      pub fn componentfromDate(self: *Self, __unit: NSCalendarUnit, __date:  * NSDate, ) c_long {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit,  * NSDate, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_component_fromDate_.get(), __unit, __date, );
 }}
var sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_ = CachedSelector.init("dateWithEra:year:month:day:hour:minute:second:nanosecond:");
      pub fn dateWithErayearmonthdayhourminutesecondnanosecond(self: *Self, __eraValue: c_long, __yearValue: c_long, __monthValue: c_long, __dayValue: c_long, __hourValue: c_long, __minuteValue: c_long, __secondValue: c_long, __nanosecondValue: c_long, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, c_long, c_long, c_long, c_long, c_long, c_long, c_long, c_long, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_.get(), __eraValue, __yearValue, __monthValue, __dayValue, __hourValue, __minuteValue, __secondValue, __nanosecondValue, );
 }}
var sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_ = CachedSelector.init("dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:");
      pub fn dateWithErayearForWeekOfYearweekOfYearweekdayhourminutesecondnanosecond(self: *Self, __eraValue: c_long, __yearValue: c_long, __weekValue: c_long, __weekdayValue: c_long, __hourValue: c_long, __minuteValue: c_long, __secondValue: c_long, __nanosecondValue: c_long, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, c_long, c_long, c_long, c_long, c_long, c_long, c_long, c_long, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_.get(), __eraValue, __yearValue, __weekValue, __weekdayValue, __hourValue, __minuteValue, __secondValue, __nanosecondValue, );
 }}
var sel_startOfDayForDate_ = CachedSelector.init("startOfDayForDate:");
      pub fn startOfDayForDate(self: *Self, __date:  * NSDate, )  * NSDate {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C)  * NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_startOfDayForDate_.get(), __date, );
 }}
var sel_componentsInTimeZone_fromDate_ = CachedSelector.init("componentsInTimeZone:fromDate:");
      pub fn componentsInTimeZonefromDate(self: *Self, __timezone:  * NSTimeZone, __date:  * NSDate, )  * NSDateComponents {{
           return @as(*const fn(*Self, SEL,  * NSTimeZone,  * NSDate, ) callconv(.C)  * NSDateComponents, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_componentsInTimeZone_fromDate_.get(), __timezone, __date, );
 }}
var sel_compareDate_toDate_toUnitGranularity_ = CachedSelector.init("compareDate:toDate:toUnitGranularity:");
      pub fn compareDatetoDatetoUnitGranularity(self: *Self, __date1:  * NSDate, __date2:  * NSDate, __unit: NSCalendarUnit, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDate, NSCalendarUnit, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compareDate_toDate_toUnitGranularity_.get(), __date1, __date2, __unit, );
 }}
var sel_isDate_equalToDate_toUnitGranularity_ = CachedSelector.init("isDate:equalToDate:toUnitGranularity:");
      pub fn isDateequalToDatetoUnitGranularity(self: *Self, __date1:  * NSDate, __date2:  * NSDate, __unit: NSCalendarUnit, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDate, NSCalendarUnit, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDate_equalToDate_toUnitGranularity_.get(), __date1, __date2, __unit, );
 }}
var sel_isDate_inSameDayAsDate_ = CachedSelector.init("isDate:inSameDayAsDate:");
      pub fn isDateinSameDayAsDate(self: *Self, __date1:  * NSDate, __date2:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDate_inSameDayAsDate_.get(), __date1, __date2, );
 }}
var sel_isDateInToday_ = CachedSelector.init("isDateInToday:");
      pub fn isDateInToday(self: *Self, __date:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDateInToday_.get(), __date, );
 }}
var sel_isDateInYesterday_ = CachedSelector.init("isDateInYesterday:");
      pub fn isDateInYesterday(self: *Self, __date:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDateInYesterday_.get(), __date, );
 }}
var sel_isDateInTomorrow_ = CachedSelector.init("isDateInTomorrow:");
      pub fn isDateInTomorrow(self: *Self, __date:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDateInTomorrow_.get(), __date, );
 }}
var sel_isDateInWeekend_ = CachedSelector.init("isDateInWeekend:");
      pub fn isDateInWeekend(self: *Self, __date:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isDateInWeekend_.get(), __date, );
 }}
var sel_rangeOfWeekendStartDate_interval_containingDate_ = CachedSelector.init("rangeOfWeekendStartDate:interval:containingDate:");
      pub fn rangeOfWeekendStartDateintervalcontainingDate(self: *Self, __datep:  [*c]  ?* NSDate, __tip:  [*c] f64, __date:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSDate,  [*c] f64,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeOfWeekendStartDate_interval_containingDate_.get(), __datep, __tip, __date, );
 }}
var sel_nextWeekendStartDate_interval_options_afterDate_ = CachedSelector.init("nextWeekendStartDate:interval:options:afterDate:");
      pub fn nextWeekendStartDateintervaloptionsafterDate(self: *Self, __datep:  [*c]  ?* NSDate, __tip:  [*c] f64, __options: NSCalendarOptions, __date:  * NSDate, ) c_int {{
           return @as(*const fn(*Self, SEL,  [*c]  ?* NSDate,  [*c] f64, NSCalendarOptions,  * NSDate, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nextWeekendStartDate_interval_options_afterDate_.get(), __datep, __tip, __options, __date, );
 }}
var sel_components_fromDateComponents_toDateComponents_options_ = CachedSelector.init("components:fromDateComponents:toDateComponents:options:");
      pub fn componentsfromDateComponentstoDateComponentsoptions(self: *Self, __unitFlags: NSCalendarUnit, __startingDateComp:  * NSDateComponents, __resultDateComp:  * NSDateComponents, __options: NSCalendarOptions, )  * NSDateComponents {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit,  * NSDateComponents,  * NSDateComponents, NSCalendarOptions, ) callconv(.C)  * NSDateComponents, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_components_fromDateComponents_toDateComponents_options_.get(), __unitFlags, __startingDateComp, __resultDateComp, __options, );
 }}
var sel_dateByAddingUnit_value_toDate_options_ = CachedSelector.init("dateByAddingUnit:value:toDate:options:");
      pub fn dateByAddingUnitvaluetoDateoptions(self: *Self, __unit: NSCalendarUnit, __value: c_long, __date:  * NSDate, __options: NSCalendarOptions, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit, c_long,  * NSDate, NSCalendarOptions, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateByAddingUnit_value_toDate_options_.get(), __unit, __value, __date, __options, );
 }}
var sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_ = CachedSelector.init("enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:");
      pub fn enumerateDatesStartingAfterDatematchingComponentsoptionsusingBlock(self: *Self, __start:  * NSDate, __comps:  * NSDateComponents, __opts: NSCalendarOptions, __block: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDateComponents, NSCalendarOptions, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_.get(), __start, __comps, __opts, __block, );
 }}
var sel_nextDateAfterDate_matchingComponents_options_ = CachedSelector.init("nextDateAfterDate:matchingComponents:options:");
      pub fn nextDateAfterDatematchingComponentsoptions(self: *Self, __date:  * NSDate, __comps:  * NSDateComponents, __options: NSCalendarOptions, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDateComponents, NSCalendarOptions, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nextDateAfterDate_matchingComponents_options_.get(), __date, __comps, __options, );
 }}
var sel_nextDateAfterDate_matchingUnit_value_options_ = CachedSelector.init("nextDateAfterDate:matchingUnit:value:options:");
      pub fn nextDateAfterDatematchingUnitvalueoptions(self: *Self, __date:  * NSDate, __unit: NSCalendarUnit, __value: c_long, __options: NSCalendarOptions, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL,  * NSDate, NSCalendarUnit, c_long, NSCalendarOptions, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nextDateAfterDate_matchingUnit_value_options_.get(), __date, __unit, __value, __options, );
 }}
var sel_nextDateAfterDate_matchingHour_minute_second_options_ = CachedSelector.init("nextDateAfterDate:matchingHour:minute:second:options:");
      pub fn nextDateAfterDatematchingHourminutesecondoptions(self: *Self, __date:  * NSDate, __hourValue: c_long, __minuteValue: c_long, __secondValue: c_long, __options: NSCalendarOptions, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL,  * NSDate, c_long, c_long, c_long, NSCalendarOptions, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nextDateAfterDate_matchingHour_minute_second_options_.get(), __date, __hourValue, __minuteValue, __secondValue, __options, );
 }}
var sel_dateBySettingUnit_value_ofDate_options_ = CachedSelector.init("dateBySettingUnit:value:ofDate:options:");
      pub fn dateBySettingUnitvalueofDateoptions(self: *Self, __unit: NSCalendarUnit, __v: c_long, __date:  * NSDate, __opts: NSCalendarOptions, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit, c_long,  * NSDate, NSCalendarOptions, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateBySettingUnit_value_ofDate_options_.get(), __unit, __v, __date, __opts, );
 }}
var sel_dateBySettingHour_minute_second_ofDate_options_ = CachedSelector.init("dateBySettingHour:minute:second:ofDate:options:");
      pub fn dateBySettingHourminutesecondofDateoptions(self: *Self, __h: c_long, __m: c_long, __s: c_long, __date:  * NSDate, __opts: NSCalendarOptions, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, c_long, c_long, c_long,  * NSDate, NSCalendarOptions, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateBySettingHour_minute_second_ofDate_options_.get(), __h, __m, __s, __date, __opts, );
 }}
var sel_date_matchesComponents_ = CachedSelector.init("date:matchesComponents:");
      pub fn datematchesComponents(self: *Self, __date:  * NSDate, __components:  * NSDateComponents, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSDate,  * NSDateComponents, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_date_matchesComponents_.get(), __date, __components, );
 }}
var sel_currentCalendar = CachedSelector.init("currentCalendar");
      pub fn currentCalendar()  * NSCalendar {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCalendar, @ptrCast(&objc_msgSend))(class.get(), sel_currentCalendar.get(), );
 }}
var sel_autoupdatingCurrentCalendar = CachedSelector.init("autoupdatingCurrentCalendar");
      pub fn autoupdatingCurrentCalendar()  * NSCalendar {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSCalendar, @ptrCast(&objc_msgSend))(class.get(), sel_autoupdatingCurrentCalendar.get(), );
 }}
var sel_calendarIdentifier = CachedSelector.init("calendarIdentifier");
      pub fn calendarIdentifier(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_calendarIdentifier.get(), );
 }}
var sel_locale = CachedSelector.init("locale");
      pub fn locale(self: *Self, )  ?* NSLocale {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSLocale, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locale.get(), );
 }}
var sel_setLocale_ = CachedSelector.init("setLocale:");
      pub fn setLocale(self: *Self, __locale:  ?* NSLocale, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocale_.get(), __locale, );
 }}
var sel_timeZone = CachedSelector.init("timeZone");
      pub fn timeZone(self: *Self, )  * NSTimeZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSTimeZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeZone.get(), );
 }}
var sel_setTimeZone_ = CachedSelector.init("setTimeZone:");
      pub fn setTimeZone(self: *Self, __timeZone:  * NSTimeZone, ) void {{
           return @as(*const fn(*Self, SEL,  * NSTimeZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeZone_.get(), __timeZone, );
 }}
var sel_firstWeekday = CachedSelector.init("firstWeekday");
      pub fn firstWeekday(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_firstWeekday.get(), );
 }}
var sel_setFirstWeekday_ = CachedSelector.init("setFirstWeekday:");
      pub fn setFirstWeekday(self: *Self, __firstWeekday: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFirstWeekday_.get(), __firstWeekday, );
 }}
var sel_minimumDaysInFirstWeek = CachedSelector.init("minimumDaysInFirstWeek");
      pub fn minimumDaysInFirstWeek(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minimumDaysInFirstWeek.get(), );
 }}
var sel_setMinimumDaysInFirstWeek_ = CachedSelector.init("setMinimumDaysInFirstWeek:");
      pub fn setMinimumDaysInFirstWeek(self: *Self, __minimumDaysInFirstWeek: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMinimumDaysInFirstWeek_.get(), __minimumDaysInFirstWeek, );
 }}
var sel_eraSymbols = CachedSelector.init("eraSymbols");
      pub fn eraSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_eraSymbols.get(), );
 }}
var sel_longEraSymbols = CachedSelector.init("longEraSymbols");
      pub fn longEraSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_longEraSymbols.get(), );
 }}
var sel_monthSymbols = CachedSelector.init("monthSymbols");
      pub fn monthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_monthSymbols.get(), );
 }}
var sel_shortMonthSymbols = CachedSelector.init("shortMonthSymbols");
      pub fn shortMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortMonthSymbols.get(), );
 }}
var sel_veryShortMonthSymbols = CachedSelector.init("veryShortMonthSymbols");
      pub fn veryShortMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_veryShortMonthSymbols.get(), );
 }}
var sel_standaloneMonthSymbols = CachedSelector.init("standaloneMonthSymbols");
      pub fn standaloneMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standaloneMonthSymbols.get(), );
 }}
var sel_shortStandaloneMonthSymbols = CachedSelector.init("shortStandaloneMonthSymbols");
      pub fn shortStandaloneMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortStandaloneMonthSymbols.get(), );
 }}
var sel_veryShortStandaloneMonthSymbols = CachedSelector.init("veryShortStandaloneMonthSymbols");
      pub fn veryShortStandaloneMonthSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_veryShortStandaloneMonthSymbols.get(), );
 }}
var sel_weekdaySymbols = CachedSelector.init("weekdaySymbols");
      pub fn weekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_weekdaySymbols.get(), );
 }}
var sel_shortWeekdaySymbols = CachedSelector.init("shortWeekdaySymbols");
      pub fn shortWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortWeekdaySymbols.get(), );
 }}
var sel_veryShortWeekdaySymbols = CachedSelector.init("veryShortWeekdaySymbols");
      pub fn veryShortWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_veryShortWeekdaySymbols.get(), );
 }}
var sel_standaloneWeekdaySymbols = CachedSelector.init("standaloneWeekdaySymbols");
      pub fn standaloneWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standaloneWeekdaySymbols.get(), );
 }}
var sel_shortStandaloneWeekdaySymbols = CachedSelector.init("shortStandaloneWeekdaySymbols");
      pub fn shortStandaloneWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortStandaloneWeekdaySymbols.get(), );
 }}
var sel_veryShortStandaloneWeekdaySymbols = CachedSelector.init("veryShortStandaloneWeekdaySymbols");
      pub fn veryShortStandaloneWeekdaySymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_veryShortStandaloneWeekdaySymbols.get(), );
 }}
var sel_quarterSymbols = CachedSelector.init("quarterSymbols");
      pub fn quarterSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_quarterSymbols.get(), );
 }}
var sel_shortQuarterSymbols = CachedSelector.init("shortQuarterSymbols");
      pub fn shortQuarterSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortQuarterSymbols.get(), );
 }}
var sel_standaloneQuarterSymbols = CachedSelector.init("standaloneQuarterSymbols");
      pub fn standaloneQuarterSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_standaloneQuarterSymbols.get(), );
 }}
var sel_shortStandaloneQuarterSymbols = CachedSelector.init("shortStandaloneQuarterSymbols");
      pub fn shortStandaloneQuarterSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_shortStandaloneQuarterSymbols.get(), );
 }}
var sel_AMSymbol = CachedSelector.init("AMSymbol");
      pub fn AMSymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_AMSymbol.get(), );
 }}
var sel_PMSymbol = CachedSelector.init("PMSymbol");
      pub fn PMSymbol(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_PMSymbol.get(), );
 }}
  };
}

pub const NSCalendar = opaque {
  const Self = @This();
  pub usingnamespace NSCalendarInterfaceMixin(Self, "NSCalendar");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSCalendar");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSCalendar");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCalendar");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSCalendar");
};

pub fn NSURLSessionTaskMetricsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_transactionMetrics = CachedSelector.init("transactionMetrics");
      pub fn transactionMetrics(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_transactionMetrics.get(), );
 }}
var sel_taskInterval = CachedSelector.init("taskInterval");
      pub fn taskInterval(self: *Self, )  * NSDateInterval {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDateInterval, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_taskInterval.get(), );
 }}
var sel_redirectCount = CachedSelector.init("redirectCount");
      pub fn redirectCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_redirectCount.get(), );
 }}
  };
}

pub const NSURLSessionTaskMetrics = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionTaskMetricsInterfaceMixin(Self, "NSURLSessionTaskMetrics");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionTaskMetrics");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLSessionTaskMetrics");
};

pub fn NSHTTPURLResponseInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithURL_statusCode_HTTPVersion_headerFields_ = CachedSelector.init("initWithURL:statusCode:HTTPVersion:headerFields:");
      pub fn initWithURLstatusCodeHTTPVersionheaderFields(self: *Self, __url:  * NSURL, __statusCode: c_long, __HTTPVersion:  ?* NSString, __headerFields:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURL, c_long,  ?* NSString,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithURL_statusCode_HTTPVersion_headerFields_.get(), __url, __statusCode, __HTTPVersion, __headerFields, );
 }}
var sel_valueForHTTPHeaderField_ = CachedSelector.init("valueForHTTPHeaderField:");
      pub fn valueForHTTPHeaderField(self: *Self, __field:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForHTTPHeaderField_.get(), __field, );
 }}
var sel_localizedStringForStatusCode_ = CachedSelector.init("localizedStringForStatusCode:");
      pub fn localizedStringForStatusCode(__statusCode: c_long, )  * NSString {{
           return @as(*const fn(Class, SEL, c_long, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localizedStringForStatusCode_.get(), __statusCode, );
 }}
var sel_statusCode = CachedSelector.init("statusCode");
      pub fn statusCode(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_statusCode.get(), );
 }}
var sel_allHeaderFields = CachedSelector.init("allHeaderFields");
      pub fn allHeaderFields(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_allHeaderFields.get(), );
 }}
  };
}

pub const NSHTTPURLResponse = opaque {
  const Self = @This();
  pub usingnamespace NSHTTPURLResponseInterfaceMixin(Self, "NSHTTPURLResponse");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSHTTPURLResponse");
  pub usingnamespace NSURLResponseInterfaceMixin(Self, "NSHTTPURLResponse");
};

pub fn NSUnitAccelerationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_metersPerSecondSquared = CachedSelector.init("metersPerSecondSquared");
      pub fn metersPerSecondSquared()  * NSUnitAcceleration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitAcceleration, @ptrCast(&objc_msgSend))(class.get(), sel_metersPerSecondSquared.get(), );
 }}
var sel_gravity = CachedSelector.init("gravity");
      pub fn gravity()  * NSUnitAcceleration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitAcceleration, @ptrCast(&objc_msgSend))(class.get(), sel_gravity.get(), );
 }}
  };
}

pub const NSUnitAcceleration = opaque {
  const Self = @This();
  pub usingnamespace NSUnitAccelerationInterfaceMixin(Self, "NSUnitAcceleration");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitAcceleration");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitAcceleration");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitAcceleration");
};

pub fn NSXMLElementInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithName_ = CachedSelector.init("initWithName:");
      pub fn initWithName(self: *Self, __name:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithName_.get(), __name, );
 }}
var sel_initWithName_URI_ = CachedSelector.init("initWithName:URI:");
      pub fn initWithNameURI(self: *Self, __name:  * NSString, __URI:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithName_URI_.get(), __name, __URI, );
 }}
var sel_initWithName_stringValue_ = CachedSelector.init("initWithName:stringValue:");
      pub fn initWithNamestringValue(self: *Self, __name:  * NSString, __string:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithName_stringValue_.get(), __name, __string, );
 }}
var sel_initWithXMLString_error_ = CachedSelector.init("initWithXMLString:error:");
      pub fn initWithXMLStringerror(self: *Self, __string:  * NSString, __an_error:  [*c]  ?* NSError, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  [*c]  ?* NSError, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithXMLString_error_.get(), __string, __an_error, );
 }}
var sel_initWithKind_options_ = CachedSelector.init("initWithKind:options:");
      pub fn initWithKindoptions(self: *Self, __kind: NSXMLNodeKind, __options: NSXMLNodeOptions, ) *Self {{
           return @as(*const fn(*Self, SEL, NSXMLNodeKind, NSXMLNodeOptions, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithKind_options_.get(), __kind, __options, );
 }}
var sel_elementsForName_ = CachedSelector.init("elementsForName:");
      pub fn elementsForName(self: *Self, __name:  * NSString, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementsForName_.get(), __name, );
 }}
var sel_elementsForLocalName_URI_ = CachedSelector.init("elementsForLocalName:URI:");
      pub fn elementsForLocalNameURI(self: *Self, __localName:  * NSString, __URI:  ?* NSString, )  * NSArray {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_elementsForLocalName_URI_.get(), __localName, __URI, );
 }}
var sel_addAttribute_ = CachedSelector.init("addAttribute:");
      pub fn addAttribute(self: *Self, __attribute:  * NSXMLNode, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLNode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addAttribute_.get(), __attribute, );
 }}
var sel_removeAttributeForName_ = CachedSelector.init("removeAttributeForName:");
      pub fn removeAttributeForName(self: *Self, __name:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAttributeForName_.get(), __name, );
 }}
var sel_setAttributesWithDictionary_ = CachedSelector.init("setAttributesWithDictionary:");
      pub fn setAttributesWithDictionary(self: *Self, __attributes:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributesWithDictionary_.get(), __attributes, );
 }}
var sel_attributeForName_ = CachedSelector.init("attributeForName:");
      pub fn attributeForName(self: *Self, __name:  * NSString, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeForName_.get(), __name, );
 }}
var sel_attributeForLocalName_URI_ = CachedSelector.init("attributeForLocalName:URI:");
      pub fn attributeForLocalNameURI(self: *Self, __localName:  * NSString, __URI:  ?* NSString, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeForLocalName_URI_.get(), __localName, __URI, );
 }}
var sel_addNamespace_ = CachedSelector.init("addNamespace:");
      pub fn addNamespace(self: *Self, __aNamespace:  * NSXMLNode, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLNode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addNamespace_.get(), __aNamespace, );
 }}
var sel_removeNamespaceForPrefix_ = CachedSelector.init("removeNamespaceForPrefix:");
      pub fn removeNamespaceForPrefix(self: *Self, __name:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeNamespaceForPrefix_.get(), __name, );
 }}
var sel_namespaceForPrefix_ = CachedSelector.init("namespaceForPrefix:");
      pub fn namespaceForPrefix(self: *Self, __name:  * NSString, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_namespaceForPrefix_.get(), __name, );
 }}
var sel_resolveNamespaceForName_ = CachedSelector.init("resolveNamespaceForName:");
      pub fn resolveNamespaceForName(self: *Self, __name:  * NSString, )  ?* NSXMLNode {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSXMLNode, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolveNamespaceForName_.get(), __name, );
 }}
var sel_resolvePrefixForNamespaceURI_ = CachedSelector.init("resolvePrefixForNamespaceURI:");
      pub fn resolvePrefixForNamespaceURI(self: *Self, __namespaceURI:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolvePrefixForNamespaceURI_.get(), __namespaceURI, );
 }}
var sel_insertChild_atIndex_ = CachedSelector.init("insertChild:atIndex:");
      pub fn insertChildatIndex(self: *Self, __child:  * NSXMLNode, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLNode, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertChild_atIndex_.get(), __child, __index, );
 }}
var sel_insertChildren_atIndex_ = CachedSelector.init("insertChildren:atIndex:");
      pub fn insertChildrenatIndex(self: *Self, __children:  * NSArray, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertChildren_atIndex_.get(), __children, __index, );
 }}
var sel_removeChildAtIndex_ = CachedSelector.init("removeChildAtIndex:");
      pub fn removeChildAtIndex(self: *Self, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeChildAtIndex_.get(), __index, );
 }}
var sel_setChildren_ = CachedSelector.init("setChildren:");
      pub fn setChildren(self: *Self, __children:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setChildren_.get(), __children, );
 }}
var sel_addChild_ = CachedSelector.init("addChild:");
      pub fn addChild(self: *Self, __child:  * NSXMLNode, ) void {{
           return @as(*const fn(*Self, SEL,  * NSXMLNode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addChild_.get(), __child, );
 }}
var sel_replaceChildAtIndex_withNode_ = CachedSelector.init("replaceChildAtIndex:withNode:");
      pub fn replaceChildAtIndexwithNode(self: *Self, __index: c_ulong, __node:  * NSXMLNode, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong,  * NSXMLNode, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceChildAtIndex_withNode_.get(), __index, __node, );
 }}
var sel_normalizeAdjacentTextNodesPreservingCDATA_ = CachedSelector.init("normalizeAdjacentTextNodesPreservingCDATA:");
      pub fn normalizeAdjacentTextNodesPreservingCDATA(self: *Self, __preserve: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_normalizeAdjacentTextNodesPreservingCDATA_.get(), __preserve, );
 }}
var sel_attributes = CachedSelector.init("attributes");
      pub fn attributes(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributes.get(), );
 }}
var sel_setAttributes_ = CachedSelector.init("setAttributes:");
      pub fn setAttributes(self: *Self, __attributes:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributes_.get(), __attributes, );
 }}
var sel_namespaces = CachedSelector.init("namespaces");
      pub fn namespaces(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_namespaces.get(), );
 }}
var sel_setNamespaces_ = CachedSelector.init("setNamespaces:");
      pub fn setNamespaces(self: *Self, __namespaces:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNamespaces_.get(), __namespaces, );
 }}
var sel_setAttributesAsDictionary_ = CachedSelector.init("setAttributesAsDictionary:");
      pub fn setAttributesAsDictionary(self: *Self, __attributes:  * NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributesAsDictionary_.get(), __attributes, );
 }}
  };
}

pub const NSXMLElement = opaque {
  const Self = @This();
  pub usingnamespace NSXMLElementInterfaceMixin(Self, "NSXMLElement");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXMLElement");
  pub usingnamespace NSXMLNodeInterfaceMixin(Self, "NSXMLElement");
};

pub fn NSScriptCommandDescriptionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithSuiteName_commandName_dictionary_ = CachedSelector.init("initWithSuiteName:commandName:dictionary:");
      pub fn initWithSuiteNamecommandNamedictionary(self: *Self, __suiteName:  * NSString, __commandName:  * NSString, __commandDeclaration:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithSuiteName_commandName_dictionary_.get(), __suiteName, __commandName, __commandDeclaration, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_typeForArgumentWithName_ = CachedSelector.init("typeForArgumentWithName:");
      pub fn typeForArgumentWithName(self: *Self, __argumentName:  * NSString, )  ?* NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_typeForArgumentWithName_.get(), __argumentName, );
 }}
var sel_appleEventCodeForArgumentWithName_ = CachedSelector.init("appleEventCodeForArgumentWithName:");
      pub fn appleEventCodeForArgumentWithName(self: *Self, __argumentName:  * NSString, ) c_uint {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appleEventCodeForArgumentWithName_.get(), __argumentName, );
 }}
var sel_isOptionalArgumentWithName_ = CachedSelector.init("isOptionalArgumentWithName:");
      pub fn isOptionalArgumentWithName(self: *Self, __argumentName:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isOptionalArgumentWithName_.get(), __argumentName, );
 }}
var sel_createCommandInstance = CachedSelector.init("createCommandInstance");
      pub fn createCommandInstance(self: *Self, )  * NSScriptCommand {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSScriptCommand, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createCommandInstance.get(), );
 }}
var sel_createCommandInstanceWithZone_ = CachedSelector.init("createCommandInstanceWithZone:");
      pub fn createCommandInstanceWithZone(self: *Self, __zone:  [*c] _NSZone, )  * NSScriptCommand {{
           return @as(*const fn(*Self, SEL,  [*c] _NSZone, ) callconv(.C)  * NSScriptCommand, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createCommandInstanceWithZone_.get(), __zone, );
 }}
var sel_suiteName = CachedSelector.init("suiteName");
      pub fn suiteName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suiteName.get(), );
 }}
var sel_commandName = CachedSelector.init("commandName");
      pub fn commandName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandName.get(), );
 }}
var sel_appleEventClassCode = CachedSelector.init("appleEventClassCode");
      pub fn appleEventClassCode(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appleEventClassCode.get(), );
 }}
var sel_appleEventCode = CachedSelector.init("appleEventCode");
      pub fn appleEventCode(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appleEventCode.get(), );
 }}
var sel_commandClassName = CachedSelector.init("commandClassName");
      pub fn commandClassName(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandClassName.get(), );
 }}
var sel_returnType = CachedSelector.init("returnType");
      pub fn returnType(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_returnType.get(), );
 }}
var sel_appleEventCodeForReturnType = CachedSelector.init("appleEventCodeForReturnType");
      pub fn appleEventCodeForReturnType(self: *Self, ) c_uint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appleEventCodeForReturnType.get(), );
 }}
var sel_argumentNames = CachedSelector.init("argumentNames");
      pub fn argumentNames(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_argumentNames.get(), );
 }}
  };
}

pub const NSScriptCommandDescription = opaque {
  const Self = @This();
  pub usingnamespace NSScriptCommandDescriptionInterfaceMixin(Self, "NSScriptCommandDescription");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSScriptCommandDescription");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSScriptCommandDescription");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSScriptCommandDescription");
};

pub fn NSScriptSuiteRegistryInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sharedScriptSuiteRegistry = CachedSelector.init("sharedScriptSuiteRegistry");
      pub fn sharedScriptSuiteRegistry()  * NSScriptSuiteRegistry {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSScriptSuiteRegistry, @ptrCast(&objc_msgSend))(class.get(), sel_sharedScriptSuiteRegistry.get(), );
 }}
var sel_setSharedScriptSuiteRegistry_ = CachedSelector.init("setSharedScriptSuiteRegistry:");
      pub fn setSharedScriptSuiteRegistry(__registry:  * NSScriptSuiteRegistry, ) void {{
           return @as(*const fn(Class, SEL,  * NSScriptSuiteRegistry, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_setSharedScriptSuiteRegistry_.get(), __registry, );
 }}
var sel_loadSuitesFromBundle_ = CachedSelector.init("loadSuitesFromBundle:");
      pub fn loadSuitesFromBundle(self: *Self, __bundle:  * NSBundle, ) void {{
           return @as(*const fn(*Self, SEL,  * NSBundle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadSuitesFromBundle_.get(), __bundle, );
 }}
var sel_loadSuiteWithDictionary_fromBundle_ = CachedSelector.init("loadSuiteWithDictionary:fromBundle:");
      pub fn loadSuiteWithDictionaryfromBundle(self: *Self, __suiteDeclaration:  * NSDictionary, __bundle:  * NSBundle, ) void {{
           return @as(*const fn(*Self, SEL,  * NSDictionary,  * NSBundle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_loadSuiteWithDictionary_fromBundle_.get(), __suiteDeclaration, __bundle, );
 }}
var sel_registerClassDescription_ = CachedSelector.init("registerClassDescription:");
      pub fn registerClassDescription(self: *Self, __classDescription:  * NSScriptClassDescription, ) void {{
           return @as(*const fn(*Self, SEL,  * NSScriptClassDescription, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerClassDescription_.get(), __classDescription, );
 }}
var sel_registerCommandDescription_ = CachedSelector.init("registerCommandDescription:");
      pub fn registerCommandDescription(self: *Self, __commandDescription:  * NSScriptCommandDescription, ) void {{
           return @as(*const fn(*Self, SEL,  * NSScriptCommandDescription, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerCommandDescription_.get(), __commandDescription, );
 }}
var sel_appleEventCodeForSuite_ = CachedSelector.init("appleEventCodeForSuite:");
      pub fn appleEventCodeForSuite(self: *Self, __suiteName:  * NSString, ) c_uint {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_uint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appleEventCodeForSuite_.get(), __suiteName, );
 }}
var sel_bundleForSuite_ = CachedSelector.init("bundleForSuite:");
      pub fn bundleForSuite(self: *Self, __suiteName:  * NSString, )  ?* NSBundle {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSBundle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_bundleForSuite_.get(), __suiteName, );
 }}
var sel_classDescriptionsInSuite_ = CachedSelector.init("classDescriptionsInSuite:");
      pub fn classDescriptionsInSuite(self: *Self, __suiteName:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classDescriptionsInSuite_.get(), __suiteName, );
 }}
var sel_commandDescriptionsInSuite_ = CachedSelector.init("commandDescriptionsInSuite:");
      pub fn commandDescriptionsInSuite(self: *Self, __suiteName:  * NSString, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandDescriptionsInSuite_.get(), __suiteName, );
 }}
var sel_suiteForAppleEventCode_ = CachedSelector.init("suiteForAppleEventCode:");
      pub fn suiteForAppleEventCode(self: *Self, __appleEventCode: c_uint, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suiteForAppleEventCode_.get(), __appleEventCode, );
 }}
var sel_classDescriptionWithAppleEventCode_ = CachedSelector.init("classDescriptionWithAppleEventCode:");
      pub fn classDescriptionWithAppleEventCode(self: *Self, __appleEventCode: c_uint, )  ?* NSScriptClassDescription {{
           return @as(*const fn(*Self, SEL, c_uint, ) callconv(.C)  ?* NSScriptClassDescription, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_classDescriptionWithAppleEventCode_.get(), __appleEventCode, );
 }}
var sel_commandDescriptionWithAppleEventClass_andAppleEventCode_ = CachedSelector.init("commandDescriptionWithAppleEventClass:andAppleEventCode:");
      pub fn commandDescriptionWithAppleEventClassandAppleEventCode(self: *Self, __appleEventClassCode: c_uint, __appleEventIDCode: c_uint, )  ?* NSScriptCommandDescription {{
           return @as(*const fn(*Self, SEL, c_uint, c_uint, ) callconv(.C)  ?* NSScriptCommandDescription, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandDescriptionWithAppleEventClass_andAppleEventCode_.get(), __appleEventClassCode, __appleEventIDCode, );
 }}
var sel_aeteResource_ = CachedSelector.init("aeteResource:");
      pub fn aeteResource(self: *Self, __languageName:  * NSString, )  ?* NSData {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_aeteResource_.get(), __languageName, );
 }}
var sel_suiteNames = CachedSelector.init("suiteNames");
      pub fn suiteNames(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suiteNames.get(), );
 }}
  };
}

pub const NSScriptSuiteRegistry = opaque {
  const Self = @This();
  pub usingnamespace NSScriptSuiteRegistryInterfaceMixin(Self, "NSScriptSuiteRegistry");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSScriptSuiteRegistry");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSScriptSuiteRegistry");
};

pub fn NSUnitAreaInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_squareMegameters = CachedSelector.init("squareMegameters");
      pub fn squareMegameters()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareMegameters.get(), );
 }}
var sel_squareKilometers = CachedSelector.init("squareKilometers");
      pub fn squareKilometers()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareKilometers.get(), );
 }}
var sel_squareMeters = CachedSelector.init("squareMeters");
      pub fn squareMeters()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareMeters.get(), );
 }}
var sel_squareCentimeters = CachedSelector.init("squareCentimeters");
      pub fn squareCentimeters()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareCentimeters.get(), );
 }}
var sel_squareMillimeters = CachedSelector.init("squareMillimeters");
      pub fn squareMillimeters()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareMillimeters.get(), );
 }}
var sel_squareMicrometers = CachedSelector.init("squareMicrometers");
      pub fn squareMicrometers()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareMicrometers.get(), );
 }}
var sel_squareNanometers = CachedSelector.init("squareNanometers");
      pub fn squareNanometers()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareNanometers.get(), );
 }}
var sel_squareInches = CachedSelector.init("squareInches");
      pub fn squareInches()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareInches.get(), );
 }}
var sel_squareFeet = CachedSelector.init("squareFeet");
      pub fn squareFeet()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareFeet.get(), );
 }}
var sel_squareYards = CachedSelector.init("squareYards");
      pub fn squareYards()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareYards.get(), );
 }}
var sel_squareMiles = CachedSelector.init("squareMiles");
      pub fn squareMiles()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_squareMiles.get(), );
 }}
var sel_acres = CachedSelector.init("acres");
      pub fn acres()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_acres.get(), );
 }}
var sel_ares = CachedSelector.init("ares");
      pub fn ares()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_ares.get(), );
 }}
var sel_hectares = CachedSelector.init("hectares");
      pub fn hectares()  * NSUnitArea {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitArea, @ptrCast(&objc_msgSend))(class.get(), sel_hectares.get(), );
 }}
  };
}

pub const NSUnitArea = opaque {
  const Self = @This();
  pub usingnamespace NSUnitAreaInterfaceMixin(Self, "NSUnitArea");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitArea");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitArea");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitArea");
};

pub fn NSURLQueryItemInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithName_value_ = CachedSelector.init("initWithName:value:");
      pub fn initWithNamevalue(self: *Self, __name:  * NSString, __value:  ?* NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithName_value_.get(), __name, __value, );
 }}
var sel_queryItemWithName_value_ = CachedSelector.init("queryItemWithName:value:");
      pub fn queryItemWithNamevalue(__name:  * NSString, __value:  ?* NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_queryItemWithName_value_.get(), __name, __value, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_value = CachedSelector.init("value");
      pub fn value(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_value.get(), );
 }}
  };
}

pub const NSURLQueryItem = opaque {
  const Self = @This();
  pub usingnamespace NSURLQueryItemInterfaceMixin(Self, "NSURLQueryItem");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSURLQueryItem");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSURLQueryItem");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLQueryItem");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLQueryItem");
};

pub fn NSTextCheckingResultInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_resultType = CachedSelector.init("resultType");
      pub fn resultType(self: *Self, ) NSTextCheckingType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSTextCheckingType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resultType.get(), );
 }}
var sel_range = CachedSelector.init("range");
      pub fn range(self: *Self, ) _NSRange {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_range.get(), );
 }}
var sel_rangeAtIndex_ = CachedSelector.init("rangeAtIndex:");
      pub fn rangeAtIndex(self: *Self, __idx: c_ulong, ) _NSRange {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeAtIndex_.get(), __idx, );
 }}
var sel_rangeWithName_ = CachedSelector.init("rangeWithName:");
      pub fn rangeWithName(self: *Self, __name:  * NSString, ) _NSRange {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) _NSRange, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rangeWithName_.get(), __name, );
 }}
var sel_resultByAdjustingRangesWithOffset_ = CachedSelector.init("resultByAdjustingRangesWithOffset:");
      pub fn resultByAdjustingRangesWithOffset(self: *Self, __offset: c_long, )  * NSTextCheckingResult {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resultByAdjustingRangesWithOffset_.get(), __offset, );
 }}
var sel_orthography = CachedSelector.init("orthography");
      pub fn orthography(self: *Self, )  ?* NSOrthography {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSOrthography, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_orthography.get(), );
 }}
var sel_grammarDetails = CachedSelector.init("grammarDetails");
      pub fn grammarDetails(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_grammarDetails.get(), );
 }}
var sel_date = CachedSelector.init("date");
      pub fn date(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_date.get(), );
 }}
var sel_timeZone = CachedSelector.init("timeZone");
      pub fn timeZone(self: *Self, )  ?* NSTimeZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSTimeZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeZone.get(), );
 }}
var sel_duration = CachedSelector.init("duration");
      pub fn duration(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_duration.get(), );
 }}
var sel_components = CachedSelector.init("components");
      pub fn components(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_components.get(), );
 }}
var sel_URL = CachedSelector.init("URL");
      pub fn URL(self: *Self, )  ?* NSURL {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURL, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_URL.get(), );
 }}
var sel_replacementString = CachedSelector.init("replacementString");
      pub fn replacementString(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replacementString.get(), );
 }}
var sel_alternativeStrings = CachedSelector.init("alternativeStrings");
      pub fn alternativeStrings(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_alternativeStrings.get(), );
 }}
var sel_regularExpression = CachedSelector.init("regularExpression");
      pub fn regularExpression(self: *Self, )  ?* NSRegularExpression {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSRegularExpression, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_regularExpression.get(), );
 }}
var sel_phoneNumber = CachedSelector.init("phoneNumber");
      pub fn phoneNumber(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_phoneNumber.get(), );
 }}
var sel_numberOfRanges = CachedSelector.init("numberOfRanges");
      pub fn numberOfRanges(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberOfRanges.get(), );
 }}
var sel_addressComponents = CachedSelector.init("addressComponents");
      pub fn addressComponents(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addressComponents.get(), );
 }}
var sel_orthographyCheckingResultWithRange_orthography_ = CachedSelector.init("orthographyCheckingResultWithRange:orthography:");
      pub fn orthographyCheckingResultWithRangeorthography(__range: _NSRange, __orthography:  * NSOrthography, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSOrthography, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_orthographyCheckingResultWithRange_orthography_.get(), __range, __orthography, );
 }}
var sel_spellCheckingResultWithRange_ = CachedSelector.init("spellCheckingResultWithRange:");
      pub fn spellCheckingResultWithRange(__range: _NSRange, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_spellCheckingResultWithRange_.get(), __range, );
 }}
var sel_grammarCheckingResultWithRange_details_ = CachedSelector.init("grammarCheckingResultWithRange:details:");
      pub fn grammarCheckingResultWithRangedetails(__range: _NSRange, __details:  * NSArray, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSArray, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_grammarCheckingResultWithRange_details_.get(), __range, __details, );
 }}
var sel_dateCheckingResultWithRange_date_ = CachedSelector.init("dateCheckingResultWithRange:date:");
      pub fn dateCheckingResultWithRangedate(__range: _NSRange, __date:  * NSDate, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSDate, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_dateCheckingResultWithRange_date_.get(), __range, __date, );
 }}
var sel_dateCheckingResultWithRange_date_timeZone_duration_ = CachedSelector.init("dateCheckingResultWithRange:date:timeZone:duration:");
      pub fn dateCheckingResultWithRangedatetimeZoneduration(__range: _NSRange, __date:  * NSDate, __timeZone:  * NSTimeZone, __duration: f64, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSDate,  * NSTimeZone, f64, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_dateCheckingResultWithRange_date_timeZone_duration_.get(), __range, __date, __timeZone, __duration, );
 }}
var sel_addressCheckingResultWithRange_components_ = CachedSelector.init("addressCheckingResultWithRange:components:");
      pub fn addressCheckingResultWithRangecomponents(__range: _NSRange, __components:  * NSDictionary, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSDictionary, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_addressCheckingResultWithRange_components_.get(), __range, __components, );
 }}
var sel_linkCheckingResultWithRange_URL_ = CachedSelector.init("linkCheckingResultWithRange:URL:");
      pub fn linkCheckingResultWithRangeURL(__range: _NSRange, __url:  * NSURL, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSURL, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_linkCheckingResultWithRange_URL_.get(), __range, __url, );
 }}
var sel_quoteCheckingResultWithRange_replacementString_ = CachedSelector.init("quoteCheckingResultWithRange:replacementString:");
      pub fn quoteCheckingResultWithRangereplacementString(__range: _NSRange, __replacementString:  * NSString, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSString, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_quoteCheckingResultWithRange_replacementString_.get(), __range, __replacementString, );
 }}
var sel_dashCheckingResultWithRange_replacementString_ = CachedSelector.init("dashCheckingResultWithRange:replacementString:");
      pub fn dashCheckingResultWithRangereplacementString(__range: _NSRange, __replacementString:  * NSString, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSString, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_dashCheckingResultWithRange_replacementString_.get(), __range, __replacementString, );
 }}
var sel_replacementCheckingResultWithRange_replacementString_ = CachedSelector.init("replacementCheckingResultWithRange:replacementString:");
      pub fn replacementCheckingResultWithRangereplacementString(__range: _NSRange, __replacementString:  * NSString, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSString, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_replacementCheckingResultWithRange_replacementString_.get(), __range, __replacementString, );
 }}
var sel_correctionCheckingResultWithRange_replacementString_ = CachedSelector.init("correctionCheckingResultWithRange:replacementString:");
      pub fn correctionCheckingResultWithRangereplacementString(__range: _NSRange, __replacementString:  * NSString, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSString, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_correctionCheckingResultWithRange_replacementString_.get(), __range, __replacementString, );
 }}
var sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_ = CachedSelector.init("correctionCheckingResultWithRange:replacementString:alternativeStrings:");
      pub fn correctionCheckingResultWithRangereplacementStringalternativeStrings(__range: _NSRange, __replacementString:  * NSString, __alternativeStrings:  * NSArray, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSString,  * NSArray, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_.get(), __range, __replacementString, __alternativeStrings, );
 }}
var sel_regularExpressionCheckingResultWithRanges_count_regularExpression_ = CachedSelector.init("regularExpressionCheckingResultWithRanges:count:regularExpression:");
      pub fn regularExpressionCheckingResultWithRangescountregularExpression(__ranges:  [*c] _NSRange, __count: c_ulong, __regularExpression:  * NSRegularExpression, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL,  [*c] _NSRange, c_ulong,  * NSRegularExpression, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_regularExpressionCheckingResultWithRanges_count_regularExpression_.get(), __ranges, __count, __regularExpression, );
 }}
var sel_phoneNumberCheckingResultWithRange_phoneNumber_ = CachedSelector.init("phoneNumberCheckingResultWithRange:phoneNumber:");
      pub fn phoneNumberCheckingResultWithRangephoneNumber(__range: _NSRange, __phoneNumber:  * NSString, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSString, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_phoneNumberCheckingResultWithRange_phoneNumber_.get(), __range, __phoneNumber, );
 }}
var sel_transitInformationCheckingResultWithRange_components_ = CachedSelector.init("transitInformationCheckingResultWithRange:components:");
      pub fn transitInformationCheckingResultWithRangecomponents(__range: _NSRange, __components:  * NSDictionary, )  * NSTextCheckingResult {{
           return @as(*const fn(Class, SEL, _NSRange,  * NSDictionary, ) callconv(.C)  * NSTextCheckingResult, @ptrCast(&objc_msgSend))(class.get(), sel_transitInformationCheckingResultWithRange_components_.get(), __range, __components, );
 }}
  };
}

pub const NSTextCheckingResult = opaque {
  const Self = @This();
  pub usingnamespace NSTextCheckingResultInterfaceMixin(Self, "NSTextCheckingResult");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSTextCheckingResult");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSTextCheckingResult");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSTextCheckingResult");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSTextCheckingResult");
};

pub fn NSMutableStringInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_replaceCharactersInRange_withString_ = CachedSelector.init("replaceCharactersInRange:withString:");
      pub fn replaceCharactersInRangewithString(self: *Self, __range: _NSRange, __aString:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceCharactersInRange_withString_.get(), __range, __aString, );
 }}
var sel_insertString_atIndex_ = CachedSelector.init("insertString:atIndex:");
      pub fn insertStringatIndex(self: *Self, __aString:  * NSString, __loc: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_insertString_atIndex_.get(), __aString, __loc, );
 }}
var sel_deleteCharactersInRange_ = CachedSelector.init("deleteCharactersInRange:");
      pub fn deleteCharactersInRange(self: *Self, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_deleteCharactersInRange_.get(), __range, );
 }}
var sel_appendString_ = CachedSelector.init("appendString:");
      pub fn appendString(self: *Self, __aString:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appendString_.get(), __aString, );
 }}
var sel_appendFormat_ = CachedSelector.init("appendFormat:");
      pub fn appendFormat(self: *Self, __format:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appendFormat_.get(), __format, );
 }}
var sel_setString_ = CachedSelector.init("setString:");
      pub fn setString(self: *Self, __aString:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setString_.get(), __aString, );
 }}
var sel_replaceOccurrencesOfString_withString_options_range_ = CachedSelector.init("replaceOccurrencesOfString:withString:options:range:");
      pub fn replaceOccurrencesOfStringwithStringoptionsrange(self: *Self, __target:  * NSString, __replacement:  * NSString, __options: NSStringCompareOptions, __searchRange: _NSRange, ) c_ulong {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, NSStringCompareOptions, _NSRange, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replaceOccurrencesOfString_withString_options_range_.get(), __target, __replacement, __options, __searchRange, );
 }}
var sel_applyTransform_reverse_range_updatedRange_ = CachedSelector.init("applyTransform:reverse:range:updatedRange:");
      pub fn applyTransformreverserangeupdatedRange(self: *Self, __transform:  * NSString, __reverse: c_int, __range: _NSRange, __resultingRange:  [*c] _NSRange, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, c_int, _NSRange,  [*c] _NSRange, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_applyTransform_reverse_range_updatedRange_.get(), __transform, __reverse, __range, __resultingRange, );
 }}
var sel_initWithCapacity_ = CachedSelector.init("initWithCapacity:");
      pub fn initWithCapacity(self: *Self, __capacity: c_ulong, )  * NSMutableString {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * NSMutableString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCapacity_.get(), __capacity, );
 }}
var sel_stringWithCapacity_ = CachedSelector.init("stringWithCapacity:");
      pub fn stringWithCapacity(__capacity: c_ulong, )  * NSMutableString {{
           return @as(*const fn(Class, SEL, c_ulong, ) callconv(.C)  * NSMutableString, @ptrCast(&objc_msgSend))(class.get(), sel_stringWithCapacity_.get(), __capacity, );
 }}
  };
}

pub const NSMutableString = opaque {
  const Self = @This();
  pub usingnamespace NSMutableStringInterfaceMixin(Self, "NSMutableString");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMutableString");
  pub usingnamespace NSStringInterfaceMixin(Self, "NSMutableString");
};

pub fn MTLComputePassSampleBufferAttachmentDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __attachmentIndex: c_ulong, )  * MTLComputePassSampleBufferAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLComputePassSampleBufferAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __attachmentIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attachment:  ?* MTLComputePassSampleBufferAttachmentDescriptor, __attachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLComputePassSampleBufferAttachmentDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attachment, __attachmentIndex, );
 }}
  };
}

pub const MTLComputePassSampleBufferAttachmentDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLComputePassSampleBufferAttachmentDescriptorArrayInterfaceMixin(Self, "MTLComputePassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLComputePassSampleBufferAttachmentDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLComputePassSampleBufferAttachmentDescriptorArray");
};

pub fn NSConnectionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_allConnections = CachedSelector.init("allConnections");
      pub fn allConnections()  * NSArray {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(class.get(), sel_allConnections.get(), );
 }}
var sel_defaultConnection = CachedSelector.init("defaultConnection");
      pub fn defaultConnection()  * NSConnection {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSConnection, @ptrCast(&objc_msgSend))(class.get(), sel_defaultConnection.get(), );
 }}
var sel_connectionWithRegisteredName_host_ = CachedSelector.init("connectionWithRegisteredName:host:");
      pub fn connectionWithRegisteredNamehost(__name:  * NSString, __hostName:  ?* NSString, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_connectionWithRegisteredName_host_.get(), __name, __hostName, );
 }}
var sel_connectionWithRegisteredName_host_usingNameServer_ = CachedSelector.init("connectionWithRegisteredName:host:usingNameServer:");
      pub fn connectionWithRegisteredNamehostusingNameServer(__name:  * NSString, __hostName:  ?* NSString, __server:  * NSPortNameServer, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSString,  * NSPortNameServer, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_connectionWithRegisteredName_host_usingNameServer_.get(), __name, __hostName, __server, );
 }}
var sel_rootProxyForConnectionWithRegisteredName_host_ = CachedSelector.init("rootProxyForConnectionWithRegisteredName:host:");
      pub fn rootProxyForConnectionWithRegisteredNamehost(__name:  * NSString, __hostName:  ?* NSString, )  ?* NSDistantObject {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSString, ) callconv(.C)  ?* NSDistantObject, @ptrCast(&objc_msgSend))(class.get(), sel_rootProxyForConnectionWithRegisteredName_host_.get(), __name, __hostName, );
 }}
var sel_rootProxyForConnectionWithRegisteredName_host_usingNameServer_ = CachedSelector.init("rootProxyForConnectionWithRegisteredName:host:usingNameServer:");
      pub fn rootProxyForConnectionWithRegisteredNamehostusingNameServer(__name:  * NSString, __hostName:  ?* NSString, __server:  * NSPortNameServer, )  ?* NSDistantObject {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSString,  * NSPortNameServer, ) callconv(.C)  ?* NSDistantObject, @ptrCast(&objc_msgSend))(class.get(), sel_rootProxyForConnectionWithRegisteredName_host_usingNameServer_.get(), __name, __hostName, __server, );
 }}
var sel_serviceConnectionWithName_rootObject_usingNameServer_ = CachedSelector.init("serviceConnectionWithName:rootObject:usingNameServer:");
      pub fn serviceConnectionWithNamerootObjectusingNameServer(__name:  * NSString, __root: id, __server:  * NSPortNameServer, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, id,  * NSPortNameServer, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_serviceConnectionWithName_rootObject_usingNameServer_.get(), __name, __root, __server, );
 }}
var sel_serviceConnectionWithName_rootObject_ = CachedSelector.init("serviceConnectionWithName:rootObject:");
      pub fn serviceConnectionWithNamerootObject(__name:  * NSString, __root: id, ) *Self {{
           return @as(*const fn(Class, SEL,  * NSString, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_serviceConnectionWithName_rootObject_.get(), __name, __root, );
 }}
var sel_invalidate = CachedSelector.init("invalidate");
      pub fn invalidate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invalidate.get(), );
 }}
var sel_addRequestMode_ = CachedSelector.init("addRequestMode:");
      pub fn addRequestMode(self: *Self, __rmode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addRequestMode_.get(), __rmode, );
 }}
var sel_removeRequestMode_ = CachedSelector.init("removeRequestMode:");
      pub fn removeRequestMode(self: *Self, __rmode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeRequestMode_.get(), __rmode, );
 }}
var sel_registerName_ = CachedSelector.init("registerName:");
      pub fn registerName(self: *Self, __name:  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerName_.get(), __name, );
 }}
var sel_registerName_withNameServer_ = CachedSelector.init("registerName:withNameServer:");
      pub fn registerNamewithNameServer(self: *Self, __name:  ?* NSString, __server:  * NSPortNameServer, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* NSString,  * NSPortNameServer, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerName_withNameServer_.get(), __name, __server, );
 }}
var sel_connectionWithReceivePort_sendPort_ = CachedSelector.init("connectionWithReceivePort:sendPort:");
      pub fn connectionWithReceivePortsendPort(__receivePort:  ?* NSPort, __sendPort:  ?* NSPort, ) *Self {{
           return @as(*const fn(Class, SEL,  ?* NSPort,  ?* NSPort, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_connectionWithReceivePort_sendPort_.get(), __receivePort, __sendPort, );
 }}
var sel_currentConversation = CachedSelector.init("currentConversation");
      pub fn currentConversation() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_currentConversation.get(), );
 }}
var sel_initWithReceivePort_sendPort_ = CachedSelector.init("initWithReceivePort:sendPort:");
      pub fn initWithReceivePortsendPort(self: *Self, __receivePort:  ?* NSPort, __sendPort:  ?* NSPort, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSPort,  ?* NSPort, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithReceivePort_sendPort_.get(), __receivePort, __sendPort, );
 }}
var sel_enableMultipleThreads = CachedSelector.init("enableMultipleThreads");
      pub fn enableMultipleThreads(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_enableMultipleThreads.get(), );
 }}
var sel_addRunLoop_ = CachedSelector.init("addRunLoop:");
      pub fn addRunLoop(self: *Self, __runloop:  * NSRunLoop, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_addRunLoop_.get(), __runloop, );
 }}
var sel_removeRunLoop_ = CachedSelector.init("removeRunLoop:");
      pub fn removeRunLoop(self: *Self, __runloop:  * NSRunLoop, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeRunLoop_.get(), __runloop, );
 }}
var sel_runInNewThread = CachedSelector.init("runInNewThread");
      pub fn runInNewThread(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_runInNewThread.get(), );
 }}
var sel_dispatchWithComponents_ = CachedSelector.init("dispatchWithComponents:");
      pub fn dispatchWithComponents(self: *Self, __components:  * NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  * NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dispatchWithComponents_.get(), __components, );
 }}
var sel_statistics = CachedSelector.init("statistics");
      pub fn statistics(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_statistics.get(), );
 }}
var sel_requestTimeout = CachedSelector.init("requestTimeout");
      pub fn requestTimeout(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requestTimeout.get(), );
 }}
var sel_setRequestTimeout_ = CachedSelector.init("setRequestTimeout:");
      pub fn setRequestTimeout(self: *Self, __requestTimeout: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRequestTimeout_.get(), __requestTimeout, );
 }}
var sel_replyTimeout = CachedSelector.init("replyTimeout");
      pub fn replyTimeout(self: *Self, ) f64 {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) f64, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_replyTimeout.get(), );
 }}
var sel_setReplyTimeout_ = CachedSelector.init("setReplyTimeout:");
      pub fn setReplyTimeout(self: *Self, __replyTimeout: f64, ) void {{
           return @as(*const fn(*Self, SEL, f64, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReplyTimeout_.get(), __replyTimeout, );
 }}
var sel_rootObject = CachedSelector.init("rootObject");
      pub fn rootObject(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rootObject.get(), );
 }}
var sel_setRootObject_ = CachedSelector.init("setRootObject:");
      pub fn setRootObject(self: *Self, __rootObject: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setRootObject_.get(), __rootObject, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSConnectionDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSConnectionDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSConnectionDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSConnectionDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_independentConversationQueueing = CachedSelector.init("independentConversationQueueing");
      pub fn independentConversationQueueing(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_independentConversationQueueing.get(), );
 }}
var sel_setIndependentConversationQueueing_ = CachedSelector.init("setIndependentConversationQueueing:");
      pub fn setIndependentConversationQueueing(self: *Self, __independentConversationQueueing: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setIndependentConversationQueueing_.get(), __independentConversationQueueing, );
 }}
var sel_isValid = CachedSelector.init("isValid");
      pub fn isValid(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isValid.get(), );
 }}
var sel_rootProxy = CachedSelector.init("rootProxy");
      pub fn rootProxy(self: *Self, )  * NSDistantObject {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDistantObject, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_rootProxy.get(), );
 }}
var sel_requestModes = CachedSelector.init("requestModes");
      pub fn requestModes(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requestModes.get(), );
 }}
var sel_sendPort = CachedSelector.init("sendPort");
      pub fn sendPort(self: *Self, )  * NSPort {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sendPort.get(), );
 }}
var sel_receivePort = CachedSelector.init("receivePort");
      pub fn receivePort(self: *Self, )  * NSPort {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_receivePort.get(), );
 }}
var sel_multipleThreadsEnabled = CachedSelector.init("multipleThreadsEnabled");
      pub fn multipleThreadsEnabled(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_multipleThreadsEnabled.get(), );
 }}
var sel_remoteObjects = CachedSelector.init("remoteObjects");
      pub fn remoteObjects(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remoteObjects.get(), );
 }}
var sel_localObjects = CachedSelector.init("localObjects");
      pub fn localObjects(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localObjects.get(), );
 }}
  };
}

pub const NSConnection = opaque {
  const Self = @This();
  pub usingnamespace NSConnectionInterfaceMixin(Self, "NSConnection");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSConnection");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSConnection");
};

pub fn NSURLSessionWebSocketMessageInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithData_ = CachedSelector.init("initWithData:");
      pub fn initWithData(self: *Self, __data:  * NSData, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSData, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithData_.get(), __data, );
 }}
var sel_initWithString_ = CachedSelector.init("initWithString:");
      pub fn initWithString(self: *Self, __string:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_.get(), __string, );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_type = CachedSelector.init("type");
      pub fn _type(self: *Self, ) NSURLSessionWebSocketMessageType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLSessionWebSocketMessageType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_type.get(), );
 }}
var sel_data = CachedSelector.init("data");
      pub fn data(self: *Self, )  ?* NSData {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_data.get(), );
 }}
var sel_string = CachedSelector.init("string");
      pub fn string(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_string.get(), );
 }}
  };
}

pub const NSURLSessionWebSocketMessage = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionWebSocketMessageInterfaceMixin(Self, "NSURLSessionWebSocketMessage");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionWebSocketMessage");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLSessionWebSocketMessage");
};

pub fn NSURLConnectionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithRequest_delegate_startImmediately_ = CachedSelector.init("initWithRequest:delegate:startImmediately:");
      pub fn initWithRequestdelegatestartImmediately(self: *Self, __request:  * NSURLRequest, __delegate: id, __startImmediately: c_int, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, id, c_int, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithRequest_delegate_startImmediately_.get(), __request, __delegate, __startImmediately, );
 }}
var sel_initWithRequest_delegate_ = CachedSelector.init("initWithRequest:delegate:");
      pub fn initWithRequestdelegate(self: *Self, __request:  * NSURLRequest, __delegate: id, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSURLRequest, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithRequest_delegate_.get(), __request, __delegate, );
 }}
var sel_connectionWithRequest_delegate_ = CachedSelector.init("connectionWithRequest:delegate:");
      pub fn connectionWithRequestdelegate(__request:  * NSURLRequest, __delegate: id, )  ?* NSURLConnection {{
           return @as(*const fn(Class, SEL,  * NSURLRequest, id, ) callconv(.C)  ?* NSURLConnection, @ptrCast(&objc_msgSend))(class.get(), sel_connectionWithRequest_delegate_.get(), __request, __delegate, );
 }}
var sel_start = CachedSelector.init("start");
      pub fn start(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_start.get(), );
 }}
var sel_cancel = CachedSelector.init("cancel");
      pub fn cancel(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_cancel.get(), );
 }}
var sel_scheduleInRunLoop_forMode_ = CachedSelector.init("scheduleInRunLoop:forMode:");
      pub fn scheduleInRunLoopforMode(self: *Self, __aRunLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduleInRunLoop_forMode_.get(), __aRunLoop, __mode, );
 }}
var sel_unscheduleFromRunLoop_forMode_ = CachedSelector.init("unscheduleFromRunLoop:forMode:");
      pub fn unscheduleFromRunLoopforMode(self: *Self, __aRunLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unscheduleFromRunLoop_forMode_.get(), __aRunLoop, __mode, );
 }}
var sel_setDelegateQueue_ = CachedSelector.init("setDelegateQueue:");
      pub fn setDelegateQueue(self: *Self, __queue:  ?* NSOperationQueue, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSOperationQueue, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegateQueue_.get(), __queue, );
 }}
var sel_canHandleRequest_ = CachedSelector.init("canHandleRequest:");
      pub fn canHandleRequest(__request:  * NSURLRequest, ) c_int {{
           return @as(*const fn(Class, SEL,  * NSURLRequest, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(class.get(), sel_canHandleRequest_.get(), __request, );
 }}
var sel_originalRequest = CachedSelector.init("originalRequest");
      pub fn originalRequest(self: *Self, )  * NSURLRequest {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURLRequest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_originalRequest.get(), );
 }}
var sel_currentRequest = CachedSelector.init("currentRequest");
      pub fn currentRequest(self: *Self, )  * NSURLRequest {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURLRequest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_currentRequest.get(), );
 }}
var sel_sendSynchronousRequest_returningResponse_error_ = CachedSelector.init("sendSynchronousRequest:returningResponse:error:");
      pub fn sendSynchronousRequestreturningResponseerror(__request:  * NSURLRequest, __response:  [*c]  ?* NSURLResponse, __an_error:  [*c]  ?* NSError, )  ?* NSData {{
           return @as(*const fn(Class, SEL,  * NSURLRequest,  [*c]  ?* NSURLResponse,  [*c]  ?* NSError, ) callconv(.C)  ?* NSData, @ptrCast(&objc_msgSend))(class.get(), sel_sendSynchronousRequest_returningResponse_error_.get(), __request, __response, __an_error, );
 }}
var sel_sendAsynchronousRequest_queue_completionHandler_ = CachedSelector.init("sendAsynchronousRequest:queue:completionHandler:");
      pub fn sendAsynchronousRequestqueuecompletionHandler(__request:  * NSURLRequest, __queue:  * NSOperationQueue, __handler: ?*u8, ) void {{
           return @as(*const fn(Class, SEL,  * NSURLRequest,  * NSOperationQueue, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_sendAsynchronousRequest_queue_completionHandler_.get(), __request, __queue, __handler, );
 }}
  };
}

pub const NSURLConnection = opaque {
  const Self = @This();
  pub usingnamespace NSURLConnectionInterfaceMixin(Self, "NSURLConnection");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLConnection");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLConnection");
};

pub fn MTLAttributeInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_attributeIndex = CachedSelector.init("attributeIndex");
      pub fn attributeIndex(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeIndex.get(), );
 }}
var sel_attributeType = CachedSelector.init("attributeType");
      pub fn attributeType(self: *Self, ) MTLDataType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLDataType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributeType.get(), );
 }}
var sel_isActive = CachedSelector.init("isActive");
      pub fn isActive(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isActive.get(), );
 }}
var sel_isPatchData = CachedSelector.init("isPatchData");
      pub fn isPatchData(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPatchData.get(), );
 }}
var sel_isPatchControlPointData = CachedSelector.init("isPatchControlPointData");
      pub fn isPatchControlPointData(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPatchControlPointData.get(), );
 }}
  };
}

pub const MTLAttribute = opaque {
  const Self = @This();
  pub usingnamespace MTLAttributeInterfaceMixin(Self, "MTLAttribute");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAttribute");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLAttribute");
};

pub fn MTLVertexBufferLayoutDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __index: c_ulong, )  * MTLVertexBufferLayoutDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLVertexBufferLayoutDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __index, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __bufferDesc:  ?* MTLVertexBufferLayoutDescriptor, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLVertexBufferLayoutDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __bufferDesc, __index, );
 }}
  };
}

pub const MTLVertexBufferLayoutDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLVertexBufferLayoutDescriptorArrayInterfaceMixin(Self, "MTLVertexBufferLayoutDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLVertexBufferLayoutDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLVertexBufferLayoutDescriptorArray");
};

pub fn NSPersonNameComponentsFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_localizedStringFromPersonNameComponents_style_options_ = CachedSelector.init("localizedStringFromPersonNameComponents:style:options:");
      pub fn localizedStringFromPersonNameComponentsstyleoptions(__components:  * NSPersonNameComponents, __nameFormatStyle: NSPersonNameComponentsFormatterStyle, __nameOptions: NSPersonNameComponentsFormatterOptions, )  * NSString {{
           return @as(*const fn(Class, SEL,  * NSPersonNameComponents, NSPersonNameComponentsFormatterStyle, NSPersonNameComponentsFormatterOptions, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(class.get(), sel_localizedStringFromPersonNameComponents_style_options_.get(), __components, __nameFormatStyle, __nameOptions, );
 }}
var sel_stringFromPersonNameComponents_ = CachedSelector.init("stringFromPersonNameComponents:");
      pub fn stringFromPersonNameComponents(self: *Self, __components:  * NSPersonNameComponents, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSPersonNameComponents, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromPersonNameComponents_.get(), __components, );
 }}
var sel_annotatedStringFromPersonNameComponents_ = CachedSelector.init("annotatedStringFromPersonNameComponents:");
      pub fn annotatedStringFromPersonNameComponents(self: *Self, __components:  * NSPersonNameComponents, )  * NSAttributedString {{
           return @as(*const fn(*Self, SEL,  * NSPersonNameComponents, ) callconv(.C)  * NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_annotatedStringFromPersonNameComponents_.get(), __components, );
 }}
var sel_personNameComponentsFromString_ = CachedSelector.init("personNameComponentsFromString:");
      pub fn personNameComponentsFromString(self: *Self, __string:  * NSString, )  ?* NSPersonNameComponents {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSPersonNameComponents, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_personNameComponentsFromString_.get(), __string, );
 }}
var sel_getObjectValue_forString_errorDescription_ = CachedSelector.init("getObjectValue:forString:errorDescription:");
      pub fn getObjectValueforStringerrorDescription(self: *Self, __obj:  ?* id, __string:  * NSString, __an_error:  [*c]  ?* NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  ?* id,  * NSString,  [*c]  ?* NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getObjectValue_forString_errorDescription_.get(), __obj, __string, __an_error, );
 }}
var sel_style = CachedSelector.init("style");
      pub fn style(self: *Self, ) NSPersonNameComponentsFormatterStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSPersonNameComponentsFormatterStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_style.get(), );
 }}
var sel_setStyle_ = CachedSelector.init("setStyle:");
      pub fn setStyle(self: *Self, __style: NSPersonNameComponentsFormatterStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSPersonNameComponentsFormatterStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setStyle_.get(), __style, );
 }}
var sel_isPhonetic = CachedSelector.init("isPhonetic");
      pub fn isPhonetic(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isPhonetic.get(), );
 }}
var sel_setPhonetic_ = CachedSelector.init("setPhonetic:");
      pub fn setPhonetic(self: *Self, __phonetic: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setPhonetic_.get(), __phonetic, );
 }}
var sel_locale = CachedSelector.init("locale");
      pub fn locale(self: *Self, )  * NSLocale {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locale.get(), );
 }}
var sel_setLocale_ = CachedSelector.init("setLocale:");
      pub fn setLocale(self: *Self, __locale:  ?* NSLocale, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocale_.get(), __locale, );
 }}
  };
}

pub const NSPersonNameComponentsFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSPersonNameComponentsFormatterInterfaceMixin(Self, "NSPersonNameComponentsFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSPersonNameComponentsFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSPersonNameComponentsFormatter");
};

pub fn NSUUIDInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_UUID = CachedSelector.init("UUID");
      pub fn UUID() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_UUID.get(), );
 }}
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithUUIDString_ = CachedSelector.init("initWithUUIDString:");
      pub fn initWithUUIDString(self: *Self, __string:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUUIDString_.get(), __string, );
 }}
var sel_initWithUUIDBytes_ = CachedSelector.init("initWithUUIDBytes:");
      pub fn initWithUUIDBytes(self: *Self, __bytes: [16]u8, ) *Self {{
           return @as(*const fn(*Self, SEL, [16]u8, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithUUIDBytes_.get(), __bytes, );
 }}
var sel_getUUIDBytes_ = CachedSelector.init("getUUIDBytes:");
      pub fn getUUIDBytes(self: *Self, __uuid: [16]u8, ) void {{
           return @as(*const fn(*Self, SEL, [16]u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getUUIDBytes_.get(), __uuid, );
 }}
var sel_compare_ = CachedSelector.init("compare:");
      pub fn compare(self: *Self, __otherUUID:  * NSUUID, ) NSComparisonResult {{
           return @as(*const fn(*Self, SEL,  * NSUUID, ) callconv(.C) NSComparisonResult, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_compare_.get(), __otherUUID, );
 }}
var sel_UUIDString = CachedSelector.init("UUIDString");
      pub fn UUIDString(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_UUIDString.get(), );
 }}
  };
}

pub const NSUUID = opaque {
  const Self = @This();
  pub usingnamespace NSUUIDInterfaceMixin(Self, "NSUUID");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSUUID");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUUID");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUUID");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSUUID");
};

pub fn NSCreateCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_createClassDescription = CachedSelector.init("createClassDescription");
      pub fn createClassDescription(self: *Self, )  * NSScriptClassDescription {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSScriptClassDescription, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_createClassDescription.get(), );
 }}
var sel_resolvedKeyDictionary = CachedSelector.init("resolvedKeyDictionary");
      pub fn resolvedKeyDictionary(self: *Self, )  * NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resolvedKeyDictionary.get(), );
 }}
  };
}

pub const NSCreateCommand = opaque {
  const Self = @This();
  pub usingnamespace NSCreateCommandInterfaceMixin(Self, "NSCreateCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCreateCommand");
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSCreateCommand");
};

pub fn NSSpecifierTestInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_initWithObjectSpecifier_comparisonOperator_testObject_ = CachedSelector.init("initWithObjectSpecifier:comparisonOperator:testObject:");
      pub fn initWithObjectSpecifiercomparisonOperatortestObject(self: *Self, __obj1:  ?* NSScriptObjectSpecifier, __compOp: NSTestComparisonOperation, __obj2: id, ) *Self {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, NSTestComparisonOperation, id, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithObjectSpecifier_comparisonOperator_testObject_.get(), __obj1, __compOp, __obj2, );
 }}
  };
}

pub const NSSpecifierTest = opaque {
  const Self = @This();
  pub usingnamespace NSSpecifierTestInterfaceMixin(Self, "NSSpecifierTest");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSpecifierTest");
  pub usingnamespace NSScriptWhoseTestInterfaceMixin(Self, "NSSpecifierTest");
};

pub fn NSUnitDispersionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_partsPerMillion = CachedSelector.init("partsPerMillion");
      pub fn partsPerMillion()  * NSUnitDispersion {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitDispersion, @ptrCast(&objc_msgSend))(class.get(), sel_partsPerMillion.get(), );
 }}
  };
}

pub const NSUnitDispersion = opaque {
  const Self = @This();
  pub usingnamespace NSUnitDispersionInterfaceMixin(Self, "NSUnitDispersion");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitDispersion");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitDispersion");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitDispersion");
};

pub fn MTLFunctionConstantValuesInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_setConstantValue_type_atIndex_ = CachedSelector.init("setConstantValue:type:atIndex:");
      pub fn setConstantValuetypeatIndex(self: *Self, __value:  [*c]  const void, __a_type: MTLDataType, __index: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, MTLDataType, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setConstantValue_type_atIndex_.get(), __value, __a_type, __index, );
 }}
var sel_setConstantValues_type_withRange_ = CachedSelector.init("setConstantValues:type:withRange:");
      pub fn setConstantValuestypewithRange(self: *Self, __values:  [*c]  const void, __a_type: MTLDataType, __range: _NSRange, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, MTLDataType, _NSRange, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setConstantValues_type_withRange_.get(), __values, __a_type, __range, );
 }}
var sel_setConstantValue_type_withName_ = CachedSelector.init("setConstantValue:type:withName:");
      pub fn setConstantValuetypewithName(self: *Self, __value:  [*c]  const void, __a_type: MTLDataType, __name:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  [*c]  const void, MTLDataType,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setConstantValue_type_withName_.get(), __value, __a_type, __name, );
 }}
var sel_reset = CachedSelector.init("reset");
      pub fn reset(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reset.get(), );
 }}
  };
}

pub const MTLFunctionConstantValues = opaque {
  const Self = @This();
  pub usingnamespace MTLFunctionConstantValuesInterfaceMixin(Self, "MTLFunctionConstantValues");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLFunctionConstantValues");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLFunctionConstantValues");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLFunctionConstantValues");
};

pub fn NSUnitAngleInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_degrees = CachedSelector.init("degrees");
      pub fn degrees()  * NSUnitAngle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitAngle, @ptrCast(&objc_msgSend))(class.get(), sel_degrees.get(), );
 }}
var sel_arcMinutes = CachedSelector.init("arcMinutes");
      pub fn arcMinutes()  * NSUnitAngle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitAngle, @ptrCast(&objc_msgSend))(class.get(), sel_arcMinutes.get(), );
 }}
var sel_arcSeconds = CachedSelector.init("arcSeconds");
      pub fn arcSeconds()  * NSUnitAngle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitAngle, @ptrCast(&objc_msgSend))(class.get(), sel_arcSeconds.get(), );
 }}
var sel_radians = CachedSelector.init("radians");
      pub fn radians()  * NSUnitAngle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitAngle, @ptrCast(&objc_msgSend))(class.get(), sel_radians.get(), );
 }}
var sel_gradians = CachedSelector.init("gradians");
      pub fn gradians()  * NSUnitAngle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitAngle, @ptrCast(&objc_msgSend))(class.get(), sel_gradians.get(), );
 }}
var sel_revolutions = CachedSelector.init("revolutions");
      pub fn revolutions()  * NSUnitAngle {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitAngle, @ptrCast(&objc_msgSend))(class.get(), sel_revolutions.get(), );
 }}
  };
}

pub const NSUnitAngle = opaque {
  const Self = @This();
  pub usingnamespace NSUnitAngleInterfaceMixin(Self, "NSUnitAngle");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitAngle");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitAngle");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitAngle");
};

pub fn MTLIndirectInstanceAccelerationStructureDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_descriptor = CachedSelector.init("descriptor");
      pub fn descriptor() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_descriptor.get(), );
 }}
var sel_instanceDescriptorBuffer = CachedSelector.init("instanceDescriptorBuffer");
      pub fn instanceDescriptorBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceDescriptorBuffer.get(), );
 }}
var sel_setInstanceDescriptorBuffer_ = CachedSelector.init("setInstanceDescriptorBuffer:");
      pub fn setInstanceDescriptorBuffer(self: *Self, __instanceDescriptorBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceDescriptorBuffer_.get(), __instanceDescriptorBuffer, );
 }}
var sel_instanceDescriptorBufferOffset = CachedSelector.init("instanceDescriptorBufferOffset");
      pub fn instanceDescriptorBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceDescriptorBufferOffset.get(), );
 }}
var sel_setInstanceDescriptorBufferOffset_ = CachedSelector.init("setInstanceDescriptorBufferOffset:");
      pub fn setInstanceDescriptorBufferOffset(self: *Self, __instanceDescriptorBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceDescriptorBufferOffset_.get(), __instanceDescriptorBufferOffset, );
 }}
var sel_instanceDescriptorStride = CachedSelector.init("instanceDescriptorStride");
      pub fn instanceDescriptorStride(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceDescriptorStride.get(), );
 }}
var sel_setInstanceDescriptorStride_ = CachedSelector.init("setInstanceDescriptorStride:");
      pub fn setInstanceDescriptorStride(self: *Self, __instanceDescriptorStride: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceDescriptorStride_.get(), __instanceDescriptorStride, );
 }}
var sel_maxInstanceCount = CachedSelector.init("maxInstanceCount");
      pub fn maxInstanceCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxInstanceCount.get(), );
 }}
var sel_setMaxInstanceCount_ = CachedSelector.init("setMaxInstanceCount:");
      pub fn setMaxInstanceCount(self: *Self, __maxInstanceCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxInstanceCount_.get(), __maxInstanceCount, );
 }}
var sel_instanceCountBuffer = CachedSelector.init("instanceCountBuffer");
      pub fn instanceCountBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceCountBuffer.get(), );
 }}
var sel_setInstanceCountBuffer_ = CachedSelector.init("setInstanceCountBuffer:");
      pub fn setInstanceCountBuffer(self: *Self, __instanceCountBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceCountBuffer_.get(), __instanceCountBuffer, );
 }}
var sel_instanceCountBufferOffset = CachedSelector.init("instanceCountBufferOffset");
      pub fn instanceCountBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceCountBufferOffset.get(), );
 }}
var sel_setInstanceCountBufferOffset_ = CachedSelector.init("setInstanceCountBufferOffset:");
      pub fn setInstanceCountBufferOffset(self: *Self, __instanceCountBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceCountBufferOffset_.get(), __instanceCountBufferOffset, );
 }}
var sel_instanceDescriptorType = CachedSelector.init("instanceDescriptorType");
      pub fn instanceDescriptorType(self: *Self, ) MTLAccelerationStructureInstanceDescriptorType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) MTLAccelerationStructureInstanceDescriptorType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_instanceDescriptorType.get(), );
 }}
var sel_setInstanceDescriptorType_ = CachedSelector.init("setInstanceDescriptorType:");
      pub fn setInstanceDescriptorType(self: *Self, __instanceDescriptorType: MTLAccelerationStructureInstanceDescriptorType, ) void {{
           return @as(*const fn(*Self, SEL, MTLAccelerationStructureInstanceDescriptorType, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setInstanceDescriptorType_.get(), __instanceDescriptorType, );
 }}
var sel_motionTransformBuffer = CachedSelector.init("motionTransformBuffer");
      pub fn motionTransformBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionTransformBuffer.get(), );
 }}
var sel_setMotionTransformBuffer_ = CachedSelector.init("setMotionTransformBuffer:");
      pub fn setMotionTransformBuffer(self: *Self, __motionTransformBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionTransformBuffer_.get(), __motionTransformBuffer, );
 }}
var sel_motionTransformBufferOffset = CachedSelector.init("motionTransformBufferOffset");
      pub fn motionTransformBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionTransformBufferOffset.get(), );
 }}
var sel_setMotionTransformBufferOffset_ = CachedSelector.init("setMotionTransformBufferOffset:");
      pub fn setMotionTransformBufferOffset(self: *Self, __motionTransformBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionTransformBufferOffset_.get(), __motionTransformBufferOffset, );
 }}
var sel_maxMotionTransformCount = CachedSelector.init("maxMotionTransformCount");
      pub fn maxMotionTransformCount(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_maxMotionTransformCount.get(), );
 }}
var sel_setMaxMotionTransformCount_ = CachedSelector.init("setMaxMotionTransformCount:");
      pub fn setMaxMotionTransformCount(self: *Self, __maxMotionTransformCount: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMaxMotionTransformCount_.get(), __maxMotionTransformCount, );
 }}
var sel_motionTransformCountBuffer = CachedSelector.init("motionTransformCountBuffer");
      pub fn motionTransformCountBuffer(self: *Self, )  ?* MTLBuffer {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* MTLBuffer, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionTransformCountBuffer.get(), );
 }}
var sel_setMotionTransformCountBuffer_ = CachedSelector.init("setMotionTransformCountBuffer:");
      pub fn setMotionTransformCountBuffer(self: *Self, __motionTransformCountBuffer:  ?* MTLBuffer, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLBuffer, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionTransformCountBuffer_.get(), __motionTransformCountBuffer, );
 }}
var sel_motionTransformCountBufferOffset = CachedSelector.init("motionTransformCountBufferOffset");
      pub fn motionTransformCountBufferOffset(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_motionTransformCountBufferOffset.get(), );
 }}
var sel_setMotionTransformCountBufferOffset_ = CachedSelector.init("setMotionTransformCountBufferOffset:");
      pub fn setMotionTransformCountBufferOffset(self: *Self, __motionTransformCountBufferOffset: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMotionTransformCountBufferOffset_.get(), __motionTransformCountBufferOffset, );
 }}
  };
}

pub const MTLIndirectInstanceAccelerationStructureDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLIndirectInstanceAccelerationStructureDescriptorInterfaceMixin(Self, "MTLIndirectInstanceAccelerationStructureDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLIndirectInstanceAccelerationStructureDescriptor");
  pub usingnamespace MTLAccelerationStructureDescriptorInterfaceMixin(Self, "MTLIndirectInstanceAccelerationStructureDescriptor");
};

pub fn NSCacheInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectForKey_ = CachedSelector.init("objectForKey:");
      pub fn objectForKey(self: *Self, __key: id, ) id {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectForKey_.get(), __key, );
 }}
var sel_setObject_forKey_ = CachedSelector.init("setObject:forKey:");
      pub fn setObjectforKey(self: *Self, __obj: id, __key: id, ) void {{
           return @as(*const fn(*Self, SEL, id, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_forKey_.get(), __obj, __key, );
 }}
var sel_setObject_forKey_cost_ = CachedSelector.init("setObject:forKey:cost:");
      pub fn setObjectforKeycost(self: *Self, __obj: id, __key: id, __g: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, id, id, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_forKey_cost_.get(), __obj, __key, __g, );
 }}
var sel_removeObjectForKey_ = CachedSelector.init("removeObjectForKey:");
      pub fn removeObjectForKey(self: *Self, __key: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeObjectForKey_.get(), __key, );
 }}
var sel_removeAllObjects = CachedSelector.init("removeAllObjects");
      pub fn removeAllObjects(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeAllObjects.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_setName_ = CachedSelector.init("setName:");
      pub fn setName(self: *Self, __name:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setName_.get(), __name, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSCacheDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSCacheDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSCacheDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSCacheDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_totalCostLimit = CachedSelector.init("totalCostLimit");
      pub fn totalCostLimit(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_totalCostLimit.get(), );
 }}
var sel_setTotalCostLimit_ = CachedSelector.init("setTotalCostLimit:");
      pub fn setTotalCostLimit(self: *Self, __totalCostLimit: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTotalCostLimit_.get(), __totalCostLimit, );
 }}
var sel_countLimit = CachedSelector.init("countLimit");
      pub fn countLimit(self: *Self, ) c_ulong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ulong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countLimit.get(), );
 }}
var sel_setCountLimit_ = CachedSelector.init("setCountLimit:");
      pub fn setCountLimit(self: *Self, __countLimit: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCountLimit_.get(), __countLimit, );
 }}
var sel_evictsObjectsWithDiscardedContent = CachedSelector.init("evictsObjectsWithDiscardedContent");
      pub fn evictsObjectsWithDiscardedContent(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_evictsObjectsWithDiscardedContent.get(), );
 }}
var sel_setEvictsObjectsWithDiscardedContent_ = CachedSelector.init("setEvictsObjectsWithDiscardedContent:");
      pub fn setEvictsObjectsWithDiscardedContent(self: *Self, __evictsObjectsWithDiscardedContent: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEvictsObjectsWithDiscardedContent_.get(), __evictsObjectsWithDiscardedContent, );
 }}
  };
}

pub const NSCache = opaque {
  const Self = @This();
  pub usingnamespace NSCacheInterfaceMixin(Self, "NSCache");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCache");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSCache");
};

pub fn NSUnitDurationInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_hours = CachedSelector.init("hours");
      pub fn hours()  * NSUnitDuration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitDuration, @ptrCast(&objc_msgSend))(class.get(), sel_hours.get(), );
 }}
var sel_minutes = CachedSelector.init("minutes");
      pub fn minutes()  * NSUnitDuration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitDuration, @ptrCast(&objc_msgSend))(class.get(), sel_minutes.get(), );
 }}
var sel_seconds = CachedSelector.init("seconds");
      pub fn seconds()  * NSUnitDuration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitDuration, @ptrCast(&objc_msgSend))(class.get(), sel_seconds.get(), );
 }}
var sel_milliseconds = CachedSelector.init("milliseconds");
      pub fn milliseconds()  * NSUnitDuration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitDuration, @ptrCast(&objc_msgSend))(class.get(), sel_milliseconds.get(), );
 }}
var sel_microseconds = CachedSelector.init("microseconds");
      pub fn microseconds()  * NSUnitDuration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitDuration, @ptrCast(&objc_msgSend))(class.get(), sel_microseconds.get(), );
 }}
var sel_nanoseconds = CachedSelector.init("nanoseconds");
      pub fn nanoseconds()  * NSUnitDuration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitDuration, @ptrCast(&objc_msgSend))(class.get(), sel_nanoseconds.get(), );
 }}
var sel_picoseconds = CachedSelector.init("picoseconds");
      pub fn picoseconds()  * NSUnitDuration {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitDuration, @ptrCast(&objc_msgSend))(class.get(), sel_picoseconds.get(), );
 }}
  };
}

pub const NSUnitDuration = opaque {
  const Self = @This();
  pub usingnamespace NSUnitDurationInterfaceMixin(Self, "NSUnitDuration");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitDuration");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitDuration");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitDuration");
};

pub fn NSExceptionInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_exceptionWithName_reason_userInfo_ = CachedSelector.init("exceptionWithName:reason:userInfo:");
      pub fn exceptionWithNamereasonuserInfo(__name:  * NSString, __reason:  ?* NSString, __userInfo:  ?* NSDictionary, )  * NSException {{
           return @as(*const fn(Class, SEL,  * NSString,  ?* NSString,  ?* NSDictionary, ) callconv(.C)  * NSException, @ptrCast(&objc_msgSend))(class.get(), sel_exceptionWithName_reason_userInfo_.get(), __name, __reason, __userInfo, );
 }}
var sel_initWithName_reason_userInfo_ = CachedSelector.init("initWithName:reason:userInfo:");
      pub fn initWithNamereasonuserInfo(self: *Self, __aName:  * NSString, __aReason:  ?* NSString, __aUserInfo:  ?* NSDictionary, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString,  ?* NSDictionary, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithName_reason_userInfo_.get(), __aName, __aReason, __aUserInfo, );
 }}
var sel_raise = CachedSelector.init("raise");
      pub fn raise(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_raise.get(), );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
var sel_reason = CachedSelector.init("reason");
      pub fn reason(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_reason.get(), );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
var sel_callStackReturnAddresses = CachedSelector.init("callStackReturnAddresses");
      pub fn callStackReturnAddresses(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_callStackReturnAddresses.get(), );
 }}
var sel_callStackSymbols = CachedSelector.init("callStackSymbols");
      pub fn callStackSymbols(self: *Self, )  * NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_callStackSymbols.get(), );
 }}
var sel_raise_format_ = CachedSelector.init("raise:format:");
      pub fn raiseformat(__name:  * NSString, __format:  * NSString, ) void {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_raise_format_.get(), __name, __format, );
 }}
var sel_raise_format_arguments_ = CachedSelector.init("raise:format:arguments:");
      pub fn raiseformatarguments(__name:  * NSString, __format:  * NSString, __argList:  [*c] u8, ) void {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString,  [*c] u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_raise_format_arguments_.get(), __name, __format, __argList, );
 }}
  };
}

pub const NSException = opaque {
  const Self = @This();
  pub usingnamespace NSExceptionInterfaceMixin(Self, "NSException");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSException");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSException");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSException");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSException");
};

pub fn NSFileProviderServiceInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_getFileProviderConnectionWithCompletionHandler_ = CachedSelector.init("getFileProviderConnectionWithCompletionHandler:");
      pub fn getFileProviderConnectionWithCompletionHandler(self: *Self, __completionHandler: ?*u8, ) void {{
           return @as(*const fn(*Self, SEL, ?*u8, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_getFileProviderConnectionWithCompletionHandler_.get(), __completionHandler, );
 }}
var sel_name = CachedSelector.init("name");
      pub fn name(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_name.get(), );
 }}
  };
}

pub const NSFileProviderService = opaque {
  const Self = @This();
  pub usingnamespace NSFileProviderServiceInterfaceMixin(Self, "NSFileProviderService");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSFileProviderService");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSFileProviderService");
};

pub fn NSURLSessionTaskTransactionMetricsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_init = CachedSelector.init("init");
      pub fn init(self: *Self, ) *Self {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_init.get(), );
 }}
var sel_new = CachedSelector.init("new");
      pub fn new() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_new.get(), );
 }}
var sel_request = CachedSelector.init("request");
      pub fn request(self: *Self, )  * NSURLRequest {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSURLRequest, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_request.get(), );
 }}
var sel_response = CachedSelector.init("response");
      pub fn response(self: *Self, )  ?* NSURLResponse {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSURLResponse, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_response.get(), );
 }}
var sel_fetchStartDate = CachedSelector.init("fetchStartDate");
      pub fn fetchStartDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fetchStartDate.get(), );
 }}
var sel_domainLookupStartDate = CachedSelector.init("domainLookupStartDate");
      pub fn domainLookupStartDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_domainLookupStartDate.get(), );
 }}
var sel_domainLookupEndDate = CachedSelector.init("domainLookupEndDate");
      pub fn domainLookupEndDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_domainLookupEndDate.get(), );
 }}
var sel_connectStartDate = CachedSelector.init("connectStartDate");
      pub fn connectStartDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connectStartDate.get(), );
 }}
var sel_secureConnectionStartDate = CachedSelector.init("secureConnectionStartDate");
      pub fn secureConnectionStartDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_secureConnectionStartDate.get(), );
 }}
var sel_secureConnectionEndDate = CachedSelector.init("secureConnectionEndDate");
      pub fn secureConnectionEndDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_secureConnectionEndDate.get(), );
 }}
var sel_connectEndDate = CachedSelector.init("connectEndDate");
      pub fn connectEndDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_connectEndDate.get(), );
 }}
var sel_requestStartDate = CachedSelector.init("requestStartDate");
      pub fn requestStartDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requestStartDate.get(), );
 }}
var sel_requestEndDate = CachedSelector.init("requestEndDate");
      pub fn requestEndDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_requestEndDate.get(), );
 }}
var sel_responseStartDate = CachedSelector.init("responseStartDate");
      pub fn responseStartDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_responseStartDate.get(), );
 }}
var sel_responseEndDate = CachedSelector.init("responseEndDate");
      pub fn responseEndDate(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_responseEndDate.get(), );
 }}
var sel_networkProtocolName = CachedSelector.init("networkProtocolName");
      pub fn networkProtocolName(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_networkProtocolName.get(), );
 }}
var sel_isProxyConnection = CachedSelector.init("isProxyConnection");
      pub fn isProxyConnection(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isProxyConnection.get(), );
 }}
var sel_isReusedConnection = CachedSelector.init("isReusedConnection");
      pub fn isReusedConnection(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isReusedConnection.get(), );
 }}
var sel_resourceFetchType = CachedSelector.init("resourceFetchType");
      pub fn resourceFetchType(self: *Self, ) NSURLSessionTaskMetricsResourceFetchType {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLSessionTaskMetricsResourceFetchType, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resourceFetchType.get(), );
 }}
var sel_countOfRequestHeaderBytesSent = CachedSelector.init("countOfRequestHeaderBytesSent");
      pub fn countOfRequestHeaderBytesSent(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfRequestHeaderBytesSent.get(), );
 }}
var sel_countOfRequestBodyBytesSent = CachedSelector.init("countOfRequestBodyBytesSent");
      pub fn countOfRequestBodyBytesSent(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfRequestBodyBytesSent.get(), );
 }}
var sel_countOfRequestBodyBytesBeforeEncoding = CachedSelector.init("countOfRequestBodyBytesBeforeEncoding");
      pub fn countOfRequestBodyBytesBeforeEncoding(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfRequestBodyBytesBeforeEncoding.get(), );
 }}
var sel_countOfResponseHeaderBytesReceived = CachedSelector.init("countOfResponseHeaderBytesReceived");
      pub fn countOfResponseHeaderBytesReceived(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfResponseHeaderBytesReceived.get(), );
 }}
var sel_countOfResponseBodyBytesReceived = CachedSelector.init("countOfResponseBodyBytesReceived");
      pub fn countOfResponseBodyBytesReceived(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfResponseBodyBytesReceived.get(), );
 }}
var sel_countOfResponseBodyBytesAfterDecoding = CachedSelector.init("countOfResponseBodyBytesAfterDecoding");
      pub fn countOfResponseBodyBytesAfterDecoding(self: *Self, ) c_longlong {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_longlong, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_countOfResponseBodyBytesAfterDecoding.get(), );
 }}
var sel_localAddress = CachedSelector.init("localAddress");
      pub fn localAddress(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localAddress.get(), );
 }}
var sel_localPort = CachedSelector.init("localPort");
      pub fn localPort(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_localPort.get(), );
 }}
var sel_remoteAddress = CachedSelector.init("remoteAddress");
      pub fn remoteAddress(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remoteAddress.get(), );
 }}
var sel_remotePort = CachedSelector.init("remotePort");
      pub fn remotePort(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_remotePort.get(), );
 }}
var sel_negotiatedTLSProtocolVersion = CachedSelector.init("negotiatedTLSProtocolVersion");
      pub fn negotiatedTLSProtocolVersion(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_negotiatedTLSProtocolVersion.get(), );
 }}
var sel_negotiatedTLSCipherSuite = CachedSelector.init("negotiatedTLSCipherSuite");
      pub fn negotiatedTLSCipherSuite(self: *Self, )  ?* NSNumber {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSNumber, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_negotiatedTLSCipherSuite.get(), );
 }}
var sel_isCellular = CachedSelector.init("isCellular");
      pub fn isCellular(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isCellular.get(), );
 }}
var sel_isExpensive = CachedSelector.init("isExpensive");
      pub fn isExpensive(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isExpensive.get(), );
 }}
var sel_isConstrained = CachedSelector.init("isConstrained");
      pub fn isConstrained(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isConstrained.get(), );
 }}
var sel_isMultipath = CachedSelector.init("isMultipath");
      pub fn isMultipath(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isMultipath.get(), );
 }}
var sel_domainResolutionProtocol = CachedSelector.init("domainResolutionProtocol");
      pub fn domainResolutionProtocol(self: *Self, ) NSURLSessionTaskMetricsDomainResolutionProtocol {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSURLSessionTaskMetricsDomainResolutionProtocol, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_domainResolutionProtocol.get(), );
 }}
  };
}

pub const NSURLSessionTaskTransactionMetrics = opaque {
  const Self = @This();
  pub usingnamespace NSURLSessionTaskTransactionMetricsInterfaceMixin(Self, "NSURLSessionTaskTransactionMetrics");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSURLSessionTaskTransactionMetrics");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSURLSessionTaskTransactionMetrics");
};

pub fn NSXPCListenerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_serviceListener = CachedSelector.init("serviceListener");
      pub fn serviceListener()  * NSXPCListener {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSXPCListener, @ptrCast(&objc_msgSend))(class.get(), sel_serviceListener.get(), );
 }}
var sel_anonymousListener = CachedSelector.init("anonymousListener");
      pub fn anonymousListener()  * NSXPCListener {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSXPCListener, @ptrCast(&objc_msgSend))(class.get(), sel_anonymousListener.get(), );
 }}
var sel_initWithMachServiceName_ = CachedSelector.init("initWithMachServiceName:");
      pub fn initWithMachServiceName(self: *Self, __name:  * NSString, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithMachServiceName_.get(), __name, );
 }}
var sel_resume = CachedSelector.init("resume");
      pub fn _resume(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resume.get(), );
 }}
var sel_suspend = CachedSelector.init("suspend");
      pub fn _suspend(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suspend.get(), );
 }}
var sel_activate = CachedSelector.init("activate");
      pub fn activate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_activate.get(), );
 }}
var sel_invalidate = CachedSelector.init("invalidate");
      pub fn invalidate(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_invalidate.get(), );
 }}
var sel_setConnectionCodeSigningRequirement_ = CachedSelector.init("setConnectionCodeSigningRequirement:");
      pub fn setConnectionCodeSigningRequirement(self: *Self, __requirement:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setConnectionCodeSigningRequirement_.get(), __requirement, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSXPCListenerDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSXPCListenerDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSXPCListenerDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSXPCListenerDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_endpoint = CachedSelector.init("endpoint");
      pub fn endpoint(self: *Self, )  * NSXPCListenerEndpoint {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSXPCListenerEndpoint, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_endpoint.get(), );
 }}
  };
}

pub const NSXPCListener = opaque {
  const Self = @This();
  pub usingnamespace NSXPCListenerInterfaceMixin(Self, "NSXPCListener");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSXPCListener");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSXPCListener");
};

pub fn NSUnitElectricPotentialDifferenceInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_megavolts = CachedSelector.init("megavolts");
      pub fn megavolts()  * NSUnitElectricPotentialDifference {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricPotentialDifference, @ptrCast(&objc_msgSend))(class.get(), sel_megavolts.get(), );
 }}
var sel_kilovolts = CachedSelector.init("kilovolts");
      pub fn kilovolts()  * NSUnitElectricPotentialDifference {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricPotentialDifference, @ptrCast(&objc_msgSend))(class.get(), sel_kilovolts.get(), );
 }}
var sel_volts = CachedSelector.init("volts");
      pub fn volts()  * NSUnitElectricPotentialDifference {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricPotentialDifference, @ptrCast(&objc_msgSend))(class.get(), sel_volts.get(), );
 }}
var sel_millivolts = CachedSelector.init("millivolts");
      pub fn millivolts()  * NSUnitElectricPotentialDifference {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricPotentialDifference, @ptrCast(&objc_msgSend))(class.get(), sel_millivolts.get(), );
 }}
var sel_microvolts = CachedSelector.init("microvolts");
      pub fn microvolts()  * NSUnitElectricPotentialDifference {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitElectricPotentialDifference, @ptrCast(&objc_msgSend))(class.get(), sel_microvolts.get(), );
 }}
  };
}

pub const NSUnitElectricPotentialDifference = opaque {
  const Self = @This();
  pub usingnamespace NSUnitElectricPotentialDifferenceInterfaceMixin(Self, "NSUnitElectricPotentialDifference");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitElectricPotentialDifference");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitElectricPotentialDifference");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitElectricPotentialDifference");
};

pub fn NSMeasurementFormatterInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_stringFromMeasurement_ = CachedSelector.init("stringFromMeasurement:");
      pub fn stringFromMeasurement(self: *Self, __measurement:  * NSMeasurement, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSMeasurement, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromMeasurement_.get(), __measurement, );
 }}
var sel_stringFromUnit_ = CachedSelector.init("stringFromUnit:");
      pub fn stringFromUnit(self: *Self, __unit:  * NSUnit, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSUnit, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_stringFromUnit_.get(), __unit, );
 }}
var sel_unitOptions = CachedSelector.init("unitOptions");
      pub fn unitOptions(self: *Self, ) NSMeasurementFormatterUnitOptions {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSMeasurementFormatterUnitOptions, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitOptions.get(), );
 }}
var sel_setUnitOptions_ = CachedSelector.init("setUnitOptions:");
      pub fn setUnitOptions(self: *Self, __unitOptions: NSMeasurementFormatterUnitOptions, ) void {{
           return @as(*const fn(*Self, SEL, NSMeasurementFormatterUnitOptions, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUnitOptions_.get(), __unitOptions, );
 }}
var sel_unitStyle = CachedSelector.init("unitStyle");
      pub fn unitStyle(self: *Self, ) NSFormattingUnitStyle {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSFormattingUnitStyle, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_unitStyle.get(), );
 }}
var sel_setUnitStyle_ = CachedSelector.init("setUnitStyle:");
      pub fn setUnitStyle(self: *Self, __unitStyle: NSFormattingUnitStyle, ) void {{
           return @as(*const fn(*Self, SEL, NSFormattingUnitStyle, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUnitStyle_.get(), __unitStyle, );
 }}
var sel_locale = CachedSelector.init("locale");
      pub fn locale(self: *Self, )  * NSLocale {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSLocale, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_locale.get(), );
 }}
var sel_setLocale_ = CachedSelector.init("setLocale:");
      pub fn setLocale(self: *Self, __locale:  ?* NSLocale, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSLocale, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLocale_.get(), __locale, );
 }}
var sel_numberFormatter = CachedSelector.init("numberFormatter");
      pub fn numberFormatter(self: *Self, )  * NSNumberFormatter {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSNumberFormatter, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_numberFormatter.get(), );
 }}
var sel_setNumberFormatter_ = CachedSelector.init("setNumberFormatter:");
      pub fn setNumberFormatter(self: *Self, __numberFormatter:  ?* NSNumberFormatter, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSNumberFormatter, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNumberFormatter_.get(), __numberFormatter, );
 }}
  };
}

pub const NSMeasurementFormatter = opaque {
  const Self = @This();
  pub usingnamespace NSMeasurementFormatterInterfaceMixin(Self, "NSMeasurementFormatter");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSMeasurementFormatter");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSMeasurementFormatter");
  pub usingnamespace NSFormatterInterfaceMixin(Self, "NSMeasurementFormatter");
};

pub fn NSCalendarDateInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_calendarDate = CachedSelector.init("calendarDate");
      pub fn calendarDate() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_calendarDate.get(), );
 }}
var sel_dateWithString_calendarFormat_locale_ = CachedSelector.init("dateWithString:calendarFormat:locale:");
      pub fn dateWithStringcalendarFormatlocale(__description:  * NSString, __format:  * NSString, __locale: id, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithString_calendarFormat_locale_.get(), __description, __format, __locale, );
 }}
var sel_dateWithString_calendarFormat_ = CachedSelector.init("dateWithString:calendarFormat:");
      pub fn dateWithStringcalendarFormat(__description:  * NSString, __format:  * NSString, ) id {{
           return @as(*const fn(Class, SEL,  * NSString,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithString_calendarFormat_.get(), __description, __format, );
 }}
var sel_dateWithYear_month_day_hour_minute_second_timeZone_ = CachedSelector.init("dateWithYear:month:day:hour:minute:second:timeZone:");
      pub fn dateWithYearmonthdayhourminutesecondtimeZone(__year: c_long, __month: c_ulong, __day: c_ulong, __hour: c_ulong, __minute: c_ulong, __second: c_ulong, __aTimeZone:  ?* NSTimeZone, ) id {{
           return @as(*const fn(Class, SEL, c_long, c_ulong, c_ulong, c_ulong, c_ulong, c_ulong,  ?* NSTimeZone, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_dateWithYear_month_day_hour_minute_second_timeZone_.get(), __year, __month, __day, __hour, __minute, __second, __aTimeZone, );
 }}
var sel_dateByAddingYears_months_days_hours_minutes_seconds_ = CachedSelector.init("dateByAddingYears:months:days:hours:minutes:seconds:");
      pub fn dateByAddingYearsmonthsdayshoursminutesseconds(self: *Self, __year: c_long, __month: c_long, __day: c_long, __hour: c_long, __minute: c_long, __second: c_long, )  * NSCalendarDate {{
           return @as(*const fn(*Self, SEL, c_long, c_long, c_long, c_long, c_long, c_long, ) callconv(.C)  * NSCalendarDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dateByAddingYears_months_days_hours_minutes_seconds_.get(), __year, __month, __day, __hour, __minute, __second, );
 }}
var sel_dayOfCommonEra = CachedSelector.init("dayOfCommonEra");
      pub fn dayOfCommonEra(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dayOfCommonEra.get(), );
 }}
var sel_dayOfMonth = CachedSelector.init("dayOfMonth");
      pub fn dayOfMonth(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dayOfMonth.get(), );
 }}
var sel_dayOfWeek = CachedSelector.init("dayOfWeek");
      pub fn dayOfWeek(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dayOfWeek.get(), );
 }}
var sel_dayOfYear = CachedSelector.init("dayOfYear");
      pub fn dayOfYear(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_dayOfYear.get(), );
 }}
var sel_hourOfDay = CachedSelector.init("hourOfDay");
      pub fn hourOfDay(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hourOfDay.get(), );
 }}
var sel_minuteOfHour = CachedSelector.init("minuteOfHour");
      pub fn minuteOfHour(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minuteOfHour.get(), );
 }}
var sel_monthOfYear = CachedSelector.init("monthOfYear");
      pub fn monthOfYear(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_monthOfYear.get(), );
 }}
var sel_secondOfMinute = CachedSelector.init("secondOfMinute");
      pub fn secondOfMinute(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_secondOfMinute.get(), );
 }}
var sel_yearOfCommonEra = CachedSelector.init("yearOfCommonEra");
      pub fn yearOfCommonEra(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_yearOfCommonEra.get(), );
 }}
var sel_calendarFormat = CachedSelector.init("calendarFormat");
      pub fn calendarFormat(self: *Self, )  * NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_calendarFormat.get(), );
 }}
var sel_descriptionWithCalendarFormat_locale_ = CachedSelector.init("descriptionWithCalendarFormat:locale:");
      pub fn descriptionWithCalendarFormatlocale(self: *Self, __format:  * NSString, __locale: id, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, id, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithCalendarFormat_locale_.get(), __format, __locale, );
 }}
var sel_descriptionWithCalendarFormat_ = CachedSelector.init("descriptionWithCalendarFormat:");
      pub fn descriptionWithCalendarFormat(self: *Self, __format:  * NSString, )  * NSString {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithCalendarFormat_.get(), __format, );
 }}
var sel_descriptionWithLocale_ = CachedSelector.init("descriptionWithLocale:");
      pub fn descriptionWithLocale(self: *Self, __locale: id, )  * NSString {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C)  * NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_descriptionWithLocale_.get(), __locale, );
 }}
var sel_timeZone = CachedSelector.init("timeZone");
      pub fn timeZone(self: *Self, )  * NSTimeZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSTimeZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeZone.get(), );
 }}
var sel_initWithString_calendarFormat_locale_ = CachedSelector.init("initWithString:calendarFormat:locale:");
      pub fn initWithStringcalendarFormatlocale(self: *Self, __description:  * NSString, __format:  * NSString, __locale: id, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, id, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_calendarFormat_locale_.get(), __description, __format, __locale, );
 }}
var sel_initWithString_calendarFormat_ = CachedSelector.init("initWithString:calendarFormat:");
      pub fn initWithStringcalendarFormat(self: *Self, __description:  * NSString, __format:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_calendarFormat_.get(), __description, __format, );
 }}
var sel_initWithString_ = CachedSelector.init("initWithString:");
      pub fn initWithString(self: *Self, __description:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithString_.get(), __description, );
 }}
var sel_initWithYear_month_day_hour_minute_second_timeZone_ = CachedSelector.init("initWithYear:month:day:hour:minute:second:timeZone:");
      pub fn initWithYearmonthdayhourminutesecondtimeZone(self: *Self, __year: c_long, __month: c_ulong, __day: c_ulong, __hour: c_ulong, __minute: c_ulong, __second: c_ulong, __aTimeZone:  ?* NSTimeZone, ) id {{
           return @as(*const fn(*Self, SEL, c_long, c_ulong, c_ulong, c_ulong, c_ulong, c_ulong,  ?* NSTimeZone, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithYear_month_day_hour_minute_second_timeZone_.get(), __year, __month, __day, __hour, __minute, __second, __aTimeZone, );
 }}
var sel_setCalendarFormat_ = CachedSelector.init("setCalendarFormat:");
      pub fn setCalendarFormat(self: *Self, __format:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCalendarFormat_.get(), __format, );
 }}
var sel_setTimeZone_ = CachedSelector.init("setTimeZone:");
      pub fn setTimeZone(self: *Self, __aTimeZone:  ?* NSTimeZone, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSTimeZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeZone_.get(), __aTimeZone, );
 }}
var sel_years_months_days_hours_minutes_seconds_sinceDate_ = CachedSelector.init("years:months:days:hours:minutes:seconds:sinceDate:");
      pub fn yearsmonthsdayshoursminutessecondssinceDate(self: *Self, __yp:  [*c] c_long, __mop:  [*c] c_long, __dp:  [*c] c_long, __hp:  [*c] c_long, __mip:  [*c] c_long, __sp:  [*c] c_long, __date:  * NSCalendarDate, ) void {{
           return @as(*const fn(*Self, SEL,  [*c] c_long,  [*c] c_long,  [*c] c_long,  [*c] c_long,  [*c] c_long,  [*c] c_long,  * NSCalendarDate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_years_months_days_hours_minutes_seconds_sinceDate_.get(), __yp, __mop, __dp, __hp, __mip, __sp, __date, );
 }}
var sel_distantFuture = CachedSelector.init("distantFuture");
      pub fn distantFuture() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_distantFuture.get(), );
 }}
var sel_distantPast = CachedSelector.init("distantPast");
      pub fn distantPast() *Self {{
           return @as(*const fn(Class, SEL, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(class.get(), sel_distantPast.get(), );
 }}
  };
}

pub const NSCalendarDate = opaque {
  const Self = @This();
  pub usingnamespace NSCalendarDateInterfaceMixin(Self, "NSCalendarDate");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSCalendarDate");
  pub usingnamespace NSDateInterfaceMixin(Self, "NSCalendarDate");
};

pub fn MTLAccelerationStructurePassDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_accelerationStructurePassDescriptor = CachedSelector.init("accelerationStructurePassDescriptor");
      pub fn accelerationStructurePassDescriptor()  * MTLAccelerationStructurePassDescriptor {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * MTLAccelerationStructurePassDescriptor, @ptrCast(&objc_msgSend))(class.get(), sel_accelerationStructurePassDescriptor.get(), );
 }}
var sel_sampleBufferAttachments = CachedSelector.init("sampleBufferAttachments");
      pub fn sampleBufferAttachments(self: *Self, )  * MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_sampleBufferAttachments.get(), );
 }}
  };
}

pub const MTLAccelerationStructurePassDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLAccelerationStructurePassDescriptorInterfaceMixin(Self, "MTLAccelerationStructurePassDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLAccelerationStructurePassDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLAccelerationStructurePassDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLAccelerationStructurePassDescriptor");
};

pub fn NSScriptCommandInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_initWithCommandDescription_ = CachedSelector.init("initWithCommandDescription:");
      pub fn initWithCommandDescription(self: *Self, __commandDef:  * NSScriptCommandDescription, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSScriptCommandDescription, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCommandDescription_.get(), __commandDef, );
 }}
var sel_initWithCoder_ = CachedSelector.init("initWithCoder:");
      pub fn initWithCoder(self: *Self, __inCoder:  * NSCoder, ) *Self {{
           return @as(*const fn(*Self, SEL,  * NSCoder, ) callconv(.C) *Self, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_initWithCoder_.get(), __inCoder, );
 }}
var sel_performDefaultImplementation = CachedSelector.init("performDefaultImplementation");
      pub fn performDefaultImplementation(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_performDefaultImplementation.get(), );
 }}
var sel_executeCommand = CachedSelector.init("executeCommand");
      pub fn executeCommand(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_executeCommand.get(), );
 }}
var sel_currentCommand = CachedSelector.init("currentCommand");
      pub fn currentCommand()  ?* NSScriptCommand {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  ?* NSScriptCommand, @ptrCast(&objc_msgSend))(class.get(), sel_currentCommand.get(), );
 }}
var sel_suspendExecution = CachedSelector.init("suspendExecution");
      pub fn suspendExecution(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_suspendExecution.get(), );
 }}
var sel_resumeExecutionWithResult_ = CachedSelector.init("resumeExecutionWithResult:");
      pub fn resumeExecutionWithResult(self: *Self, __result: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_resumeExecutionWithResult_.get(), __result, );
 }}
var sel_commandDescription = CachedSelector.init("commandDescription");
      pub fn commandDescription(self: *Self, )  * NSScriptCommandDescription {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSScriptCommandDescription, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_commandDescription.get(), );
 }}
var sel_directParameter = CachedSelector.init("directParameter");
      pub fn directParameter(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_directParameter.get(), );
 }}
var sel_setDirectParameter_ = CachedSelector.init("setDirectParameter:");
      pub fn setDirectParameter(self: *Self, __directParameter: id, ) void {{
           return @as(*const fn(*Self, SEL, id, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDirectParameter_.get(), __directParameter, );
 }}
var sel_receiversSpecifier = CachedSelector.init("receiversSpecifier");
      pub fn receiversSpecifier(self: *Self, )  ?* NSScriptObjectSpecifier {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSScriptObjectSpecifier, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_receiversSpecifier.get(), );
 }}
var sel_setReceiversSpecifier_ = CachedSelector.init("setReceiversSpecifier:");
      pub fn setReceiversSpecifier(self: *Self, __receiversSpecifier:  ?* NSScriptObjectSpecifier, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSScriptObjectSpecifier, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setReceiversSpecifier_.get(), __receiversSpecifier, );
 }}
var sel_evaluatedReceivers = CachedSelector.init("evaluatedReceivers");
      pub fn evaluatedReceivers(self: *Self, ) id {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_evaluatedReceivers.get(), );
 }}
var sel_arguments = CachedSelector.init("arguments");
      pub fn arguments(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_arguments.get(), );
 }}
var sel_setArguments_ = CachedSelector.init("setArguments:");
      pub fn setArguments(self: *Self, __arguments:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setArguments_.get(), __arguments, );
 }}
var sel_evaluatedArguments = CachedSelector.init("evaluatedArguments");
      pub fn evaluatedArguments(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_evaluatedArguments.get(), );
 }}
var sel_isWellFormed = CachedSelector.init("isWellFormed");
      pub fn isWellFormed(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isWellFormed.get(), );
 }}
var sel_scriptErrorNumber = CachedSelector.init("scriptErrorNumber");
      pub fn scriptErrorNumber(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptErrorNumber.get(), );
 }}
var sel_setScriptErrorNumber_ = CachedSelector.init("setScriptErrorNumber:");
      pub fn setScriptErrorNumber(self: *Self, __scriptErrorNumber: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScriptErrorNumber_.get(), __scriptErrorNumber, );
 }}
var sel_scriptErrorOffendingObjectDescriptor = CachedSelector.init("scriptErrorOffendingObjectDescriptor");
      pub fn scriptErrorOffendingObjectDescriptor(self: *Self, )  * NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptErrorOffendingObjectDescriptor.get(), );
 }}
var sel_setScriptErrorOffendingObjectDescriptor_ = CachedSelector.init("setScriptErrorOffendingObjectDescriptor:");
      pub fn setScriptErrorOffendingObjectDescriptor(self: *Self, __scriptErrorOffendingObjectDescriptor:  * NSAppleEventDescriptor, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAppleEventDescriptor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScriptErrorOffendingObjectDescriptor_.get(), __scriptErrorOffendingObjectDescriptor, );
 }}
var sel_scriptErrorExpectedTypeDescriptor = CachedSelector.init("scriptErrorExpectedTypeDescriptor");
      pub fn scriptErrorExpectedTypeDescriptor(self: *Self, )  * NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  * NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptErrorExpectedTypeDescriptor.get(), );
 }}
var sel_setScriptErrorExpectedTypeDescriptor_ = CachedSelector.init("setScriptErrorExpectedTypeDescriptor:");
      pub fn setScriptErrorExpectedTypeDescriptor(self: *Self, __scriptErrorExpectedTypeDescriptor:  * NSAppleEventDescriptor, ) void {{
           return @as(*const fn(*Self, SEL,  * NSAppleEventDescriptor, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScriptErrorExpectedTypeDescriptor_.get(), __scriptErrorExpectedTypeDescriptor, );
 }}
var sel_scriptErrorString = CachedSelector.init("scriptErrorString");
      pub fn scriptErrorString(self: *Self, )  ?* NSString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scriptErrorString.get(), );
 }}
var sel_setScriptErrorString_ = CachedSelector.init("setScriptErrorString:");
      pub fn setScriptErrorString(self: *Self, __scriptErrorString:  ?* NSString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setScriptErrorString_.get(), __scriptErrorString, );
 }}
var sel_appleEvent = CachedSelector.init("appleEvent");
      pub fn appleEvent(self: *Self, )  ?* NSAppleEventDescriptor {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSAppleEventDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_appleEvent.get(), );
 }}
  };
}

pub const NSScriptCommand = opaque {
  const Self = @This();
  pub usingnamespace NSScriptCommandInterfaceMixin(Self, "NSScriptCommand");
  pub usingnamespace NSCodingProtocolMixin(Self, "NSScriptCommand");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSScriptCommand");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSScriptCommand");
};

pub fn NSStreamInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_open = CachedSelector.init("open");
      pub fn open(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_open.get(), );
 }}
var sel_close = CachedSelector.init("close");
      pub fn close(self: *Self, ) void {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_close.get(), );
 }}
var sel_propertyForKey_ = CachedSelector.init("propertyForKey:");
      pub fn propertyForKey(self: *Self, __key:  * NSString, ) id {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) id, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_propertyForKey_.get(), __key, );
 }}
var sel_setProperty_forKey_ = CachedSelector.init("setProperty:forKey:");
      pub fn setPropertyforKey(self: *Self, __property: id, __key:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL, id,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setProperty_forKey_.get(), __property, __key, );
 }}
var sel_scheduleInRunLoop_forMode_ = CachedSelector.init("scheduleInRunLoop:forMode:");
      pub fn scheduleInRunLoopforMode(self: *Self, __aRunLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_scheduleInRunLoop_forMode_.get(), __aRunLoop, __mode, );
 }}
var sel_removeFromRunLoop_forMode_ = CachedSelector.init("removeFromRunLoop:forMode:");
      pub fn removeFromRunLoopforMode(self: *Self, __aRunLoop:  * NSRunLoop, __mode:  * NSString, ) void {{
           return @as(*const fn(*Self, SEL,  * NSRunLoop,  * NSString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removeFromRunLoop_forMode_.get(), __aRunLoop, __mode, );
 }}
var sel_delegate = CachedSelector.init("delegate");
      pub fn delegate(self: *Self, )  ?* NSStreamDelegate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSStreamDelegate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_delegate.get(), );
 }}
var sel_setDelegate_ = CachedSelector.init("setDelegate:");
      pub fn setDelegate(self: *Self, __delegate:  ?* NSStreamDelegate, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSStreamDelegate, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDelegate_.get(), __delegate, );
 }}
var sel_streamStatus = CachedSelector.init("streamStatus");
      pub fn streamStatus(self: *Self, ) NSStreamStatus {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) NSStreamStatus, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_streamStatus.get(), );
 }}
var sel_streamError = CachedSelector.init("streamError");
      pub fn streamError(self: *Self, )  ?* NSError {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSError, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_streamError.get(), );
 }}
var sel_getStreamsToHostWithName_port_inputStream_outputStream_ = CachedSelector.init("getStreamsToHostWithName:port:inputStream:outputStream:");
      pub fn getStreamsToHostWithNameportinputStreamoutputStream(__hostname:  * NSString, __port: c_long, __inputStream:  [*c]  ?* NSInputStream, __outputStream:  [*c]  ?* NSOutputStream, ) void {{
           return @as(*const fn(Class, SEL,  * NSString, c_long,  [*c]  ?* NSInputStream,  [*c]  ?* NSOutputStream, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_getStreamsToHostWithName_port_inputStream_outputStream_.get(), __hostname, __port, __inputStream, __outputStream, );
 }}
var sel_getStreamsToHost_port_inputStream_outputStream_ = CachedSelector.init("getStreamsToHost:port:inputStream:outputStream:");
      pub fn getStreamsToHostportinputStreamoutputStream(__host:  * NSHost, __port: c_long, __inputStream:  [*c]  ?* NSInputStream, __outputStream:  [*c]  ?* NSOutputStream, ) void {{
           return @as(*const fn(Class, SEL,  * NSHost, c_long,  [*c]  ?* NSInputStream,  [*c]  ?* NSOutputStream, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_getStreamsToHost_port_inputStream_outputStream_.get(), __host, __port, __inputStream, __outputStream, );
 }}
var sel_getBoundStreamsWithBufferSize_inputStream_outputStream_ = CachedSelector.init("getBoundStreamsWithBufferSize:inputStream:outputStream:");
      pub fn getBoundStreamsWithBufferSizeinputStreamoutputStream(__bufferSize: c_ulong, __inputStream:  [*c]  ?* NSInputStream, __outputStream:  [*c]  ?* NSOutputStream, ) void {{
           return @as(*const fn(Class, SEL, c_ulong,  [*c]  ?* NSInputStream,  [*c]  ?* NSOutputStream, ) callconv(.C) void, @ptrCast(&objc_msgSend))(class.get(), sel_getBoundStreamsWithBufferSize_inputStream_outputStream_.get(), __bufferSize, __inputStream, __outputStream, );
 }}
  };
}

pub const NSStream = opaque {
  const Self = @This();
  pub usingnamespace NSStreamInterfaceMixin(Self, "NSStream");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSStream");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSStream");
};

pub fn MTLRenderPipelineFunctionsDescriptorInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_vertexAdditionalBinaryFunctions = CachedSelector.init("vertexAdditionalBinaryFunctions");
      pub fn vertexAdditionalBinaryFunctions(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_vertexAdditionalBinaryFunctions.get(), );
 }}
var sel_setVertexAdditionalBinaryFunctions_ = CachedSelector.init("setVertexAdditionalBinaryFunctions:");
      pub fn setVertexAdditionalBinaryFunctions(self: *Self, __vertexAdditionalBinaryFunctions:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setVertexAdditionalBinaryFunctions_.get(), __vertexAdditionalBinaryFunctions, );
 }}
var sel_fragmentAdditionalBinaryFunctions = CachedSelector.init("fragmentAdditionalBinaryFunctions");
      pub fn fragmentAdditionalBinaryFunctions(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_fragmentAdditionalBinaryFunctions.get(), );
 }}
var sel_setFragmentAdditionalBinaryFunctions_ = CachedSelector.init("setFragmentAdditionalBinaryFunctions:");
      pub fn setFragmentAdditionalBinaryFunctions(self: *Self, __fragmentAdditionalBinaryFunctions:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setFragmentAdditionalBinaryFunctions_.get(), __fragmentAdditionalBinaryFunctions, );
 }}
var sel_tileAdditionalBinaryFunctions = CachedSelector.init("tileAdditionalBinaryFunctions");
      pub fn tileAdditionalBinaryFunctions(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_tileAdditionalBinaryFunctions.get(), );
 }}
var sel_setTileAdditionalBinaryFunctions_ = CachedSelector.init("setTileAdditionalBinaryFunctions:");
      pub fn setTileAdditionalBinaryFunctions(self: *Self, __tileAdditionalBinaryFunctions:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTileAdditionalBinaryFunctions_.get(), __tileAdditionalBinaryFunctions, );
 }}
  };
}

pub const MTLRenderPipelineFunctionsDescriptor = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPipelineFunctionsDescriptorInterfaceMixin(Self, "MTLRenderPipelineFunctionsDescriptor");
  pub usingnamespace NSCopyingProtocolMixin(Self, "MTLRenderPipelineFunctionsDescriptor");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPipelineFunctionsDescriptor");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPipelineFunctionsDescriptor");
};

pub fn MTLRenderPipelineColorAttachmentDescriptorArrayInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_objectAtIndexedSubscript_ = CachedSelector.init("objectAtIndexedSubscript:");
      pub fn objectAtIndexedSubscript(self: *Self, __attachmentIndex: c_ulong, )  * MTLRenderPipelineColorAttachmentDescriptor {{
           return @as(*const fn(*Self, SEL, c_ulong, ) callconv(.C)  * MTLRenderPipelineColorAttachmentDescriptor, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_objectAtIndexedSubscript_.get(), __attachmentIndex, );
 }}
var sel_setObject_atIndexedSubscript_ = CachedSelector.init("setObject:atIndexedSubscript:");
      pub fn setObjectatIndexedSubscript(self: *Self, __attachment:  ?* MTLRenderPipelineColorAttachmentDescriptor, __attachmentIndex: c_ulong, ) void {{
           return @as(*const fn(*Self, SEL,  ?* MTLRenderPipelineColorAttachmentDescriptor, c_ulong, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setObject_atIndexedSubscript_.get(), __attachment, __attachmentIndex, );
 }}
  };
}

pub const MTLRenderPipelineColorAttachmentDescriptorArray = opaque {
  const Self = @This();
  pub usingnamespace MTLRenderPipelineColorAttachmentDescriptorArrayInterfaceMixin(Self, "MTLRenderPipelineColorAttachmentDescriptorArray");
  pub usingnamespace NSObjectProtocolMixin(Self, "MTLRenderPipelineColorAttachmentDescriptorArray");
  pub usingnamespace NSObjectInterfaceMixin(Self, "MTLRenderPipelineColorAttachmentDescriptorArray");
};

pub fn NSDateComponentsInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_week = CachedSelector.init("week");
      pub fn week(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_week.get(), );
 }}
var sel_setWeek_ = CachedSelector.init("setWeek:");
      pub fn setWeek(self: *Self, __v: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWeek_.get(), __v, );
 }}
var sel_setValue_forComponent_ = CachedSelector.init("setValue:forComponent:");
      pub fn setValueforComponent(self: *Self, __value: c_long, __unit: NSCalendarUnit, ) void {{
           return @as(*const fn(*Self, SEL, c_long, NSCalendarUnit, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setValue_forComponent_.get(), __value, __unit, );
 }}
var sel_valueForComponent_ = CachedSelector.init("valueForComponent:");
      pub fn valueForComponent(self: *Self, __unit: NSCalendarUnit, ) c_long {{
           return @as(*const fn(*Self, SEL, NSCalendarUnit, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_valueForComponent_.get(), __unit, );
 }}
var sel_isValidDateInCalendar_ = CachedSelector.init("isValidDateInCalendar:");
      pub fn isValidDateInCalendar(self: *Self, __calendar:  * NSCalendar, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSCalendar, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isValidDateInCalendar_.get(), __calendar, );
 }}
var sel_calendar = CachedSelector.init("calendar");
      pub fn calendar(self: *Self, )  ?* NSCalendar {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSCalendar, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_calendar.get(), );
 }}
var sel_setCalendar_ = CachedSelector.init("setCalendar:");
      pub fn setCalendar(self: *Self, __calendar:  ?* NSCalendar, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSCalendar, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setCalendar_.get(), __calendar, );
 }}
var sel_timeZone = CachedSelector.init("timeZone");
      pub fn timeZone(self: *Self, )  ?* NSTimeZone {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSTimeZone, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_timeZone.get(), );
 }}
var sel_setTimeZone_ = CachedSelector.init("setTimeZone:");
      pub fn setTimeZone(self: *Self, __timeZone:  ?* NSTimeZone, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSTimeZone, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setTimeZone_.get(), __timeZone, );
 }}
var sel_era = CachedSelector.init("era");
      pub fn era(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_era.get(), );
 }}
var sel_setEra_ = CachedSelector.init("setEra:");
      pub fn setEra(self: *Self, __era: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setEra_.get(), __era, );
 }}
var sel_year = CachedSelector.init("year");
      pub fn year(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_year.get(), );
 }}
var sel_setYear_ = CachedSelector.init("setYear:");
      pub fn setYear(self: *Self, __year: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setYear_.get(), __year, );
 }}
var sel_month = CachedSelector.init("month");
      pub fn month(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_month.get(), );
 }}
var sel_setMonth_ = CachedSelector.init("setMonth:");
      pub fn setMonth(self: *Self, __month: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMonth_.get(), __month, );
 }}
var sel_day = CachedSelector.init("day");
      pub fn day(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_day.get(), );
 }}
var sel_setDay_ = CachedSelector.init("setDay:");
      pub fn setDay(self: *Self, __day: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDay_.get(), __day, );
 }}
var sel_hour = CachedSelector.init("hour");
      pub fn hour(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_hour.get(), );
 }}
var sel_setHour_ = CachedSelector.init("setHour:");
      pub fn setHour(self: *Self, __hour: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setHour_.get(), __hour, );
 }}
var sel_minute = CachedSelector.init("minute");
      pub fn minute(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_minute.get(), );
 }}
var sel_setMinute_ = CachedSelector.init("setMinute:");
      pub fn setMinute(self: *Self, __minute: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setMinute_.get(), __minute, );
 }}
var sel_second = CachedSelector.init("second");
      pub fn second(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_second.get(), );
 }}
var sel_setSecond_ = CachedSelector.init("setSecond:");
      pub fn setSecond(self: *Self, __second: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setSecond_.get(), __second, );
 }}
var sel_nanosecond = CachedSelector.init("nanosecond");
      pub fn nanosecond(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_nanosecond.get(), );
 }}
var sel_setNanosecond_ = CachedSelector.init("setNanosecond:");
      pub fn setNanosecond(self: *Self, __nanosecond: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setNanosecond_.get(), __nanosecond, );
 }}
var sel_weekday = CachedSelector.init("weekday");
      pub fn weekday(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_weekday.get(), );
 }}
var sel_setWeekday_ = CachedSelector.init("setWeekday:");
      pub fn setWeekday(self: *Self, __weekday: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWeekday_.get(), __weekday, );
 }}
var sel_weekdayOrdinal = CachedSelector.init("weekdayOrdinal");
      pub fn weekdayOrdinal(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_weekdayOrdinal.get(), );
 }}
var sel_setWeekdayOrdinal_ = CachedSelector.init("setWeekdayOrdinal:");
      pub fn setWeekdayOrdinal(self: *Self, __weekdayOrdinal: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWeekdayOrdinal_.get(), __weekdayOrdinal, );
 }}
var sel_quarter = CachedSelector.init("quarter");
      pub fn quarter(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_quarter.get(), );
 }}
var sel_setQuarter_ = CachedSelector.init("setQuarter:");
      pub fn setQuarter(self: *Self, __quarter: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setQuarter_.get(), __quarter, );
 }}
var sel_weekOfMonth = CachedSelector.init("weekOfMonth");
      pub fn weekOfMonth(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_weekOfMonth.get(), );
 }}
var sel_setWeekOfMonth_ = CachedSelector.init("setWeekOfMonth:");
      pub fn setWeekOfMonth(self: *Self, __weekOfMonth: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWeekOfMonth_.get(), __weekOfMonth, );
 }}
var sel_weekOfYear = CachedSelector.init("weekOfYear");
      pub fn weekOfYear(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_weekOfYear.get(), );
 }}
var sel_setWeekOfYear_ = CachedSelector.init("setWeekOfYear:");
      pub fn setWeekOfYear(self: *Self, __weekOfYear: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setWeekOfYear_.get(), __weekOfYear, );
 }}
var sel_yearForWeekOfYear = CachedSelector.init("yearForWeekOfYear");
      pub fn yearForWeekOfYear(self: *Self, ) c_long {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_long, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_yearForWeekOfYear.get(), );
 }}
var sel_setYearForWeekOfYear_ = CachedSelector.init("setYearForWeekOfYear:");
      pub fn setYearForWeekOfYear(self: *Self, __yearForWeekOfYear: c_long, ) void {{
           return @as(*const fn(*Self, SEL, c_long, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setYearForWeekOfYear_.get(), __yearForWeekOfYear, );
 }}
var sel_isLeapMonth = CachedSelector.init("isLeapMonth");
      pub fn isLeapMonth(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isLeapMonth.get(), );
 }}
var sel_setLeapMonth_ = CachedSelector.init("setLeapMonth:");
      pub fn setLeapMonth(self: *Self, __leapMonth: c_int, ) void {{
           return @as(*const fn(*Self, SEL, c_int, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setLeapMonth_.get(), __leapMonth, );
 }}
var sel_date = CachedSelector.init("date");
      pub fn date(self: *Self, )  ?* NSDate {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDate, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_date.get(), );
 }}
var sel_isValidDate = CachedSelector.init("isValidDate");
      pub fn isValidDate(self: *Self, ) c_int {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_isValidDate.get(), );
 }}
  };
}

pub const NSDateComponents = opaque {
  const Self = @This();
  pub usingnamespace NSDateComponentsInterfaceMixin(Self, "NSDateComponents");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSDateComponents");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSDateComponents");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSDateComponents");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSDateComponents");
};

pub fn NSUnitPressureInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
_ = Self;
  return struct {
      var class = CachedClass.init(class_name);
var sel_newtonsPerMetersSquared = CachedSelector.init("newtonsPerMetersSquared");
      pub fn newtonsPerMetersSquared()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_newtonsPerMetersSquared.get(), );
 }}
var sel_gigapascals = CachedSelector.init("gigapascals");
      pub fn gigapascals()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_gigapascals.get(), );
 }}
var sel_megapascals = CachedSelector.init("megapascals");
      pub fn megapascals()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_megapascals.get(), );
 }}
var sel_kilopascals = CachedSelector.init("kilopascals");
      pub fn kilopascals()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_kilopascals.get(), );
 }}
var sel_hectopascals = CachedSelector.init("hectopascals");
      pub fn hectopascals()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_hectopascals.get(), );
 }}
var sel_inchesOfMercury = CachedSelector.init("inchesOfMercury");
      pub fn inchesOfMercury()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_inchesOfMercury.get(), );
 }}
var sel_bars = CachedSelector.init("bars");
      pub fn bars()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_bars.get(), );
 }}
var sel_millibars = CachedSelector.init("millibars");
      pub fn millibars()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_millibars.get(), );
 }}
var sel_millimetersOfMercury = CachedSelector.init("millimetersOfMercury");
      pub fn millimetersOfMercury()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_millimetersOfMercury.get(), );
 }}
var sel_poundsForcePerSquareInch = CachedSelector.init("poundsForcePerSquareInch");
      pub fn poundsForcePerSquareInch()  * NSUnitPressure {{
           return @as(*const fn(Class, SEL, ) callconv(.C)  * NSUnitPressure, @ptrCast(&objc_msgSend))(class.get(), sel_poundsForcePerSquareInch.get(), );
 }}
  };
}

pub const NSUnitPressure = opaque {
  const Self = @This();
  pub usingnamespace NSUnitPressureInterfaceMixin(Self, "NSUnitPressure");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSUnitPressure");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSUnitPressure");
  pub usingnamespace NSDimensionInterfaceMixin(Self, "NSUnitPressure");
};

pub fn NSSocketPortNameServerInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_sharedInstance = CachedSelector.init("sharedInstance");
      pub fn sharedInstance() id {{
           return @as(*const fn(Class, SEL, ) callconv(.C) id, @ptrCast(&objc_msgSend))(class.get(), sel_sharedInstance.get(), );
 }}
var sel_portForName_ = CachedSelector.init("portForName:");
      pub fn portForName(self: *Self, __name:  * NSString, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portForName_.get(), __name, );
 }}
var sel_portForName_host_ = CachedSelector.init("portForName:host:");
      pub fn portForNamehost(self: *Self, __name:  * NSString, __host:  ?* NSString, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portForName_host_.get(), __name, __host, );
 }}
var sel_registerPort_name_ = CachedSelector.init("registerPort:name:");
      pub fn registerPortname(self: *Self, __port:  * NSPort, __name:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSPort,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerPort_name_.get(), __port, __name, );
 }}
var sel_removePortForName_ = CachedSelector.init("removePortForName:");
      pub fn removePortForName(self: *Self, __name:  * NSString, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSString, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_removePortForName_.get(), __name, );
 }}
var sel_portForName_host_nameServerPortNumber_ = CachedSelector.init("portForName:host:nameServerPortNumber:");
      pub fn portForNamehostnameServerPortNumber(self: *Self, __name:  * NSString, __host:  ?* NSString, __portNumber: c_ushort, )  ?* NSPort {{
           return @as(*const fn(*Self, SEL,  * NSString,  ?* NSString, c_ushort, ) callconv(.C)  ?* NSPort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_portForName_host_nameServerPortNumber_.get(), __name, __host, __portNumber, );
 }}
var sel_registerPort_name_nameServerPortNumber_ = CachedSelector.init("registerPort:name:nameServerPortNumber:");
      pub fn registerPortnamenameServerPortNumber(self: *Self, __port:  * NSPort, __name:  * NSString, __portNumber: c_ushort, ) c_int {{
           return @as(*const fn(*Self, SEL,  * NSPort,  * NSString, c_ushort, ) callconv(.C) c_int, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_registerPort_name_nameServerPortNumber_.get(), __port, __name, __portNumber, );
 }}
var sel_defaultNameServerPortNumber = CachedSelector.init("defaultNameServerPortNumber");
      pub fn defaultNameServerPortNumber(self: *Self, ) c_ushort {{
           return @as(*const fn(*Self, SEL, ) callconv(.C) c_ushort, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_defaultNameServerPortNumber.get(), );
 }}
var sel_setDefaultNameServerPortNumber_ = CachedSelector.init("setDefaultNameServerPortNumber:");
      pub fn setDefaultNameServerPortNumber(self: *Self, __defaultNameServerPortNumber: c_ushort, ) void {{
           return @as(*const fn(*Self, SEL, c_ushort, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setDefaultNameServerPortNumber_.get(), __defaultNameServerPortNumber, );
 }}
  };
}

pub const NSSocketPortNameServer = opaque {
  const Self = @This();
  pub usingnamespace NSSocketPortNameServerInterfaceMixin(Self, "NSSocketPortNameServer");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSSocketPortNameServer");
  pub usingnamespace NSPortNameServerInterfaceMixin(Self, "NSSocketPortNameServer");
};

pub fn NSExtensionItemInterfaceMixin(comptime Self: type, comptime class_name: [*:0]const u8) type {
  return struct {
      var class = CachedClass.init(class_name);
var sel_attributedTitle = CachedSelector.init("attributedTitle");
      pub fn attributedTitle(self: *Self, )  ?* NSAttributedString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributedTitle.get(), );
 }}
var sel_setAttributedTitle_ = CachedSelector.init("setAttributedTitle:");
      pub fn setAttributedTitle(self: *Self, __attributedTitle:  ?* NSAttributedString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSAttributedString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributedTitle_.get(), __attributedTitle, );
 }}
var sel_attributedContentText = CachedSelector.init("attributedContentText");
      pub fn attributedContentText(self: *Self, )  ?* NSAttributedString {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSAttributedString, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attributedContentText.get(), );
 }}
var sel_setAttributedContentText_ = CachedSelector.init("setAttributedContentText:");
      pub fn setAttributedContentText(self: *Self, __attributedContentText:  ?* NSAttributedString, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSAttributedString, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttributedContentText_.get(), __attributedContentText, );
 }}
var sel_attachments = CachedSelector.init("attachments");
      pub fn attachments(self: *Self, )  ?* NSArray {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSArray, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_attachments.get(), );
 }}
var sel_setAttachments_ = CachedSelector.init("setAttachments:");
      pub fn setAttachments(self: *Self, ___attachments:  ?* NSArray, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSArray, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setAttachments_.get(), ___attachments, );
 }}
var sel_userInfo = CachedSelector.init("userInfo");
      pub fn userInfo(self: *Self, )  ?* NSDictionary {{
           return @as(*const fn(*Self, SEL, ) callconv(.C)  ?* NSDictionary, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_userInfo.get(), );
 }}
var sel_setUserInfo_ = CachedSelector.init("setUserInfo:");
      pub fn setUserInfo(self: *Self, __userInfo:  ?* NSDictionary, ) void {{
           return @as(*const fn(*Self, SEL,  ?* NSDictionary, ) callconv(.C) void, @ptrCast(&objc_msgSend))(@ptrCast(self), sel_setUserInfo_.get(), __userInfo, );
 }}
  };
}

pub const NSExtensionItem = opaque {
  const Self = @This();
  pub usingnamespace NSExtensionItemInterfaceMixin(Self, "NSExtensionItem");
  pub usingnamespace NSCopyingProtocolMixin(Self, "NSExtensionItem");
  pub usingnamespace NSSecureCodingProtocolMixin(Self, "NSExtensionItem");
  pub usingnamespace NSObjectProtocolMixin(Self, "NSExtensionItem");
  pub usingnamespace NSObjectInterfaceMixin(Self, "NSExtensionItem");
};

pub const NSLocaleLanguageDirection = enum(c_ulong) {
  NSLocaleLanguageDirectionUnknown = 0,
  NSLocaleLanguageDirectionLeftToRight = 1,
  NSLocaleLanguageDirectionRightToLeft = 2,
  NSLocaleLanguageDirectionTopToBottom = 3,
  NSLocaleLanguageDirectionBottomToTop = 4,
};

pub const MTLIOPriority = enum(c_long) {
  MTLIOPriorityHigh = 0,
  MTLIOPriorityNormal = 1,
  MTLIOPriorityLow = 2,
};

pub const NSPersonNameComponentsFormatterStyle = enum(c_long) {
  NSPersonNameComponentsFormatterStyleDefault = 0,
  NSPersonNameComponentsFormatterStyleShort = 1,
  NSPersonNameComponentsFormatterStyleMedium = 2,
  NSPersonNameComponentsFormatterStyleLong = 3,
  NSPersonNameComponentsFormatterStyleAbbreviated = 4,
};

pub const NSTextCheckingType = enum(c_ulonglong) {
  NSTextCheckingTypeOrthography = 1,
  NSTextCheckingTypeSpelling = 2,
  NSTextCheckingTypeGrammar = 4,
  NSTextCheckingTypeDate = 8,
  NSTextCheckingTypeAddress = 16,
  NSTextCheckingTypeLink = 32,
  NSTextCheckingTypeQuote = 64,
  NSTextCheckingTypeDash = 128,
  NSTextCheckingTypeReplacement = 256,
  NSTextCheckingTypeCorrection = 512,
  NSTextCheckingTypeRegularExpression = 1024,
  NSTextCheckingTypePhoneNumber = 2048,
  NSTextCheckingTypeTransitInformation = 4096,
};

pub const NSURLBookmarkCreationOptions = enum(c_ulong) {
  NSURLBookmarkCreationPreferFileIDResolution = 256,
  NSURLBookmarkCreationMinimalBookmark = 512,
  NSURLBookmarkCreationSuitableForBookmarkFile = 1024,
  NSURLBookmarkCreationWithSecurityScope = 2048,
  NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096,
  NSURLBookmarkCreationWithoutImplicitSecurityScope = 536870912,
};

pub const MTLDeviceLocation = enum(c_ulong) {
  MTLDeviceLocationBuiltIn = 0,
  MTLDeviceLocationSlot = 1,
  MTLDeviceLocationExternal = 2,
  MTLDeviceLocationUnspecified = 18446744073709551615,
};

pub const MTLResourceUsage = enum(c_ulong) {
  MTLResourceUsageRead = 1,
  MTLResourceUsageWrite = 2,
  MTLResourceUsageSample = 4,
};

pub const NSDateFormatterBehavior = enum(c_ulong) {
  NSDateFormatterBehaviorDefault = 0,
  NSDateFormatterBehavior10_0 = 1000,
  NSDateFormatterBehavior10_4 = 1040,
};

pub const NSByteCountFormatterUnits = enum(c_ulong) {
  NSByteCountFormatterUseDefault = 0,
  NSByteCountFormatterUseBytes = 1,
  NSByteCountFormatterUseKB = 2,
  NSByteCountFormatterUseMB = 4,
  NSByteCountFormatterUseGB = 8,
  NSByteCountFormatterUseTB = 16,
  NSByteCountFormatterUsePB = 32,
  NSByteCountFormatterUseEB = 64,
  NSByteCountFormatterUseZB = 128,
  NSByteCountFormatterUseYBOrHigher = 65280,
  NSByteCountFormatterUseAll = 65535,
};

pub const NSStringEnumerationOptions = enum(c_ulong) {
  NSStringEnumerationByLines = 0,
  NSStringEnumerationByParagraphs = 1,
  NSStringEnumerationByComposedCharacterSequences = 2,
  NSStringEnumerationByWords = 3,
  NSStringEnumerationBySentences = 4,
  NSStringEnumerationByCaretPositions = 5,
  NSStringEnumerationByDeletionClusters = 6,
  NSStringEnumerationReverse = 256,
  NSStringEnumerationSubstringNotRequired = 512,
  NSStringEnumerationLocalized = 1024,
};

pub const MTLIOCompressionStatus = enum(c_long) {
  MTLIOCompressionStatusComplete = 0,
  MTLIOCompressionStatusError = 1,
};

pub const NSURLRelationship = enum(c_long) {
  NSURLRelationshipContains = 0,
  NSURLRelationshipSame = 1,
  NSURLRelationshipOther = 2,
};

pub const MTLColorWriteMask = enum(c_ulong) {
  MTLColorWriteMaskNone = 0,
  MTLColorWriteMaskRed = 8,
  MTLColorWriteMaskGreen = 4,
  MTLColorWriteMaskBlue = 2,
  MTLColorWriteMaskAlpha = 1,
  MTLColorWriteMaskAll = 15,
};

pub const NSActivityOptions = enum(c_ulonglong) {
  NSActivityIdleDisplaySleepDisabled = 1099511627776,
  NSActivityIdleSystemSleepDisabled = 1048576,
  NSActivitySuddenTerminationDisabled = 16384,
  NSActivityAutomaticTerminationDisabled = 32768,
  NSActivityAnimationTrackingEnabled = 35184372088832,
  NSActivityTrackingEnabled = 70368744177664,
  NSActivityUserInitiated = 16777215,
  NSActivityUserInitiatedAllowingIdleSystemSleep = 15728639,
  NSActivityBackground = 255,
  NSActivityLatencyCritical = 1095216660480,
  NSActivityUserInteractive = 1095233437695,
};

pub const MTLTessellationFactorFormat = enum(c_ulong) {
  MTLTessellationFactorFormatHalf = 0,
};

pub const NSMatchingOptions = enum(c_ulong) {
  NSMatchingReportProgress = 1,
  NSMatchingReportCompletion = 2,
  NSMatchingAnchored = 4,
  NSMatchingWithTransparentBounds = 8,
  NSMatchingWithoutAnchoringBounds = 16,
};

pub const MTLTextureUsage = enum(c_ulong) {
  MTLTextureUsageUnknown = 0,
  MTLTextureUsageShaderRead = 1,
  MTLTextureUsageShaderWrite = 2,
  MTLTextureUsageRenderTarget = 4,
  MTLTextureUsagePixelFormatView = 16,
  MTLTextureUsageShaderAtomic = 32,
};

pub const NSDecodingFailurePolicy = enum(c_long) {
  NSDecodingFailurePolicyRaiseException = 0,
  NSDecodingFailurePolicySetErrorAndReturn = 1,
};

pub const NSPresentationIntentKind = enum(c_long) {
  NSPresentationIntentKindParagraph = 0,
  NSPresentationIntentKindHeader = 1,
  NSPresentationIntentKindOrderedList = 2,
  NSPresentationIntentKindUnorderedList = 3,
  NSPresentationIntentKindListItem = 4,
  NSPresentationIntentKindCodeBlock = 5,
  NSPresentationIntentKindBlockQuote = 6,
  NSPresentationIntentKindThematicBreak = 7,
  NSPresentationIntentKindTable = 8,
  NSPresentationIntentKindTableHeaderRow = 9,
  NSPresentationIntentKindTableRow = 10,
  NSPresentationIntentKindTableCell = 11,
};

pub const MTLVertexFormat = enum(c_ulong) {
  MTLVertexFormatInvalid = 0,
  MTLVertexFormatUChar2 = 1,
  MTLVertexFormatUChar3 = 2,
  MTLVertexFormatUChar4 = 3,
  MTLVertexFormatChar2 = 4,
  MTLVertexFormatChar3 = 5,
  MTLVertexFormatChar4 = 6,
  MTLVertexFormatUChar2Normalized = 7,
  MTLVertexFormatUChar3Normalized = 8,
  MTLVertexFormatUChar4Normalized = 9,
  MTLVertexFormatChar2Normalized = 10,
  MTLVertexFormatChar3Normalized = 11,
  MTLVertexFormatChar4Normalized = 12,
  MTLVertexFormatUShort2 = 13,
  MTLVertexFormatUShort3 = 14,
  MTLVertexFormatUShort4 = 15,
  MTLVertexFormatShort2 = 16,
  MTLVertexFormatShort3 = 17,
  MTLVertexFormatShort4 = 18,
  MTLVertexFormatUShort2Normalized = 19,
  MTLVertexFormatUShort3Normalized = 20,
  MTLVertexFormatUShort4Normalized = 21,
  MTLVertexFormatShort2Normalized = 22,
  MTLVertexFormatShort3Normalized = 23,
  MTLVertexFormatShort4Normalized = 24,
  MTLVertexFormatHalf2 = 25,
  MTLVertexFormatHalf3 = 26,
  MTLVertexFormatHalf4 = 27,
  MTLVertexFormatFloat = 28,
  MTLVertexFormatFloat2 = 29,
  MTLVertexFormatFloat3 = 30,
  MTLVertexFormatFloat4 = 31,
  MTLVertexFormatInt = 32,
  MTLVertexFormatInt2 = 33,
  MTLVertexFormatInt3 = 34,
  MTLVertexFormatInt4 = 35,
  MTLVertexFormatUInt = 36,
  MTLVertexFormatUInt2 = 37,
  MTLVertexFormatUInt3 = 38,
  MTLVertexFormatUInt4 = 39,
  MTLVertexFormatInt1010102Normalized = 40,
  MTLVertexFormatUInt1010102Normalized = 41,
  MTLVertexFormatUChar4Normalized_BGRA = 42,
  MTLVertexFormatUChar = 45,
  MTLVertexFormatChar = 46,
  MTLVertexFormatUCharNormalized = 47,
  MTLVertexFormatCharNormalized = 48,
  MTLVertexFormatUShort = 49,
  MTLVertexFormatShort = 50,
  MTLVertexFormatUShortNormalized = 51,
  MTLVertexFormatShortNormalized = 52,
  MTLVertexFormatHalf = 53,
  MTLVertexFormatFloatRG11B10 = 54,
  MTLVertexFormatFloatRGB9E5 = 55,
};

pub const NSTaskTerminationReason = enum(c_long) {
  NSTaskTerminationReasonExit = 1,
  NSTaskTerminationReasonUncaughtSignal = 2,
};

pub const MTLSamplerAddressMode = enum(c_ulong) {
  MTLSamplerAddressModeClampToEdge = 0,
  MTLSamplerAddressModeMirrorClampToEdge = 1,
  MTLSamplerAddressModeRepeat = 2,
  MTLSamplerAddressModeMirrorRepeat = 3,
  MTLSamplerAddressModeClampToZero = 4,
  MTLSamplerAddressModeClampToBorderColor = 5,
};

pub const NSGrammaticalPronounType = enum(c_long) {
  NSGrammaticalPronounTypeNotSet = 0,
  NSGrammaticalPronounTypePersonal = 1,
  NSGrammaticalPronounTypeReflexive = 2,
  NSGrammaticalPronounTypePossessive = 3,
};

pub const NSSortOptions = enum(c_ulong) {
  NSSortConcurrent = 1,
  NSSortStable = 16,
};

pub const NSDataBase64EncodingOptions = enum(c_ulong) {
  NSDataBase64Encoding64CharacterLineLength = 1,
  NSDataBase64Encoding76CharacterLineLength = 2,
  NSDataBase64EncodingEndLineWithCarriageReturn = 16,
  NSDataBase64EncodingEndLineWithLineFeed = 32,
};

pub const NSURLRequestCachePolicy = enum(c_ulong) {
  NSURLRequestUseProtocolCachePolicy = 0,
  NSURLRequestReloadIgnoringLocalCacheData = 1,
  NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4,
  NSURLRequestReloadIgnoringCacheData = 1,
  NSURLRequestReturnCacheDataElseLoad = 2,
  NSURLRequestReturnCacheDataDontLoad = 3,
  NSURLRequestReloadRevalidatingCacheData = 5,
};

pub const NSURLSessionDelayedRequestDisposition = enum(c_long) {
  NSURLSessionDelayedRequestContinueLoading = 0,
  NSURLSessionDelayedRequestUseNewRequest = 1,
  NSURLSessionDelayedRequestCancel = 2,
};

pub const NSFileCoordinatorReadingOptions = enum(c_ulong) {
  NSFileCoordinatorReadingWithoutChanges = 1,
  NSFileCoordinatorReadingResolvesSymbolicLink = 2,
  NSFileCoordinatorReadingImmediatelyAvailableMetadataOnly = 4,
  NSFileCoordinatorReadingForUploading = 8,
};

pub const NSInsertionPosition = enum(c_ulong) {
  NSPositionAfter = 0,
  NSPositionBefore = 1,
  NSPositionBeginning = 2,
  NSPositionEnd = 3,
  NSPositionReplace = 4,
};

pub const MTLDepthClipMode = enum(c_ulong) {
  MTLDepthClipModeClip = 0,
  MTLDepthClipModeClamp = 1,
};

pub const MTLPixelFormat = enum(c_ulong) {
  MTLPixelFormatInvalid = 0,
  MTLPixelFormatA8Unorm = 1,
  MTLPixelFormatR8Unorm = 10,
  MTLPixelFormatR8Unorm_sRGB = 11,
  MTLPixelFormatR8Snorm = 12,
  MTLPixelFormatR8Uint = 13,
  MTLPixelFormatR8Sint = 14,
  MTLPixelFormatR16Unorm = 20,
  MTLPixelFormatR16Snorm = 22,
  MTLPixelFormatR16Uint = 23,
  MTLPixelFormatR16Sint = 24,
  MTLPixelFormatR16Float = 25,
  MTLPixelFormatRG8Unorm = 30,
  MTLPixelFormatRG8Unorm_sRGB = 31,
  MTLPixelFormatRG8Snorm = 32,
  MTLPixelFormatRG8Uint = 33,
  MTLPixelFormatRG8Sint = 34,
  MTLPixelFormatB5G6R5Unorm = 40,
  MTLPixelFormatA1BGR5Unorm = 41,
  MTLPixelFormatABGR4Unorm = 42,
  MTLPixelFormatBGR5A1Unorm = 43,
  MTLPixelFormatR32Uint = 53,
  MTLPixelFormatR32Sint = 54,
  MTLPixelFormatR32Float = 55,
  MTLPixelFormatRG16Unorm = 60,
  MTLPixelFormatRG16Snorm = 62,
  MTLPixelFormatRG16Uint = 63,
  MTLPixelFormatRG16Sint = 64,
  MTLPixelFormatRG16Float = 65,
  MTLPixelFormatRGBA8Unorm = 70,
  MTLPixelFormatRGBA8Unorm_sRGB = 71,
  MTLPixelFormatRGBA8Snorm = 72,
  MTLPixelFormatRGBA8Uint = 73,
  MTLPixelFormatRGBA8Sint = 74,
  MTLPixelFormatBGRA8Unorm = 80,
  MTLPixelFormatBGRA8Unorm_sRGB = 81,
  MTLPixelFormatRGB10A2Unorm = 90,
  MTLPixelFormatRGB10A2Uint = 91,
  MTLPixelFormatRG11B10Float = 92,
  MTLPixelFormatRGB9E5Float = 93,
  MTLPixelFormatBGR10A2Unorm = 94,
  MTLPixelFormatBGR10_XR = 554,
  MTLPixelFormatBGR10_XR_sRGB = 555,
  MTLPixelFormatRG32Uint = 103,
  MTLPixelFormatRG32Sint = 104,
  MTLPixelFormatRG32Float = 105,
  MTLPixelFormatRGBA16Unorm = 110,
  MTLPixelFormatRGBA16Snorm = 112,
  MTLPixelFormatRGBA16Uint = 113,
  MTLPixelFormatRGBA16Sint = 114,
  MTLPixelFormatRGBA16Float = 115,
  MTLPixelFormatBGRA10_XR = 552,
  MTLPixelFormatBGRA10_XR_sRGB = 553,
  MTLPixelFormatRGBA32Uint = 123,
  MTLPixelFormatRGBA32Sint = 124,
  MTLPixelFormatRGBA32Float = 125,
  MTLPixelFormatBC1_RGBA = 130,
  MTLPixelFormatBC1_RGBA_sRGB = 131,
  MTLPixelFormatBC2_RGBA = 132,
  MTLPixelFormatBC2_RGBA_sRGB = 133,
  MTLPixelFormatBC3_RGBA = 134,
  MTLPixelFormatBC3_RGBA_sRGB = 135,
  MTLPixelFormatBC4_RUnorm = 140,
  MTLPixelFormatBC4_RSnorm = 141,
  MTLPixelFormatBC5_RGUnorm = 142,
  MTLPixelFormatBC5_RGSnorm = 143,
  MTLPixelFormatBC6H_RGBFloat = 150,
  MTLPixelFormatBC6H_RGBUfloat = 151,
  MTLPixelFormatBC7_RGBAUnorm = 152,
  MTLPixelFormatBC7_RGBAUnorm_sRGB = 153,
  MTLPixelFormatPVRTC_RGB_2BPP = 160,
  MTLPixelFormatPVRTC_RGB_2BPP_sRGB = 161,
  MTLPixelFormatPVRTC_RGB_4BPP = 162,
  MTLPixelFormatPVRTC_RGB_4BPP_sRGB = 163,
  MTLPixelFormatPVRTC_RGBA_2BPP = 164,
  MTLPixelFormatPVRTC_RGBA_2BPP_sRGB = 165,
  MTLPixelFormatPVRTC_RGBA_4BPP = 166,
  MTLPixelFormatPVRTC_RGBA_4BPP_sRGB = 167,
  MTLPixelFormatEAC_R11Unorm = 170,
  MTLPixelFormatEAC_R11Snorm = 172,
  MTLPixelFormatEAC_RG11Unorm = 174,
  MTLPixelFormatEAC_RG11Snorm = 176,
  MTLPixelFormatEAC_RGBA8 = 178,
  MTLPixelFormatEAC_RGBA8_sRGB = 179,
  MTLPixelFormatETC2_RGB8 = 180,
  MTLPixelFormatETC2_RGB8_sRGB = 181,
  MTLPixelFormatETC2_RGB8A1 = 182,
  MTLPixelFormatETC2_RGB8A1_sRGB = 183,
  MTLPixelFormatASTC_4x4_sRGB = 186,
  MTLPixelFormatASTC_5x4_sRGB = 187,
  MTLPixelFormatASTC_5x5_sRGB = 188,
  MTLPixelFormatASTC_6x5_sRGB = 189,
  MTLPixelFormatASTC_6x6_sRGB = 190,
  MTLPixelFormatASTC_8x5_sRGB = 192,
  MTLPixelFormatASTC_8x6_sRGB = 193,
  MTLPixelFormatASTC_8x8_sRGB = 194,
  MTLPixelFormatASTC_10x5_sRGB = 195,
  MTLPixelFormatASTC_10x6_sRGB = 196,
  MTLPixelFormatASTC_10x8_sRGB = 197,
  MTLPixelFormatASTC_10x10_sRGB = 198,
  MTLPixelFormatASTC_12x10_sRGB = 199,
  MTLPixelFormatASTC_12x12_sRGB = 200,
  MTLPixelFormatASTC_4x4_LDR = 204,
  MTLPixelFormatASTC_5x4_LDR = 205,
  MTLPixelFormatASTC_5x5_LDR = 206,
  MTLPixelFormatASTC_6x5_LDR = 207,
  MTLPixelFormatASTC_6x6_LDR = 208,
  MTLPixelFormatASTC_8x5_LDR = 210,
  MTLPixelFormatASTC_8x6_LDR = 211,
  MTLPixelFormatASTC_8x8_LDR = 212,
  MTLPixelFormatASTC_10x5_LDR = 213,
  MTLPixelFormatASTC_10x6_LDR = 214,
  MTLPixelFormatASTC_10x8_LDR = 215,
  MTLPixelFormatASTC_10x10_LDR = 216,
  MTLPixelFormatASTC_12x10_LDR = 217,
  MTLPixelFormatASTC_12x12_LDR = 218,
  MTLPixelFormatASTC_4x4_HDR = 222,
  MTLPixelFormatASTC_5x4_HDR = 223,
  MTLPixelFormatASTC_5x5_HDR = 224,
  MTLPixelFormatASTC_6x5_HDR = 225,
  MTLPixelFormatASTC_6x6_HDR = 226,
  MTLPixelFormatASTC_8x5_HDR = 228,
  MTLPixelFormatASTC_8x6_HDR = 229,
  MTLPixelFormatASTC_8x8_HDR = 230,
  MTLPixelFormatASTC_10x5_HDR = 231,
  MTLPixelFormatASTC_10x6_HDR = 232,
  MTLPixelFormatASTC_10x8_HDR = 233,
  MTLPixelFormatASTC_10x10_HDR = 234,
  MTLPixelFormatASTC_12x10_HDR = 235,
  MTLPixelFormatASTC_12x12_HDR = 236,
  MTLPixelFormatGBGR422 = 240,
  MTLPixelFormatBGRG422 = 241,
  MTLPixelFormatDepth16Unorm = 250,
  MTLPixelFormatDepth32Float = 252,
  MTLPixelFormatStencil8 = 253,
  MTLPixelFormatDepth24Unorm_Stencil8 = 255,
  MTLPixelFormatDepth32Float_Stencil8 = 260,
  MTLPixelFormatX32_Stencil8 = 261,
  MTLPixelFormatX24_Stencil8 = 262,
};

pub const MTLBindingType = enum(c_long) {
  MTLBindingTypeBuffer = 0,
  MTLBindingTypeThreadgroupMemory = 1,
  MTLBindingTypeTexture = 2,
  MTLBindingTypeSampler = 3,
  MTLBindingTypeImageblockData = 16,
  MTLBindingTypeImageblock = 17,
  MTLBindingTypeVisibleFunctionTable = 24,
  MTLBindingTypePrimitiveAccelerationStructure = 25,
  MTLBindingTypeInstanceAccelerationStructure = 26,
  MTLBindingTypeIntersectionFunctionTable = 27,
  MTLBindingTypeObjectPayload = 34,
};

pub const MTLBindingAccess = enum(c_ulong) {
  MTLBindingAccessReadOnly = 0,
  MTLBindingAccessReadWrite = 1,
  MTLBindingAccessWriteOnly = 2,
  MTLArgumentAccessReadOnly = 0,
  MTLArgumentAccessReadWrite = 1,
  MTLArgumentAccessWriteOnly = 2,
};

pub const NSCalendarUnit = enum(c_ulong) {
  NSCalendarUnitEra = 2,
  NSCalendarUnitYear = 4,
  NSCalendarUnitMonth = 8,
  NSCalendarUnitDay = 16,
  NSCalendarUnitHour = 32,
  NSCalendarUnitMinute = 64,
  NSCalendarUnitSecond = 128,
  NSCalendarUnitWeekday = 512,
  NSCalendarUnitWeekdayOrdinal = 1024,
  NSCalendarUnitQuarter = 2048,
  NSCalendarUnitWeekOfMonth = 4096,
  NSCalendarUnitWeekOfYear = 8192,
  NSCalendarUnitYearForWeekOfYear = 16384,
  NSCalendarUnitNanosecond = 32768,
  NSCalendarUnitCalendar = 1048576,
  NSCalendarUnitTimeZone = 2097152,
  NSEraCalendarUnit = 2,
  NSYearCalendarUnit = 4,
  NSMonthCalendarUnit = 8,
  NSDayCalendarUnit = 16,
  NSHourCalendarUnit = 32,
  NSMinuteCalendarUnit = 64,
  NSSecondCalendarUnit = 128,
  NSWeekCalendarUnit = 256,
  NSWeekdayCalendarUnit = 512,
  NSWeekdayOrdinalCalendarUnit = 1024,
  NSQuarterCalendarUnit = 2048,
  NSWeekOfMonthCalendarUnit = 4096,
  NSWeekOfYearCalendarUnit = 8192,
  NSYearForWeekOfYearCalendarUnit = 16384,
  NSCalendarCalendarUnit = 1048576,
  NSTimeZoneCalendarUnit = 2097152,
};

pub const NSRelativePosition = enum(c_ulong) {
  NSRelativeAfter = 0,
  NSRelativeBefore = 1,
};

pub const NSEnumerationOptions = enum(c_ulong) {
  NSEnumerationConcurrent = 1,
  NSEnumerationReverse = 2,
};

pub const NSNumberFormatterBehavior = enum(c_ulong) {
  NSNumberFormatterBehaviorDefault = 0,
  NSNumberFormatterBehavior10_0 = 1000,
  NSNumberFormatterBehavior10_4 = 1040,
};

pub const MTLLanguageVersion = enum(c_ulong) {
  MTLLanguageVersion1_0 = 65536,
  MTLLanguageVersion1_1 = 65537,
  MTLLanguageVersion1_2 = 65538,
  MTLLanguageVersion2_0 = 131072,
  MTLLanguageVersion2_1 = 131073,
  MTLLanguageVersion2_2 = 131074,
  MTLLanguageVersion2_3 = 131075,
  MTLLanguageVersion2_4 = 131076,
  MTLLanguageVersion3_0 = 196608,
  MTLLanguageVersion3_1 = 196609,
};

pub const MTLDispatchType = enum(c_ulong) {
  MTLDispatchTypeSerial = 0,
  MTLDispatchTypeConcurrent = 1,
};

pub const NSMatchingFlags = enum(c_ulong) {
  NSMatchingProgress = 1,
  NSMatchingCompleted = 2,
  NSMatchingHitEnd = 4,
  NSMatchingRequiredEnd = 8,
  NSMatchingInternalError = 16,
};

pub const NSAttributedStringMarkdownParsingFailurePolicy = enum(c_long) {
  NSAttributedStringMarkdownParsingFailureReturnError = 0,
  NSAttributedStringMarkdownParsingFailureReturnPartiallyParsedIfPossible = 1,
};

pub const MTLHazardTrackingMode = enum(c_ulong) {
  MTLHazardTrackingModeDefault = 0,
  MTLHazardTrackingModeUntracked = 1,
  MTLHazardTrackingModeTracked = 2,
};

pub const MTLVertexStepFunction = enum(c_ulong) {
  MTLVertexStepFunctionConstant = 0,
  MTLVertexStepFunctionPerVertex = 1,
  MTLVertexStepFunctionPerInstance = 2,
  MTLVertexStepFunctionPerPatch = 3,
  MTLVertexStepFunctionPerPatchControlPoint = 4,
};

pub const NSStreamEvent = enum(c_ulong) {
  NSStreamEventNone = 0,
  NSStreamEventOpenCompleted = 1,
  NSStreamEventHasBytesAvailable = 2,
  NSStreamEventHasSpaceAvailable = 4,
  NSStreamEventErrorOccurred = 8,
  NSStreamEventEndEncountered = 16,
};

pub const MTLStencilOperation = enum(c_ulong) {
  MTLStencilOperationKeep = 0,
  MTLStencilOperationZero = 1,
  MTLStencilOperationReplace = 2,
  MTLStencilOperationIncrementClamp = 3,
  MTLStencilOperationDecrementClamp = 4,
  MTLStencilOperationInvert = 5,
  MTLStencilOperationIncrementWrap = 6,
  MTLStencilOperationDecrementWrap = 7,
};

pub const NSComparisonPredicateOptions = enum(c_ulong) {
  NSCaseInsensitivePredicateOption = 1,
  NSDiacriticInsensitivePredicateOption = 2,
  NSNormalizedPredicateOption = 4,
};

pub const NSSearchPathDirectory = enum(c_ulong) {
  NSApplicationDirectory = 1,
  NSDemoApplicationDirectory = 2,
  NSDeveloperApplicationDirectory = 3,
  NSAdminApplicationDirectory = 4,
  NSLibraryDirectory = 5,
  NSDeveloperDirectory = 6,
  NSUserDirectory = 7,
  NSDocumentationDirectory = 8,
  NSDocumentDirectory = 9,
  NSCoreServiceDirectory = 10,
  NSAutosavedInformationDirectory = 11,
  NSDesktopDirectory = 12,
  NSCachesDirectory = 13,
  NSApplicationSupportDirectory = 14,
  NSDownloadsDirectory = 15,
  NSInputMethodsDirectory = 16,
  NSMoviesDirectory = 17,
  NSMusicDirectory = 18,
  NSPicturesDirectory = 19,
  NSPrinterDescriptionDirectory = 20,
  NSSharedPublicDirectory = 21,
  NSPreferencePanesDirectory = 22,
  NSApplicationScriptsDirectory = 23,
  NSItemReplacementDirectory = 99,
  NSAllApplicationsDirectory = 100,
  NSAllLibrariesDirectory = 101,
  NSTrashDirectory = 102,
};

pub const NSPersonNameComponentsFormatterOptions = enum(c_ulong) {
  NSPersonNameComponentsFormatterPhonetic = 2,
};

pub const NSItemProviderFileOptions = enum(c_long) {
  NSItemProviderFileOptionOpenInPlace = 1,
};

pub const MTLLoadAction = enum(c_ulong) {
  MTLLoadActionDontCare = 0,
  MTLLoadActionLoad = 1,
  MTLLoadActionClear = 2,
};

pub const MTLBarrierScope = enum(c_ulong) {
  MTLBarrierScopeBuffers = 1,
  MTLBarrierScopeTextures = 2,
  MTLBarrierScopeRenderTargets = 4,
};

pub const NSNetServiceOptions = enum(c_ulong) {
  NSNetServiceNoAutoRename = 1,
  NSNetServiceListenForConnections = 2,
};

pub const MTLTessellationPartitionMode = enum(c_ulong) {
  MTLTessellationPartitionModePow2 = 0,
  MTLTessellationPartitionModeInteger = 1,
  MTLTessellationPartitionModeFractionalOdd = 2,
  MTLTessellationPartitionModeFractionalEven = 3,
};

pub const MTLLibraryOptimizationLevel = enum(c_long) {
  MTLLibraryOptimizationLevelDefault = 0,
  MTLLibraryOptimizationLevelSize = 1,
};

pub const NSDateComponentsFormatterUnitsStyle = enum(c_long) {
  NSDateComponentsFormatterUnitsStylePositional = 0,
  NSDateComponentsFormatterUnitsStyleAbbreviated = 1,
  NSDateComponentsFormatterUnitsStyleShort = 2,
  NSDateComponentsFormatterUnitsStyleFull = 3,
  NSDateComponentsFormatterUnitsStyleSpellOut = 4,
  NSDateComponentsFormatterUnitsStyleBrief = 5,
};

pub const NSKeyValueObservingOptions = enum(c_ulong) {
  NSKeyValueObservingOptionNew = 1,
  NSKeyValueObservingOptionOld = 2,
  NSKeyValueObservingOptionInitial = 4,
  NSKeyValueObservingOptionPrior = 8,
};

pub const MTLLibraryType = enum(c_long) {
  MTLLibraryTypeExecutable = 0,
  MTLLibraryTypeDynamic = 1,
};

pub const NSURLSessionMultipathServiceType = enum(c_long) {
  NSURLSessionMultipathServiceTypeNone = 0,
  NSURLSessionMultipathServiceTypeHandover = 1,
  NSURLSessionMultipathServiceTypeInteractive = 2,
  NSURLSessionMultipathServiceTypeAggregate = 3,
};

pub const NSPredicateOperatorType = enum(c_ulong) {
  NSLessThanPredicateOperatorType = 0,
  NSLessThanOrEqualToPredicateOperatorType = 1,
  NSGreaterThanPredicateOperatorType = 2,
  NSGreaterThanOrEqualToPredicateOperatorType = 3,
  NSEqualToPredicateOperatorType = 4,
  NSNotEqualToPredicateOperatorType = 5,
  NSMatchesPredicateOperatorType = 6,
  NSLikePredicateOperatorType = 7,
  NSBeginsWithPredicateOperatorType = 8,
  NSEndsWithPredicateOperatorType = 9,
  NSInPredicateOperatorType = 10,
  NSCustomSelectorPredicateOperatorType = 11,
  NSContainsPredicateOperatorType = 99,
  NSBetweenPredicateOperatorType = 100,
};

pub const MTLAttributeFormat = enum(c_ulong) {
  MTLAttributeFormatInvalid = 0,
  MTLAttributeFormatUChar2 = 1,
  MTLAttributeFormatUChar3 = 2,
  MTLAttributeFormatUChar4 = 3,
  MTLAttributeFormatChar2 = 4,
  MTLAttributeFormatChar3 = 5,
  MTLAttributeFormatChar4 = 6,
  MTLAttributeFormatUChar2Normalized = 7,
  MTLAttributeFormatUChar3Normalized = 8,
  MTLAttributeFormatUChar4Normalized = 9,
  MTLAttributeFormatChar2Normalized = 10,
  MTLAttributeFormatChar3Normalized = 11,
  MTLAttributeFormatChar4Normalized = 12,
  MTLAttributeFormatUShort2 = 13,
  MTLAttributeFormatUShort3 = 14,
  MTLAttributeFormatUShort4 = 15,
  MTLAttributeFormatShort2 = 16,
  MTLAttributeFormatShort3 = 17,
  MTLAttributeFormatShort4 = 18,
  MTLAttributeFormatUShort2Normalized = 19,
  MTLAttributeFormatUShort3Normalized = 20,
  MTLAttributeFormatUShort4Normalized = 21,
  MTLAttributeFormatShort2Normalized = 22,
  MTLAttributeFormatShort3Normalized = 23,
  MTLAttributeFormatShort4Normalized = 24,
  MTLAttributeFormatHalf2 = 25,
  MTLAttributeFormatHalf3 = 26,
  MTLAttributeFormatHalf4 = 27,
  MTLAttributeFormatFloat = 28,
  MTLAttributeFormatFloat2 = 29,
  MTLAttributeFormatFloat3 = 30,
  MTLAttributeFormatFloat4 = 31,
  MTLAttributeFormatInt = 32,
  MTLAttributeFormatInt2 = 33,
  MTLAttributeFormatInt3 = 34,
  MTLAttributeFormatInt4 = 35,
  MTLAttributeFormatUInt = 36,
  MTLAttributeFormatUInt2 = 37,
  MTLAttributeFormatUInt3 = 38,
  MTLAttributeFormatUInt4 = 39,
  MTLAttributeFormatInt1010102Normalized = 40,
  MTLAttributeFormatUInt1010102Normalized = 41,
  MTLAttributeFormatUChar4Normalized_BGRA = 42,
  MTLAttributeFormatUChar = 45,
  MTLAttributeFormatChar = 46,
  MTLAttributeFormatUCharNormalized = 47,
  MTLAttributeFormatCharNormalized = 48,
  MTLAttributeFormatUShort = 49,
  MTLAttributeFormatShort = 50,
  MTLAttributeFormatUShortNormalized = 51,
  MTLAttributeFormatShortNormalized = 52,
  MTLAttributeFormatHalf = 53,
  MTLAttributeFormatFloatRG11B10 = 54,
  MTLAttributeFormatFloatRGB9E5 = 55,
};

pub const NSURLSessionTaskState = enum(c_long) {
  NSURLSessionTaskStateRunning = 0,
  NSURLSessionTaskStateSuspended = 1,
  NSURLSessionTaskStateCanceling = 2,
  NSURLSessionTaskStateCompleted = 3,
};

pub const NSFileWrapperReadingOptions = enum(c_ulong) {
  NSFileWrapperReadingImmediate = 1,
  NSFileWrapperReadingWithoutMapping = 2,
};

pub const NSISO8601DateFormatOptions = enum(c_ulong) {
  NSISO8601DateFormatWithYear = 1,
  NSISO8601DateFormatWithMonth = 2,
  NSISO8601DateFormatWithWeekOfYear = 4,
  NSISO8601DateFormatWithDay = 16,
  NSISO8601DateFormatWithTime = 32,
  NSISO8601DateFormatWithTimeZone = 64,
  NSISO8601DateFormatWithSpaceBetweenDateAndTime = 128,
  NSISO8601DateFormatWithDashSeparatorInDate = 256,
  NSISO8601DateFormatWithColonSeparatorInTime = 512,
  NSISO8601DateFormatWithColonSeparatorInTimeZone = 1024,
  NSISO8601DateFormatWithFractionalSeconds = 2048,
  NSISO8601DateFormatWithFullDate = 275,
  NSISO8601DateFormatWithFullTime = 1632,
  NSISO8601DateFormatWithInternetDateTime = 1907,
};

pub const MTLPipelineOption = enum(c_ulong) {
  MTLPipelineOptionNone = 0,
  MTLPipelineOptionArgumentInfo = 1,
  MTLPipelineOptionBufferTypeInfo = 2,
  MTLPipelineOptionFailOnBinaryArchiveMiss = 4,
};

pub const NSGrammaticalCase = enum(c_long) {
  NSGrammaticalCaseNotSet = 0,
  NSGrammaticalCaseNominative = 1,
  NSGrammaticalCaseAccusative = 2,
  NSGrammaticalCaseDative = 3,
  NSGrammaticalCaseGenitive = 4,
  NSGrammaticalCasePrepositional = 5,
  NSGrammaticalCaseAblative = 6,
  NSGrammaticalCaseAdessive = 7,
  NSGrammaticalCaseAllative = 8,
  NSGrammaticalCaseElative = 9,
  NSGrammaticalCaseIllative = 10,
  NSGrammaticalCaseEssive = 11,
  NSGrammaticalCaseInessive = 12,
  NSGrammaticalCaseLocative = 13,
  NSGrammaticalCaseTranslative = 14,
};

pub const MTLStoreActionOptions = enum(c_ulong) {
  MTLStoreActionOptionNone = 0,
  MTLStoreActionOptionCustomSamplePositions = 1,
};

pub const NSRelativeDateTimeFormatterStyle = enum(c_long) {
  NSRelativeDateTimeFormatterStyleNumeric = 0,
  NSRelativeDateTimeFormatterStyleNamed = 1,
};

pub const NSMachPortOptions = enum(c_ulong) {
  NSMachPortDeallocateNone = 0,
  NSMachPortDeallocateSendRight = 1,
  NSMachPortDeallocateReceiveRight = 2,
};

pub const NSURLSessionWebSocketMessageType = enum(c_long) {
  NSURLSessionWebSocketMessageTypeData = 0,
  NSURLSessionWebSocketMessageTypeString = 1,
};

pub const NSStreamStatus = enum(c_ulong) {
  NSStreamStatusNotOpen = 0,
  NSStreamStatusOpening = 1,
  NSStreamStatusOpen = 2,
  NSStreamStatusReading = 3,
  NSStreamStatusWriting = 4,
  NSStreamStatusAtEnd = 5,
  NSStreamStatusClosed = 6,
  NSStreamStatusError = 7,
};

pub const NSUserNotificationActivationType = enum(c_long) {
  NSUserNotificationActivationTypeNone = 0,
  NSUserNotificationActivationTypeContentsClicked = 1,
  NSUserNotificationActivationTypeActionButtonClicked = 2,
  NSUserNotificationActivationTypeReplied = 3,
  NSUserNotificationActivationTypeAdditionalActionClicked = 4,
};

pub const NSGrammaticalGender = enum(c_long) {
  NSGrammaticalGenderNotSet = 0,
  NSGrammaticalGenderFeminine = 1,
  NSGrammaticalGenderMasculine = 2,
  NSGrammaticalGenderNeuter = 3,
};

pub const NSURLSessionResponseDisposition = enum(c_long) {
  NSURLSessionResponseCancel = 0,
  NSURLSessionResponseAllow = 1,
  NSURLSessionResponseBecomeDownload = 2,
  NSURLSessionResponseBecomeStream = 3,
};

pub const MTLTextureType = enum(c_ulong) {
  MTLTextureType1D = 0,
  MTLTextureType1DArray = 1,
  MTLTextureType2D = 2,
  MTLTextureType2DArray = 3,
  MTLTextureType2DMultisample = 4,
  MTLTextureTypeCube = 5,
  MTLTextureTypeCubeArray = 6,
  MTLTextureType3D = 7,
  MTLTextureType2DMultisampleArray = 8,
  MTLTextureTypeTextureBuffer = 9,
};

pub const NSJSONWritingOptions = enum(c_ulong) {
  NSJSONWritingPrettyPrinted = 1,
  NSJSONWritingSortedKeys = 2,
  NSJSONWritingFragmentsAllowed = 4,
  NSJSONWritingWithoutEscapingSlashes = 8,
};

pub const NSCompoundPredicateType = enum(c_ulong) {
  NSNotPredicateType = 0,
  NSAndPredicateType = 1,
  NSOrPredicateType = 2,
};

pub const NSDistributedNotificationOptions = enum(c_ulong) {
  NSDistributedNotificationDeliverImmediately = 1,
  NSDistributedNotificationPostToAllSessions = 2,
};

pub const NSFileVersionAddingOptions = enum(c_ulong) {
  NSFileVersionAddingByMoving = 1,
};

pub const MTLRenderStages = enum(c_ulong) {
  MTLRenderStageVertex = 1,
  MTLRenderStageFragment = 2,
  MTLRenderStageTile = 4,
  MTLRenderStageObject = 8,
  MTLRenderStageMesh = 16,
};

pub const NSDataSearchOptions = enum(c_ulong) {
  NSDataSearchBackwards = 1,
  NSDataSearchAnchored = 2,
};

pub const MTLIOStatus = enum(c_long) {
  MTLIOStatusPending = 0,
  MTLIOStatusCancelled = 1,
  MTLIOStatusError = 2,
  MTLIOStatusComplete = 3,
};

pub const NSDataWritingOptions = enum(c_ulong) {
  NSDataWritingAtomic = 1,
  NSDataWritingWithoutOverwriting = 2,
  NSDataWritingFileProtectionNone = 268435456,
  NSDataWritingFileProtectionComplete = 536870912,
  NSDataWritingFileProtectionCompleteUnlessOpen = 805306368,
  NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication = 1073741824,
  NSDataWritingFileProtectionCompleteWhenUserInactive = 1342177280,
  NSDataWritingFileProtectionMask = 4026531840,
  NSAtomicWrite = 1,
};

pub const MTLMultisampleDepthResolveFilter = enum(c_ulong) {
  MTLMultisampleDepthResolveFilterSample0 = 0,
  MTLMultisampleDepthResolveFilterMin = 1,
  MTLMultisampleDepthResolveFilterMax = 2,
};

pub const NSXMLDocumentContentKind = enum(c_ulong) {
  NSXMLDocumentXMLKind = 0,
  NSXMLDocumentXHTMLKind = 1,
  NSXMLDocumentHTMLKind = 2,
  NSXMLDocumentTextKind = 3,
};

pub const MTLTriangleFillMode = enum(c_ulong) {
  MTLTriangleFillModeFill = 0,
  MTLTriangleFillModeLines = 1,
};

pub const MTLFeatureSet = enum(c_ulong) {
  MTLFeatureSet_iOS_GPUFamily1_v1 = 0,
  MTLFeatureSet_iOS_GPUFamily2_v1 = 1,
  MTLFeatureSet_iOS_GPUFamily1_v2 = 2,
  MTLFeatureSet_iOS_GPUFamily2_v2 = 3,
  MTLFeatureSet_iOS_GPUFamily3_v1 = 4,
  MTLFeatureSet_iOS_GPUFamily1_v3 = 5,
  MTLFeatureSet_iOS_GPUFamily2_v3 = 6,
  MTLFeatureSet_iOS_GPUFamily3_v2 = 7,
  MTLFeatureSet_iOS_GPUFamily1_v4 = 8,
  MTLFeatureSet_iOS_GPUFamily2_v4 = 9,
  MTLFeatureSet_iOS_GPUFamily3_v3 = 10,
  MTLFeatureSet_iOS_GPUFamily4_v1 = 11,
  MTLFeatureSet_iOS_GPUFamily1_v5 = 12,
  MTLFeatureSet_iOS_GPUFamily2_v5 = 13,
  MTLFeatureSet_iOS_GPUFamily3_v4 = 14,
  MTLFeatureSet_iOS_GPUFamily4_v2 = 15,
  MTLFeatureSet_iOS_GPUFamily5_v1 = 16,
  MTLFeatureSet_macOS_GPUFamily1_v1 = 10000,
  MTLFeatureSet_OSX_GPUFamily1_v1 = 10000,
  MTLFeatureSet_macOS_GPUFamily1_v2 = 10001,
  MTLFeatureSet_OSX_GPUFamily1_v2 = 10001,
  MTLFeatureSet_macOS_ReadWriteTextureTier2 = 10002,
  MTLFeatureSet_OSX_ReadWriteTextureTier2 = 10002,
  MTLFeatureSet_macOS_GPUFamily1_v3 = 10003,
  MTLFeatureSet_macOS_GPUFamily1_v4 = 10004,
  MTLFeatureSet_macOS_GPUFamily2_v1 = 10005,
  MTLFeatureSet_tvOS_GPUFamily1_v1 = 30000,
  MTLFeatureSet_TVOS_GPUFamily1_v1 = 30000,
  MTLFeatureSet_tvOS_GPUFamily1_v2 = 30001,
  MTLFeatureSet_tvOS_GPUFamily1_v3 = 30002,
  MTLFeatureSet_tvOS_GPUFamily2_v1 = 30003,
  MTLFeatureSet_tvOS_GPUFamily1_v4 = 30004,
  MTLFeatureSet_tvOS_GPUFamily2_v2 = 30005,
};

pub const NSDataCompressionAlgorithm = enum(c_long) {
  NSDataCompressionAlgorithmLZFSE = 0,
  NSDataCompressionAlgorithmLZ4 = 1,
  NSDataCompressionAlgorithmLZMA = 2,
  NSDataCompressionAlgorithmZlib = 3,
};

pub const MTLCommandBufferErrorOption = enum(c_ulong) {
  MTLCommandBufferErrorOptionNone = 0,
  MTLCommandBufferErrorOptionEncoderExecutionStatus = 1,
};

pub const NSXMLDTDNodeKind = enum(c_ulong) {
  NSXMLEntityGeneralKind = 1,
  NSXMLEntityParsedKind = 2,
  NSXMLEntityUnparsedKind = 3,
  NSXMLEntityParameterKind = 4,
  NSXMLEntityPredefined = 5,
  NSXMLAttributeCDATAKind = 6,
  NSXMLAttributeIDKind = 7,
  NSXMLAttributeIDRefKind = 8,
  NSXMLAttributeIDRefsKind = 9,
  NSXMLAttributeEntityKind = 10,
  NSXMLAttributeEntitiesKind = 11,
  NSXMLAttributeNMTokenKind = 12,
  NSXMLAttributeNMTokensKind = 13,
  NSXMLAttributeEnumerationKind = 14,
  NSXMLAttributeNotationKind = 15,
  NSXMLElementDeclarationUndefinedKind = 16,
  NSXMLElementDeclarationEmptyKind = 17,
  NSXMLElementDeclarationAnyKind = 18,
  NSXMLElementDeclarationMixedKind = 19,
  NSXMLElementDeclarationElementKind = 20,
};

pub const MTLHeapType = enum(c_long) {
  MTLHeapTypeAutomatic = 0,
  MTLHeapTypePlacement = 1,
  MTLHeapTypeSparse = 2,
};

pub const NSMassFormatterUnit = enum(c_long) {
  NSMassFormatterUnitGram = 11,
  NSMassFormatterUnitKilogram = 14,
  NSMassFormatterUnitOunce = 1537,
  NSMassFormatterUnitPound = 1538,
  NSMassFormatterUnitStone = 1539,
};

pub const NSFileWrapperWritingOptions = enum(c_ulong) {
  NSFileWrapperWritingAtomic = 1,
  NSFileWrapperWritingWithNameUpdating = 2,
};

pub const NSFileManagerItemReplacementOptions = enum(c_ulong) {
  NSFileManagerItemReplacementUsingNewMetadataOnly = 1,
  NSFileManagerItemReplacementWithoutDeletingBackupItem = 2,
};

pub const NSGrammaticalNumber = enum(c_long) {
  NSGrammaticalNumberNotSet = 0,
  NSGrammaticalNumberSingular = 1,
  NSGrammaticalNumberZero = 2,
  NSGrammaticalNumberPlural = 3,
  NSGrammaticalNumberPluralTwo = 4,
  NSGrammaticalNumberPluralFew = 5,
  NSGrammaticalNumberPluralMany = 6,
};

pub const NSURLRequestAttribution = enum(c_ulong) {
  NSURLRequestAttributionDeveloper = 0,
  NSURLRequestAttributionUser = 1,
};

pub const NSDataBase64DecodingOptions = enum(c_ulong) {
  NSDataBase64DecodingIgnoreUnknownCharacters = 1,
};

pub const NSLinguisticTaggerOptions = enum(c_ulong) {
  NSLinguisticTaggerOmitWords = 1,
  NSLinguisticTaggerOmitPunctuation = 2,
  NSLinguisticTaggerOmitWhitespace = 4,
  NSLinguisticTaggerOmitOther = 8,
  NSLinguisticTaggerJoinNames = 16,
};

pub const NSComparisonPredicateModifier = enum(c_ulong) {
  NSDirectPredicateModifier = 0,
  NSAllPredicateModifier = 1,
  NSAnyPredicateModifier = 2,
};

pub const NSURLRequestNetworkServiceType = enum(c_ulong) {
  NSURLNetworkServiceTypeDefault = 0,
  NSURLNetworkServiceTypeVoIP = 1,
  NSURLNetworkServiceTypeVideo = 2,
  NSURLNetworkServiceTypeBackground = 3,
  NSURLNetworkServiceTypeVoice = 4,
  NSURLNetworkServiceTypeResponsiveData = 6,
  NSURLNetworkServiceTypeAVStreaming = 8,
  NSURLNetworkServiceTypeResponsiveAV = 9,
  NSURLNetworkServiceTypeCallSignaling = 11,
};

pub const NSPostingStyle = enum(c_ulong) {
  NSPostWhenIdle = 1,
  NSPostASAP = 2,
  NSPostNow = 3,
};

pub const NSQualityOfService = enum(c_long) {
  NSQualityOfServiceUserInteractive = 33,
  NSQualityOfServiceUserInitiated = 25,
  NSQualityOfServiceUtility = 17,
  NSQualityOfServiceBackground = 9,
  NSQualityOfServiceDefault = -1,
};

pub const NSRoundingMode = enum(c_ulong) {
  NSRoundPlain = 0,
  NSRoundDown = 1,
  NSRoundUp = 2,
  NSRoundBankers = 3,
};

pub const NSCalculationError = enum(c_ulong) {
  NSCalculationNoError = 0,
  NSCalculationLossOfPrecision = 1,
  NSCalculationUnderflow = 2,
  NSCalculationOverflow = 3,
  NSCalculationDivideByZero = 4,
};

pub const NSJSONReadingOptions = enum(c_ulong) {
  NSJSONReadingMutableContainers = 1,
  NSJSONReadingMutableLeaves = 2,
  NSJSONReadingFragmentsAllowed = 4,
  NSJSONReadingJSON5Allowed = 8,
  NSJSONReadingTopLevelDictionaryAssumed = 16,
  NSJSONReadingAllowFragments = 4,
};

pub const MTLSamplerMipFilter = enum(c_ulong) {
  MTLSamplerMipFilterNotMipmapped = 0,
  MTLSamplerMipFilterNearest = 1,
  MTLSamplerMipFilterLinear = 2,
};

pub const NSCollectionChangeType = enum(c_long) {
  NSCollectionChangeInsert = 0,
  NSCollectionChangeRemove = 1,
};

pub const NSPropertyListMutabilityOptions = enum(c_ulong) {
  NSPropertyListImmutable = 0,
  NSPropertyListMutableContainers = 1,
  NSPropertyListMutableContainersAndLeaves = 2,
};

pub const NSURLSessionTaskMetricsResourceFetchType = enum(c_long) {
  NSURLSessionTaskMetricsResourceFetchTypeUnknown = 0,
  NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad = 1,
  NSURLSessionTaskMetricsResourceFetchTypeServerPush = 2,
  NSURLSessionTaskMetricsResourceFetchTypeLocalCache = 3,
};

pub const MTLBlendOperation = enum(c_ulong) {
  MTLBlendOperationAdd = 0,
  MTLBlendOperationSubtract = 1,
  MTLBlendOperationReverseSubtract = 2,
  MTLBlendOperationMin = 3,
  MTLBlendOperationMax = 4,
};

pub const tls_protocol_version_t = enum(c_ushort) {
  tls_protocol_version_TLSv10 = 769,
  tls_protocol_version_TLSv11 = 770,
  tls_protocol_version_TLSv12 = 771,
  tls_protocol_version_TLSv13 = 772,
  tls_protocol_version_DTLSv10 = 65279,
  tls_protocol_version_DTLSv12 = 65277,
};

pub const MTLAccelerationStructureRefitOptions = enum(c_ulong) {
  MTLAccelerationStructureRefitOptionVertexData = 1,
  MTLAccelerationStructureRefitOptionPerPrimitiveData = 2,
};

pub const NSDataReadingOptions = enum(c_ulong) {
  NSDataReadingMappedIfSafe = 1,
  NSDataReadingUncached = 2,
  NSDataReadingMappedAlways = 8,
  NSDataReadingMapped = 1,
  NSMappedRead = 1,
  NSUncachedRead = 2,
};

pub const MTLCounterSamplingPoint = enum(c_ulong) {
  MTLCounterSamplingPointAtStageBoundary = 0,
  MTLCounterSamplingPointAtDrawBoundary = 1,
  MTLCounterSamplingPointAtDispatchBoundary = 2,
  MTLCounterSamplingPointAtTileDispatchBoundary = 3,
  MTLCounterSamplingPointAtBlitBoundary = 4,
};

pub const NSComparisonResult = enum(c_long) {
  NSOrderedAscending = -1,
  NSOrderedSame = 0,
  NSOrderedDescending = 1,
};

pub const NSGrammaticalPerson = enum(c_long) {
  NSGrammaticalPersonNotSet = 0,
  NSGrammaticalPersonFirst = 1,
  NSGrammaticalPersonSecond = 2,
  NSGrammaticalPersonThird = 3,
};

pub const NSTimeZoneNameStyle = enum(c_long) {
  NSTimeZoneNameStyleStandard = 0,
  NSTimeZoneNameStyleShortStandard = 1,
  NSTimeZoneNameStyleDaylightSaving = 2,
  NSTimeZoneNameStyleShortDaylightSaving = 3,
  NSTimeZoneNameStyleGeneric = 4,
  NSTimeZoneNameStyleShortGeneric = 5,
};

pub const MTLFunctionLogType = enum(c_ulong) {
  MTLFunctionLogTypeValidation = 0,
};

pub const MTLArgumentBuffersTier = enum(c_ulong) {
  MTLArgumentBuffersTier1 = 0,
  MTLArgumentBuffersTier2 = 1,
};

pub const NSHTTPCookieAcceptPolicy = enum(c_ulong) {
  NSHTTPCookieAcceptPolicyAlways = 0,
  NSHTTPCookieAcceptPolicyNever = 1,
  NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2,
};

pub const NSLengthFormatterUnit = enum(c_long) {
  NSLengthFormatterUnitMillimeter = 8,
  NSLengthFormatterUnitCentimeter = 9,
  NSLengthFormatterUnitMeter = 11,
  NSLengthFormatterUnitKilometer = 14,
  NSLengthFormatterUnitInch = 1281,
  NSLengthFormatterUnitFoot = 1282,
  NSLengthFormatterUnitYard = 1283,
  NSLengthFormatterUnitMile = 1284,
};

pub const MTLTessellationControlPointIndexType = enum(c_ulong) {
  MTLTessellationControlPointIndexTypeNone = 0,
  MTLTessellationControlPointIndexTypeUInt16 = 1,
  MTLTessellationControlPointIndexTypeUInt32 = 2,
};

pub const MTLCurveEndCaps = enum(c_long) {
  MTLCurveEndCapsNone = 0,
  MTLCurveEndCapsDisk = 1,
  MTLCurveEndCapsSphere = 2,
};

pub const NSAttributedStringMarkdownInterpretedSyntax = enum(c_long) {
  NSAttributedStringMarkdownInterpretedSyntaxFull = 0,
  NSAttributedStringMarkdownInterpretedSyntaxInlineOnly = 1,
  NSAttributedStringMarkdownInterpretedSyntaxInlineOnlyPreservingWhitespace = 2,
};

pub const MTLSparsePageSize = enum(c_long) {
  MTLSparsePageSize16 = 101,
  MTLSparsePageSize64 = 102,
  MTLSparsePageSize256 = 103,
};

pub const NSKeyValueSetMutationKind = enum(c_ulong) {
  NSKeyValueUnionSetMutation = 1,
  NSKeyValueMinusSetMutation = 2,
  NSKeyValueIntersectSetMutation = 3,
  NSKeyValueSetSetMutation = 4,
};

pub const NSAppleEventSendOptions = enum(c_ulong) {
  NSAppleEventSendNoReply = 1,
  NSAppleEventSendQueueReply = 2,
  NSAppleEventSendWaitForReply = 3,
  NSAppleEventSendNeverInteract = 16,
  NSAppleEventSendCanInteract = 32,
  NSAppleEventSendAlwaysInteract = 48,
  NSAppleEventSendCanSwitchLayer = 64,
  NSAppleEventSendDontRecord = 4096,
  NSAppleEventSendDontExecute = 8192,
  NSAppleEventSendDontAnnotate = 65536,
  NSAppleEventSendDefaultOptions = 35,
};

pub const NSItemProviderRepresentationVisibility = enum(c_long) {
  NSItemProviderRepresentationVisibilityAll = 0,
  NSItemProviderRepresentationVisibilityTeam = 1,
  NSItemProviderRepresentationVisibilityGroup = 2,
  NSItemProviderRepresentationVisibilityOwnProcess = 3,
};

pub const NSRegularExpressionOptions = enum(c_ulong) {
  NSRegularExpressionCaseInsensitive = 1,
  NSRegularExpressionAllowCommentsAndWhitespace = 2,
  NSRegularExpressionIgnoreMetacharacters = 4,
  NSRegularExpressionDotMatchesLineSeparators = 8,
  NSRegularExpressionAnchorsMatchLines = 16,
  NSRegularExpressionUseUnixLineSeparators = 32,
  NSRegularExpressionUseUnicodeWordBoundaries = 64,
};

pub const NSNotificationCoalescing = enum(c_ulong) {
  NSNotificationNoCoalescing = 0,
  NSNotificationCoalescingOnName = 1,
  NSNotificationCoalescingOnSender = 2,
};

pub const MTLTextureCompressionType = enum(c_long) {
  MTLTextureCompressionTypeLossless = 0,
  MTLTextureCompressionTypeLossy = 1,
};

pub const MTLGPUFamily = enum(c_long) {
  MTLGPUFamilyApple1 = 1001,
  MTLGPUFamilyApple2 = 1002,
  MTLGPUFamilyApple3 = 1003,
  MTLGPUFamilyApple4 = 1004,
  MTLGPUFamilyApple5 = 1005,
  MTLGPUFamilyApple6 = 1006,
  MTLGPUFamilyApple7 = 1007,
  MTLGPUFamilyApple8 = 1008,
  MTLGPUFamilyApple9 = 1009,
  MTLGPUFamilyMac1 = 2001,
  MTLGPUFamilyMac2 = 2002,
  MTLGPUFamilyCommon1 = 3001,
  MTLGPUFamilyCommon2 = 3002,
  MTLGPUFamilyCommon3 = 3003,
  MTLGPUFamilyMacCatalyst1 = 4001,
  MTLGPUFamilyMacCatalyst2 = 4002,
  MTLGPUFamilyMetal3 = 5001,
};

pub const NSWhoseSubelementIdentifier = enum(c_ulong) {
  NSIndexSubelement = 0,
  NSEverySubelement = 1,
  NSMiddleSubelement = 2,
  NSRandomSubelement = 3,
  NSNoSubelement = 4,
};

pub const MTLIntersectionFunctionSignature = enum(c_ulong) {
  MTLIntersectionFunctionSignatureNone = 0,
  MTLIntersectionFunctionSignatureInstancing = 1,
  MTLIntersectionFunctionSignatureTriangleData = 2,
  MTLIntersectionFunctionSignatureWorldSpaceData = 4,
  MTLIntersectionFunctionSignatureInstanceMotion = 8,
  MTLIntersectionFunctionSignaturePrimitiveMotion = 16,
  MTLIntersectionFunctionSignatureExtendedLimits = 32,
  MTLIntersectionFunctionSignatureMaxLevels = 64,
  MTLIntersectionFunctionSignatureCurveData = 128,
};

pub const NSGrammaticalDetermination = enum(c_long) {
  NSGrammaticalDeterminationNotSet = 0,
  NSGrammaticalDeterminationIndependent = 1,
  NSGrammaticalDeterminationDependent = 2,
};

pub const MTLSamplerBorderColor = enum(c_ulong) {
  MTLSamplerBorderColorTransparentBlack = 0,
  MTLSamplerBorderColorOpaqueBlack = 1,
  MTLSamplerBorderColorOpaqueWhite = 2,
};

pub const MTLDataType = enum(c_ulong) {
  MTLDataTypeNone = 0,
  MTLDataTypeStruct = 1,
  MTLDataTypeArray = 2,
  MTLDataTypeFloat = 3,
  MTLDataTypeFloat2 = 4,
  MTLDataTypeFloat3 = 5,
  MTLDataTypeFloat4 = 6,
  MTLDataTypeFloat2x2 = 7,
  MTLDataTypeFloat2x3 = 8,
  MTLDataTypeFloat2x4 = 9,
  MTLDataTypeFloat3x2 = 10,
  MTLDataTypeFloat3x3 = 11,
  MTLDataTypeFloat3x4 = 12,
  MTLDataTypeFloat4x2 = 13,
  MTLDataTypeFloat4x3 = 14,
  MTLDataTypeFloat4x4 = 15,
  MTLDataTypeHalf = 16,
  MTLDataTypeHalf2 = 17,
  MTLDataTypeHalf3 = 18,
  MTLDataTypeHalf4 = 19,
  MTLDataTypeHalf2x2 = 20,
  MTLDataTypeHalf2x3 = 21,
  MTLDataTypeHalf2x4 = 22,
  MTLDataTypeHalf3x2 = 23,
  MTLDataTypeHalf3x3 = 24,
  MTLDataTypeHalf3x4 = 25,
  MTLDataTypeHalf4x2 = 26,
  MTLDataTypeHalf4x3 = 27,
  MTLDataTypeHalf4x4 = 28,
  MTLDataTypeInt = 29,
  MTLDataTypeInt2 = 30,
  MTLDataTypeInt3 = 31,
  MTLDataTypeInt4 = 32,
  MTLDataTypeUInt = 33,
  MTLDataTypeUInt2 = 34,
  MTLDataTypeUInt3 = 35,
  MTLDataTypeUInt4 = 36,
  MTLDataTypeShort = 37,
  MTLDataTypeShort2 = 38,
  MTLDataTypeShort3 = 39,
  MTLDataTypeShort4 = 40,
  MTLDataTypeUShort = 41,
  MTLDataTypeUShort2 = 42,
  MTLDataTypeUShort3 = 43,
  MTLDataTypeUShort4 = 44,
  MTLDataTypeChar = 45,
  MTLDataTypeChar2 = 46,
  MTLDataTypeChar3 = 47,
  MTLDataTypeChar4 = 48,
  MTLDataTypeUChar = 49,
  MTLDataTypeUChar2 = 50,
  MTLDataTypeUChar3 = 51,
  MTLDataTypeUChar4 = 52,
  MTLDataTypeBool = 53,
  MTLDataTypeBool2 = 54,
  MTLDataTypeBool3 = 55,
  MTLDataTypeBool4 = 56,
  MTLDataTypeTexture = 58,
  MTLDataTypeSampler = 59,
  MTLDataTypePointer = 60,
  MTLDataTypeR8Unorm = 62,
  MTLDataTypeR8Snorm = 63,
  MTLDataTypeR16Unorm = 64,
  MTLDataTypeR16Snorm = 65,
  MTLDataTypeRG8Unorm = 66,
  MTLDataTypeRG8Snorm = 67,
  MTLDataTypeRG16Unorm = 68,
  MTLDataTypeRG16Snorm = 69,
  MTLDataTypeRGBA8Unorm = 70,
  MTLDataTypeRGBA8Unorm_sRGB = 71,
  MTLDataTypeRGBA8Snorm = 72,
  MTLDataTypeRGBA16Unorm = 73,
  MTLDataTypeRGBA16Snorm = 74,
  MTLDataTypeRGB10A2Unorm = 75,
  MTLDataTypeRG11B10Float = 76,
  MTLDataTypeRGB9E5Float = 77,
  MTLDataTypeRenderPipeline = 78,
  MTLDataTypeComputePipeline = 79,
  MTLDataTypeIndirectCommandBuffer = 80,
  MTLDataTypeLong = 81,
  MTLDataTypeLong2 = 82,
  MTLDataTypeLong3 = 83,
  MTLDataTypeLong4 = 84,
  MTLDataTypeULong = 85,
  MTLDataTypeULong2 = 86,
  MTLDataTypeULong3 = 87,
  MTLDataTypeULong4 = 88,
  MTLDataTypeVisibleFunctionTable = 115,
  MTLDataTypeIntersectionFunctionTable = 116,
  MTLDataTypePrimitiveAccelerationStructure = 117,
  MTLDataTypeInstanceAccelerationStructure = 118,
  MTLDataTypeBFloat = 121,
  MTLDataTypeBFloat2 = 122,
  MTLDataTypeBFloat3 = 123,
  MTLDataTypeBFloat4 = 124,
};

pub const NSAttributedStringEnumerationOptions = enum(c_ulong) {
  NSAttributedStringEnumerationReverse = 2,
  NSAttributedStringEnumerationLongestEffectiveRangeNotRequired = 1048576,
};

pub const SSLProtocol = enum(c_int) {
  kSSLProtocolUnknown = 0,
  kTLSProtocol1 = 4,
  kTLSProtocol11 = 7,
  kTLSProtocol12 = 8,
  kDTLSProtocol1 = 9,
  kTLSProtocol13 = 10,
  kDTLSProtocol12 = 11,
  kTLSProtocolMaxSupported = 999,
  kSSLProtocol2 = 1,
  kSSLProtocol3 = 2,
  kSSLProtocol3Only = 3,
  kTLSProtocol1Only = 5,
  kSSLProtocolAll = 6,
};

pub const MTLReadWriteTextureTier = enum(c_ulong) {
  MTLReadWriteTextureTierNone = 0,
  MTLReadWriteTextureTier1 = 1,
  MTLReadWriteTextureTier2 = 2,
};

pub const NSSaveOptions = enum(c_ulong) {
  NSSaveOptionsYes = 0,
  NSSaveOptionsNo = 1,
  NSSaveOptionsAsk = 2,
};

pub const MTLCompareFunction = enum(c_ulong) {
  MTLCompareFunctionNever = 0,
  MTLCompareFunctionLess = 1,
  MTLCompareFunctionEqual = 2,
  MTLCompareFunctionLessEqual = 3,
  MTLCompareFunctionGreater = 4,
  MTLCompareFunctionNotEqual = 5,
  MTLCompareFunctionGreaterEqual = 6,
  MTLCompareFunctionAlways = 7,
};

pub const MTLStepFunction = enum(c_ulong) {
  MTLStepFunctionConstant = 0,
  MTLStepFunctionPerVertex = 1,
  MTLStepFunctionPerInstance = 2,
  MTLStepFunctionPerPatch = 3,
  MTLStepFunctionPerPatchControlPoint = 4,
  MTLStepFunctionThreadPositionInGridX = 5,
  MTLStepFunctionThreadPositionInGridY = 6,
  MTLStepFunctionThreadPositionInGridXIndexed = 7,
  MTLStepFunctionThreadPositionInGridYIndexed = 8,
};

pub const NSURLCredentialPersistence = enum(c_ulong) {
  NSURLCredentialPersistenceNone = 0,
  NSURLCredentialPersistenceForSession = 1,
  NSURLCredentialPersistencePermanent = 2,
  NSURLCredentialPersistenceSynchronizable = 3,
};

pub const NSKeyValueChange = enum(c_ulong) {
  NSKeyValueChangeSetting = 1,
  NSKeyValueChangeInsertion = 2,
  NSKeyValueChangeRemoval = 3,
  NSKeyValueChangeReplacement = 4,
};

pub const NSURLSessionWebSocketCloseCode = enum(c_long) {
  NSURLSessionWebSocketCloseCodeInvalid = 0,
  NSURLSessionWebSocketCloseCodeNormalClosure = 1000,
  NSURLSessionWebSocketCloseCodeGoingAway = 1001,
  NSURLSessionWebSocketCloseCodeProtocolError = 1002,
  NSURLSessionWebSocketCloseCodeUnsupportedData = 1003,
  NSURLSessionWebSocketCloseCodeNoStatusReceived = 1005,
  NSURLSessionWebSocketCloseCodeAbnormalClosure = 1006,
  NSURLSessionWebSocketCloseCodeInvalidFramePayloadData = 1007,
  NSURLSessionWebSocketCloseCodePolicyViolation = 1008,
  NSURLSessionWebSocketCloseCodeMessageTooBig = 1009,
  NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing = 1010,
  NSURLSessionWebSocketCloseCodeInternalServerError = 1011,
  NSURLSessionWebSocketCloseCodeTLSHandshakeFailure = 1015,
};

pub const MTLPurgeableState = enum(c_ulong) {
  MTLPurgeableStateKeepCurrent = 1,
  MTLPurgeableStateNonVolatile = 2,
  MTLPurgeableStateVolatile = 3,
  MTLPurgeableStateEmpty = 4,
};

pub const MTLTextureSwizzle = enum(u8) {
  MTLTextureSwizzleZero = 0,
  MTLTextureSwizzleOne = 1,
  MTLTextureSwizzleRed = 2,
  MTLTextureSwizzleGreen = 3,
  MTLTextureSwizzleBlue = 4,
  MTLTextureSwizzleAlpha = 5,
};

pub const MTLArgumentType = enum(c_ulong) {
  MTLArgumentTypeBuffer = 0,
  MTLArgumentTypeThreadgroupMemory = 1,
  MTLArgumentTypeTexture = 2,
  MTLArgumentTypeSampler = 3,
  MTLArgumentTypeImageblockData = 16,
  MTLArgumentTypeImageblock = 17,
  MTLArgumentTypeVisibleFunctionTable = 24,
  MTLArgumentTypePrimitiveAccelerationStructure = 25,
  MTLArgumentTypeInstanceAccelerationStructure = 26,
  MTLArgumentTypeIntersectionFunctionTable = 27,
};

pub const NSCalendarOptions = enum(c_ulong) {
  NSCalendarWrapComponents = 1,
  NSCalendarMatchStrictly = 2,
  NSCalendarSearchBackwards = 4,
  NSCalendarMatchPreviousTimePreservingSmallerUnits = 256,
  NSCalendarMatchNextTimePreservingSmallerUnits = 512,
  NSCalendarMatchNextTime = 1024,
  NSCalendarMatchFirst = 4096,
  NSCalendarMatchLast = 8192,
};

pub const NSURLHandleStatus = enum(c_ulong) {
  NSURLHandleNotLoaded = 0,
  NSURLHandleLoadSucceeded = 1,
  NSURLHandleLoadInProgress = 2,
  NSURLHandleLoadFailed = 3,
};

pub const NSPropertyListFormat = enum(c_ulong) {
  NSPropertyListOpenStepFormat = 1,
  NSPropertyListXMLFormat_v1_0 = 100,
  NSPropertyListBinaryFormat_v1_0 = 200,
};

pub const NSNumberFormatterStyle = enum(c_ulong) {
  NSNumberFormatterNoStyle = 0,
  NSNumberFormatterDecimalStyle = 1,
  NSNumberFormatterCurrencyStyle = 2,
  NSNumberFormatterPercentStyle = 3,
  NSNumberFormatterScientificStyle = 4,
  NSNumberFormatterSpellOutStyle = 5,
  NSNumberFormatterOrdinalStyle = 6,
  NSNumberFormatterCurrencyISOCodeStyle = 8,
  NSNumberFormatterCurrencyPluralStyle = 9,
  NSNumberFormatterCurrencyAccountingStyle = 10,
};

pub const NSFileVersionReplacingOptions = enum(c_ulong) {
  NSFileVersionReplacingByMoving = 1,
};

pub const MTLIOCompressionMethod = enum(c_long) {
  MTLIOCompressionMethodZlib = 0,
  MTLIOCompressionMethodLZFSE = 1,
  MTLIOCompressionMethodLZ4 = 2,
  MTLIOCompressionMethodLZMA = 3,
  MTLIOCompressionMethodLZBitmap = 4,
};

pub const MTLMutability = enum(c_ulong) {
  MTLMutabilityDefault = 0,
  MTLMutabilityMutable = 1,
  MTLMutabilityImmutable = 2,
};

pub const MTLCurveType = enum(c_long) {
  MTLCurveTypeRound = 0,
  MTLCurveTypeFlat = 1,
};

pub const MTLTessellationFactorStepFunction = enum(c_ulong) {
  MTLTessellationFactorStepFunctionConstant = 0,
  MTLTessellationFactorStepFunctionPerPatch = 1,
  MTLTessellationFactorStepFunctionPerInstance = 2,
  MTLTessellationFactorStepFunctionPerPatchAndPerInstance = 3,
};

pub const NSOrderedCollectionDifferenceCalculationOptions = enum(c_ulong) {
  NSOrderedCollectionDifferenceCalculationOmitInsertedObjects = 1,
  NSOrderedCollectionDifferenceCalculationOmitRemovedObjects = 2,
  NSOrderedCollectionDifferenceCalculationInferMoves = 4,
};

pub const NSXPCConnectionOptions = enum(c_ulong) {
  NSXPCConnectionPrivileged = 4096,
};

pub const MTLCurveBasis = enum(c_long) {
  MTLCurveBasisBSpline = 0,
  MTLCurveBasisCatmullRom = 1,
  MTLCurveBasisLinear = 2,
  MTLCurveBasisBezier = 3,
};

pub const NSDateIntervalFormatterStyle = enum(c_ulong) {
  NSDateIntervalFormatterNoStyle = 0,
  NSDateIntervalFormatterShortStyle = 1,
  NSDateIntervalFormatterMediumStyle = 2,
  NSDateIntervalFormatterLongStyle = 3,
  NSDateIntervalFormatterFullStyle = 4,
};

pub const NSSearchPathDomainMask = enum(c_ulong) {
  NSUserDomainMask = 1,
  NSLocalDomainMask = 2,
  NSNetworkDomainMask = 4,
  NSSystemDomainMask = 8,
  NSAllDomainsMask = 65535,
};

pub const NSAttributedStringFormattingOptions = enum(c_ulong) {
  NSAttributedStringFormattingInsertArgumentAttributesWithoutMerging = 1,
  NSAttributedStringFormattingApplyReplacementIndexAttribute = 2,
};

pub const MTLPrimitiveTopologyClass = enum(c_ulong) {
  MTLPrimitiveTopologyClassUnspecified = 0,
  MTLPrimitiveTopologyClassPoint = 1,
  MTLPrimitiveTopologyClassLine = 2,
  MTLPrimitiveTopologyClassTriangle = 3,
};

pub const NSGrammaticalDefiniteness = enum(c_long) {
  NSGrammaticalDefinitenessNotSet = 0,
  NSGrammaticalDefinitenessIndefinite = 1,
  NSGrammaticalDefinitenessDefinite = 2,
};

pub const MTLAccelerationStructureInstanceDescriptorType = enum(c_ulong) {
  MTLAccelerationStructureInstanceDescriptorTypeDefault = 0,
  MTLAccelerationStructureInstanceDescriptorTypeUserID = 1,
  MTLAccelerationStructureInstanceDescriptorTypeMotion = 2,
  MTLAccelerationStructureInstanceDescriptorTypeIndirect = 3,
  MTLAccelerationStructureInstanceDescriptorTypeIndirectMotion = 4,
};

pub const MTLIOCommandQueueType = enum(c_long) {
  MTLIOCommandQueueTypeConcurrent = 0,
  MTLIOCommandQueueTypeSerial = 1,
};

pub const NSURLBookmarkResolutionOptions = enum(c_ulong) {
  NSURLBookmarkResolutionWithoutUI = 256,
  NSURLBookmarkResolutionWithoutMounting = 512,
  NSURLBookmarkResolutionWithSecurityScope = 1024,
  NSURLBookmarkResolutionWithoutImplicitStartAccessing = 32768,
};

pub const NSNumberFormatterRoundingMode = enum(c_ulong) {
  NSNumberFormatterRoundCeiling = 0,
  NSNumberFormatterRoundFloor = 1,
  NSNumberFormatterRoundDown = 2,
  NSNumberFormatterRoundUp = 3,
  NSNumberFormatterRoundHalfEven = 4,
  NSNumberFormatterRoundHalfDown = 5,
  NSNumberFormatterRoundHalfUp = 6,
};

pub const MTLPrimitiveType = enum(c_ulong) {
  MTLPrimitiveTypePoint = 0,
  MTLPrimitiveTypeLine = 1,
  MTLPrimitiveTypeLineStrip = 2,
  MTLPrimitiveTypeTriangle = 3,
  MTLPrimitiveTypeTriangleStrip = 4,
};

pub const NSDateFormatterStyle = enum(c_ulong) {
  NSDateFormatterNoStyle = 0,
  NSDateFormatterShortStyle = 1,
  NSDateFormatterMediumStyle = 2,
  NSDateFormatterLongStyle = 3,
  NSDateFormatterFullStyle = 4,
};

pub const NSVolumeEnumerationOptions = enum(c_ulong) {
  NSVolumeEnumerationSkipHiddenVolumes = 2,
  NSVolumeEnumerationProduceFileReferenceURLs = 4,
};

pub const MTLCaptureDestination = enum(c_long) {
  MTLCaptureDestinationDeveloperTools = 1,
  MTLCaptureDestinationGPUTraceDocument = 2,
};

pub const NSBinarySearchingOptions = enum(c_ulong) {
  NSBinarySearchingFirstEqual = 256,
  NSBinarySearchingLastEqual = 512,
  NSBinarySearchingInsertionIndex = 1024,
};

pub const NSTestComparisonOperation = enum(c_ulong) {
  NSEqualToComparison = 0,
  NSLessThanOrEqualToComparison = 1,
  NSLessThanComparison = 2,
  NSGreaterThanOrEqualToComparison = 3,
  NSGreaterThanComparison = 4,
  NSBeginsWithComparison = 5,
  NSEndsWithComparison = 6,
  NSContainsComparison = 7,
};

pub const MTLCompileSymbolVisibility = enum(c_long) {
  MTLCompileSymbolVisibilityDefault = 0,
  MTLCompileSymbolVisibilityHidden = 1,
};

pub const NSURLSessionAuthChallengeDisposition = enum(c_long) {
  NSURLSessionAuthChallengeUseCredential = 0,
  NSURLSessionAuthChallengePerformDefaultHandling = 1,
  NSURLSessionAuthChallengeCancelAuthenticationChallenge = 2,
  NSURLSessionAuthChallengeRejectProtectionSpace = 3,
};

pub const MTLSparseTextureRegionAlignmentMode = enum(c_ulong) {
  MTLSparseTextureRegionAlignmentModeOutward = 0,
  MTLSparseTextureRegionAlignmentModeInward = 1,
};

pub const MTLFunctionOptions = enum(c_ulong) {
  MTLFunctionOptionNone = 0,
  MTLFunctionOptionCompileToBinary = 1,
  MTLFunctionOptionStoreFunctionInMetalScript = 2,
};

pub const NSOperationQueuePriority = enum(c_long) {
  NSOperationQueuePriorityVeryLow = -8,
  NSOperationQueuePriorityLow = -4,
  NSOperationQueuePriorityNormal = 0,
  NSOperationQueuePriorityHigh = 4,
  NSOperationQueuePriorityVeryHigh = 8,
};

pub const MTLSparseTextureMappingMode = enum(c_ulong) {
  MTLSparseTextureMappingModeMap = 0,
  MTLSparseTextureMappingModeUnmap = 1,
};

pub const MTLStorageMode = enum(c_ulong) {
  MTLStorageModeShared = 0,
  MTLStorageModeManaged = 1,
  MTLStorageModePrivate = 2,
  MTLStorageModeMemoryless = 3,
};

pub const NSURLSessionTaskMetricsDomainResolutionProtocol = enum(c_long) {
  NSURLSessionTaskMetricsDomainResolutionProtocolUnknown = 0,
  NSURLSessionTaskMetricsDomainResolutionProtocolUDP = 1,
  NSURLSessionTaskMetricsDomainResolutionProtocolTCP = 2,
  NSURLSessionTaskMetricsDomainResolutionProtocolTLS = 3,
  NSURLSessionTaskMetricsDomainResolutionProtocolHTTPS = 4,
};

pub const MTLAccelerationStructureUsage = enum(c_ulong) {
  MTLAccelerationStructureUsageNone = 0,
  MTLAccelerationStructureUsageRefit = 1,
  MTLAccelerationStructureUsagePreferFastBuild = 2,
  MTLAccelerationStructureUsageExtendedLimits = 4,
};

pub const NSFormattingContext = enum(c_long) {
  NSFormattingContextUnknown = 0,
  NSFormattingContextDynamic = 1,
  NSFormattingContextStandalone = 2,
  NSFormattingContextListItem = 3,
  NSFormattingContextBeginningOfSentence = 4,
  NSFormattingContextMiddleOfSentence = 5,
};

pub const MTLIndexType = enum(c_ulong) {
  MTLIndexTypeUInt16 = 0,
  MTLIndexTypeUInt32 = 1,
};

pub const MTLCPUCacheMode = enum(c_ulong) {
  MTLCPUCacheModeDefaultCache = 0,
  MTLCPUCacheModeWriteCombined = 1,
};

pub const MTLVisibilityResultMode = enum(c_ulong) {
  MTLVisibilityResultModeDisabled = 0,
  MTLVisibilityResultModeBoolean = 1,
  MTLVisibilityResultModeCounting = 2,
};

pub const NSNotificationSuspensionBehavior = enum(c_ulong) {
  NSNotificationSuspensionBehaviorDrop = 1,
  NSNotificationSuspensionBehaviorCoalesce = 2,
  NSNotificationSuspensionBehaviorHold = 3,
  NSNotificationSuspensionBehaviorDeliverImmediately = 4,
};

pub const MTLPatchType = enum(c_ulong) {
  MTLPatchTypeNone = 0,
  MTLPatchTypeTriangle = 1,
  MTLPatchTypeQuad = 2,
};

pub const MTLStoreAction = enum(c_ulong) {
  MTLStoreActionDontCare = 0,
  MTLStoreActionStore = 1,
  MTLStoreActionMultisampleResolve = 2,
  MTLStoreActionStoreAndMultisampleResolve = 3,
  MTLStoreActionUnknown = 4,
  MTLStoreActionCustomSampleDepthStore = 5,
};

pub const NSRelativeDateTimeFormatterUnitsStyle = enum(c_long) {
  NSRelativeDateTimeFormatterUnitsStyleFull = 0,
  NSRelativeDateTimeFormatterUnitsStyleSpellOut = 1,
  NSRelativeDateTimeFormatterUnitsStyleShort = 2,
  NSRelativeDateTimeFormatterUnitsStyleAbbreviated = 3,
};

pub const NSProcessInfoThermalState = enum(c_long) {
  NSProcessInfoThermalStateNominal = 0,
  NSProcessInfoThermalStateFair = 1,
  NSProcessInfoThermalStateSerious = 2,
  NSProcessInfoThermalStateCritical = 3,
};

pub const NSFormattingUnitStyle = enum(c_long) {
  NSFormattingUnitStyleShort = 1,
  NSFormattingUnitStyleMedium = 2,
  NSFormattingUnitStyleLong = 3,
};

pub const NSXMLNodeOptions = enum(c_ulong) {
  NSXMLNodeOptionsNone = 0,
  NSXMLNodeIsCDATA = 1,
  NSXMLNodeExpandEmptyElement = 2,
  NSXMLNodeCompactEmptyElement = 4,
  NSXMLNodeUseSingleQuotes = 8,
  NSXMLNodeUseDoubleQuotes = 16,
  NSXMLNodeNeverEscapeContents = 32,
  NSXMLDocumentTidyHTML = 512,
  NSXMLDocumentTidyXML = 1024,
  NSXMLDocumentValidate = 8192,
  NSXMLNodeLoadExternalEntitiesAlways = 16384,
  NSXMLNodeLoadExternalEntitiesSameOriginOnly = 32768,
  NSXMLNodeLoadExternalEntitiesNever = 524288,
  NSXMLDocumentXInclude = 65536,
  NSXMLNodePrettyPrint = 131072,
  NSXMLDocumentIncludeContentTypeDeclaration = 262144,
  NSXMLNodePreserveNamespaceOrder = 1048576,
  NSXMLNodePreserveAttributeOrder = 2097152,
  NSXMLNodePreserveEntities = 4194304,
  NSXMLNodePreservePrefixes = 8388608,
  NSXMLNodePreserveCDATA = 16777216,
  NSXMLNodePreserveWhitespace = 33554432,
  NSXMLNodePreserveDTD = 67108864,
  NSXMLNodePreserveCharacterReferences = 134217728,
  NSXMLNodePromoteSignificantWhitespace = 268435456,
  NSXMLNodePreserveEmptyElements = 6,
  NSXMLNodePreserveQuotes = 24,
  NSXMLNodePreserveAll = 4293918750,
};

pub const MTLIndirectCommandType = enum(c_ulong) {
  MTLIndirectCommandTypeDraw = 1,
  MTLIndirectCommandTypeDrawIndexed = 2,
  MTLIndirectCommandTypeDrawPatches = 4,
  MTLIndirectCommandTypeDrawIndexedPatches = 8,
  MTLIndirectCommandTypeConcurrentDispatch = 32,
  MTLIndirectCommandTypeConcurrentDispatchThreads = 64,
};

pub const NSStringCompareOptions = enum(c_ulong) {
  NSCaseInsensitiveSearch = 1,
  NSLiteralSearch = 2,
  NSBackwardsSearch = 4,
  NSAnchoredSearch = 8,
  NSNumericSearch = 64,
  NSDiacriticInsensitiveSearch = 128,
  NSWidthInsensitiveSearch = 256,
  NSForcedOrderingSearch = 512,
  NSRegularExpressionSearch = 1024,
};

pub const NSEnergyFormatterUnit = enum(c_long) {
  NSEnergyFormatterUnitJoule = 11,
  NSEnergyFormatterUnitKilojoule = 14,
  NSEnergyFormatterUnitCalorie = 1793,
  NSEnergyFormatterUnitKilocalorie = 1794,
};

pub const NSStringEncodingConversionOptions = enum(c_ulong) {
  NSStringEncodingConversionAllowLossy = 1,
  NSStringEncodingConversionExternalRepresentation = 2,
};

pub const NSByteCountFormatterCountStyle = enum(c_long) {
  NSByteCountFormatterCountStyleFile = 0,
  NSByteCountFormatterCountStyleMemory = 1,
  NSByteCountFormatterCountStyleDecimal = 2,
  NSByteCountFormatterCountStyleBinary = 3,
};

pub const NSNumberFormatterPadPosition = enum(c_ulong) {
  NSNumberFormatterPadBeforePrefix = 0,
  NSNumberFormatterPadAfterPrefix = 1,
  NSNumberFormatterPadBeforeSuffix = 2,
  NSNumberFormatterPadAfterSuffix = 3,
};

pub const NSXMLNodeKind = enum(c_ulong) {
  NSXMLInvalidKind = 0,
  NSXMLDocumentKind = 1,
  NSXMLElementKind = 2,
  NSXMLAttributeKind = 3,
  NSXMLNamespaceKind = 4,
  NSXMLProcessingInstructionKind = 5,
  NSXMLCommentKind = 6,
  NSXMLTextKind = 7,
  NSXMLDTDKind = 8,
  NSXMLEntityDeclarationKind = 9,
  NSXMLAttributeDeclarationKind = 10,
  NSXMLElementDeclarationKind = 11,
  NSXMLNotationDeclarationKind = 12,
};

pub const NSExpressionType = enum(c_ulong) {
  NSConstantValueExpressionType = 0,
  NSEvaluatedObjectExpressionType = 1,
  NSVariableExpressionType = 2,
  NSKeyPathExpressionType = 3,
  NSFunctionExpressionType = 4,
  NSUnionSetExpressionType = 5,
  NSIntersectSetExpressionType = 6,
  NSMinusSetExpressionType = 7,
  NSSubqueryExpressionType = 13,
  NSAggregateExpressionType = 14,
  NSAnyKeyExpressionType = 15,
  NSBlockExpressionType = 19,
  NSConditionalExpressionType = 20,
};

pub const NSXMLParserExternalEntityResolvingPolicy = enum(c_ulong) {
  NSXMLParserResolveExternalEntitiesNever = 0,
  NSXMLParserResolveExternalEntitiesNoNetwork = 1,
  NSXMLParserResolveExternalEntitiesSameOriginOnly = 2,
  NSXMLParserResolveExternalEntitiesAlways = 3,
};

pub const NSPointerFunctionsOptions = enum(c_ulong) {
  NSPointerFunctionsStrongMemory = 0,
  NSPointerFunctionsZeroingWeakMemory = 1,
  NSPointerFunctionsOpaqueMemory = 2,
  NSPointerFunctionsMallocMemory = 3,
  NSPointerFunctionsMachVirtualMemory = 4,
  NSPointerFunctionsWeakMemory = 5,
  NSPointerFunctionsObjectPersonality = 0,
  NSPointerFunctionsOpaquePersonality = 256,
  NSPointerFunctionsObjectPointerPersonality = 512,
  NSPointerFunctionsCStringPersonality = 768,
  NSPointerFunctionsStructPersonality = 1024,
  NSPointerFunctionsIntegerPersonality = 1280,
  NSPointerFunctionsCopyIn = 65536,
};

pub const NSDateComponentsFormatterZeroFormattingBehavior = enum(c_ulong) {
  NSDateComponentsFormatterZeroFormattingBehaviorNone = 0,
  NSDateComponentsFormatterZeroFormattingBehaviorDefault = 1,
  NSDateComponentsFormatterZeroFormattingBehaviorDropLeading = 2,
  NSDateComponentsFormatterZeroFormattingBehaviorDropMiddle = 4,
  NSDateComponentsFormatterZeroFormattingBehaviorDropTrailing = 8,
  NSDateComponentsFormatterZeroFormattingBehaviorDropAll = 14,
  NSDateComponentsFormatterZeroFormattingBehaviorPad = 65536,
};

pub const NSFileCoordinatorWritingOptions = enum(c_ulong) {
  NSFileCoordinatorWritingForDeleting = 1,
  NSFileCoordinatorWritingForMoving = 2,
  NSFileCoordinatorWritingForMerging = 4,
  NSFileCoordinatorWritingForReplacing = 8,
  NSFileCoordinatorWritingContentIndependentMetadataOnly = 16,
};

pub const MTLCommandEncoderErrorState = enum(c_long) {
  MTLCommandEncoderErrorStateUnknown = 0,
  MTLCommandEncoderErrorStateCompleted = 1,
  MTLCommandEncoderErrorStateAffected = 2,
  MTLCommandEncoderErrorStatePending = 3,
  MTLCommandEncoderErrorStateFaulted = 4,
};

pub const MTLCommandBufferStatus = enum(c_ulong) {
  MTLCommandBufferStatusNotEnqueued = 0,
  MTLCommandBufferStatusEnqueued = 1,
  MTLCommandBufferStatusCommitted = 2,
  MTLCommandBufferStatusScheduled = 3,
  MTLCommandBufferStatusCompleted = 4,
  MTLCommandBufferStatusError = 5,
};

pub const NSBackgroundActivityResult = enum(c_long) {
  NSBackgroundActivityResultFinished = 1,
  NSBackgroundActivityResultDeferred = 2,
};

pub const MTLBlendFactor = enum(c_ulong) {
  MTLBlendFactorZero = 0,
  MTLBlendFactorOne = 1,
  MTLBlendFactorSourceColor = 2,
  MTLBlendFactorOneMinusSourceColor = 3,
  MTLBlendFactorSourceAlpha = 4,
  MTLBlendFactorOneMinusSourceAlpha = 5,
  MTLBlendFactorDestinationColor = 6,
  MTLBlendFactorOneMinusDestinationColor = 7,
  MTLBlendFactorDestinationAlpha = 8,
  MTLBlendFactorOneMinusDestinationAlpha = 9,
  MTLBlendFactorSourceAlphaSaturated = 10,
  MTLBlendFactorBlendColor = 11,
  MTLBlendFactorOneMinusBlendColor = 12,
  MTLBlendFactorBlendAlpha = 13,
  MTLBlendFactorOneMinusBlendAlpha = 14,
  MTLBlendFactorSource1Color = 15,
  MTLBlendFactorOneMinusSource1Color = 16,
  MTLBlendFactorSource1Alpha = 17,
  MTLBlendFactorOneMinusSource1Alpha = 18,
};

pub const NSGrammaticalPartOfSpeech = enum(c_long) {
  NSGrammaticalPartOfSpeechNotSet = 0,
  NSGrammaticalPartOfSpeechDeterminer = 1,
  NSGrammaticalPartOfSpeechPronoun = 2,
  NSGrammaticalPartOfSpeechLetter = 3,
  NSGrammaticalPartOfSpeechAdverb = 4,
  NSGrammaticalPartOfSpeechParticle = 5,
  NSGrammaticalPartOfSpeechAdjective = 6,
  NSGrammaticalPartOfSpeechAdposition = 7,
  NSGrammaticalPartOfSpeechVerb = 8,
  NSGrammaticalPartOfSpeechNoun = 9,
  NSGrammaticalPartOfSpeechConjunction = 10,
  NSGrammaticalPartOfSpeechNumeral = 11,
  NSGrammaticalPartOfSpeechInterjection = 12,
  NSGrammaticalPartOfSpeechPreposition = 13,
  NSGrammaticalPartOfSpeechAbbreviation = 14,
};

pub const NSDirectoryEnumerationOptions = enum(c_ulong) {
  NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1,
  NSDirectoryEnumerationSkipsPackageDescendants = 2,
  NSDirectoryEnumerationSkipsHiddenFiles = 4,
  NSDirectoryEnumerationIncludesDirectoriesPostOrder = 8,
  NSDirectoryEnumerationProducesRelativePathURLs = 16,
};

pub const MTLMotionBorderMode = enum(c_uint) {
  MTLMotionBorderModeClamp = 0,
  MTLMotionBorderModeVanish = 1,
};

pub const NSMeasurementFormatterUnitOptions = enum(c_ulong) {
  NSMeasurementFormatterUnitOptionsProvidedUnit = 1,
  NSMeasurementFormatterUnitOptionsNaturalScale = 2,
  NSMeasurementFormatterUnitOptionsTemperatureWithoutUnit = 4,
};

pub const MTLBlitOption = enum(c_ulong) {
  MTLBlitOptionNone = 0,
  MTLBlitOptionDepthFromDepthStencil = 1,
  MTLBlitOptionStencilFromDepthStencil = 2,
  MTLBlitOptionRowLinearPVRTC = 4,
};

pub const NSLinguisticTaggerUnit = enum(c_long) {
  NSLinguisticTaggerUnitWord = 0,
  NSLinguisticTaggerUnitSentence = 1,
  NSLinguisticTaggerUnitParagraph = 2,
  NSLinguisticTaggerUnitDocument = 3,
};

pub const MTLWinding = enum(c_ulong) {
  MTLWindingClockwise = 0,
  MTLWindingCounterClockwise = 1,
};

pub const MTLCullMode = enum(c_ulong) {
  MTLCullModeNone = 0,
  MTLCullModeFront = 1,
  MTLCullModeBack = 2,
};

pub const MTLFunctionType = enum(c_ulong) {
  MTLFunctionTypeVertex = 1,
  MTLFunctionTypeFragment = 2,
  MTLFunctionTypeKernel = 3,
  MTLFunctionTypeVisible = 5,
  MTLFunctionTypeIntersection = 6,
  MTLFunctionTypeMesh = 7,
  MTLFunctionTypeObject = 8,
};

pub const NSFileManagerUnmountOptions = enum(c_ulong) {
  NSFileManagerUnmountAllPartitionsAndEjectDisk = 1,
  NSFileManagerUnmountWithoutUI = 2,
};

pub const MTLSamplerMinMagFilter = enum(c_ulong) {
  MTLSamplerMinMagFilterNearest = 0,
  MTLSamplerMinMagFilterLinear = 1,
};

pub const MTLResourceOptions = enum(c_ulong) {
  MTLResourceCPUCacheModeDefaultCache = 0,
  MTLResourceCPUCacheModeWriteCombined = 1,
  MTLResourceStorageModeShared = 0,
  MTLResourceStorageModeManaged = 16,
  MTLResourceStorageModePrivate = 32,
  MTLResourceStorageModeMemoryless = 48,
  MTLResourceHazardTrackingModeDefault = 0,
  MTLResourceHazardTrackingModeUntracked = 256,
  MTLResourceHazardTrackingModeTracked = 512,
  MTLResourceOptionCPUCacheModeDefault = 0,
  MTLResourceOptionCPUCacheModeWriteCombined = 1,
};

pub const NSURLCacheStoragePolicy = enum(c_ulong) {
  NSURLCacheStorageAllowed = 0,
  NSURLCacheStorageAllowedInMemoryOnly = 1,
  NSURLCacheStorageNotAllowed = 2,
};

pub const MTLMultisampleStencilResolveFilter = enum(c_ulong) {
  MTLMultisampleStencilResolveFilterSample0 = 0,
  MTLMultisampleStencilResolveFilterDepthResolvedSample = 1,
};

pub const NSDecimal = extern struct {
      _exponent: c_int,
      _length: c_uint,
      _isNegative: c_uint,
      _isCompact: c_uint,
      _reserved: c_uint,
      _mantissa: [8]c_ushort,
};

pub const __CFRunLoop = opaque {};

pub const _NSZone = opaque {};

pub const MTLIndirectCommandBufferExecutionRange = extern struct {
      location: c_uint,
      length: c_uint,
};

pub const MTLClearColor = extern struct {
      red: f64,
      green: f64,
      blue: f64,
      alpha: f64,
};

pub const __SecTrust = extern struct {
};

pub const MTLVertexAmplificationViewMapping = extern struct {
      viewportArrayIndexOffset: c_uint,
      renderTargetArrayIndexOffset: c_uint,
};

pub const MTLTextureSwizzleChannels = extern struct {
      red: MTLTextureSwizzle,
      green: MTLTextureSwizzle,
      blue: MTLTextureSwizzle,
      alpha: MTLTextureSwizzle,
};

pub const NSOperatingSystemVersion = extern struct {
      majorVersion: c_long,
      minorVersion: c_long,
      patchVersion: c_long,
};

pub const NSEdgeInsets = extern struct {
      top: f64,
      left: f64,
      bottom: f64,
      right: f64,
};

pub const _NSRange = extern struct {
      location: c_ulong,
      length: c_ulong,
};

pub const __SecIdentity = extern struct {
};

pub const MTLRegion = extern struct {
      origin: MTLOrigin,
      size: MTLSize,
};

pub const __IOSurface = opaque {};

pub const NSFastEnumerationState = extern struct {
      state: c_ulong,
      itemsPtr:  ?* id,
      mutationsPtr:  [*c] c_ulong,
      extra: [5]c_ulong,
};

pub const _MTLPackedFloat3 = opaque {};

pub const MTLViewport = extern struct {
      originX: f64,
      originY: f64,
      width: f64,
      height: f64,
      znear: f64,
      zfar: f64,
};

pub const OpaqueAEDataStorageType = opaque {};

pub const CGPoint = extern struct {
      x: f64,
      y: f64,
};

pub const __NSAppleEventManagerSuspension = opaque {};

pub const CGSize = extern struct {
      width: f64,
      height: f64,
};

pub const _xpc_type_s = opaque {};

pub const MTLSizeAndAlign = extern struct {
      size: c_ulong,
      alignment: c_ulong,
};

pub const MTLScissorRect = extern struct {
      x: c_ulong,
      y: c_ulong,
      width: c_ulong,
      height: c_ulong,
};

pub const NSAffineTransformStruct = extern struct {
      m11: f64,
      m12: f64,
      m21: f64,
      m22: f64,
      tX: f64,
      tY: f64,
};

pub const MTLSamplePosition = extern struct {
      x: f32,
      y: f32,
};

pub const MTLAccelerationStructureSizes = extern struct {
      accelerationStructureSize: c_ulong,
      buildScratchBufferSize: c_ulong,
      refitScratchBufferSize: c_ulong,
};

pub const AEDesc = extern struct {
      descriptorType: c_uint,
      dataHandle:  [*c]  [*c] OpaqueAEDataStorageType,
};

pub const MTLOrigin = extern struct {
      x: c_ulong,
      y: c_ulong,
      z: c_ulong,
};

pub const MTLSize = extern struct {
      width: c_ulong,
      height: c_ulong,
      depth: c_ulong,
};

pub const MTLResourceID = extern struct {
      _impl: c_ulonglong,
};

pub const CGRect = extern struct {
      origin: CGPoint,
      size: CGSize,
};

pub extern fn MTLCoordinate2DMake( x: f32, y: f32, ) MTLSamplePosition;

pub extern fn MTLTextureSwizzleChannelsMake( r: MTLTextureSwizzle, g: MTLTextureSwizzle, b: MTLTextureSwizzle, a: MTLTextureSwizzle, ) MTLTextureSwizzleChannels;

pub extern fn MTLCopyAllDevicesWithObserver( observer:  [*c]  ?* NSObject, handler: ?*u8, )  * NSArray;

pub extern fn MTLRegionMake1D( x: c_ulong, width: c_ulong, ) MTLRegion;

pub extern fn MTLIndirectCommandBufferExecutionRangeMake( location: c_uint, length: c_uint, ) MTLIndirectCommandBufferExecutionRange;

pub extern fn MTLSizeMake( width: c_ulong, height: c_ulong, depth: c_ulong, ) MTLSize;

pub extern fn MTLRegionMake3D( x: c_ulong, y: c_ulong, z: c_ulong, width: c_ulong, height: c_ulong, depth: c_ulong, ) MTLRegion;

pub extern fn MTLSamplePositionMake( x: f32, y: f32, ) MTLSamplePosition;

pub extern fn MTLIOFlushAndDestroyCompressionContext( context:  [*c] void, ) MTLIOCompressionStatus;

pub extern fn MTLOriginMake( x: c_ulong, y: c_ulong, z: c_ulong, ) MTLOrigin;

pub extern fn MTLPackedFloat3Make( x: f32, y: f32, z: f32, ) _MTLPackedFloat3;

pub extern fn MTLCreateSystemDefaultDevice( )  ?* MTLDevice;

pub extern fn MTLCopyAllDevices( )  * NSArray;

pub extern fn MTLRegionMake2D( x: c_ulong, y: c_ulong, width: c_ulong, height: c_ulong, ) MTLRegion;

pub extern fn MTLRemoveDeviceObserver( observer:  * NSObject, ) void;

pub extern fn MTLIOCompressionContextDefaultChunkSize( ) c_ulong;

pub extern fn MTLIOCompressionContextAppendData( context:  [*c] void, data:  [*c]  const void, size: c_ulong, ) void;

pub extern fn MTLIOCreateCompressionContext( path:  [*c]  const u8, a_type: MTLIOCompressionMethod, chunkSize: c_ulong, )  [*c] void;

