PROTOCOLS:
   Protocol: 'NSURLSessionWebSocketDelegate'
       CONFORMING: NSURLSessionTaskDelegate
- URLSession:webSocketTask:didOpenWithProtocol:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(webSocketTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionWebSocketTask]])(protocol: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- URLSession:webSocketTask:didCloseWithCode:reason:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(webSocketTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionWebSocketTask]])(closeCode: [[ ENUMERATION enum NSURLSessionWebSocketCloseCode]])(reason: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]])
   Protocol: 'NSItemProviderWriting'
       CONFORMING: NSObject
+ itemProviderVisibilityForRepresentationWithTypeIdentifier:[[ ENUMERATION enum NSItemProviderRepresentationVisibility]](typeIdentifier: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- loadDataWithTypeIdentifier:forItemProviderCompletionHandler:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSProgress]](typeIdentifier: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(completionHandler: [[ BLOCK_POINTER ]])
+ writableTypeIdentifiersForItemProvider[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Protocol: 'NSURLConnectionDownloadDelegate'
       CONFORMING: NSURLConnectionDelegate
- connection:didWriteData:totalBytesWritten:expectedTotalBytes:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(bytesWritten: [[ longlong  ]])(totalBytesWritten: [[ longlong  ]])(expectedTotalBytes: [[ longlong  ]])
- connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(totalBytesWritten: [[ longlong  ]])(expectedTotalBytes: [[ longlong  ]])
- connectionDidFinishDownloading:destinationURL:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(destinationURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
   Protocol: 'NSXPCProxyCreating'
- remoteObjectProxy[[ ID ]]
- remoteObjectProxyWithErrorHandler:[[ ID ]](handler: [[ BLOCK_POINTER ]])
- synchronousRemoteObjectProxyWithErrorHandler:[[ ID ]](handler: [[ BLOCK_POINTER ]])
   Protocol: 'MTLFence'
       CONFORMING: NSObject
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
   Protocol: 'MTLSamplerState'
       CONFORMING: NSObject
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- gpuResourceID[[ RECORD MTLResourceID]]
   Protocol: 'MTLDrawable'
       CONFORMING: NSObject
- present[[ void  ]]
- presentAtTime:[[ void  ]](presentationTime: [[ double  ]])
- presentAfterMinimumDuration:[[ void  ]](duration: [[ double  ]])
- addPresentedHandler:[[ void  ]](block: [[ BLOCK_POINTER ]])
- presentedTime[[ double  ]]
- drawableID[[ ulong  ]]
   Protocol: 'MTLIndirectRenderCommand'
       CONFORMING: NSObject
- setRenderPipelineState:[[ void  ]](pipelineState: [[ POINTER  (nonnull) ]] -> [[ ID<MTLRenderPipelineState>]])
- setVertexBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setFragmentBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setVertexBuffer:offset:attributeStride:atIndex:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(stride: [[ ulong  ]])(index: [[ ulong  ]])
- drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:[[ void  ]](numberOfPatchControlPoints: [[ ulong  ]])(patchStart: [[ ulong  ]])(patchCount: [[ ulong  ]])(patchIndexBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(patchIndexBufferOffset: [[ ulong  ]])(instanceCount: [[ ulong  ]])(baseInstance: [[ ulong  ]])(buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(instanceStride: [[ ulong  ]])
- drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:[[ void  ]](numberOfPatchControlPoints: [[ ulong  ]])(patchStart: [[ ulong  ]])(patchCount: [[ ulong  ]])(patchIndexBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(patchIndexBufferOffset: [[ ulong  ]])(controlPointIndexBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(controlPointIndexBufferOffset: [[ ulong  ]])(instanceCount: [[ ulong  ]])(baseInstance: [[ ulong  ]])(buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(instanceStride: [[ ulong  ]])
- drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(vertexStart: [[ ulong  ]])(vertexCount: [[ ulong  ]])(instanceCount: [[ ulong  ]])(baseInstance: [[ ulong  ]])
- drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(indexCount: [[ ulong  ]])(indexType: [[ ENUMERATION enum MTLIndexType]])(indexBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indexBufferOffset: [[ ulong  ]])(instanceCount: [[ ulong  ]])(baseVertex: [[ long  ]])(baseInstance: [[ ulong  ]])
- setObjectThreadgroupMemoryLength:atIndex:[[ void  ]](length: [[ ulong  ]])(index: [[ ulong  ]])
- setObjectBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setMeshBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:[[ void  ]](threadgroupsPerGrid: [[ RECORD MTLSize]])(threadsPerObjectThreadgroup: [[ RECORD MTLSize]])(threadsPerMeshThreadgroup: [[ RECORD MTLSize]])
- drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:[[ void  ]](threadsPerGrid: [[ RECORD MTLSize]])(threadsPerObjectThreadgroup: [[ RECORD MTLSize]])(threadsPerMeshThreadgroup: [[ RECORD MTLSize]])
- setBarrier[[ void  ]]
- clearBarrier[[ void  ]]
- reset[[ void  ]]
   Protocol: 'MTLRenderPipelineState'
       CONFORMING: NSObject
- imageblockMemoryLengthForDimensions:[[ ulong  ]](imageblockDimensions: [[ RECORD MTLSize]])
- functionHandleWithFunction:stage:[[ POINTER  (nullable) ]] -> [[ ID<MTLFunctionHandle>]](function: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFunction>]])(stage: [[ ENUMERATION enum MTLRenderStages]])
- newVisibleFunctionTableWithDescriptor:stage:[[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLVisibleFunctionTableDescriptor]])(stage: [[ ENUMERATION enum MTLRenderStages]])
- newIntersectionFunctionTableWithDescriptor:stage:[[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLIntersectionFunctionTableDescriptor]])(stage: [[ ENUMERATION enum MTLRenderStages]])
- newRenderPipelineStateWithAdditionalBinaryFunctions:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLRenderPipelineState>]](additionalBinaryFunctions: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPipelineFunctionsDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- maxTotalThreadsPerThreadgroup[[ ulong  ]]
- threadgroupSizeMatchesTileSize[[ int  ]]
- imageblockSampleLength[[ ulong  ]]
- supportIndirectCommandBuffers[[ int  ]]
- maxTotalThreadsPerObjectThreadgroup[[ ulong  ]]
- maxTotalThreadsPerMeshThreadgroup[[ ulong  ]]
- objectThreadExecutionWidth[[ ulong  ]]
- meshThreadExecutionWidth[[ ulong  ]]
- maxTotalThreadgroupsPerMeshGrid[[ ulong  ]]
- gpuResourceID[[ RECORD MTLResourceID]]
   Protocol: 'MTLIndirectComputeCommand'
       CONFORMING: NSObject
- setComputePipelineState:[[ void  ]](pipelineState: [[ POINTER  (nonnull) ]] -> [[ ID<MTLComputePipelineState>]])
- setKernelBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setKernelBuffer:offset:attributeStride:atIndex:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(stride: [[ ulong  ]])(index: [[ ulong  ]])
- concurrentDispatchThreadgroups:threadsPerThreadgroup:[[ void  ]](threadgroupsPerGrid: [[ RECORD MTLSize]])(threadsPerThreadgroup: [[ RECORD MTLSize]])
- concurrentDispatchThreads:threadsPerThreadgroup:[[ void  ]](threadsPerGrid: [[ RECORD MTLSize]])(threadsPerThreadgroup: [[ RECORD MTLSize]])
- setBarrier[[ void  ]]
- clearBarrier[[ void  ]]
- setImageblockWidth:height:[[ void  ]](width: [[ ulong  ]])(height: [[ ulong  ]])
- reset[[ void  ]]
- setThreadgroupMemoryLength:atIndex:[[ void  ]](length: [[ ulong  ]])(index: [[ ulong  ]])
- setStageInRegion:[[ void  ]](region: [[ RECORD MTLRegion]])
   Protocol: 'MTLFunctionStitchingNode'
       CONFORMING: NSObject
       CONFORMING: NSCopying
   Protocol: 'NSURLConnectionDataDelegate'
       CONFORMING: NSURLConnectionDelegate
- connection:willSendRequest:redirectResponse:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLRequest]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(request: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]])(response: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLResponse]])
- connection:didReceiveResponse:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(response: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLResponse]])
- connection:didReceiveData:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(data: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]])
- connection:needNewBodyStream:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSInputStream]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(request: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]])
- connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(bytesWritten: [[ long  ]])(totalBytesWritten: [[ long  ]])(totalBytesExpectedToWrite: [[ long  ]])
- connection:willCacheResponse:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSCachedURLResponse]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(cachedResponse: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCachedURLResponse]])
- connectionDidFinishLoading:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])
   Protocol: 'MTLIOScratchBufferAllocator'
       CONFORMING: NSObject
- newScratchBufferWithMinimumSize:[[ POINTER  (nullable) ]] -> [[ ID<MTLIOScratchBuffer>]](minimumSize: [[ ulong  ]])
   Protocol: 'NSMetadataQueryDelegate'
       CONFORMING: NSObject
- metadataQuery:replacementObjectForResultObject:[[ ID ]](query: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMetadataQuery]])(result: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMetadataItem]])
- metadataQuery:replacementValueForAttribute:value:[[ ID ]](query: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMetadataQuery]])(attrName: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(attrValue: [[ ID ]])
   Protocol: 'MTLObjectPayloadBinding'
       CONFORMING: MTLBinding
- objectPayloadAlignment[[ ulong  ]]
- objectPayloadDataSize[[ ulong  ]]
   Protocol: 'NSURLAuthenticationChallengeSender'
       CONFORMING: NSObject
- useCredential:forAuthenticationChallenge:[[ void  ]](credential: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLCredential]])(challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
- continueWithoutCredentialForAuthenticationChallenge:[[ void  ]](challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
- cancelAuthenticationChallenge:[[ void  ]](challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
- performDefaultHandlingForAuthenticationChallenge:[[ void  ]](challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
- rejectProtectionSpaceAndContinueWithChallenge:[[ void  ]](challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
   Protocol: 'NSMachPortDelegate'
       CONFORMING: NSPortDelegate
- handleMachMessage:[[ void  ]](msg: [[ POINTER  (nonnull) ]] -> [[ void  ]])
   Protocol: 'MTLBuffer'
       CONFORMING: MTLResource
- contents[[ POINTER  (nonnull) ]] -> [[ void  ]]
- didModifyRange:[[ void  ]](range: [[ RECORD _NSRange]])
- newTextureWithDescriptor:offset:bytesPerRow:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]])(offset: [[ ulong  ]])(bytesPerRow: [[ ulong  ]])
- addDebugMarker:range:[[ void  ]](marker: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(range: [[ RECORD _NSRange]])
- removeAllDebugMarkers[[ void  ]]
- length[[ ulong  ]]
- gpuAddress[[ ulonglong  ]]
   Protocol: 'NSStreamDelegate'
       CONFORMING: NSObject
- stream:handleEvent:[[ void  ]](aStream: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSStream]])(eventCode: [[ ENUMERATION enum NSStreamEvent]])
   Protocol: 'NSNetServiceDelegate'
       CONFORMING: NSObject
- netServiceWillPublish:[[ void  ]](sender: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])
- netServiceDidPublish:[[ void  ]](sender: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])
- netService:didNotPublish:[[ void  ]](sender: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])(errorDict: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]])
- netServiceWillResolve:[[ void  ]](sender: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])
- netServiceDidResolveAddress:[[ void  ]](sender: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])
- netService:didNotResolve:[[ void  ]](sender: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])(errorDict: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]])
- netServiceDidStop:[[ void  ]](sender: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])
- netService:didUpdateTXTRecordData:[[ void  ]](sender: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])(data: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]])
- netService:didAcceptConnectionWithInputStream:outputStream:[[ void  ]](sender: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])(inputStream: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSInputStream]])(outputStream: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOutputStream]])
   Protocol: 'MTLCounterSet'
       CONFORMING: NSObject
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- counters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Protocol: 'MTLFunctionLog'
       CONFORMING: NSObject
- type[[ ENUMERATION enum MTLFunctionLogType]]
- encoderLabel[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- function[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]]
- debugLocation[[ POINTER  (nullable) ]] -> [[ ID<MTLFunctionLogDebugLocation>]]
   Protocol: 'MTLVisibleFunctionTable'
       CONFORMING: MTLResource
- setFunction:atIndex:[[ void  ]](function: [[ POINTER  (nullable) ]] -> [[ ID<MTLFunctionHandle>]])(index: [[ ulong  ]])
- setFunctions:withRange:[[ void  ]](functions: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLFunctionHandle>]])(range: [[ RECORD _NSRange]])
- gpuResourceID[[ RECORD MTLResourceID]]
   Protocol: 'NSKeyedArchiverDelegate'
       CONFORMING: NSObject
- archiver:willEncodeObject:[[ ID ]](archiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedArchiver]])(object: [[ ID ]])
- archiver:didEncodeObject:[[ void  ]](archiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedArchiver]])(object: [[ ID ]])
- archiver:willReplaceObject:withObject:[[ void  ]](archiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedArchiver]])(object: [[ ID ]])(newObject: [[ ID ]])
- archiverWillFinish:[[ void  ]](archiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedArchiver]])
- archiverDidFinish:[[ void  ]](archiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedArchiver]])
   Protocol: 'NSFilePresenter'
       CONFORMING: NSObject
- relinquishPresentedItemToReader:[[ void  ]](reader: [[ BLOCK_POINTER ]])
- relinquishPresentedItemToWriter:[[ void  ]](writer: [[ BLOCK_POINTER ]])
- savePresentedItemChangesWithCompletionHandler:[[ void  ]](completionHandler: [[ BLOCK_POINTER ]])
- accommodatePresentedItemDeletionWithCompletionHandler:[[ void  ]](completionHandler: [[ BLOCK_POINTER ]])
- presentedItemDidMoveToURL:[[ void  ]](newURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- presentedItemDidChange[[ void  ]]
- presentedItemDidChangeUbiquityAttributes:[[ void  ]](attributes: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]])
- presentedItemDidGainVersion:[[ void  ]](version: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileVersion]])
- presentedItemDidLoseVersion:[[ void  ]](version: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileVersion]])
- presentedItemDidResolveConflictVersion:[[ void  ]](version: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileVersion]])
- accommodatePresentedSubitemDeletionAtURL:completionHandler:[[ void  ]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(completionHandler: [[ BLOCK_POINTER ]])
- presentedSubitemDidAppearAtURL:[[ void  ]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- presentedSubitemAtURL:didMoveToURL:[[ void  ]](oldURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(newURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- presentedSubitemDidChangeAtURL:[[ void  ]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- presentedSubitemAtURL:didGainVersion:[[ void  ]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(version: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileVersion]])
- presentedSubitemAtURL:didLoseVersion:[[ void  ]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(version: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileVersion]])
- presentedSubitemAtURL:didResolveConflictVersion:[[ void  ]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(version: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileVersion]])
- presentedItemURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- presentedItemOperationQueue[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOperationQueue]]
- primaryPresentedItemURL[[ POINTER ]] -> [[ INTERFACE NSURL]]
- observedPresentedItemUbiquityAttributes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
   Protocol: 'NSURLSessionDelegate'
       CONFORMING: NSObject
- URLSession:didBecomeInvalidWithError:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(error: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- URLSession:didReceiveChallenge:completionHandler:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])(completionHandler: [[ BLOCK_POINTER ]])
- URLSessionDidFinishEventsForBackgroundURLSession:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])
   Protocol: 'NSURLSessionDataDelegate'
       CONFORMING: NSURLSessionTaskDelegate
- URLSession:dataTask:didReceiveResponse:completionHandler:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(dataTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDataTask]])(response: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLResponse]])(completionHandler: [[ BLOCK_POINTER ]])
- URLSession:dataTask:didBecomeDownloadTask:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(dataTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDataTask]])(downloadTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]])
- URLSession:dataTask:didBecomeStreamTask:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(dataTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDataTask]])(streamTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionStreamTask]])
- URLSession:dataTask:didReceiveData:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(dataTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDataTask]])(data: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]])
- URLSession:dataTask:willCacheResponse:completionHandler:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(dataTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDataTask]])(proposedResponse: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCachedURLResponse]])(completionHandler: [[ BLOCK_POINTER ]])
   Protocol: 'MTLDevice'
       CONFORMING: NSObject
- newCommandQueue[[ POINTER  (nullable) ]] -> [[ ID<MTLCommandQueue>]]
- newCommandQueueWithMaxCommandBufferCount:[[ POINTER  (nullable) ]] -> [[ ID<MTLCommandQueue>]](maxCommandBufferCount: [[ ulong  ]])
- heapTextureSizeAndAlignWithDescriptor:[[ RECORD MTLSizeAndAlign]](desc: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]])
- heapBufferSizeAndAlignWithLength:options:[[ RECORD MTLSizeAndAlign]](length: [[ ulong  ]])(options: [[ ENUMERATION enum MTLResourceOptions]])
- newHeapWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLHeap>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLHeapDescriptor]])
- newBufferWithLength:options:[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]](length: [[ ulong  ]])(options: [[ ENUMERATION enum MTLResourceOptions]])
- newBufferWithBytes:length:options:[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]](pointer: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(length: [[ ulong  ]])(options: [[ ENUMERATION enum MTLResourceOptions]])
- newBufferWithBytesNoCopy:length:options:deallocator:[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]](pointer: [[ POINTER  (nonnull) ]] -> [[ void  ]])(length: [[ ulong  ]])(options: [[ ENUMERATION enum MTLResourceOptions]])(deallocator: [[ BLOCK_POINTER ]])
- newDepthStencilStateWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLDepthStencilState>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLDepthStencilDescriptor]])
- newTextureWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]])
- newTextureWithDescriptor:iosurface:plane:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]])(iosurface: [[ POINTER  (nonnull) ]] -> [[ RECORD __IOSurface]])(plane: [[ ulong  ]])
- newSharedTextureWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]])
- newSharedTextureWithHandle:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](sharedHandle: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLSharedTextureHandle]])
- newSamplerStateWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLSamplerDescriptor]])
- newDefaultLibrary[[ POINTER  (nullable) ]] -> [[ ID<MTLLibrary>]]
- newDefaultLibraryWithBundle:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLLibrary>]](bundle: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSBundle]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newLibraryWithFile:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLLibrary>]](filepath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newLibraryWithURL:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLLibrary>]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newLibraryWithData:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLLibrary>]](data: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSObject]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newLibraryWithSource:options:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLLibrary>]](source: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(options: [[ POINTER  (nullable) ]] -> [[ INTERFACE MTLCompileOptions]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newLibraryWithSource:options:completionHandler:[[ void  ]](source: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(options: [[ POINTER  (nullable) ]] -> [[ INTERFACE MTLCompileOptions]])(completionHandler: [[ BLOCK_POINTER ]])
- newLibraryWithStitchedDescriptor:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLLibrary>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLStitchedLibraryDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newLibraryWithStitchedDescriptor:completionHandler:[[ void  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLStitchedLibraryDescriptor]])(completionHandler: [[ BLOCK_POINTER ]])
- newRenderPipelineStateWithDescriptor:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLRenderPipelineState>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPipelineDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newRenderPipelineStateWithDescriptor:options:reflection:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLRenderPipelineState>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPipelineDescriptor]])(options: [[ ENUMERATION enum MTLPipelineOption]])(reflection: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE MTLRenderPipelineReflection]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newRenderPipelineStateWithDescriptor:completionHandler:[[ void  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPipelineDescriptor]])(completionHandler: [[ BLOCK_POINTER ]])
- newRenderPipelineStateWithDescriptor:options:completionHandler:[[ void  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPipelineDescriptor]])(options: [[ ENUMERATION enum MTLPipelineOption]])(completionHandler: [[ BLOCK_POINTER ]])
- newComputePipelineStateWithFunction:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLComputePipelineState>]](computeFunction: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFunction>]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newComputePipelineStateWithFunction:options:reflection:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLComputePipelineState>]](computeFunction: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFunction>]])(options: [[ ENUMERATION enum MTLPipelineOption]])(reflection: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE MTLComputePipelineReflection]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newComputePipelineStateWithFunction:completionHandler:[[ void  ]](computeFunction: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFunction>]])(completionHandler: [[ BLOCK_POINTER ]])
- newComputePipelineStateWithFunction:options:completionHandler:[[ void  ]](computeFunction: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFunction>]])(options: [[ ENUMERATION enum MTLPipelineOption]])(completionHandler: [[ BLOCK_POINTER ]])
- newComputePipelineStateWithDescriptor:options:reflection:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLComputePipelineState>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLComputePipelineDescriptor]])(options: [[ ENUMERATION enum MTLPipelineOption]])(reflection: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE MTLComputePipelineReflection]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newComputePipelineStateWithDescriptor:options:completionHandler:[[ void  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLComputePipelineDescriptor]])(options: [[ ENUMERATION enum MTLPipelineOption]])(completionHandler: [[ BLOCK_POINTER ]])
- newFence[[ POINTER  (nullable) ]] -> [[ ID<MTLFence>]]
- supportsFeatureSet:[[ int  ]](featureSet: [[ ENUMERATION enum MTLFeatureSet]])
- supportsFamily:[[ int  ]](gpuFamily: [[ ENUMERATION enum MTLGPUFamily]])
- supportsTextureSampleCount:[[ int  ]](sampleCount: [[ ulong  ]])
- minimumLinearTextureAlignmentForPixelFormat:[[ ulong  ]](format: [[ ENUMERATION enum MTLPixelFormat]])
- minimumTextureBufferAlignmentForPixelFormat:[[ ulong  ]](format: [[ ENUMERATION enum MTLPixelFormat]])
- newRenderPipelineStateWithTileDescriptor:options:reflection:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLRenderPipelineState>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTileRenderPipelineDescriptor]])(options: [[ ENUMERATION enum MTLPipelineOption]])(reflection: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE MTLRenderPipelineReflection]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newRenderPipelineStateWithTileDescriptor:options:completionHandler:[[ void  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTileRenderPipelineDescriptor]])(options: [[ ENUMERATION enum MTLPipelineOption]])(completionHandler: [[ BLOCK_POINTER ]])
- newRenderPipelineStateWithMeshDescriptor:options:reflection:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLRenderPipelineState>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLMeshRenderPipelineDescriptor]])(options: [[ ENUMERATION enum MTLPipelineOption]])(reflection: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE MTLRenderPipelineReflection]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newRenderPipelineStateWithMeshDescriptor:options:completionHandler:[[ void  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLMeshRenderPipelineDescriptor]])(options: [[ ENUMERATION enum MTLPipelineOption]])(completionHandler: [[ BLOCK_POINTER ]])
- getDefaultSamplePositions:count:[[ void  ]](positions: [[ POINTER  (nonnull) ]] -> [[ RECORD MTLSamplePosition]])(count: [[ ulong  ]])
- newArgumentEncoderWithArguments:[[ POINTER  (nullable) ]] -> [[ ID<MTLArgumentEncoder>]](arguments: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]])
- supportsRasterizationRateMapWithLayerCount:[[ int  ]](layerCount: [[ ulong  ]])
- newRasterizationRateMapWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLRasterizationRateMap>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRasterizationRateMapDescriptor]])
- newIndirectCommandBufferWithDescriptor:maxCommandCount:options:[[ POINTER  (nullable) ]] -> [[ ID<MTLIndirectCommandBuffer>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLIndirectCommandBufferDescriptor]])(maxCount: [[ ulong  ]])(options: [[ ENUMERATION enum MTLResourceOptions]])
- newEvent[[ POINTER  (nullable) ]] -> [[ ID<MTLEvent>]]
- newSharedEvent[[ POINTER  (nullable) ]] -> [[ ID<MTLSharedEvent>]]
- newSharedEventWithHandle:[[ POINTER  (nullable) ]] -> [[ ID<MTLSharedEvent>]](sharedEventHandle: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLSharedEventHandle]])
- newIOHandleWithURL:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLIOFileHandle>]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newIOCommandQueueWithDescriptor:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLIOCommandQueue>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLIOCommandQueueDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newIOHandleWithURL:compressionMethod:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLIOFileHandle>]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(compressionMethod: [[ ENUMERATION enum MTLIOCompressionMethod]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newIOFileHandleWithURL:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLIOFileHandle>]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newIOFileHandleWithURL:compressionMethod:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLIOFileHandle>]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(compressionMethod: [[ ENUMERATION enum MTLIOCompressionMethod]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- sparseTileSizeWithTextureType:pixelFormat:sampleCount:[[ RECORD MTLSize]](textureType: [[ ENUMERATION enum MTLTextureType]])(pixelFormat: [[ ENUMERATION enum MTLPixelFormat]])(sampleCount: [[ ulong  ]])
- convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:[[ void  ]](pixelRegions: [[ ARRAY ]] -> [[ RECORD MTLRegion]])(tileRegions: [[ ARRAY ]] -> [[ RECORD MTLRegion]])(tileSize: [[ RECORD MTLSize]])(mode: [[ ENUMERATION enum MTLSparseTextureRegionAlignmentMode]])(numRegions: [[ ulong  ]])
- convertSparseTileRegions:toPixelRegions:withTileSize:numRegions:[[ void  ]](tileRegions: [[ ARRAY ]] -> [[ RECORD MTLRegion]])(pixelRegions: [[ ARRAY ]] -> [[ RECORD MTLRegion]])(tileSize: [[ RECORD MTLSize]])(numRegions: [[ ulong  ]])
- sparseTileSizeInBytesForSparsePageSize:[[ ulong  ]](sparsePageSize: [[ ENUMERATION enum MTLSparsePageSize]])
- sparseTileSizeWithTextureType:pixelFormat:sampleCount:sparsePageSize:[[ RECORD MTLSize]](textureType: [[ ENUMERATION enum MTLTextureType]])(pixelFormat: [[ ENUMERATION enum MTLPixelFormat]])(sampleCount: [[ ulong  ]])(sparsePageSize: [[ ENUMERATION enum MTLSparsePageSize]])
- newCounterSampleBufferWithDescriptor:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLCounterSampleBuffer>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLCounterSampleBufferDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- sampleTimestamps:gpuTimestamp:[[ void  ]](cpuTimestamp: [[ POINTER  (nonnull) ]] -> [[ ulonglong  ]])(gpuTimestamp: [[ POINTER  (nonnull) ]] -> [[ ulonglong  ]])
- newArgumentEncoderWithBufferBinding:[[ POINTER  (nonnull) ]] -> [[ ID<MTLArgumentEncoder>]](bufferBinding: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBufferBinding>]])
- supportsCounterSampling:[[ int  ]](samplingPoint: [[ ENUMERATION enum MTLCounterSamplingPoint]])
- supportsVertexAmplificationCount:[[ int  ]](count: [[ ulong  ]])
- newDynamicLibrary:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLDynamicLibrary>]](library: [[ POINTER  (nonnull) ]] -> [[ ID<MTLLibrary>]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newDynamicLibraryWithURL:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLDynamicLibrary>]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newBinaryArchiveWithDescriptor:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLBinaryArchive>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLBinaryArchiveDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- accelerationStructureSizesWithDescriptor:[[ RECORD MTLAccelerationStructureSizes]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructureDescriptor]])
- newAccelerationStructureWithSize:[[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]](size: [[ ulong  ]])
- newAccelerationStructureWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructureDescriptor]])
- heapAccelerationStructureSizeAndAlignWithSize:[[ RECORD MTLSizeAndAlign]](size: [[ ulong  ]])
- heapAccelerationStructureSizeAndAlignWithDescriptor:[[ RECORD MTLSizeAndAlign]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructureDescriptor]])
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- registryID[[ ulonglong  ]]
- architecture[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLArchitecture]]
- maxThreadsPerThreadgroup[[ RECORD MTLSize]]
- isLowPower[[ int  ]]
- isHeadless[[ int  ]]
- isRemovable[[ int  ]]
- hasUnifiedMemory[[ int  ]]
- recommendedMaxWorkingSetSize[[ ulonglong  ]]
- isDepth24Stencil8PixelFormatSupported[[ int  ]]
- readWriteTextureSupport[[ ENUMERATION enum MTLReadWriteTextureTier]]
- argumentBuffersSupport[[ ENUMERATION enum MTLArgumentBuffersTier]]
- areRasterOrderGroupsSupported[[ int  ]]
- supports32BitFloatFiltering[[ int  ]]
- supports32BitMSAA[[ int  ]]
- supportsQueryTextureLOD[[ int  ]]
- supportsBCTextureCompression[[ int  ]]
- supportsPullModelInterpolation[[ int  ]]
- areBarycentricCoordsSupported[[ int  ]]
- supportsShaderBarycentricCoordinates[[ int  ]]
- currentAllocatedSize[[ ulong  ]]
- maxThreadgroupMemoryLength[[ ulong  ]]
- maxArgumentBufferSamplerCount[[ ulong  ]]
- areProgrammableSamplePositionsSupported[[ int  ]]
- sparseTileSizeInBytes[[ ulong  ]]
- maxBufferLength[[ ulong  ]]
- counterSets[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- supportsDynamicLibraries[[ int  ]]
- supportsRenderDynamicLibraries[[ int  ]]
- supportsRaytracing[[ int  ]]
- supportsFunctionPointers[[ int  ]]
- supportsFunctionPointersFromRender[[ int  ]]
- supportsRaytracingFromRender[[ int  ]]
- supportsPrimitiveMotionBlur[[ int  ]]
   Protocol: 'MTLAccelerationStructure'
       CONFORMING: MTLResource
- size[[ ulong  ]]
- gpuResourceID[[ RECORD MTLResourceID]]
   Protocol: 'MTLCaptureScope'
       CONFORMING: NSObject
- beginScope[[ void  ]]
- endScope[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- commandQueue[[ POINTER  (nullable) ]] -> [[ ID<MTLCommandQueue>]]
   Protocol: 'NSURLProtocolClient'
       CONFORMING: NSObject
- URLProtocol:wasRedirectedToRequest:redirectResponse:[[ void  ]](protocol: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtocol]])(request: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]])(redirectResponse: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLResponse]])
- URLProtocol:cachedResponseIsValid:[[ void  ]](protocol: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtocol]])(cachedResponse: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCachedURLResponse]])
- URLProtocol:didReceiveResponse:cacheStoragePolicy:[[ void  ]](protocol: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtocol]])(response: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLResponse]])(policy: [[ ENUMERATION enum NSURLCacheStoragePolicy]])
- URLProtocol:didLoadData:[[ void  ]](protocol: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtocol]])(data: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]])
- URLProtocolDidFinishLoading:[[ void  ]](protocol: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtocol]])
- URLProtocol:didFailWithError:[[ void  ]](protocol: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtocol]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])
- URLProtocol:didReceiveAuthenticationChallenge:[[ void  ]](protocol: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtocol]])(challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
- URLProtocol:didCancelAuthenticationChallenge:[[ void  ]](protocol: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtocol]])(challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
   Protocol: 'MTLCommandQueue'
       CONFORMING: NSObject
- commandBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLCommandBuffer>]]
- commandBufferWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLCommandBuffer>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLCommandBufferDescriptor]])
- commandBufferWithUnretainedReferences[[ POINTER  (nullable) ]] -> [[ ID<MTLCommandBuffer>]]
- insertDebugCaptureBoundary[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
   Protocol: 'NSExtensionRequestHandling'
       CONFORMING: NSObject
- beginRequestWithExtensionContext:[[ void  ]](context: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExtensionContext]])
   Protocol: 'NSDecimalNumberBehaviors'
- roundingMode[[ ENUMERATION enum NSRoundingMode]]
- scale[[ short  ]]
- exceptionDuringOperation:error:leftOperand:rightOperand:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDecimalNumber]](operation: [[ SEL  ]])(error: [[ ENUMERATION enum NSCalculationError]])(leftOperand: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]])(rightOperand: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSDecimalNumber]])
   Protocol: 'MTLIndirectCommandBuffer'
       CONFORMING: MTLResource
- resetWithRange:[[ void  ]](range: [[ RECORD _NSRange]])
- indirectRenderCommandAtIndex:[[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectRenderCommand>]](commandIndex: [[ ulong  ]])
- indirectComputeCommandAtIndex:[[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectComputeCommand>]](commandIndex: [[ ulong  ]])
- size[[ ulong  ]]
- gpuResourceID[[ RECORD MTLResourceID]]
   Protocol: 'MTLBufferBinding'
       CONFORMING: MTLBinding
- bufferAlignment[[ ulong  ]]
- bufferDataSize[[ ulong  ]]
- bufferDataType[[ ENUMERATION enum MTLDataType]]
- bufferStructType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLStructType]]
- bufferPointerType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLPointerType]]
   Protocol: 'MTLCounter'
       CONFORMING: NSObject
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Protocol: 'MTLRasterizationRateMap'
       CONFORMING: NSObject
- copyParameterDataToBuffer:offset:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])
- physicalSizeForLayer:[[ RECORD MTLSize]](layerIndex: [[ ulong  ]])
- mapScreenToPhysicalCoordinates:forLayer:[[ RECORD MTLSamplePosition]](screenCoordinates: [[ RECORD MTLSamplePosition]])(layerIndex: [[ ulong  ]])
- mapPhysicalToScreenCoordinates:forLayer:[[ RECORD MTLSamplePosition]](physicalCoordinates: [[ RECORD MTLSamplePosition]])(layerIndex: [[ ulong  ]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- screenSize[[ RECORD MTLSize]]
- physicalGranularity[[ RECORD MTLSize]]
- layerCount[[ ulong  ]]
- parameterBufferSizeAndAlign[[ RECORD MTLSizeAndAlign]]
   Protocol: 'MTLDynamicLibrary'
       CONFORMING: NSObject
- serializeToURL:error:[[ int  ]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- installName[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Protocol: 'MTLHeap'
       CONFORMING: NSObject
- maxAvailableSizeWithAlignment:[[ ulong  ]](alignment: [[ ulong  ]])
- newBufferWithLength:options:[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]](length: [[ ulong  ]])(options: [[ ENUMERATION enum MTLResourceOptions]])
- newTextureWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]])
- setPurgeableState:[[ ENUMERATION enum MTLPurgeableState]](state: [[ ENUMERATION enum MTLPurgeableState]])
- newBufferWithLength:options:offset:[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]](length: [[ ulong  ]])(options: [[ ENUMERATION enum MTLResourceOptions]])(offset: [[ ulong  ]])
- newTextureWithDescriptor:offset:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]])(offset: [[ ulong  ]])
- newAccelerationStructureWithSize:[[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]](size: [[ ulong  ]])
- newAccelerationStructureWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructureDescriptor]])
- newAccelerationStructureWithSize:offset:[[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]](size: [[ ulong  ]])(offset: [[ ulong  ]])
- newAccelerationStructureWithDescriptor:offset:[[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructureDescriptor]])(offset: [[ ulong  ]])
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- storageMode[[ ENUMERATION enum MTLStorageMode]]
- cpuCacheMode[[ ENUMERATION enum MTLCPUCacheMode]]
- hazardTrackingMode[[ ENUMERATION enum MTLHazardTrackingMode]]
- resourceOptions[[ ENUMERATION enum MTLResourceOptions]]
- size[[ ulong  ]]
- usedSize[[ ulong  ]]
- currentAllocatedSize[[ ulong  ]]
- type[[ ENUMERATION enum MTLHeapType]]
   Protocol: 'MTLIOFileHandle'
       CONFORMING: NSObject
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
   Protocol: 'NSCacheDelegate'
       CONFORMING: NSObject
- cache:willEvictObject:[[ void  ]](cache: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCache]])(obj: [[ ID ]])
   Protocol: 'MTLResourceStateCommandEncoder'
       CONFORMING: MTLCommandEncoder
- updateTextureMappings:mode:regions:mipLevels:slices:numRegions:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(mode: [[ ENUMERATION enum MTLSparseTextureMappingMode]])(regions: [[ ARRAY ]] -> [[ RECORD MTLRegion]])(mipLevels: [[ ARRAY ]] -> [[ ulong  ]])(slices: [[ ARRAY ]] -> [[ ulong  ]])(numRegions: [[ ulong  ]])
- updateTextureMapping:mode:region:mipLevel:slice:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(mode: [[ ENUMERATION enum MTLSparseTextureMappingMode]])(region: [[ RECORD MTLRegion]])(mipLevel: [[ ulong  ]])(slice: [[ ulong  ]])
- updateTextureMapping:mode:indirectBuffer:indirectBufferOffset:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(mode: [[ ENUMERATION enum MTLSparseTextureMappingMode]])(indirectBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])
- updateFence:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])
- waitForFence:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])
- moveTextureMappingsFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:[[ void  ]](sourceTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(sourceSlice: [[ ulong  ]])(sourceLevel: [[ ulong  ]])(sourceOrigin: [[ RECORD MTLOrigin]])(sourceSize: [[ RECORD MTLSize]])(destinationTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(destinationSlice: [[ ulong  ]])(destinationLevel: [[ ulong  ]])(destinationOrigin: [[ RECORD MTLOrigin]])
   Protocol: 'MTLCommandBufferEncoderInfo'
       CONFORMING: NSObject
- label[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- debugSignposts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- errorState[[ ENUMERATION enum MTLCommandEncoderErrorState]]
   Protocol: 'NSNetServiceBrowserDelegate'
       CONFORMING: NSObject
- netServiceBrowserWillSearch:[[ void  ]](browser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetServiceBrowser]])
- netServiceBrowserDidStopSearch:[[ void  ]](browser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetServiceBrowser]])
- netServiceBrowser:didNotSearch:[[ void  ]](browser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetServiceBrowser]])(errorDict: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]])
- netServiceBrowser:didFindDomain:moreComing:[[ void  ]](browser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetServiceBrowser]])(domainString: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(moreComing: [[ int  ]])
- netServiceBrowser:didFindService:moreComing:[[ void  ]](browser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetServiceBrowser]])(service: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])(moreComing: [[ int  ]])
- netServiceBrowser:didRemoveDomain:moreComing:[[ void  ]](browser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetServiceBrowser]])(domainString: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(moreComing: [[ int  ]])
- netServiceBrowser:didRemoveService:moreComing:[[ void  ]](browser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetServiceBrowser]])(service: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNetService]])(moreComing: [[ int  ]])
   Protocol: 'MTLFunction'
       CONFORMING: NSObject
- newArgumentEncoderWithBufferIndex:[[ POINTER  (nonnull) ]] -> [[ ID<MTLArgumentEncoder>]](bufferIndex: [[ ulong  ]])
- newArgumentEncoderWithBufferIndex:reflection:[[ POINTER  (nonnull) ]] -> [[ ID<MTLArgumentEncoder>]](bufferIndex: [[ ulong  ]])(reflection: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE MTLArgument]])
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- functionType[[ ENUMERATION enum MTLFunctionType]]
- patchType[[ ENUMERATION enum MTLPatchType]]
- patchControlPointCount[[ long  ]]
- vertexAttributes[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- stageInputAttributes[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- functionConstantsDictionary[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- options[[ ENUMERATION enum MTLFunctionOptions]]
   Protocol: 'NSKeyedUnarchiverDelegate'
       CONFORMING: NSObject
- unarchiver:cannotDecodeObjectOfClassName:originalClasses:[[ CLASS Class]](unarchiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedUnarchiver]])(name: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(classNames: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]])
- unarchiver:didDecodeObject:[[ ID ]](unarchiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedUnarchiver]])(object: [[ ID ]])
- unarchiver:willReplaceObject:withObject:[[ void  ]](unarchiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedUnarchiver]])(object: [[ ID ]])(newObject: [[ ID ]])
- unarchiverWillFinish:[[ void  ]](unarchiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedUnarchiver]])
- unarchiverDidFinish:[[ void  ]](unarchiver: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSKeyedUnarchiver]])
   Protocol: 'NSXPCListenerDelegate'
       CONFORMING: NSObject
- listener:shouldAcceptNewConnection:[[ int  ]](listener: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXPCListener]])(newConnection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXPCConnection]])
   Protocol: 'MTLLogContainer'
       CONFORMING: NSFastEnumeration
   Protocol: 'MTLThreadgroupBinding'
       CONFORMING: MTLBinding
- threadgroupMemoryAlignment[[ ulong  ]]
- threadgroupMemoryDataSize[[ ulong  ]]
   Protocol: 'MTLBinding'
       CONFORMING: NSObject
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- type[[ ENUMERATION enum MTLBindingType]]
- access[[ ENUMERATION enum MTLBindingAccess]]
- index[[ ulong  ]]
- isUsed[[ int  ]]
- isArgument[[ int  ]]
   Protocol: 'MTLResource'
       CONFORMING: NSObject
- setPurgeableState:[[ ENUMERATION enum MTLPurgeableState]](state: [[ ENUMERATION enum MTLPurgeableState]])
- makeAliasable[[ void  ]]
- isAliasable[[ int  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- cpuCacheMode[[ ENUMERATION enum MTLCPUCacheMode]]
- storageMode[[ ENUMERATION enum MTLStorageMode]]
- hazardTrackingMode[[ ENUMERATION enum MTLHazardTrackingMode]]
- resourceOptions[[ ENUMERATION enum MTLResourceOptions]]
- heap[[ POINTER  (nullable) ]] -> [[ ID<MTLHeap>]]
- heapOffset[[ ulong  ]]
- allocatedSize[[ ulong  ]]
   Protocol: 'MTLTextureBinding'
       CONFORMING: MTLBinding
- textureType[[ ENUMERATION enum MTLTextureType]]
- textureDataType[[ ENUMERATION enum MTLDataType]]
- isDepthTexture[[ int  ]]
- arrayLength[[ ulong  ]]
   Protocol: 'MTLParallelRenderCommandEncoder'
       CONFORMING: MTLCommandEncoder
- renderCommandEncoder[[ POINTER  (nullable) ]] -> [[ ID<MTLRenderCommandEncoder>]]
- setColorStoreAction:atIndex:[[ void  ]](storeAction: [[ ENUMERATION enum MTLStoreAction]])(colorAttachmentIndex: [[ ulong  ]])
- setDepthStoreAction:[[ void  ]](storeAction: [[ ENUMERATION enum MTLStoreAction]])
- setStencilStoreAction:[[ void  ]](storeAction: [[ ENUMERATION enum MTLStoreAction]])
- setColorStoreActionOptions:atIndex:[[ void  ]](storeActionOptions: [[ ENUMERATION enum MTLStoreActionOptions]])(colorAttachmentIndex: [[ ulong  ]])
- setDepthStoreActionOptions:[[ void  ]](storeActionOptions: [[ ENUMERATION enum MTLStoreActionOptions]])
- setStencilStoreActionOptions:[[ void  ]](storeActionOptions: [[ ENUMERATION enum MTLStoreActionOptions]])
   Protocol: 'MTLFunctionStitchingAttribute'
       CONFORMING: NSObject
   Protocol: 'MTLArgumentEncoder'
       CONFORMING: NSObject
- setArgumentBuffer:offset:[[ void  ]](argumentBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])
- setArgumentBuffer:startOffset:arrayElement:[[ void  ]](argumentBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(startOffset: [[ ulong  ]])(arrayElement: [[ ulong  ]])
- setBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setBuffers:offsets:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setTexture:atIndex:[[ void  ]](texture: [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(index: [[ ulong  ]])
- setTextures:withRange:[[ void  ]](textures: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(range: [[ RECORD _NSRange]])
- setSamplerState:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(index: [[ ulong  ]])
- setSamplerStates:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(range: [[ RECORD _NSRange]])
- constantDataAtIndex:[[ POINTER  (nonnull) ]] -> [[ void  ]](index: [[ ulong  ]])
- setRenderPipelineState:atIndex:[[ void  ]](pipeline: [[ POINTER  (nullable) ]] -> [[ ID<MTLRenderPipelineState>]])(index: [[ ulong  ]])
- setRenderPipelineStates:withRange:[[ void  ]](pipelines: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLRenderPipelineState>]])(range: [[ RECORD _NSRange]])
- setComputePipelineState:atIndex:[[ void  ]](pipeline: [[ POINTER  (nullable) ]] -> [[ ID<MTLComputePipelineState>]])(index: [[ ulong  ]])
- setComputePipelineStates:withRange:[[ void  ]](pipelines: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLComputePipelineState>]])(range: [[ RECORD _NSRange]])
- setIndirectCommandBuffer:atIndex:[[ void  ]](indirectCommandBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(index: [[ ulong  ]])
- setIndirectCommandBuffers:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(range: [[ RECORD _NSRange]])
- setAccelerationStructure:atIndex:[[ void  ]](accelerationStructure: [[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]])(index: [[ ulong  ]])
- newArgumentEncoderForBufferAtIndex:[[ POINTER  (nullable) ]] -> [[ ID<MTLArgumentEncoder>]](index: [[ ulong  ]])
- setVisibleFunctionTable:atIndex:[[ void  ]](visibleFunctionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(index: [[ ulong  ]])
- setVisibleFunctionTables:withRange:[[ void  ]](visibleFunctionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(range: [[ RECORD _NSRange]])
- setIntersectionFunctionTable:atIndex:[[ void  ]](intersectionFunctionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(index: [[ ulong  ]])
- setIntersectionFunctionTables:withRange:[[ void  ]](intersectionFunctionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(range: [[ RECORD _NSRange]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- encodedLength[[ ulong  ]]
- alignment[[ ulong  ]]
   Protocol: 'NSObject'
- isEqual:[[ int  ]](object: [[ ID ]])
- class[[ CLASS Class]]
- self[[ INSTANCETYPE ]]
- performSelector:[[ ID ]](aSelector: [[ SEL  ]])
- performSelector:withObject:[[ ID ]](aSelector: [[ SEL  ]])(object: [[ ID ]])
- performSelector:withObject:withObject:[[ ID ]](aSelector: [[ SEL  ]])(object1: [[ ID ]])(object2: [[ ID ]])
- isProxy[[ int  ]]
- isKindOfClass:[[ int  ]](aClass: [[ CLASS Class]])
- isMemberOfClass:[[ int  ]](aClass: [[ CLASS Class]])
- conformsToProtocol:[[ int  ]](aProtocol: [[ POINTER ]] -> [[ INTERFACE Protocol]])
- respondsToSelector:[[ int  ]](aSelector: [[ SEL  ]])
- retain[[ INSTANCETYPE ]]
- release[[ void  ]]
- autorelease[[ INSTANCETYPE ]]
- retainCount[[ ulong  ]]
- zone[[ POINTER ]] -> [[ RECORD _NSZone]]
- hash[[ ulong  ]]
- superclass[[ CLASS Class]]
- description[[ POINTER ]] -> [[ INTERFACE NSString]]
- debugDescription[[ POINTER ]] -> [[ INTERFACE NSString]]
   Protocol: 'NSCoding'
- encodeWithCoder:[[ void  ]](coder: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCoder]])
- initWithCoder:[[ INSTANCETYPE ]](coder: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCoder]])
   Protocol: 'MTLComputeCommandEncoder'
       CONFORMING: MTLCommandEncoder
- setComputePipelineState:[[ void  ]](state: [[ POINTER  (nonnull) ]] -> [[ ID<MTLComputePipelineState>]])
- setBytes:length:atIndex:[[ void  ]](bytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(length: [[ ulong  ]])(index: [[ ulong  ]])
- setBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setBufferOffset:atIndex:[[ void  ]](offset: [[ ulong  ]])(index: [[ ulong  ]])
- setBuffers:offsets:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setBuffer:offset:attributeStride:atIndex:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(stride: [[ ulong  ]])(index: [[ ulong  ]])
- setBuffers:offsets:attributeStrides:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(strides: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setBufferOffset:attributeStride:atIndex:[[ void  ]](offset: [[ ulong  ]])(stride: [[ ulong  ]])(index: [[ ulong  ]])
- setBytes:length:attributeStride:atIndex:[[ void  ]](bytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(length: [[ ulong  ]])(stride: [[ ulong  ]])(index: [[ ulong  ]])
- setVisibleFunctionTable:atBufferIndex:[[ void  ]](visibleFunctionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(bufferIndex: [[ ulong  ]])
- setVisibleFunctionTables:withBufferRange:[[ void  ]](visibleFunctionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(range: [[ RECORD _NSRange]])
- setIntersectionFunctionTable:atBufferIndex:[[ void  ]](intersectionFunctionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(bufferIndex: [[ ulong  ]])
- setIntersectionFunctionTables:withBufferRange:[[ void  ]](intersectionFunctionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(range: [[ RECORD _NSRange]])
- setAccelerationStructure:atBufferIndex:[[ void  ]](accelerationStructure: [[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]])(bufferIndex: [[ ulong  ]])
- setTexture:atIndex:[[ void  ]](texture: [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(index: [[ ulong  ]])
- setTextures:withRange:[[ void  ]](textures: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(range: [[ RECORD _NSRange]])
- setSamplerState:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(index: [[ ulong  ]])
- setSamplerStates:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(range: [[ RECORD _NSRange]])
- setSamplerState:lodMinClamp:lodMaxClamp:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamp: [[ float  ]])(lodMaxClamp: [[ float  ]])(index: [[ ulong  ]])
- setSamplerStates:lodMinClamps:lodMaxClamps:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamps: [[ ARRAY ]] -> [[ float (const) ]])(lodMaxClamps: [[ ARRAY ]] -> [[ float (const) ]])(range: [[ RECORD _NSRange]])
- setThreadgroupMemoryLength:atIndex:[[ void  ]](length: [[ ulong  ]])(index: [[ ulong  ]])
- setImageblockWidth:height:[[ void  ]](width: [[ ulong  ]])(height: [[ ulong  ]])
- setStageInRegion:[[ void  ]](region: [[ RECORD MTLRegion]])
- setStageInRegionWithIndirectBuffer:indirectBufferOffset:[[ void  ]](indirectBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])
- dispatchThreadgroups:threadsPerThreadgroup:[[ void  ]](threadgroupsPerGrid: [[ RECORD MTLSize]])(threadsPerThreadgroup: [[ RECORD MTLSize]])
- dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:[[ void  ]](indirectBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])(threadsPerThreadgroup: [[ RECORD MTLSize]])
- dispatchThreads:threadsPerThreadgroup:[[ void  ]](threadsPerGrid: [[ RECORD MTLSize]])(threadsPerThreadgroup: [[ RECORD MTLSize]])
- updateFence:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])
- waitForFence:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])
- useResource:usage:[[ void  ]](resource: [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(usage: [[ ENUMERATION enum MTLResourceUsage]])
- useResources:count:usage:[[ void  ]](resources: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(count: [[ ulong  ]])(usage: [[ ENUMERATION enum MTLResourceUsage]])
- useHeap:[[ void  ]](heap: [[ POINTER  (nonnull) ]] -> [[ ID<MTLHeap>]])
- useHeaps:count:[[ void  ]](heaps: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLHeap>]])(count: [[ ulong  ]])
- executeCommandsInBuffer:withRange:[[ void  ]](indirectCommandBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(executionRange: [[ RECORD _NSRange]])
- executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:[[ void  ]](indirectCommandbuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(indirectRangeBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])
- memoryBarrierWithScope:[[ void  ]](scope: [[ ENUMERATION enum MTLBarrierScope]])
- memoryBarrierWithResources:count:[[ void  ]](resources: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(count: [[ ulong  ]])
- sampleCountersInBuffer:atSampleIndex:withBarrier:[[ void  ]](sampleBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLCounterSampleBuffer>]])(sampleIndex: [[ ulong  ]])(barrier: [[ int  ]])
- dispatchType[[ ENUMERATION enum MTLDispatchType]]
   Protocol: 'MTLRenderCommandEncoder'
       CONFORMING: MTLCommandEncoder
- setRenderPipelineState:[[ void  ]](pipelineState: [[ POINTER  (nonnull) ]] -> [[ ID<MTLRenderPipelineState>]])
- setVertexBytes:length:atIndex:[[ void  ]](bytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(length: [[ ulong  ]])(index: [[ ulong  ]])
- setVertexBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setVertexBufferOffset:atIndex:[[ void  ]](offset: [[ ulong  ]])(index: [[ ulong  ]])
- setVertexBuffers:offsets:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setVertexBuffer:offset:attributeStride:atIndex:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(stride: [[ ulong  ]])(index: [[ ulong  ]])
- setVertexBuffers:offsets:attributeStrides:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(strides: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setVertexBufferOffset:attributeStride:atIndex:[[ void  ]](offset: [[ ulong  ]])(stride: [[ ulong  ]])(index: [[ ulong  ]])
- setVertexBytes:length:attributeStride:atIndex:[[ void  ]](bytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(length: [[ ulong  ]])(stride: [[ ulong  ]])(index: [[ ulong  ]])
- setVertexTexture:atIndex:[[ void  ]](texture: [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(index: [[ ulong  ]])
- setVertexTextures:withRange:[[ void  ]](textures: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(range: [[ RECORD _NSRange]])
- setVertexSamplerState:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(index: [[ ulong  ]])
- setVertexSamplerStates:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(range: [[ RECORD _NSRange]])
- setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamp: [[ float  ]])(lodMaxClamp: [[ float  ]])(index: [[ ulong  ]])
- setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamps: [[ ARRAY ]] -> [[ float (const) ]])(lodMaxClamps: [[ ARRAY ]] -> [[ float (const) ]])(range: [[ RECORD _NSRange]])
- setVertexVisibleFunctionTable:atBufferIndex:[[ void  ]](functionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(bufferIndex: [[ ulong  ]])
- setVertexVisibleFunctionTables:withBufferRange:[[ void  ]](functionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(range: [[ RECORD _NSRange]])
- setVertexIntersectionFunctionTable:atBufferIndex:[[ void  ]](intersectionFunctionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(bufferIndex: [[ ulong  ]])
- setVertexIntersectionFunctionTables:withBufferRange:[[ void  ]](intersectionFunctionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(range: [[ RECORD _NSRange]])
- setVertexAccelerationStructure:atBufferIndex:[[ void  ]](accelerationStructure: [[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]])(bufferIndex: [[ ulong  ]])
- setViewport:[[ void  ]](viewport: [[ RECORD MTLViewport]])
- setViewports:count:[[ void  ]](viewports: [[ ARRAY ]] -> [[ RECORD MTLViewport]])(count: [[ ulong  ]])
- setFrontFacingWinding:[[ void  ]](frontFacingWinding: [[ ENUMERATION enum MTLWinding]])
- setVertexAmplificationCount:viewMappings:[[ void  ]](count: [[ ulong  ]])(viewMappings: [[ POINTER  (nullable) ]] -> [[ RECORD MTLVertexAmplificationViewMapping]])
- setCullMode:[[ void  ]](cullMode: [[ ENUMERATION enum MTLCullMode]])
- setDepthClipMode:[[ void  ]](depthClipMode: [[ ENUMERATION enum MTLDepthClipMode]])
- setDepthBias:slopeScale:clamp:[[ void  ]](depthBias: [[ float  ]])(slopeScale: [[ float  ]])(clamp: [[ float  ]])
- setScissorRect:[[ void  ]](rect: [[ RECORD MTLScissorRect]])
- setScissorRects:count:[[ void  ]](scissorRects: [[ ARRAY ]] -> [[ RECORD MTLScissorRect]])(count: [[ ulong  ]])
- setTriangleFillMode:[[ void  ]](fillMode: [[ ENUMERATION enum MTLTriangleFillMode]])
- setFragmentBytes:length:atIndex:[[ void  ]](bytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(length: [[ ulong  ]])(index: [[ ulong  ]])
- setFragmentBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setFragmentBufferOffset:atIndex:[[ void  ]](offset: [[ ulong  ]])(index: [[ ulong  ]])
- setFragmentBuffers:offsets:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setFragmentTexture:atIndex:[[ void  ]](texture: [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(index: [[ ulong  ]])
- setFragmentTextures:withRange:[[ void  ]](textures: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(range: [[ RECORD _NSRange]])
- setFragmentSamplerState:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(index: [[ ulong  ]])
- setFragmentSamplerStates:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(range: [[ RECORD _NSRange]])
- setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamp: [[ float  ]])(lodMaxClamp: [[ float  ]])(index: [[ ulong  ]])
- setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamps: [[ ARRAY ]] -> [[ float (const) ]])(lodMaxClamps: [[ ARRAY ]] -> [[ float (const) ]])(range: [[ RECORD _NSRange]])
- setFragmentVisibleFunctionTable:atBufferIndex:[[ void  ]](functionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(bufferIndex: [[ ulong  ]])
- setFragmentVisibleFunctionTables:withBufferRange:[[ void  ]](functionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(range: [[ RECORD _NSRange]])
- setFragmentIntersectionFunctionTable:atBufferIndex:[[ void  ]](intersectionFunctionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(bufferIndex: [[ ulong  ]])
- setFragmentIntersectionFunctionTables:withBufferRange:[[ void  ]](intersectionFunctionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(range: [[ RECORD _NSRange]])
- setFragmentAccelerationStructure:atBufferIndex:[[ void  ]](accelerationStructure: [[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]])(bufferIndex: [[ ulong  ]])
- setBlendColorRed:green:blue:alpha:[[ void  ]](red: [[ float  ]])(green: [[ float  ]])(blue: [[ float  ]])(alpha: [[ float  ]])
- setDepthStencilState:[[ void  ]](depthStencilState: [[ POINTER  (nullable) ]] -> [[ ID<MTLDepthStencilState>]])
- setStencilReferenceValue:[[ void  ]](referenceValue: [[ uint  ]])
- setStencilFrontReferenceValue:backReferenceValue:[[ void  ]](frontReferenceValue: [[ uint  ]])(backReferenceValue: [[ uint  ]])
- setVisibilityResultMode:offset:[[ void  ]](mode: [[ ENUMERATION enum MTLVisibilityResultMode]])(offset: [[ ulong  ]])
- setColorStoreAction:atIndex:[[ void  ]](storeAction: [[ ENUMERATION enum MTLStoreAction]])(colorAttachmentIndex: [[ ulong  ]])
- setDepthStoreAction:[[ void  ]](storeAction: [[ ENUMERATION enum MTLStoreAction]])
- setStencilStoreAction:[[ void  ]](storeAction: [[ ENUMERATION enum MTLStoreAction]])
- setColorStoreActionOptions:atIndex:[[ void  ]](storeActionOptions: [[ ENUMERATION enum MTLStoreActionOptions]])(colorAttachmentIndex: [[ ulong  ]])
- setDepthStoreActionOptions:[[ void  ]](storeActionOptions: [[ ENUMERATION enum MTLStoreActionOptions]])
- setStencilStoreActionOptions:[[ void  ]](storeActionOptions: [[ ENUMERATION enum MTLStoreActionOptions]])
- setObjectBytes:length:atIndex:[[ void  ]](bytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(length: [[ ulong  ]])(index: [[ ulong  ]])
- setObjectBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setObjectBufferOffset:atIndex:[[ void  ]](offset: [[ ulong  ]])(index: [[ ulong  ]])
- setObjectBuffers:offsets:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setObjectTexture:atIndex:[[ void  ]](texture: [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(index: [[ ulong  ]])
- setObjectTextures:withRange:[[ void  ]](textures: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(range: [[ RECORD _NSRange]])
- setObjectSamplerState:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(index: [[ ulong  ]])
- setObjectSamplerStates:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(range: [[ RECORD _NSRange]])
- setObjectSamplerState:lodMinClamp:lodMaxClamp:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamp: [[ float  ]])(lodMaxClamp: [[ float  ]])(index: [[ ulong  ]])
- setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamps: [[ ARRAY ]] -> [[ float (const) ]])(lodMaxClamps: [[ ARRAY ]] -> [[ float (const) ]])(range: [[ RECORD _NSRange]])
- setObjectThreadgroupMemoryLength:atIndex:[[ void  ]](length: [[ ulong  ]])(index: [[ ulong  ]])
- setMeshBytes:length:atIndex:[[ void  ]](bytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(length: [[ ulong  ]])(index: [[ ulong  ]])
- setMeshBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setMeshBufferOffset:atIndex:[[ void  ]](offset: [[ ulong  ]])(index: [[ ulong  ]])
- setMeshBuffers:offsets:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setMeshTexture:atIndex:[[ void  ]](texture: [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(index: [[ ulong  ]])
- setMeshTextures:withRange:[[ void  ]](textures: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(range: [[ RECORD _NSRange]])
- setMeshSamplerState:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(index: [[ ulong  ]])
- setMeshSamplerStates:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(range: [[ RECORD _NSRange]])
- setMeshSamplerState:lodMinClamp:lodMaxClamp:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamp: [[ float  ]])(lodMaxClamp: [[ float  ]])(index: [[ ulong  ]])
- setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamps: [[ ARRAY ]] -> [[ float (const) ]])(lodMaxClamps: [[ ARRAY ]] -> [[ float (const) ]])(range: [[ RECORD _NSRange]])
- drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:[[ void  ]](threadgroupsPerGrid: [[ RECORD MTLSize]])(threadsPerObjectThreadgroup: [[ RECORD MTLSize]])(threadsPerMeshThreadgroup: [[ RECORD MTLSize]])
- drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:[[ void  ]](threadsPerGrid: [[ RECORD MTLSize]])(threadsPerObjectThreadgroup: [[ RECORD MTLSize]])(threadsPerMeshThreadgroup: [[ RECORD MTLSize]])
- drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:[[ void  ]](indirectBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])(threadsPerObjectThreadgroup: [[ RECORD MTLSize]])(threadsPerMeshThreadgroup: [[ RECORD MTLSize]])
- drawPrimitives:vertexStart:vertexCount:instanceCount:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(vertexStart: [[ ulong  ]])(vertexCount: [[ ulong  ]])(instanceCount: [[ ulong  ]])
- drawPrimitives:vertexStart:vertexCount:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(vertexStart: [[ ulong  ]])(vertexCount: [[ ulong  ]])
- drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(indexCount: [[ ulong  ]])(indexType: [[ ENUMERATION enum MTLIndexType]])(indexBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indexBufferOffset: [[ ulong  ]])(instanceCount: [[ ulong  ]])
- drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(indexCount: [[ ulong  ]])(indexType: [[ ENUMERATION enum MTLIndexType]])(indexBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indexBufferOffset: [[ ulong  ]])
- drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(vertexStart: [[ ulong  ]])(vertexCount: [[ ulong  ]])(instanceCount: [[ ulong  ]])(baseInstance: [[ ulong  ]])
- drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(indexCount: [[ ulong  ]])(indexType: [[ ENUMERATION enum MTLIndexType]])(indexBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indexBufferOffset: [[ ulong  ]])(instanceCount: [[ ulong  ]])(baseVertex: [[ long  ]])(baseInstance: [[ ulong  ]])
- drawPrimitives:indirectBuffer:indirectBufferOffset:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(indirectBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])
- drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:[[ void  ]](primitiveType: [[ ENUMERATION enum MTLPrimitiveType]])(indexType: [[ ENUMERATION enum MTLIndexType]])(indexBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indexBufferOffset: [[ ulong  ]])(indirectBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])
- textureBarrier[[ void  ]]
- updateFence:afterStages:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])(stages: [[ ENUMERATION enum MTLRenderStages]])
- waitForFence:beforeStages:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])(stages: [[ ENUMERATION enum MTLRenderStages]])
- setTessellationFactorBuffer:offset:instanceStride:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(instanceStride: [[ ulong  ]])
- setTessellationFactorScale:[[ void  ]](scale: [[ float  ]])
- drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:[[ void  ]](numberOfPatchControlPoints: [[ ulong  ]])(patchStart: [[ ulong  ]])(patchCount: [[ ulong  ]])(patchIndexBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(patchIndexBufferOffset: [[ ulong  ]])(instanceCount: [[ ulong  ]])(baseInstance: [[ ulong  ]])
- drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:[[ void  ]](numberOfPatchControlPoints: [[ ulong  ]])(patchIndexBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(patchIndexBufferOffset: [[ ulong  ]])(indirectBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])
- drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:[[ void  ]](numberOfPatchControlPoints: [[ ulong  ]])(patchStart: [[ ulong  ]])(patchCount: [[ ulong  ]])(patchIndexBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(patchIndexBufferOffset: [[ ulong  ]])(controlPointIndexBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(controlPointIndexBufferOffset: [[ ulong  ]])(instanceCount: [[ ulong  ]])(baseInstance: [[ ulong  ]])
- drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:[[ void  ]](numberOfPatchControlPoints: [[ ulong  ]])(patchIndexBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(patchIndexBufferOffset: [[ ulong  ]])(controlPointIndexBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(controlPointIndexBufferOffset: [[ ulong  ]])(indirectBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])
- setTileBytes:length:atIndex:[[ void  ]](bytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(length: [[ ulong  ]])(index: [[ ulong  ]])
- setTileBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setTileBufferOffset:atIndex:[[ void  ]](offset: [[ ulong  ]])(index: [[ ulong  ]])
- setTileBuffers:offsets:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setTileTexture:atIndex:[[ void  ]](texture: [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(index: [[ ulong  ]])
- setTileTextures:withRange:[[ void  ]](textures: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]])(range: [[ RECORD _NSRange]])
- setTileSamplerState:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(index: [[ ulong  ]])
- setTileSamplerStates:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(range: [[ RECORD _NSRange]])
- setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:[[ void  ]](sampler: [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamp: [[ float  ]])(lodMaxClamp: [[ float  ]])(index: [[ ulong  ]])
- setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:[[ void  ]](samplers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLSamplerState>]])(lodMinClamps: [[ ARRAY ]] -> [[ float (const) ]])(lodMaxClamps: [[ ARRAY ]] -> [[ float (const) ]])(range: [[ RECORD _NSRange]])
- setTileVisibleFunctionTable:atBufferIndex:[[ void  ]](functionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(bufferIndex: [[ ulong  ]])
- setTileVisibleFunctionTables:withBufferRange:[[ void  ]](functionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(range: [[ RECORD _NSRange]])
- setTileIntersectionFunctionTable:atBufferIndex:[[ void  ]](intersectionFunctionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(bufferIndex: [[ ulong  ]])
- setTileIntersectionFunctionTables:withBufferRange:[[ void  ]](intersectionFunctionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]])(range: [[ RECORD _NSRange]])
- setTileAccelerationStructure:atBufferIndex:[[ void  ]](accelerationStructure: [[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]])(bufferIndex: [[ ulong  ]])
- dispatchThreadsPerTile:[[ void  ]](threadsPerTile: [[ RECORD MTLSize]])
- setThreadgroupMemoryLength:offset:atIndex:[[ void  ]](length: [[ ulong  ]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- useResource:usage:[[ void  ]](resource: [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(usage: [[ ENUMERATION enum MTLResourceUsage]])
- useResources:count:usage:[[ void  ]](resources: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(count: [[ ulong  ]])(usage: [[ ENUMERATION enum MTLResourceUsage]])
- useResource:usage:stages:[[ void  ]](resource: [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(usage: [[ ENUMERATION enum MTLResourceUsage]])(stages: [[ ENUMERATION enum MTLRenderStages]])
- useResources:count:usage:stages:[[ void  ]](resources: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(count: [[ ulong  ]])(usage: [[ ENUMERATION enum MTLResourceUsage]])(stages: [[ ENUMERATION enum MTLRenderStages]])
- useHeap:[[ void  ]](heap: [[ POINTER  (nonnull) ]] -> [[ ID<MTLHeap>]])
- useHeaps:count:[[ void  ]](heaps: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLHeap>]])(count: [[ ulong  ]])
- useHeap:stages:[[ void  ]](heap: [[ POINTER  (nonnull) ]] -> [[ ID<MTLHeap>]])(stages: [[ ENUMERATION enum MTLRenderStages]])
- useHeaps:count:stages:[[ void  ]](heaps: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLHeap>]])(count: [[ ulong  ]])(stages: [[ ENUMERATION enum MTLRenderStages]])
- executeCommandsInBuffer:withRange:[[ void  ]](indirectCommandBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(executionRange: [[ RECORD _NSRange]])
- executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:[[ void  ]](indirectCommandbuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(indirectRangeBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(indirectBufferOffset: [[ ulong  ]])
- memoryBarrierWithScope:afterStages:beforeStages:[[ void  ]](scope: [[ ENUMERATION enum MTLBarrierScope]])(after: [[ ENUMERATION enum MTLRenderStages]])(before: [[ ENUMERATION enum MTLRenderStages]])
- memoryBarrierWithResources:count:afterStages:beforeStages:[[ void  ]](resources: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(count: [[ ulong  ]])(after: [[ ENUMERATION enum MTLRenderStages]])(before: [[ ENUMERATION enum MTLRenderStages]])
- sampleCountersInBuffer:atSampleIndex:withBarrier:[[ void  ]](sampleBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLCounterSampleBuffer>]])(sampleIndex: [[ ulong  ]])(barrier: [[ int  ]])
- tileWidth[[ ulong  ]]
- tileHeight[[ ulong  ]]
   Protocol: 'NSURLSessionTaskDelegate'
       CONFORMING: NSURLSessionDelegate
- URLSession:didCreateTask:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])
- URLSession:task:willBeginDelayedRequest:completionHandler:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])(request: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]])(completionHandler: [[ BLOCK_POINTER ]])
- URLSession:taskIsWaitingForConnectivity:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])
- URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])(response: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSHTTPURLResponse]])(request: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]])(completionHandler: [[ BLOCK_POINTER ]])
- URLSession:task:didReceiveChallenge:completionHandler:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])(challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])(completionHandler: [[ BLOCK_POINTER ]])
- URLSession:task:needNewBodyStream:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])(completionHandler: [[ BLOCK_POINTER ]])
- URLSession:task:needNewBodyStreamFromOffset:completionHandler:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])(offset: [[ longlong  ]])(completionHandler: [[ BLOCK_POINTER ]])
- URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])(bytesSent: [[ longlong  ]])(totalBytesSent: [[ longlong  ]])(totalBytesExpectedToSend: [[ longlong  ]])
- URLSession:task:didReceiveInformationalResponse:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])(response: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSHTTPURLResponse]])
- URLSession:task:didFinishCollectingMetrics:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])(metrics: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTaskMetrics]])
- URLSession:task:didCompleteWithError:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(task: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionTask]])(error: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
   Protocol: 'MTLFunctionLogDebugLocation'
       CONFORMING: NSObject
- functionName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- URL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- line[[ ulong  ]]
- column[[ ulong  ]]
   Protocol: 'MTLBinaryArchive'
       CONFORMING: NSObject
- addComputePipelineFunctionsWithDescriptor:error:[[ int  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLComputePipelineDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- addRenderPipelineFunctionsWithDescriptor:error:[[ int  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPipelineDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- addTileRenderPipelineFunctionsWithDescriptor:error:[[ int  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTileRenderPipelineDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- serializeToURL:error:[[ int  ]](url: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- addFunctionWithDescriptor:library:error:[[ int  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLFunctionDescriptor]])(library: [[ POINTER  (nonnull) ]] -> [[ ID<MTLLibrary>]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
   Protocol: 'MTLAccelerationStructureCommandEncoder'
       CONFORMING: MTLCommandEncoder
- buildAccelerationStructure:descriptor:scratchBuffer:scratchBufferOffset:[[ void  ]](accelerationStructure: [[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructure>]])(descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructureDescriptor]])(scratchBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(scratchBufferOffset: [[ ulong  ]])
- refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:[[ void  ]](sourceAccelerationStructure: [[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructure>]])(descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructureDescriptor]])(destinationAccelerationStructure: [[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]])(scratchBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(scratchBufferOffset: [[ ulong  ]])
- refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:options:[[ void  ]](sourceAccelerationStructure: [[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructure>]])(descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructureDescriptor]])(destinationAccelerationStructure: [[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructure>]])(scratchBuffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(scratchBufferOffset: [[ ulong  ]])(options: [[ ENUMERATION enum MTLAccelerationStructureRefitOptions]])
- copyAccelerationStructure:toAccelerationStructure:[[ void  ]](sourceAccelerationStructure: [[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructure>]])(destinationAccelerationStructure: [[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructure>]])
- writeCompactedAccelerationStructureSize:toBuffer:offset:[[ void  ]](accelerationStructure: [[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructure>]])(buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])
- writeCompactedAccelerationStructureSize:toBuffer:offset:sizeDataType:[[ void  ]](accelerationStructure: [[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructure>]])(buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(sizeDataType: [[ ENUMERATION enum MTLDataType]])
- copyAndCompactAccelerationStructure:toAccelerationStructure:[[ void  ]](sourceAccelerationStructure: [[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructure>]])(destinationAccelerationStructure: [[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructure>]])
- updateFence:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])
- waitForFence:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])
- useResource:usage:[[ void  ]](resource: [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(usage: [[ ENUMERATION enum MTLResourceUsage]])
- useResources:count:usage:[[ void  ]](resources: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])(count: [[ ulong  ]])(usage: [[ ENUMERATION enum MTLResourceUsage]])
- useHeap:[[ void  ]](heap: [[ POINTER  (nonnull) ]] -> [[ ID<MTLHeap>]])
- useHeaps:count:[[ void  ]](heaps: [[ ARRAY ]] -> [[ POINTER  (nonnull) ]] -> [[ ID<MTLHeap>]])(count: [[ ulong  ]])
- sampleCountersInBuffer:atSampleIndex:withBarrier:[[ void  ]](sampleBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLCounterSampleBuffer>]])(sampleIndex: [[ ulong  ]])(barrier: [[ int  ]])
   Protocol: 'NSProgressReporting'
       CONFORMING: NSObject
- progress[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
   Protocol: 'NSUserActivityDelegate'
       CONFORMING: NSObject
- userActivityWillSave:[[ void  ]](userActivity: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUserActivity]])
- userActivityWasContinued:[[ void  ]](userActivity: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUserActivity]])
- userActivity:didReceiveInputStream:outputStream:[[ void  ]](userActivity: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUserActivity]])(inputStream: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSInputStream]])(outputStream: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOutputStream]])
   Protocol: 'NSFileManagerDelegate'
       CONFORMING: NSObject
- fileManager:shouldCopyItemAtPath:toPath:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(srcPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(dstPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- fileManager:shouldCopyItemAtURL:toURL:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(srcURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(dstURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])(srcPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(dstPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])(srcURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(dstURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- fileManager:shouldMoveItemAtPath:toPath:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(srcPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(dstPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- fileManager:shouldMoveItemAtURL:toURL:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(srcURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(dstURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- fileManager:shouldProceedAfterError:movingItemAtPath:toPath:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])(srcPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(dstPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- fileManager:shouldProceedAfterError:movingItemAtURL:toURL:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])(srcURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(dstURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- fileManager:shouldLinkItemAtPath:toPath:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(srcPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(dstPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- fileManager:shouldLinkItemAtURL:toURL:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(srcURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(dstURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])(srcPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(dstPath: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])(srcURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])(dstURL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- fileManager:shouldRemoveItemAtPath:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(path: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- fileManager:shouldRemoveItemAtURL:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(URL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- fileManager:shouldProceedAfterError:removingItemAtPath:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])(path: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- fileManager:shouldProceedAfterError:removingItemAtURL:[[ int  ]](fileManager: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])(URL: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
   Protocol: 'NSCopying'
- copyWithZone:[[ ID ]](zone: [[ POINTER  (nullable) ]] -> [[ RECORD _NSZone]])
   Protocol: 'NSURLConnectionDelegate'
       CONFORMING: NSObject
- connection:didFailWithError:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(error: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])
- connectionShouldUseCredentialStorage:[[ int  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])
- connection:willSendRequestForAuthenticationChallenge:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
- connection:canAuthenticateAgainstProtectionSpace:[[ int  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(protectionSpace: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtectionSpace]])
- connection:didReceiveAuthenticationChallenge:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
- connection:didCancelAuthenticationChallenge:[[ void  ]](connection: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLConnection]])(challenge: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLAuthenticationChallenge]])
   Protocol: 'MTLCommandBuffer'
       CONFORMING: NSObject
- enqueue[[ void  ]]
- commit[[ void  ]]
- addScheduledHandler:[[ void  ]](block: [[ BLOCK_POINTER ]])
- presentDrawable:[[ void  ]](drawable: [[ POINTER  (nonnull) ]] -> [[ ID<MTLDrawable>]])
- presentDrawable:atTime:[[ void  ]](drawable: [[ POINTER  (nonnull) ]] -> [[ ID<MTLDrawable>]])(presentationTime: [[ double  ]])
- presentDrawable:afterMinimumDuration:[[ void  ]](drawable: [[ POINTER  (nonnull) ]] -> [[ ID<MTLDrawable>]])(duration: [[ double  ]])
- waitUntilScheduled[[ void  ]]
- addCompletedHandler:[[ void  ]](block: [[ BLOCK_POINTER ]])
- waitUntilCompleted[[ void  ]]
- blitCommandEncoder[[ POINTER  (nullable) ]] -> [[ ID<MTLBlitCommandEncoder>]]
- renderCommandEncoderWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLRenderCommandEncoder>]](renderPassDescriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPassDescriptor]])
- computeCommandEncoderWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLComputeCommandEncoder>]](computePassDescriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLComputePassDescriptor]])
- blitCommandEncoderWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLBlitCommandEncoder>]](blitPassDescriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLBlitPassDescriptor]])
- computeCommandEncoder[[ POINTER  (nullable) ]] -> [[ ID<MTLComputeCommandEncoder>]]
- computeCommandEncoderWithDispatchType:[[ POINTER  (nullable) ]] -> [[ ID<MTLComputeCommandEncoder>]](dispatchType: [[ ENUMERATION enum MTLDispatchType]])
- encodeWaitForEvent:value:[[ void  ]](event: [[ POINTER  (nonnull) ]] -> [[ ID<MTLEvent>]])(value: [[ ulonglong  ]])
- encodeSignalEvent:value:[[ void  ]](event: [[ POINTER  (nonnull) ]] -> [[ ID<MTLEvent>]])(value: [[ ulonglong  ]])
- parallelRenderCommandEncoderWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLParallelRenderCommandEncoder>]](renderPassDescriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPassDescriptor]])
- resourceStateCommandEncoder[[ POINTER  (nullable) ]] -> [[ ID<MTLResourceStateCommandEncoder>]]
- resourceStateCommandEncoderWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLResourceStateCommandEncoder>]](resourceStatePassDescriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLResourceStatePassDescriptor]])
- accelerationStructureCommandEncoder[[ POINTER  (nullable) ]] -> [[ ID<MTLAccelerationStructureCommandEncoder>]]
- accelerationStructureCommandEncoderWithDescriptor:[[ POINTER  (nonnull) ]] -> [[ ID<MTLAccelerationStructureCommandEncoder>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructurePassDescriptor]])
- pushDebugGroup:[[ void  ]](string: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- popDebugGroup[[ void  ]]
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- commandQueue[[ POINTER  (nonnull) ]] -> [[ ID<MTLCommandQueue>]]
- retainedReferences[[ int  ]]
- errorOptions[[ ENUMERATION enum MTLCommandBufferErrorOption]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- kernelStartTime[[ double  ]]
- kernelEndTime[[ double  ]]
- logs[[ POINTER  (nonnull) ]] -> [[ ID<MTLLogContainer>]]
- GPUStartTime[[ double  ]]
- GPUEndTime[[ double  ]]
- status[[ ENUMERATION enum MTLCommandBufferStatus]]
- error[[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]]
   Protocol: 'MTLIOScratchBuffer'
       CONFORMING: NSObject
- buffer[[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]]
   Protocol: 'NSURLSessionStreamDelegate'
       CONFORMING: NSURLSessionTaskDelegate
- URLSession:readClosedForStreamTask:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(streamTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionStreamTask]])
- URLSession:writeClosedForStreamTask:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(streamTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionStreamTask]])
- URLSession:betterRouteDiscoveredForStreamTask:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(streamTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionStreamTask]])
- URLSession:streamTask:didBecomeInputStream:outputStream:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(streamTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionStreamTask]])(inputStream: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSInputStream]])(outputStream: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOutputStream]])
   Protocol: 'MTLCommandEncoder'
       CONFORMING: NSObject
- endEncoding[[ void  ]]
- insertDebugSignpost:[[ void  ]](string: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- pushDebugGroup:[[ void  ]](string: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- popDebugGroup[[ void  ]]
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
   Protocol: 'NSDiscardableContent'
- beginContentAccess[[ int  ]]
- endContentAccess[[ void  ]]
- discardContentIfPossible[[ void  ]]
- isContentDiscarded[[ int  ]]
   Protocol: 'MTLIOCommandQueue'
       CONFORMING: NSObject
- enqueueBarrier[[ void  ]]
- commandBuffer[[ POINTER  (nonnull) ]] -> [[ ID<MTLIOCommandBuffer>]]
- commandBufferWithUnretainedReferences[[ POINTER  (nonnull) ]] -> [[ ID<MTLIOCommandBuffer>]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
   Protocol: 'MTLTexture'
       CONFORMING: MTLResource
- getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:[[ void  ]](pixelBytes: [[ POINTER  (nonnull) ]] -> [[ void  ]])(bytesPerRow: [[ ulong  ]])(bytesPerImage: [[ ulong  ]])(region: [[ RECORD MTLRegion]])(level: [[ ulong  ]])(slice: [[ ulong  ]])
- replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:[[ void  ]](region: [[ RECORD MTLRegion]])(level: [[ ulong  ]])(slice: [[ ulong  ]])(pixelBytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(bytesPerRow: [[ ulong  ]])(bytesPerImage: [[ ulong  ]])
- getBytes:bytesPerRow:fromRegion:mipmapLevel:[[ void  ]](pixelBytes: [[ POINTER  (nonnull) ]] -> [[ void  ]])(bytesPerRow: [[ ulong  ]])(region: [[ RECORD MTLRegion]])(level: [[ ulong  ]])
- replaceRegion:mipmapLevel:withBytes:bytesPerRow:[[ void  ]](region: [[ RECORD MTLRegion]])(level: [[ ulong  ]])(pixelBytes: [[ POINTER  (nonnull) ]] -> [[ void (const) ]])(bytesPerRow: [[ ulong  ]])
- newTextureViewWithPixelFormat:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](pixelFormat: [[ ENUMERATION enum MTLPixelFormat]])
- newTextureViewWithPixelFormat:textureType:levels:slices:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](pixelFormat: [[ ENUMERATION enum MTLPixelFormat]])(textureType: [[ ENUMERATION enum MTLTextureType]])(levelRange: [[ RECORD _NSRange]])(sliceRange: [[ RECORD _NSRange]])
- newSharedTextureHandle[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLSharedTextureHandle]]
- newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]](pixelFormat: [[ ENUMERATION enum MTLPixelFormat]])(textureType: [[ ENUMERATION enum MTLTextureType]])(levelRange: [[ RECORD _NSRange]])(sliceRange: [[ RECORD _NSRange]])(swizzle: [[ RECORD MTLTextureSwizzleChannels]])
- rootResource[[ POINTER  (nullable) ]] -> [[ ID<MTLResource>]]
- parentTexture[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]]
- parentRelativeLevel[[ ulong  ]]
- parentRelativeSlice[[ ulong  ]]
- buffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- bufferOffset[[ ulong  ]]
- bufferBytesPerRow[[ ulong  ]]
- iosurface[[ POINTER  (nullable) ]] -> [[ RECORD __IOSurface]]
- iosurfacePlane[[ ulong  ]]
- textureType[[ ENUMERATION enum MTLTextureType]]
- pixelFormat[[ ENUMERATION enum MTLPixelFormat]]
- width[[ ulong  ]]
- height[[ ulong  ]]
- depth[[ ulong  ]]
- mipmapLevelCount[[ ulong  ]]
- sampleCount[[ ulong  ]]
- arrayLength[[ ulong  ]]
- usage[[ ENUMERATION enum MTLTextureUsage]]
- isShareable[[ int  ]]
- isFramebufferOnly[[ int  ]]
- firstMipmapInTail[[ ulong  ]]
- tailSizeInBytes[[ ulong  ]]
- isSparse[[ int  ]]
- allowGPUOptimizedContents[[ int  ]]
- compressionType[[ ENUMERATION enum MTLTextureCompressionType]]
- gpuResourceID[[ RECORD MTLResourceID]]
- swizzle[[ RECORD MTLTextureSwizzleChannels]]
   Protocol: 'NSMutableCopying'
- mutableCopyWithZone:[[ ID ]](zone: [[ POINTER  (nullable) ]] -> [[ RECORD _NSZone]])
   Protocol: 'NSFastEnumeration'
- countByEnumeratingWithState:objects:count:[[ ulong  ]](state: [[ POINTER  (nonnull) ]] -> [[ RECORD NSFastEnumerationState]])(buffer: [[ ARRAY ]] -> [[ ID ]])(len: [[ ulong  ]])
   Protocol: 'NSXMLParserDelegate'
       CONFORMING: NSObject
- parserDidStartDocument:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])
- parserDidEndDocument:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])
- parser:foundNotationDeclarationWithName:publicID:systemID:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(name: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(publicID: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])(systemID: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(name: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(publicID: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])(systemID: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])(notationName: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(attributeName: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(elementName: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(type: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])(defaultValue: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- parser:foundElementDeclarationWithName:model:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(elementName: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(model: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- parser:foundInternalEntityDeclarationWithName:value:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(name: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(value: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- parser:foundExternalEntityDeclarationWithName:publicID:systemID:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(name: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(publicID: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])(systemID: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- parser:didStartElement:namespaceURI:qualifiedName:attributes:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(elementName: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(namespaceURI: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])(qName: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])(attributeDict: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]])
- parser:didEndElement:namespaceURI:qualifiedName:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(elementName: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(namespaceURI: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])(qName: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- parser:didStartMappingPrefix:toURI:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(prefix: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(namespaceURI: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- parser:didEndMappingPrefix:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(prefix: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- parser:foundCharacters:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(string: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- parser:foundIgnorableWhitespace:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(whitespaceString: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- parser:foundProcessingInstructionWithTarget:data:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(target: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(data: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- parser:foundComment:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(comment: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- parser:foundCDATA:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(CDATABlock: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]])
- parser:resolveExternalEntityName:systemID:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(name: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(systemID: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- parser:parseErrorOccurred:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(parseError: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])
- parser:validationErrorOccurred:[[ void  ]](parser: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXMLParser]])(validationError: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSError]])
   Protocol: 'MTLCounterSampleBuffer'
       CONFORMING: NSObject
- resolveCounterRange:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]](range: [[ RECORD _NSRange]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- label[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- sampleCount[[ ulong  ]]
   Protocol: 'MTLBlitCommandEncoder'
       CONFORMING: MTLCommandEncoder
- synchronizeResource:[[ void  ]](resource: [[ POINTER  (nonnull) ]] -> [[ ID<MTLResource>]])
- synchronizeTexture:slice:level:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(slice: [[ ulong  ]])(level: [[ ulong  ]])
- copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:[[ void  ]](sourceTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(sourceSlice: [[ ulong  ]])(sourceLevel: [[ ulong  ]])(sourceOrigin: [[ RECORD MTLOrigin]])(sourceSize: [[ RECORD MTLSize]])(destinationTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(destinationSlice: [[ ulong  ]])(destinationLevel: [[ ulong  ]])(destinationOrigin: [[ RECORD MTLOrigin]])
- copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:[[ void  ]](sourceBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(sourceOffset: [[ ulong  ]])(sourceBytesPerRow: [[ ulong  ]])(sourceBytesPerImage: [[ ulong  ]])(sourceSize: [[ RECORD MTLSize]])(destinationTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(destinationSlice: [[ ulong  ]])(destinationLevel: [[ ulong  ]])(destinationOrigin: [[ RECORD MTLOrigin]])
- copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:[[ void  ]](sourceBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(sourceOffset: [[ ulong  ]])(sourceBytesPerRow: [[ ulong  ]])(sourceBytesPerImage: [[ ulong  ]])(sourceSize: [[ RECORD MTLSize]])(destinationTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(destinationSlice: [[ ulong  ]])(destinationLevel: [[ ulong  ]])(destinationOrigin: [[ RECORD MTLOrigin]])(options: [[ ENUMERATION enum MTLBlitOption]])
- copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:[[ void  ]](sourceTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(sourceSlice: [[ ulong  ]])(sourceLevel: [[ ulong  ]])(sourceOrigin: [[ RECORD MTLOrigin]])(sourceSize: [[ RECORD MTLSize]])(destinationBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(destinationOffset: [[ ulong  ]])(destinationBytesPerRow: [[ ulong  ]])(destinationBytesPerImage: [[ ulong  ]])
- copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:[[ void  ]](sourceTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(sourceSlice: [[ ulong  ]])(sourceLevel: [[ ulong  ]])(sourceOrigin: [[ RECORD MTLOrigin]])(sourceSize: [[ RECORD MTLSize]])(destinationBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(destinationOffset: [[ ulong  ]])(destinationBytesPerRow: [[ ulong  ]])(destinationBytesPerImage: [[ ulong  ]])(options: [[ ENUMERATION enum MTLBlitOption]])
- generateMipmapsForTexture:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])
- fillBuffer:range:value:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(range: [[ RECORD _NSRange]])(value: [[ uchar  ]])
- copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:[[ void  ]](sourceTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(sourceSlice: [[ ulong  ]])(sourceLevel: [[ ulong  ]])(destinationTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(destinationSlice: [[ ulong  ]])(destinationLevel: [[ ulong  ]])(sliceCount: [[ ulong  ]])(levelCount: [[ ulong  ]])
- copyFromTexture:toTexture:[[ void  ]](sourceTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(destinationTexture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])
- copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:[[ void  ]](sourceBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(sourceOffset: [[ ulong  ]])(destinationBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(destinationOffset: [[ ulong  ]])(size: [[ ulong  ]])
- updateFence:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])
- waitForFence:[[ void  ]](fence: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFence>]])
- getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(region: [[ RECORD MTLRegion]])(mipLevel: [[ ulong  ]])(slice: [[ ulong  ]])(resetCounters: [[ int  ]])(countersBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(countersBufferOffset: [[ ulong  ]])
- resetTextureAccessCounters:region:mipLevel:slice:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(region: [[ RECORD MTLRegion]])(mipLevel: [[ ulong  ]])(slice: [[ ulong  ]])
- optimizeContentsForGPUAccess:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])
- optimizeContentsForGPUAccess:slice:level:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(slice: [[ ulong  ]])(level: [[ ulong  ]])
- optimizeContentsForCPUAccess:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])
- optimizeContentsForCPUAccess:slice:level:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(slice: [[ ulong  ]])(level: [[ ulong  ]])
- resetCommandsInBuffer:withRange:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(range: [[ RECORD _NSRange]])
- copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:[[ void  ]](source: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(sourceRange: [[ RECORD _NSRange]])(destination: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(destinationIndex: [[ ulong  ]])
- optimizeIndirectCommandBuffer:withRange:[[ void  ]](indirectCommandBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIndirectCommandBuffer>]])(range: [[ RECORD _NSRange]])
- sampleCountersInBuffer:atSampleIndex:withBarrier:[[ void  ]](sampleBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLCounterSampleBuffer>]])(sampleIndex: [[ ulong  ]])(barrier: [[ int  ]])
- resolveCounters:inRange:destinationBuffer:destinationOffset:[[ void  ]](sampleBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLCounterSampleBuffer>]])(range: [[ RECORD _NSRange]])(destinationBuffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(destinationOffset: [[ ulong  ]])
   Protocol: 'MTLEvent'
       CONFORMING: NSObject
- device[[ POINTER  (nullable) ]] -> [[ ID<MTLDevice>]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
   Protocol: 'NSPortDelegate'
       CONFORMING: NSObject
- handlePortMessage:[[ void  ]](message: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPortMessage]])
   Protocol: 'MTLIntersectionFunctionTable'
       CONFORMING: MTLResource
- setBuffer:offset:atIndex:[[ void  ]](buffer: [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(index: [[ ulong  ]])
- setBuffers:offsets:withRange:[[ void  ]](buffers: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]])(offsets: [[ ARRAY ]] -> [[ ulong  ]])(range: [[ RECORD _NSRange]])
- setFunction:atIndex:[[ void  ]](function: [[ POINTER  (nullable) ]] -> [[ ID<MTLFunctionHandle>]])(index: [[ ulong  ]])
- setFunctions:withRange:[[ void  ]](functions: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLFunctionHandle>]])(range: [[ RECORD _NSRange]])
- setOpaqueTriangleIntersectionFunctionWithSignature:atIndex:[[ void  ]](signature: [[ ENUMERATION enum MTLIntersectionFunctionSignature]])(index: [[ ulong  ]])
- setOpaqueTriangleIntersectionFunctionWithSignature:withRange:[[ void  ]](signature: [[ ENUMERATION enum MTLIntersectionFunctionSignature]])(range: [[ RECORD _NSRange]])
- setOpaqueCurveIntersectionFunctionWithSignature:atIndex:[[ void  ]](signature: [[ ENUMERATION enum MTLIntersectionFunctionSignature]])(index: [[ ulong  ]])
- setOpaqueCurveIntersectionFunctionWithSignature:withRange:[[ void  ]](signature: [[ ENUMERATION enum MTLIntersectionFunctionSignature]])(range: [[ RECORD _NSRange]])
- setVisibleFunctionTable:atBufferIndex:[[ void  ]](functionTable: [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(bufferIndex: [[ ulong  ]])
- setVisibleFunctionTables:withBufferRange:[[ void  ]](functionTables: [[ ARRAY ]] -> [[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]])(bufferRange: [[ RECORD _NSRange]])
- gpuResourceID[[ RECORD MTLResourceID]]
   Protocol: 'MTLIOCommandBuffer'
       CONFORMING: NSObject
- addCompletedHandler:[[ void  ]](block: [[ BLOCK_POINTER ]])
- loadBytes:size:sourceHandle:sourceHandleOffset:[[ void  ]](pointer: [[ POINTER  (nonnull) ]] -> [[ void  ]])(size: [[ ulong  ]])(sourceHandle: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIOFileHandle>]])(sourceHandleOffset: [[ ulong  ]])
- loadBuffer:offset:size:sourceHandle:sourceHandleOffset:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])(size: [[ ulong  ]])(sourceHandle: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIOFileHandle>]])(sourceHandleOffset: [[ ulong  ]])
- loadTexture:slice:level:size:sourceBytesPerRow:sourceBytesPerImage:destinationOrigin:sourceHandle:sourceHandleOffset:[[ void  ]](texture: [[ POINTER  (nonnull) ]] -> [[ ID<MTLTexture>]])(slice: [[ ulong  ]])(level: [[ ulong  ]])(size: [[ RECORD MTLSize]])(sourceBytesPerRow: [[ ulong  ]])(sourceBytesPerImage: [[ ulong  ]])(destinationOrigin: [[ RECORD MTLOrigin]])(sourceHandle: [[ POINTER  (nonnull) ]] -> [[ ID<MTLIOFileHandle>]])(sourceHandleOffset: [[ ulong  ]])
- copyStatusToBuffer:offset:[[ void  ]](buffer: [[ POINTER  (nonnull) ]] -> [[ ID<MTLBuffer>]])(offset: [[ ulong  ]])
- commit[[ void  ]]
- waitUntilCompleted[[ void  ]]
- tryCancel[[ void  ]]
- addBarrier[[ void  ]]
- pushDebugGroup:[[ void  ]](string: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- popDebugGroup[[ void  ]]
- enqueue[[ void  ]]
- waitForEvent:value:[[ void  ]](event: [[ POINTER  (nonnull) ]] -> [[ ID<MTLSharedEvent>]])(value: [[ ulonglong  ]])
- signalEvent:value:[[ void  ]](event: [[ POINTER  (nonnull) ]] -> [[ ID<MTLSharedEvent>]])(value: [[ ulonglong  ]])
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- status[[ ENUMERATION enum MTLIOStatus]]
- error[[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]]
   Protocol: 'MTLFunctionHandle'
       CONFORMING: NSObject
- functionType[[ ENUMERATION enum MTLFunctionType]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
   Protocol: 'MTLLibrary'
       CONFORMING: NSObject
- newFunctionWithName:[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]](functionName: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])
- newFunctionWithName:constantValues:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]](name: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(constantValues: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLFunctionConstantValues]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newFunctionWithName:constantValues:completionHandler:[[ void  ]](name: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(constantValues: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLFunctionConstantValues]])(completionHandler: [[ BLOCK_POINTER ]])
- newFunctionWithDescriptor:completionHandler:[[ void  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLFunctionDescriptor]])(completionHandler: [[ BLOCK_POINTER ]])
- newFunctionWithDescriptor:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLFunctionDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newIntersectionFunctionWithDescriptor:completionHandler:[[ void  ]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLIntersectionFunctionDescriptor]])(completionHandler: [[ BLOCK_POINTER ]])
- newIntersectionFunctionWithDescriptor:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLIntersectionFunctionDescriptor]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]](label: [[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]])
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- functionNames[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- type[[ ENUMERATION enum MTLLibraryType]]
- installName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
   Protocol: 'NSLocking'
- lock[[ void  ]]
- unlock[[ void  ]]
   Protocol: 'NSSecureCoding'
       CONFORMING: NSCoding
+ supportsSecureCoding[[ int  ]]
   Protocol: 'NSItemProviderReading'
       CONFORMING: NSObject
+ objectWithItemProviderData:typeIdentifier:error:[[ INSTANCETYPE ]](data: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]])(typeIdentifier: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]])(outError: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
+ readableTypeIdentifiersForItemProvider[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Protocol: 'MTLDepthStencilState'
       CONFORMING: NSObject
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
   Protocol: 'MTLSharedEvent'
       CONFORMING: MTLEvent
- notifyListener:atValue:block:[[ void  ]](listener: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLSharedEventListener]])(value: [[ ulonglong  ]])(block: [[ BLOCK_POINTER ]])
- newSharedEventHandle[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLSharedEventHandle]]
- signaledValue[[ ulonglong  ]]
- setSignaledValue:[[ void  ]](signaledValue: [[ ulonglong  ]])
   Protocol: 'MTLComputePipelineState'
       CONFORMING: NSObject
- imageblockMemoryLengthForDimensions:[[ ulong  ]](imageblockDimensions: [[ RECORD MTLSize]])
- functionHandleWithFunction:[[ POINTER  (nullable) ]] -> [[ ID<MTLFunctionHandle>]](function: [[ POINTER  (nonnull) ]] -> [[ ID<MTLFunction>]])
- newComputePipelineStateWithAdditionalBinaryFunctions:error:[[ POINTER  (nullable) ]] -> [[ ID<MTLComputePipelineState>]](functions: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]])(error: [[ POINTER  (nullable) ]] -> [[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]])
- newVisibleFunctionTableWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLVisibleFunctionTable>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLVisibleFunctionTableDescriptor]])
- newIntersectionFunctionTableWithDescriptor:[[ POINTER  (nullable) ]] -> [[ ID<MTLIntersectionFunctionTable>]](descriptor: [[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLIntersectionFunctionTableDescriptor]])
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- maxTotalThreadsPerThreadgroup[[ ulong  ]]
- threadExecutionWidth[[ ulong  ]]
- staticThreadgroupMemoryLength[[ ulong  ]]
- supportIndirectCommandBuffers[[ int  ]]
- gpuResourceID[[ RECORD MTLResourceID]]
   Protocol: 'NSURLSessionDownloadDelegate'
       CONFORMING: NSURLSessionTaskDelegate
- URLSession:downloadTask:didFinishDownloadingToURL:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(downloadTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]])(location: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]])
- URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(downloadTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]])(bytesWritten: [[ longlong  ]])(totalBytesWritten: [[ longlong  ]])(totalBytesExpectedToWrite: [[ longlong  ]])
- URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:[[ void  ]](session: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]])(downloadTask: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]])(fileOffset: [[ longlong  ]])(expectedTotalBytes: [[ longlong  ]])
INTERFACES:
   Interface: 'NSURLSessionDataTask'
       SUPER: NSURLSessionTask
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
   Interface: 'MTLIntersectionFunctionTableDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ intersectionFunctionTableDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLIntersectionFunctionTableDescriptor]]
- functionCount[[ ulong  ]]
- setFunctionCount:[[ void  ]]
   Interface: 'MTLRasterizationRateLayerDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- init[[ INSTANCETYPE ]]
- initWithSampleCount:[[ INSTANCETYPE ]]
- initWithSampleCount:horizontal:vertical:[[ INSTANCETYPE ]]
- sampleCount[[ RECORD MTLSize]]
- maxSampleCount[[ RECORD MTLSize]]
- horizontalSampleStorage[[ POINTER  (nonnull) ]] -> [[ float  ]]
- verticalSampleStorage[[ POINTER  (nonnull) ]] -> [[ float  ]]
- horizontal[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRasterizationRateSampleArray]]
- vertical[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRasterizationRateSampleArray]]
- setSampleCount:[[ void  ]]
   Interface: 'NSFormatter'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSCoding
- stringForObjectValue:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- attributedStringForObjectValue:withDefaultAttributes:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSAttributedString]]
- editingStringForObjectValue:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- getObjectValue:forString:errorDescription:[[ int  ]]
- isPartialStringValid:newEditingString:errorDescription:[[ int  ]]
- isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:[[ int  ]]
   Interface: 'NSDecimalNumberHandler'
       SUPER: NSObject
       CONFORMING: NSDecimalNumberBehaviors
       CONFORMING: NSCoding
- initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:[[ INSTANCETYPE ]]
+ decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:[[ INSTANCETYPE ]]
+ defaultDecimalNumberHandler[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumberHandler]]
   Interface: 'NSMetadataQueryAttributeValueTuple'
       SUPER: NSObject
- attribute[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- value[[ ID ]]
- count[[ ulong  ]]
   Interface: 'MTLResourceStatePassDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ resourceStatePassDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLResourceStatePassDescriptor]]
- sampleBufferAttachments[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLResourceStatePassSampleBufferAttachmentDescriptorArray]]
   Interface: 'MTLRenderPipelineColorAttachmentDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- pixelFormat[[ ENUMERATION enum MTLPixelFormat]]
- setPixelFormat:[[ void  ]]
- isBlendingEnabled[[ int  ]]
- setBlendingEnabled:[[ void  ]]
- sourceRGBBlendFactor[[ ENUMERATION enum MTLBlendFactor]]
- setSourceRGBBlendFactor:[[ void  ]]
- destinationRGBBlendFactor[[ ENUMERATION enum MTLBlendFactor]]
- setDestinationRGBBlendFactor:[[ void  ]]
- rgbBlendOperation[[ ENUMERATION enum MTLBlendOperation]]
- setRgbBlendOperation:[[ void  ]]
- sourceAlphaBlendFactor[[ ENUMERATION enum MTLBlendFactor]]
- setSourceAlphaBlendFactor:[[ void  ]]
- destinationAlphaBlendFactor[[ ENUMERATION enum MTLBlendFactor]]
- setDestinationAlphaBlendFactor:[[ void  ]]
- alphaBlendOperation[[ ENUMERATION enum MTLBlendOperation]]
- setAlphaBlendOperation:[[ void  ]]
- writeMask[[ ENUMERATION enum MTLColorWriteMask]]
- setWriteMask:[[ void  ]]
   Interface: 'NSString'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
       CONFORMING: NSItemProviderReading
       CONFORMING: NSItemProviderWriting
- characterAtIndex:[[ ushort  ]]
- init[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- length[[ ulong  ]]
- substringFromIndex:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- substringToIndex:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- substringWithRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- getCharacters:range:[[ void  ]]
- compare:[[ ENUMERATION enum NSComparisonResult]]
- compare:options:[[ ENUMERATION enum NSComparisonResult]]
- compare:options:range:[[ ENUMERATION enum NSComparisonResult]]
- compare:options:range:locale:[[ ENUMERATION enum NSComparisonResult]]
- caseInsensitiveCompare:[[ ENUMERATION enum NSComparisonResult]]
- localizedCompare:[[ ENUMERATION enum NSComparisonResult]]
- localizedCaseInsensitiveCompare:[[ ENUMERATION enum NSComparisonResult]]
- localizedStandardCompare:[[ ENUMERATION enum NSComparisonResult]]
- isEqualToString:[[ int  ]]
- hasPrefix:[[ int  ]]
- hasSuffix:[[ int  ]]
- commonPrefixWithString:options:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- containsString:[[ int  ]]
- localizedCaseInsensitiveContainsString:[[ int  ]]
- localizedStandardContainsString:[[ int  ]]
- localizedStandardRangeOfString:[[ RECORD _NSRange]]
- rangeOfString:[[ RECORD _NSRange]]
- rangeOfString:options:[[ RECORD _NSRange]]
- rangeOfString:options:range:[[ RECORD _NSRange]]
- rangeOfString:options:range:locale:[[ RECORD _NSRange]]
- rangeOfCharacterFromSet:[[ RECORD _NSRange]]
- rangeOfCharacterFromSet:options:[[ RECORD _NSRange]]
- rangeOfCharacterFromSet:options:range:[[ RECORD _NSRange]]
- rangeOfComposedCharacterSequenceAtIndex:[[ RECORD _NSRange]]
- rangeOfComposedCharacterSequencesForRange:[[ RECORD _NSRange]]
- stringByAppendingString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByAppendingFormat:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- uppercaseStringWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- lowercaseStringWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- capitalizedStringWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- getLineStart:end:contentsEnd:forRange:[[ void  ]]
- lineRangeForRange:[[ RECORD _NSRange]]
- getParagraphStart:end:contentsEnd:forRange:[[ void  ]]
- paragraphRangeForRange:[[ RECORD _NSRange]]
- enumerateSubstringsInRange:options:usingBlock:[[ void  ]]
- enumerateLinesUsingBlock:[[ void  ]]
- dataUsingEncoding:allowLossyConversion:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- dataUsingEncoding:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- canBeConvertedToEncoding:[[ int  ]]
- cStringUsingEncoding:[[ POINTER  (nullable) ]] -> [[ schar (const) ]]
- getCString:maxLength:encoding:[[ int  ]]
- getBytes:maxLength:usedLength:encoding:options:range:remainingRange:[[ int  ]]
- maximumLengthOfBytesUsingEncoding:[[ ulong  ]]
- lengthOfBytesUsingEncoding:[[ ulong  ]]
+ localizedNameOfStringEncoding:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- componentsSeparatedByString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- componentsSeparatedByCharactersInSet:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- stringByTrimmingCharactersInSet:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByPaddingToLength:withString:startingAtIndex:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByFoldingWithOptions:locale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByReplacingOccurrencesOfString:withString:options:range:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByReplacingOccurrencesOfString:withString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByReplacingCharactersInRange:withString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByApplyingTransform:reverse:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- writeToURL:atomically:encoding:error:[[ int  ]]
- writeToFile:atomically:encoding:error:[[ int  ]]
- initWithCharactersNoCopy:length:freeWhenDone:[[ INSTANCETYPE ]]
- initWithCharactersNoCopy:length:deallocator:[[ INSTANCETYPE ]]
- initWithCharacters:length:[[ INSTANCETYPE ]]
- initWithUTF8String:[[ INSTANCETYPE ]]
- initWithString:[[ INSTANCETYPE ]]
- initWithFormat:[[ INSTANCETYPE ]]
- initWithFormat:arguments:[[ INSTANCETYPE ]]
- initWithFormat:locale:[[ INSTANCETYPE ]]
- initWithFormat:locale:arguments:[[ INSTANCETYPE ]]
- initWithValidatedFormat:validFormatSpecifiers:error:[[ INSTANCETYPE ]]
- initWithValidatedFormat:validFormatSpecifiers:locale:error:[[ INSTANCETYPE ]]
- initWithValidatedFormat:validFormatSpecifiers:arguments:error:[[ INSTANCETYPE ]]
- initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:[[ INSTANCETYPE ]]
- initWithData:encoding:[[ INSTANCETYPE ]]
- initWithBytes:length:encoding:[[ INSTANCETYPE ]]
- initWithBytesNoCopy:length:encoding:freeWhenDone:[[ INSTANCETYPE ]]
- initWithBytesNoCopy:length:encoding:deallocator:[[ INSTANCETYPE ]]
+ string[[ INSTANCETYPE ]]
+ stringWithString:[[ INSTANCETYPE ]]
+ stringWithCharacters:length:[[ INSTANCETYPE ]]
+ stringWithUTF8String:[[ INSTANCETYPE ]]
+ stringWithFormat:[[ INSTANCETYPE ]]
+ localizedStringWithFormat:[[ INSTANCETYPE ]]
+ stringWithValidatedFormat:validFormatSpecifiers:error:[[ INSTANCETYPE ]]
+ localizedStringWithValidatedFormat:validFormatSpecifiers:error:[[ INSTANCETYPE ]]
- initWithCString:encoding:[[ INSTANCETYPE ]]
+ stringWithCString:encoding:[[ INSTANCETYPE ]]
- initWithContentsOfURL:encoding:error:[[ INSTANCETYPE ]]
- initWithContentsOfFile:encoding:error:[[ INSTANCETYPE ]]
+ stringWithContentsOfURL:encoding:error:[[ INSTANCETYPE ]]
+ stringWithContentsOfFile:encoding:error:[[ INSTANCETYPE ]]
- initWithContentsOfURL:usedEncoding:error:[[ INSTANCETYPE ]]
- initWithContentsOfFile:usedEncoding:error:[[ INSTANCETYPE ]]
+ stringWithContentsOfURL:usedEncoding:error:[[ INSTANCETYPE ]]
+ stringWithContentsOfFile:usedEncoding:error:[[ INSTANCETYPE ]]
- doubleValue[[ double  ]]
- floatValue[[ float  ]]
- intValue[[ int  ]]
- integerValue[[ long  ]]
- longLongValue[[ longlong  ]]
- boolValue[[ int  ]]
- uppercaseString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- lowercaseString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- capitalizedString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- localizedUppercaseString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- localizedLowercaseString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- localizedCapitalizedString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- UTF8String[[ POINTER ]] -> [[ schar (const) ]]
- fastestEncoding[[ ulong  ]]
- smallestEncoding[[ ulong  ]]
+ availableStringEncodings[[ POINTER  (nonnull) ]] -> [[ ulong  ]]
+ defaultCStringEncoding[[ ulong  ]]
- decomposedStringWithCanonicalMapping[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- precomposedStringWithCanonicalMapping[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- decomposedStringWithCompatibilityMapping[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- precomposedStringWithCompatibilityMapping[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- description[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- hash[[ ulong  ]]
+ stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:[[ ulong  ]]
- propertyList[[ ID ]]
- propertyListFromStringsFileFormat[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- cString[[ POINTER  (nullable) ]] -> [[ schar (const) ]]
- lossyCString[[ POINTER  (nullable) ]] -> [[ schar (const) ]]
- cStringLength[[ ulong  ]]
- getCString:[[ void  ]]
- getCString:maxLength:[[ void  ]]
- getCString:maxLength:range:remainingRange:[[ void  ]]
- writeToFile:atomically:[[ int  ]]
- writeToURL:atomically:[[ int  ]]
- initWithContentsOfFile:[[ ID ]]
- initWithContentsOfURL:[[ ID ]]
+ stringWithContentsOfFile:[[ ID ]]
+ stringWithContentsOfURL:[[ ID ]]
- initWithCStringNoCopy:length:freeWhenDone:[[ ID ]]
- initWithCString:length:[[ ID ]]
- initWithCString:[[ ID ]]
+ stringWithCString:length:[[ ID ]]
+ stringWithCString:[[ ID ]]
- getCharacters:[[ void  ]]
- variantFittingPresentationWidth:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ pathWithComponents:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByAppendingPathComponent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByAppendingPathExtension:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- stringsByAppendingPaths:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:[[ ulong  ]]
- getFileSystemRepresentation:maxLength:[[ int  ]]
- pathComponents[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- isAbsolutePath[[ int  ]]
- lastPathComponent[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByDeletingLastPathComponent[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- pathExtension[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByDeletingPathExtension[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByAbbreviatingWithTildeInPath[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByExpandingTildeInPath[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByStandardizingPath[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringByResolvingSymlinksInPath[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- fileSystemRepresentation[[ POINTER ]] -> [[ schar (const) ]]
- stringByAddingPercentEncodingWithAllowedCharacters:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- stringByAddingPercentEscapesUsingEncoding:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- stringByReplacingPercentEscapesUsingEncoding:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- stringByRemovingPercentEncoding[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- linguisticTagsInRange:scheme:options:orthography:tokenRanges:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:[[ void  ]]
   Interface: 'NSThread'
       SUPER: NSObject
+ detachNewThreadWithBlock:[[ void  ]]
+ detachNewThreadSelector:toTarget:withObject:[[ void  ]]
+ isMultiThreaded[[ int  ]]
+ sleepUntilDate:[[ void  ]]
+ sleepForTimeInterval:[[ void  ]]
+ exit[[ void  ]]
+ threadPriority[[ double  ]]
+ setThreadPriority:[[ int  ]]
- init[[ INSTANCETYPE ]]
- initWithTarget:selector:object:[[ INSTANCETYPE ]]
- initWithBlock:[[ INSTANCETYPE ]]
- cancel[[ void  ]]
- start[[ void  ]]
- main[[ void  ]]
+ currentThread[[ POINTER ]] -> [[ INTERFACE NSThread]]
- threadDictionary[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableDictionary]]
- qualityOfService[[ ENUMERATION enum NSQualityOfService]]
- setQualityOfService:[[ void  ]]
+ callStackReturnAddresses[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ callStackSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- name[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
- stackSize[[ ulong  ]]
- setStackSize:[[ void  ]]
- isMainThread[[ int  ]]
+ mainThread[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSThread]]
- isExecuting[[ int  ]]
- isFinished[[ int  ]]
- isCancelled[[ int  ]]
   Interface: 'MTLAccelerationStructureDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- usage[[ ENUMERATION enum MTLAccelerationStructureUsage]]
- setUsage:[[ void  ]]
   Interface: 'NSMetadataQuery'
       SUPER: NSObject
- startQuery[[ int  ]]
- stopQuery[[ void  ]]
- disableUpdates[[ void  ]]
- enableUpdates[[ void  ]]
- resultAtIndex:[[ ID ]]
- enumerateResultsUsingBlock:[[ void  ]]
- enumerateResultsWithOptions:usingBlock:[[ void  ]]
- indexOfResult:[[ ulong  ]]
- valueOfAttribute:forResultAtIndex:[[ ID ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSMetadataQueryDelegate>]]
- setDelegate:[[ void  ]]
- predicate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSPredicate]]
- setPredicate:[[ void  ]]
- sortDescriptors[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setSortDescriptors:[[ void  ]]
- valueListAttributes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setValueListAttributes:[[ void  ]]
- groupingAttributes[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setGroupingAttributes:[[ void  ]]
- notificationBatchingInterval[[ double  ]]
- setNotificationBatchingInterval:[[ void  ]]
- searchScopes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setSearchScopes:[[ void  ]]
- searchItems[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setSearchItems:[[ void  ]]
- operationQueue[[ POINTER  (nullable) ]] -> [[ INTERFACE NSOperationQueue]]
- setOperationQueue:[[ void  ]]
- isStarted[[ int  ]]
- isGathering[[ int  ]]
- isStopped[[ int  ]]
- resultCount[[ ulong  ]]
- results[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- valueLists[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- groupedResults[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'MTLDepthStencilDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- depthCompareFunction[[ ENUMERATION enum MTLCompareFunction]]
- setDepthCompareFunction:[[ void  ]]
- isDepthWriteEnabled[[ int  ]]
- setDepthWriteEnabled:[[ void  ]]
- frontFaceStencil[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLStencilDescriptor]]
- setFrontFaceStencil:[[ void  ]]
- backFaceStencil[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLStencilDescriptor]]
- setBackFaceStencil:[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]]
   Interface: 'MTLVertexBufferLayoutDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- stride[[ ulong  ]]
- setStride:[[ void  ]]
- stepFunction[[ ENUMERATION enum MTLVertexStepFunction]]
- setStepFunction:[[ void  ]]
- stepRate[[ ulong  ]]
- setStepRate:[[ void  ]]
   Interface: 'NSCountedSet'
       SUPER: NSMutableSet
- initWithCapacity:[[ INSTANCETYPE ]]
- initWithArray:[[ INSTANCETYPE ]]
- initWithSet:[[ INSTANCETYPE ]]
- countForObject:[[ ulong  ]]
- objectEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- addObject:[[ void  ]]
- removeObject:[[ void  ]]
   Interface: 'MTLComputePipelineDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- reset[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]]
- computeFunction[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]]
- setComputeFunction:[[ void  ]]
- threadGroupSizeIsMultipleOfThreadExecutionWidth[[ int  ]]
- setThreadGroupSizeIsMultipleOfThreadExecutionWidth:[[ void  ]]
- maxTotalThreadsPerThreadgroup[[ ulong  ]]
- setMaxTotalThreadsPerThreadgroup:[[ void  ]]
- stageInputDescriptor[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLStageInputOutputDescriptor]]
- setStageInputDescriptor:[[ void  ]]
- buffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLPipelineBufferDescriptorArray]]
- supportIndirectCommandBuffers[[ int  ]]
- setSupportIndirectCommandBuffers:[[ void  ]]
- insertLibraries[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setInsertLibraries:[[ void  ]]
- preloadedLibraries[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setPreloadedLibraries:[[ void  ]]
- binaryArchives[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setBinaryArchives:[[ void  ]]
- linkedFunctions[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLLinkedFunctions]]
- setLinkedFunctions:[[ void  ]]
- supportAddingBinaryFunctions[[ int  ]]
- setSupportAddingBinaryFunctions:[[ void  ]]
- maxCallStackDepth[[ ulong  ]]
- setMaxCallStackDepth:[[ void  ]]
   Interface: 'NSUnitLength'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ megameters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ kilometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ hectometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ decameters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ meters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ decimeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ centimeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ millimeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ micrometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ nanometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ picometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ inches[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ feet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ yards[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ miles[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ scandinavianMiles[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ lightyears[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ nauticalMiles[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ fathoms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ furlongs[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ astronomicalUnits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
+ parsecs[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitLength]]
   Interface: 'MTLAttributeDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAttributeDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'NSAssertionHandler'
       SUPER: NSObject
- handleFailureInMethod:object:file:lineNumber:description:[[ void  ]]
- handleFailureInFunction:file:lineNumber:description:[[ void  ]]
+ currentHandler[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSAssertionHandler]]
   Interface: 'NSFileSecurity'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- initWithCoder:[[ INSTANCETYPE ]]
   Interface: 'NSCharacterSet'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
+ characterSetWithRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ characterSetWithCharactersInString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ characterSetWithBitmapRepresentation:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ characterSetWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSCharacterSet]]
- initWithCoder:[[ INSTANCETYPE ]]
- characterIsMember:[[ int  ]]
- longCharacterIsMember:[[ int  ]]
- isSupersetOfSet:[[ int  ]]
- hasMemberInPlane:[[ int  ]]
+ controlCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ whitespaceCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ whitespaceAndNewlineCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ decimalDigitCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ letterCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ lowercaseLetterCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ uppercaseLetterCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ nonBaseCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ alphanumericCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ decomposableCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ illegalCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ punctuationCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ capitalizedLetterCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ symbolCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ newlineCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
- bitmapRepresentation[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
- invertedSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ URLUserAllowedCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ URLPasswordAllowedCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ URLHostAllowedCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ URLPathAllowedCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ URLQueryAllowedCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
+ URLFragmentAllowedCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
   Interface: 'NSUnitFuelEfficiency'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ litersPer100Kilometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFuelEfficiency]]
+ milesPerImperialGallon[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFuelEfficiency]]
+ milesPerGallon[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFuelEfficiency]]
   Interface: 'NSURLSessionDownloadTask'
       SUPER: NSURLSessionTask
- cancelByProducingResumeData:[[ void  ]]
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
   Interface: 'NSURLSessionWebSocketTask'
       SUPER: NSURLSessionTask
- sendMessage:completionHandler:[[ void  ]]
- receiveMessageWithCompletionHandler:[[ void  ]]
- sendPingWithPongReceiveHandler:[[ void  ]]
- cancelWithCloseCode:reason:[[ void  ]]
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
- maximumMessageSize[[ long  ]]
- setMaximumMessageSize:[[ void  ]]
- closeCode[[ ENUMERATION enum NSURLSessionWebSocketCloseCode]]
- closeReason[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
   Interface: 'NSPredicate'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
+ predicateWithFormat:argumentArray:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPredicate]]
+ predicateWithFormat:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPredicate]]
+ predicateWithFormat:arguments:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPredicate]]
+ predicateFromMetadataQueryString:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSPredicate]]
+ predicateWithValue:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPredicate]]
+ predicateWithBlock:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPredicate]]
- predicateWithSubstitutionVariables:[[ INSTANCETYPE ]]
- evaluateWithObject:[[ int  ]]
- evaluateWithObject:substitutionVariables:[[ int  ]]
- allowEvaluation[[ void  ]]
- predicateFormat[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSCondition'
       SUPER: NSObject
       CONFORMING: NSLocking
- wait[[ void  ]]
- waitUntilDate:[[ int  ]]
- signal[[ void  ]]
- broadcast[[ void  ]]
- name[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
   Interface: 'NSInputStream'
       SUPER: NSStream
- read:maxLength:[[ long  ]]
- getBuffer:length:[[ int  ]]
- initWithData:[[ INSTANCETYPE ]]
- initWithURL:[[ INSTANCETYPE ]]
- hasBytesAvailable[[ int  ]]
- initWithFileAtPath:[[ INSTANCETYPE ]]
+ inputStreamWithData:[[ INSTANCETYPE ]]
+ inputStreamWithFileAtPath:[[ INSTANCETYPE ]]
+ inputStreamWithURL:[[ INSTANCETYPE ]]
   Interface: 'NSValue'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- getValue:size:[[ void  ]]
- initWithBytes:objCType:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- objCType[[ POINTER ]] -> [[ schar (const) ]]
+ valueWithBytes:objCType:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSValue]]
+ value:withObjCType:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSValue]]
+ valueWithNonretainedObject:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSValue]]
+ valueWithPointer:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSValue]]
- isEqualToValue:[[ int  ]]
- nonretainedObjectValue[[ ID ]]
- pointerValue[[ POINTER  (nullable) ]] -> [[ void  ]]
- getValue:[[ void  ]]
+ valueWithRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSValue]]
- rangeValue[[ RECORD _NSRange]]
   Interface: 'MTLSharedTextureHandle'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
- device[[ POINTER  (nonnull) ]] -> [[ ID<MTLDevice>]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSConstantString'
       SUPER: NSSimpleCString
   Interface: 'NSTimeZone'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- secondsFromGMTForDate:[[ long  ]]
- abbreviationForDate:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- isDaylightSavingTimeForDate:[[ int  ]]
- daylightSavingTimeOffsetForDate:[[ double  ]]
- nextDaylightSavingTimeTransitionAfterDate:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- data[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
+ resetSystemTimeZone[[ void  ]]
+ abbreviationDictionary[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- isEqualToTimeZone:[[ int  ]]
- localizedName:locale:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
+ systemTimeZone[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimeZone]]
+ defaultTimeZone[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimeZone]]
+ setDefaultTimeZone:[[ void  ]]
+ localTimeZone[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimeZone]]
+ knownTimeZoneNames[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ setAbbreviationDictionary:[[ void  ]]
+ timeZoneDataVersion[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- secondsFromGMT[[ long  ]]
- abbreviation[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- isDaylightSavingTime[[ int  ]]
- daylightSavingTimeOffset[[ double  ]]
- nextDaylightSavingTimeTransition[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- description[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ timeZoneWithName:[[ INSTANCETYPE ]]
+ timeZoneWithName:data:[[ INSTANCETYPE ]]
- initWithName:[[ INSTANCETYPE ]]
- initWithName:data:[[ INSTANCETYPE ]]
+ timeZoneForSecondsFromGMT:[[ INSTANCETYPE ]]
+ timeZoneWithAbbreviation:[[ INSTANCETYPE ]]
   Interface: 'NSData'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
- length[[ ulong  ]]
- bytes[[ POINTER ]] -> [[ void (const) ]]
- getBytes:length:[[ void  ]]
- getBytes:range:[[ void  ]]
- isEqualToData:[[ int  ]]
- subdataWithRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
- writeToFile:atomically:[[ int  ]]
- writeToURL:atomically:[[ int  ]]
- writeToFile:options:error:[[ int  ]]
- writeToURL:options:error:[[ int  ]]
- rangeOfData:options:range:[[ RECORD _NSRange]]
- enumerateByteRangesUsingBlock:[[ void  ]]
- description[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ data[[ INSTANCETYPE ]]
+ dataWithBytes:length:[[ INSTANCETYPE ]]
+ dataWithBytesNoCopy:length:[[ INSTANCETYPE ]]
+ dataWithBytesNoCopy:length:freeWhenDone:[[ INSTANCETYPE ]]
+ dataWithContentsOfFile:options:error:[[ INSTANCETYPE ]]
+ dataWithContentsOfURL:options:error:[[ INSTANCETYPE ]]
+ dataWithContentsOfFile:[[ INSTANCETYPE ]]
+ dataWithContentsOfURL:[[ INSTANCETYPE ]]
- initWithBytes:length:[[ INSTANCETYPE ]]
- initWithBytesNoCopy:length:[[ INSTANCETYPE ]]
- initWithBytesNoCopy:length:freeWhenDone:[[ INSTANCETYPE ]]
- initWithBytesNoCopy:length:deallocator:[[ INSTANCETYPE ]]
- initWithContentsOfFile:options:error:[[ INSTANCETYPE ]]
- initWithContentsOfURL:options:error:[[ INSTANCETYPE ]]
- initWithContentsOfFile:[[ INSTANCETYPE ]]
- initWithContentsOfURL:[[ INSTANCETYPE ]]
- initWithData:[[ INSTANCETYPE ]]
+ dataWithData:[[ INSTANCETYPE ]]
- initWithBase64EncodedString:options:[[ INSTANCETYPE ]]
- base64EncodedStringWithOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- initWithBase64EncodedData:options:[[ INSTANCETYPE ]]
- base64EncodedDataWithOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
- decompressedDataUsingAlgorithm:error:[[ INSTANCETYPE ]]
- compressedDataUsingAlgorithm:error:[[ INSTANCETYPE ]]
- getBytes:[[ void  ]]
+ dataWithContentsOfMappedFile:[[ ID ]]
- initWithContentsOfMappedFile:[[ ID ]]
- initWithBase64Encoding:[[ ID ]]
- base64Encoding[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'MTLAccelerationStructurePassSampleBufferAttachmentDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- sampleBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLCounterSampleBuffer>]]
- setSampleBuffer:[[ void  ]]
- startOfEncoderSampleIndex[[ ulong  ]]
- setStartOfEncoderSampleIndex:[[ void  ]]
- endOfEncoderSampleIndex[[ ulong  ]]
- setEndOfEncoderSampleIndex:[[ void  ]]
   Interface: 'NSAttributedStringMarkdownParsingOptions'
       SUPER: NSObject
       CONFORMING: NSCopying
- init[[ INSTANCETYPE ]]
- allowsExtendedAttributes[[ int  ]]
- setAllowsExtendedAttributes:[[ void  ]]
- interpretedSyntax[[ ENUMERATION enum NSAttributedStringMarkdownInterpretedSyntax]]
- setInterpretedSyntax:[[ void  ]]
- failurePolicy[[ ENUMERATION enum NSAttributedStringMarkdownParsingFailurePolicy]]
- setFailurePolicy:[[ void  ]]
- languageCode[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLanguageCode:[[ void  ]]
- appliesSourcePositionAttributes[[ int  ]]
- setAppliesSourcePositionAttributes:[[ void  ]]
   Interface: 'NSXPCCoder'
       SUPER: NSCoder
- userInfo[[ POINTER  (nullable) ]] -> [[ ID<NSObject>]]
- setUserInfo:[[ void  ]]
- connection[[ POINTER  (nullable) ]] -> [[ INTERFACE NSXPCConnection]]
   Interface: 'NSSimpleCString'
       SUPER: NSString
   Interface: 'MTLStructMember'
       SUPER: NSObject
- structType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLStructType]]
- arrayType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLArrayType]]
- textureReferenceType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLTextureReferenceType]]
- pointerType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLPointerType]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- offset[[ ulong  ]]
- dataType[[ ENUMERATION enum MTLDataType]]
- argumentIndex[[ ulong  ]]
   Interface: 'NSProgress'
       SUPER: NSObject
+ currentProgress[[ POINTER  (nullable) ]] -> [[ INTERFACE NSProgress]]
+ progressWithTotalUnitCount:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
+ discreteProgressWithTotalUnitCount:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
+ progressWithTotalUnitCount:parent:pendingUnitCount:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
- initWithParent:userInfo:[[ INSTANCETYPE ]]
- becomeCurrentWithPendingUnitCount:[[ void  ]]
- performAsCurrentWithPendingUnitCount:usingBlock:[[ void  ]]
- resignCurrent[[ void  ]]
- addChild:withPendingUnitCount:[[ void  ]]
- setUserInfoObject:forKey:[[ void  ]]
- cancel[[ void  ]]
- pause[[ void  ]]
- resume[[ void  ]]
- publish[[ void  ]]
- unpublish[[ void  ]]
+ addSubscriberForFileURL:withPublishingHandler:[[ ID ]]
+ removeSubscriber:[[ void  ]]
- totalUnitCount[[ longlong  ]]
- setTotalUnitCount:[[ void  ]]
- completedUnitCount[[ longlong  ]]
- setCompletedUnitCount:[[ void  ]]
- localizedDescription[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setLocalizedDescription:[[ void  ]]
- localizedAdditionalDescription[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setLocalizedAdditionalDescription:[[ void  ]]
- isCancellable[[ int  ]]
- setCancellable:[[ void  ]]
- isPausable[[ int  ]]
- setPausable:[[ void  ]]
- isCancelled[[ int  ]]
- isPaused[[ int  ]]
- cancellationHandler[[ BLOCK_POINTER ]]
- setCancellationHandler:[[ void  ]]
- pausingHandler[[ BLOCK_POINTER ]]
- setPausingHandler:[[ void  ]]
- resumingHandler[[ BLOCK_POINTER ]]
- setResumingHandler:[[ void  ]]
- isIndeterminate[[ int  ]]
- fractionCompleted[[ double  ]]
- isFinished[[ int  ]]
- userInfo[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- kind[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setKind:[[ void  ]]
- estimatedTimeRemaining[[ POINTER ]] -> [[ INTERFACE NSNumber]]
- setEstimatedTimeRemaining:[[ void  ]]
- throughput[[ POINTER ]] -> [[ INTERFACE NSNumber]]
- setThroughput:[[ void  ]]
- fileOperationKind[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setFileOperationKind:[[ void  ]]
- fileURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- setFileURL:[[ void  ]]
- fileTotalCount[[ POINTER ]] -> [[ INTERFACE NSNumber]]
- setFileTotalCount:[[ void  ]]
- fileCompletedCount[[ POINTER ]] -> [[ INTERFACE NSNumber]]
- setFileCompletedCount:[[ void  ]]
- isOld[[ int  ]]
   Interface: 'NSScanner'
       SUPER: NSObject
       CONFORMING: NSCopying
- initWithString:[[ INSTANCETYPE ]]
- string[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- scanLocation[[ ulong  ]]
- setScanLocation:[[ void  ]]
- charactersToBeSkipped[[ POINTER  (nullable) ]] -> [[ INTERFACE NSCharacterSet]]
- setCharactersToBeSkipped:[[ void  ]]
- caseSensitive[[ int  ]]
- setCaseSensitive:[[ void  ]]
- locale[[ ID ]]
- setLocale:[[ void  ]]
- scanInt:[[ int  ]]
- scanInteger:[[ int  ]]
- scanLongLong:[[ int  ]]
- scanUnsignedLongLong:[[ int  ]]
- scanFloat:[[ int  ]]
- scanDouble:[[ int  ]]
- scanHexInt:[[ int  ]]
- scanHexLongLong:[[ int  ]]
- scanHexFloat:[[ int  ]]
- scanHexDouble:[[ int  ]]
- scanString:intoString:[[ int  ]]
- scanCharactersFromSet:intoString:[[ int  ]]
- scanUpToString:intoString:[[ int  ]]
- scanUpToCharactersFromSet:intoString:[[ int  ]]
+ scannerWithString:[[ INSTANCETYPE ]]
+ localizedScannerWithString:[[ ID ]]
- isAtEnd[[ int  ]]
- scanDecimal:[[ int  ]]
   Interface: 'NSExtensionContext'
       SUPER: NSObject
- completeRequestReturningItems:completionHandler:[[ void  ]]
- cancelRequestWithError:[[ void  ]]
- openURL:completionHandler:[[ void  ]]
- inputItems[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSProcessInfo'
       SUPER: NSObject
- operatingSystem[[ ulong  ]]
- operatingSystemName[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- isOperatingSystemAtLeastVersion:[[ int  ]]
- disableSuddenTermination[[ void  ]]
- enableSuddenTermination[[ void  ]]
- disableAutomaticTermination:[[ void  ]]
- enableAutomaticTermination:[[ void  ]]
+ processInfo[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProcessInfo]]
- environment[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- arguments[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- hostName[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- processName[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setProcessName:[[ void  ]]
- processIdentifier[[ int  ]]
- globallyUniqueString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- operatingSystemVersionString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- operatingSystemVersion[[ RECORD NSOperatingSystemVersion]]
- processorCount[[ ulong  ]]
- activeProcessorCount[[ ulong  ]]
- physicalMemory[[ ulonglong  ]]
- systemUptime[[ double  ]]
- automaticTerminationSupportEnabled[[ int  ]]
- setAutomaticTerminationSupportEnabled:[[ void  ]]
- beginActivityWithOptions:reason:[[ POINTER  (nonnull) ]] -> [[ ID<NSObject>]]
- endActivity:[[ void  ]]
- performActivityWithOptions:reason:usingBlock:[[ void  ]]
- performExpiringActivityWithReason:usingBlock:[[ void  ]]
- userName[[ POINTER ]] -> [[ INTERFACE NSString]]
- fullUserName[[ POINTER ]] -> [[ INTERFACE NSString]]
- thermalState[[ ENUMERATION enum NSProcessInfoThermalState]]
- isLowPowerModeEnabled[[ int  ]]
- isMacCatalystApp[[ int  ]]
- isiOSAppOnMac[[ int  ]]
   Interface: 'MTLPipelineBufferDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- mutability[[ ENUMERATION enum MTLMutability]]
- setMutability:[[ void  ]]
   Interface: 'MTLBlitPassSampleBufferAttachmentDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLBlitPassSampleBufferAttachmentDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'MTLTextureDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ texture2DDescriptorWithPixelFormat:width:height:mipmapped:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]]
+ textureCubeDescriptorWithPixelFormat:size:mipmapped:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]]
+ textureBufferDescriptorWithPixelFormat:width:resourceOptions:usage:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTextureDescriptor]]
- textureType[[ ENUMERATION enum MTLTextureType]]
- setTextureType:[[ void  ]]
- pixelFormat[[ ENUMERATION enum MTLPixelFormat]]
- setPixelFormat:[[ void  ]]
- width[[ ulong  ]]
- setWidth:[[ void  ]]
- height[[ ulong  ]]
- setHeight:[[ void  ]]
- depth[[ ulong  ]]
- setDepth:[[ void  ]]
- mipmapLevelCount[[ ulong  ]]
- setMipmapLevelCount:[[ void  ]]
- sampleCount[[ ulong  ]]
- setSampleCount:[[ void  ]]
- arrayLength[[ ulong  ]]
- setArrayLength:[[ void  ]]
- resourceOptions[[ ENUMERATION enum MTLResourceOptions]]
- setResourceOptions:[[ void  ]]
- cpuCacheMode[[ ENUMERATION enum MTLCPUCacheMode]]
- setCpuCacheMode:[[ void  ]]
- storageMode[[ ENUMERATION enum MTLStorageMode]]
- setStorageMode:[[ void  ]]
- hazardTrackingMode[[ ENUMERATION enum MTLHazardTrackingMode]]
- setHazardTrackingMode:[[ void  ]]
- usage[[ ENUMERATION enum MTLTextureUsage]]
- setUsage:[[ void  ]]
- allowGPUOptimizedContents[[ int  ]]
- setAllowGPUOptimizedContents:[[ void  ]]
- compressionType[[ ENUMERATION enum MTLTextureCompressionType]]
- setCompressionType:[[ void  ]]
- swizzle[[ RECORD MTLTextureSwizzleChannels]]
- setSwizzle:[[ void  ]]
   Interface: 'NSMutableCharacterSet'
       SUPER: NSCharacterSet
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
- addCharactersInRange:[[ void  ]]
- removeCharactersInRange:[[ void  ]]
- addCharactersInString:[[ void  ]]
- removeCharactersInString:[[ void  ]]
- formUnionWithCharacterSet:[[ void  ]]
- formIntersectionWithCharacterSet:[[ void  ]]
- invert[[ void  ]]
+ controlCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ whitespaceCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ whitespaceAndNewlineCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ decimalDigitCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ letterCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ lowercaseLetterCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ uppercaseLetterCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ nonBaseCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ alphanumericCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ decomposableCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ illegalCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ punctuationCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ capitalizedLetterCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ symbolCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ newlineCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ characterSetWithRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ characterSetWithCharactersInString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ characterSetWithBitmapRepresentation:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableCharacterSet]]
+ characterSetWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMutableCharacterSet]]
   Interface: 'NSUbiquitousKeyValueStore'
       SUPER: NSObject
- objectForKey:[[ ID ]]
- setObject:forKey:[[ void  ]]
- removeObjectForKey:[[ void  ]]
- stringForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- arrayForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- dictionaryForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- dataForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- longLongForKey:[[ longlong  ]]
- doubleForKey:[[ double  ]]
- boolForKey:[[ int  ]]
- setString:forKey:[[ void  ]]
- setData:forKey:[[ void  ]]
- setArray:forKey:[[ void  ]]
- setDictionary:forKey:[[ void  ]]
- setLongLong:forKey:[[ void  ]]
- setDouble:forKey:[[ void  ]]
- setBool:forKey:[[ void  ]]
- synchronize[[ int  ]]
+ defaultStore[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUbiquitousKeyValueStore]]
- dictionaryRepresentation[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
   Interface: 'MTLVisibleFunctionTableDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ visibleFunctionTableDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLVisibleFunctionTableDescriptor]]
- functionCount[[ ulong  ]]
- setFunctionCount:[[ void  ]]
   Interface: 'NSTermOfAddress'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
+ neutral[[ INSTANCETYPE ]]
+ feminine[[ INSTANCETYPE ]]
+ masculine[[ INSTANCETYPE ]]
+ localizedForLanguageIdentifier:withPronouns:[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
- init[[ INSTANCETYPE ]]
- languageIdentifier[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- pronouns[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSNotificationQueue'
       SUPER: NSObject
- initWithNotificationCenter:[[ INSTANCETYPE ]]
- enqueueNotification:postingStyle:[[ void  ]]
- enqueueNotification:postingStyle:coalesceMask:forModes:[[ void  ]]
- dequeueNotificationsMatching:coalesceMask:[[ void  ]]
+ defaultQueue[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNotificationQueue]]
   Interface: 'NSMutableData'
       SUPER: NSData
- mutableBytes[[ POINTER ]] -> [[ void  ]]
- length[[ ulong  ]]
- setLength:[[ void  ]]
- appendBytes:length:[[ void  ]]
- appendData:[[ void  ]]
- increaseLengthBy:[[ void  ]]
- replaceBytesInRange:withBytes:[[ void  ]]
- resetBytesInRange:[[ void  ]]
- setData:[[ void  ]]
- replaceBytesInRange:withBytes:length:[[ void  ]]
+ dataWithCapacity:[[ INSTANCETYPE ]]
+ dataWithLength:[[ INSTANCETYPE ]]
- initWithCapacity:[[ INSTANCETYPE ]]
- initWithLength:[[ INSTANCETYPE ]]
- decompressUsingAlgorithm:error:[[ int  ]]
- compressUsingAlgorithm:error:[[ int  ]]
   Interface: 'MTLAccelerationStructureTriangleGeometryDescriptor'
       SUPER: MTLAccelerationStructureGeometryDescriptor
+ descriptor[[ INSTANCETYPE ]]
- vertexBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setVertexBuffer:[[ void  ]]
- vertexBufferOffset[[ ulong  ]]
- setVertexBufferOffset:[[ void  ]]
- vertexFormat[[ ENUMERATION enum MTLAttributeFormat]]
- setVertexFormat:[[ void  ]]
- vertexStride[[ ulong  ]]
- setVertexStride:[[ void  ]]
- indexBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setIndexBuffer:[[ void  ]]
- indexBufferOffset[[ ulong  ]]
- setIndexBufferOffset:[[ void  ]]
- indexType[[ ENUMERATION enum MTLIndexType]]
- setIndexType:[[ void  ]]
- triangleCount[[ ulong  ]]
- setTriangleCount:[[ void  ]]
- transformationMatrixBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setTransformationMatrixBuffer:[[ void  ]]
- transformationMatrixBufferOffset[[ ulong  ]]
- setTransformationMatrixBufferOffset:[[ void  ]]
   Interface: 'NSUnitFrequency'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ terahertz[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFrequency]]
+ gigahertz[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFrequency]]
+ megahertz[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFrequency]]
+ kilohertz[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFrequency]]
+ hertz[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFrequency]]
+ millihertz[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFrequency]]
+ microhertz[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFrequency]]
+ nanohertz[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFrequency]]
+ framesPerSecond[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitFrequency]]
   Interface: 'NSUnitSpeed'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ metersPerSecond[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitSpeed]]
+ kilometersPerHour[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitSpeed]]
+ milesPerHour[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitSpeed]]
+ knots[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitSpeed]]
   Interface: 'NSUnitVolume'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ megaliters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ kiloliters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ liters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ deciliters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ centiliters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ milliliters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cubicKilometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cubicMeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cubicDecimeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cubicCentimeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cubicMillimeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cubicInches[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cubicFeet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cubicYards[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cubicMiles[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ acreFeet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ bushels[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ teaspoons[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ tablespoons[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ fluidOunces[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ cups[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ pints[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ quarts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ gallons[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ imperialTeaspoons[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ imperialTablespoons[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ imperialFluidOunces[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ imperialPints[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ imperialQuarts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ imperialGallons[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
+ metricCups[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitVolume]]
   Interface: 'MTLArchitecture'
       SUPER: NSObject
       CONFORMING: NSCopying
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSEnumerator'
       SUPER: NSObject
       CONFORMING: NSFastEnumeration
- nextObject[[ ID ]]
- allObjects[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSHTTPCookieStorage'
       SUPER: NSObject
+ sharedCookieStorageForGroupContainerIdentifier:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSHTTPCookieStorage]]
- setCookie:[[ void  ]]
- deleteCookie:[[ void  ]]
- removeCookiesSinceDate:[[ void  ]]
- cookiesForURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setCookies:forURL:mainDocumentURL:[[ void  ]]
- sortedCookiesUsingDescriptors:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ sharedHTTPCookieStorage[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSHTTPCookieStorage]]
- cookies[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- cookieAcceptPolicy[[ ENUMERATION enum NSHTTPCookieAcceptPolicy]]
- setCookieAcceptPolicy:[[ void  ]]
- storeCookies:forTask:[[ void  ]]
- getCookiesForTask:completionHandler:[[ void  ]]
   Interface: 'NSDirectoryEnumerator'
       SUPER: NSEnumerator
- skipDescendents[[ void  ]]
- skipDescendants[[ void  ]]
- fileAttributes[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- directoryAttributes[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- isEnumeratingDirectoryPostOrder[[ int  ]]
- level[[ ulong  ]]
   Interface: 'NSDateComponentsFormatter'
       SUPER: NSFormatter
- stringForObjectValue:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- stringFromDateComponents:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- stringFromDate:toDate:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- stringFromTimeInterval:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
+ localizedStringFromDateComponents:unitsStyle:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- getObjectValue:forString:errorDescription:[[ int  ]]
- unitsStyle[[ ENUMERATION enum NSDateComponentsFormatterUnitsStyle]]
- setUnitsStyle:[[ void  ]]
- allowedUnits[[ ENUMERATION enum NSCalendarUnit]]
- setAllowedUnits:[[ void  ]]
- zeroFormattingBehavior[[ ENUMERATION enum NSDateComponentsFormatterZeroFormattingBehavior]]
- setZeroFormattingBehavior:[[ void  ]]
- calendar[[ POINTER  (nullable) ]] -> [[ INTERFACE NSCalendar]]
- setCalendar:[[ void  ]]
- referenceDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- setReferenceDate:[[ void  ]]
- allowsFractionalUnits[[ int  ]]
- setAllowsFractionalUnits:[[ void  ]]
- maximumUnitCount[[ long  ]]
- setMaximumUnitCount:[[ void  ]]
- collapsesLargestUnit[[ int  ]]
- setCollapsesLargestUnit:[[ void  ]]
- includesApproximationPhrase[[ int  ]]
- setIncludesApproximationPhrase:[[ void  ]]
- includesTimeRemainingPhrase[[ int  ]]
- setIncludesTimeRemainingPhrase:[[ void  ]]
- formattingContext[[ ENUMERATION enum NSFormattingContext]]
- setFormattingContext:[[ void  ]]
   Interface: 'MTLTileRenderPipelineDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- reset[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]]
- tileFunction[[ POINTER  (nonnull) ]] -> [[ ID<MTLFunction>]]
- setTileFunction:[[ void  ]]
- rasterSampleCount[[ ulong  ]]
- setRasterSampleCount:[[ void  ]]
- colorAttachments[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTileRenderPipelineColorAttachmentDescriptorArray]]
- threadgroupSizeMatchesTileSize[[ int  ]]
- setThreadgroupSizeMatchesTileSize:[[ void  ]]
- tileBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLPipelineBufferDescriptorArray]]
- maxTotalThreadsPerThreadgroup[[ ulong  ]]
- setMaxTotalThreadsPerThreadgroup:[[ void  ]]
- binaryArchives[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setBinaryArchives:[[ void  ]]
- preloadedLibraries[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setPreloadedLibraries:[[ void  ]]
- linkedFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLLinkedFunctions]]
- setLinkedFunctions:[[ void  ]]
- supportAddingBinaryFunctions[[ int  ]]
- setSupportAddingBinaryFunctions:[[ void  ]]
- maxCallStackDepth[[ ulong  ]]
- setMaxCallStackDepth:[[ void  ]]
   Interface: 'MTLIndirectCommandBufferDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- commandTypes[[ ENUMERATION enum MTLIndirectCommandType]]
- setCommandTypes:[[ void  ]]
- inheritPipelineState[[ int  ]]
- setInheritPipelineState:[[ void  ]]
- inheritBuffers[[ int  ]]
- setInheritBuffers:[[ void  ]]
- maxVertexBufferBindCount[[ ulong  ]]
- setMaxVertexBufferBindCount:[[ void  ]]
- maxFragmentBufferBindCount[[ ulong  ]]
- setMaxFragmentBufferBindCount:[[ void  ]]
- maxKernelBufferBindCount[[ ulong  ]]
- setMaxKernelBufferBindCount:[[ void  ]]
- maxKernelThreadgroupMemoryBindCount[[ ulong  ]]
- setMaxKernelThreadgroupMemoryBindCount:[[ void  ]]
- maxObjectBufferBindCount[[ ulong  ]]
- setMaxObjectBufferBindCount:[[ void  ]]
- maxMeshBufferBindCount[[ ulong  ]]
- setMaxMeshBufferBindCount:[[ void  ]]
- maxObjectThreadgroupMemoryBindCount[[ ulong  ]]
- setMaxObjectThreadgroupMemoryBindCount:[[ void  ]]
- supportRayTracing[[ int  ]]
- setSupportRayTracing:[[ void  ]]
- supportDynamicAttributeStride[[ int  ]]
- setSupportDynamicAttributeStride:[[ void  ]]
   Interface: 'NSByteCountFormatter'
       SUPER: NSFormatter
+ stringFromByteCount:countStyle:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringFromByteCount:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ stringFromMeasurement:countStyle:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringFromMeasurement:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringForObjectValue:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- allowedUnits[[ ENUMERATION enum NSByteCountFormatterUnits]]
- setAllowedUnits:[[ void  ]]
- countStyle[[ ENUMERATION enum NSByteCountFormatterCountStyle]]
- setCountStyle:[[ void  ]]
- allowsNonnumericFormatting[[ int  ]]
- setAllowsNonnumericFormatting:[[ void  ]]
- includesUnit[[ int  ]]
- setIncludesUnit:[[ void  ]]
- includesCount[[ int  ]]
- setIncludesCount:[[ void  ]]
- includesActualByteCount[[ int  ]]
- setIncludesActualByteCount:[[ void  ]]
- isAdaptive[[ int  ]]
- setAdaptive:[[ void  ]]
- zeroPadsFractionDigits[[ int  ]]
- setZeroPadsFractionDigits:[[ void  ]]
- formattingContext[[ ENUMERATION enum NSFormattingContext]]
- setFormattingContext:[[ void  ]]
   Interface: 'MTLCompileOptions'
       SUPER: NSObject
       CONFORMING: NSCopying
- preprocessorMacros[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setPreprocessorMacros:[[ void  ]]
- fastMathEnabled[[ int  ]]
- setFastMathEnabled:[[ void  ]]
- languageVersion[[ ENUMERATION enum MTLLanguageVersion]]
- setLanguageVersion:[[ void  ]]
- libraryType[[ ENUMERATION enum MTLLibraryType]]
- setLibraryType:[[ void  ]]
- installName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setInstallName:[[ void  ]]
- libraries[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setLibraries:[[ void  ]]
- preserveInvariance[[ int  ]]
- setPreserveInvariance:[[ void  ]]
- optimizationLevel[[ ENUMERATION enum MTLLibraryOptimizationLevel]]
- setOptimizationLevel:[[ void  ]]
- compileSymbolVisibility[[ ENUMERATION enum MTLCompileSymbolVisibility]]
- setCompileSymbolVisibility:[[ void  ]]
- allowReferencingUndefinedSymbols[[ int  ]]
- setAllowReferencingUndefinedSymbols:[[ void  ]]
- maxTotalThreadsPerThreadgroup[[ ulong  ]]
- setMaxTotalThreadsPerThreadgroup:[[ void  ]]
   Interface: 'NSNull'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
+ null[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNull]]
   Interface: 'NSFileManager'
       SUPER: NSObject
- mountedVolumeURLsIncludingResourceValuesForKeys:options:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- unmountVolumeAtURL:options:completionHandler:[[ void  ]]
- contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- URLsForDirectory:inDomains:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- URLForDirectory:inDomain:appropriateForURL:create:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- getRelationship:ofDirectoryAtURL:toItemAtURL:error:[[ int  ]]
- getRelationship:ofDirectory:inDomain:toItemAtURL:error:[[ int  ]]
- createDirectoryAtURL:withIntermediateDirectories:attributes:error:[[ int  ]]
- createSymbolicLinkAtURL:withDestinationURL:error:[[ int  ]]
- setAttributes:ofItemAtPath:error:[[ int  ]]
- createDirectoryAtPath:withIntermediateDirectories:attributes:error:[[ int  ]]
- contentsOfDirectoryAtPath:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- subpathsOfDirectoryAtPath:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- attributesOfItemAtPath:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- attributesOfFileSystemForPath:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- createSymbolicLinkAtPath:withDestinationPath:error:[[ int  ]]
- destinationOfSymbolicLinkAtPath:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- copyItemAtPath:toPath:error:[[ int  ]]
- moveItemAtPath:toPath:error:[[ int  ]]
- linkItemAtPath:toPath:error:[[ int  ]]
- removeItemAtPath:error:[[ int  ]]
- copyItemAtURL:toURL:error:[[ int  ]]
- moveItemAtURL:toURL:error:[[ int  ]]
- linkItemAtURL:toURL:error:[[ int  ]]
- removeItemAtURL:error:[[ int  ]]
- trashItemAtURL:resultingItemURL:error:[[ int  ]]
- fileAttributesAtPath:traverseLink:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- changeFileAttributes:atPath:[[ int  ]]
- directoryContentsAtPath:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- fileSystemAttributesAtPath:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- pathContentOfSymbolicLinkAtPath:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- createSymbolicLinkAtPath:pathContent:[[ int  ]]
- createDirectoryAtPath:attributes:[[ int  ]]
- changeCurrentDirectoryPath:[[ int  ]]
- fileExistsAtPath:[[ int  ]]
- fileExistsAtPath:isDirectory:[[ int  ]]
- isReadableFileAtPath:[[ int  ]]
- isWritableFileAtPath:[[ int  ]]
- isExecutableFileAtPath:[[ int  ]]
- isDeletableFileAtPath:[[ int  ]]
- contentsEqualAtPath:andPath:[[ int  ]]
- displayNameAtPath:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- componentsToDisplayForPath:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- enumeratorAtPath:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDirectoryEnumerator]]
- enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDirectoryEnumerator]]
- subpathsAtPath:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- contentsAtPath:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- createFileAtPath:contents:attributes:[[ int  ]]
- fileSystemRepresentationWithPath:[[ POINTER  (nonnull) ]] -> [[ schar (const) ]]
- stringWithFileSystemRepresentation:length:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:[[ int  ]]
- setUbiquitous:itemAtURL:destinationURL:error:[[ int  ]]
- isUbiquitousItemAtURL:[[ int  ]]
- startDownloadingUbiquitousItemAtURL:error:[[ int  ]]
- evictUbiquitousItemAtURL:error:[[ int  ]]
- URLForUbiquityContainerIdentifier:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLForPublishingUbiquitousItemAtURL:expirationDate:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- getFileProviderServicesForItemAtURL:completionHandler:[[ void  ]]
- containerURLForSecurityApplicationGroupIdentifier:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
+ defaultManager[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileManager]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSFileManagerDelegate>]]
- setDelegate:[[ void  ]]
- currentDirectoryPath[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- ubiquityIdentityToken[[ POINTER  (nullable) ]] -> [[ ID ]]
- homeDirectoryForUser:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- homeDirectoryForCurrentUser[[ POINTER ]] -> [[ INTERFACE NSURL]]
- temporaryDirectory[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
   Interface: 'NSRunLoop'
       SUPER: NSObject
- getCFRunLoop[[ POINTER  (nonnull) ]] -> [[ RECORD __CFRunLoop]]
- addTimer:forMode:[[ void  ]]
- addPort:forMode:[[ void  ]]
- removePort:forMode:[[ void  ]]
- limitDateForMode:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- acceptInputForMode:beforeDate:[[ void  ]]
+ currentRunLoop[[ POINTER ]] -> [[ INTERFACE NSRunLoop]]
+ mainRunLoop[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSRunLoop]]
- currentMode[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- run[[ void  ]]
- runUntilDate:[[ void  ]]
- runMode:beforeDate:[[ int  ]]
- performInModes:block:[[ void  ]]
- performBlock:[[ void  ]]
- performSelector:target:argument:order:modes:[[ void  ]]
- cancelPerformSelector:target:argument:[[ void  ]]
- cancelPerformSelectorsWithTarget:[[ void  ]]
   Interface: 'MTLArgument'
       SUPER: NSObject
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- type[[ ENUMERATION enum MTLArgumentType]]
- access[[ ENUMERATION enum MTLBindingAccess]]
- index[[ ulong  ]]
- isActive[[ int  ]]
- bufferAlignment[[ ulong  ]]
- bufferDataSize[[ ulong  ]]
- bufferDataType[[ ENUMERATION enum MTLDataType]]
- bufferStructType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLStructType]]
- bufferPointerType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLPointerType]]
- threadgroupMemoryAlignment[[ ulong  ]]
- threadgroupMemoryDataSize[[ ulong  ]]
- textureType[[ ENUMERATION enum MTLTextureType]]
- textureDataType[[ ENUMERATION enum MTLDataType]]
- isDepthTexture[[ int  ]]
- arrayLength[[ ulong  ]]
   Interface: 'MTLRasterizationRateSampleArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'NSUnitConverterLinear'
       SUPER: NSUnitConverter
       CONFORMING: NSSecureCoding
- initWithCoefficient:[[ INSTANCETYPE ]]
- initWithCoefficient:constant:[[ INSTANCETYPE ]]
- coefficient[[ double  ]]
- constant[[ double  ]]
   Interface: 'NSIndexPath'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
+ indexPathWithIndex:[[ INSTANCETYPE ]]
+ indexPathWithIndexes:length:[[ INSTANCETYPE ]]
- initWithIndexes:length:[[ INSTANCETYPE ]]
- initWithIndex:[[ INSTANCETYPE ]]
- indexPathByAddingIndex:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexPath]]
- indexPathByRemovingLastIndex[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexPath]]
- indexAtPosition:[[ ulong  ]]
- getIndexes:range:[[ void  ]]
- compare:[[ ENUMERATION enum NSComparisonResult]]
- length[[ ulong  ]]
- getIndexes:[[ void  ]]
   Interface: 'NSDataDetector'
       SUPER: NSRegularExpression
+ dataDetectorWithTypes:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDataDetector]]
- initWithTypes:error:[[ INSTANCETYPE ]]
- checkingTypes[[ ulonglong  ]]
   Interface: 'NSBlockOperation'
       SUPER: NSOperation
+ blockOperationWithBlock:[[ INSTANCETYPE ]]
- addExecutionBlock:[[ void  ]]
- executionBlocks[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'MTLRenderPassAttachmentDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- texture[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]]
- setTexture:[[ void  ]]
- level[[ ulong  ]]
- setLevel:[[ void  ]]
- slice[[ ulong  ]]
- setSlice:[[ void  ]]
- depthPlane[[ ulong  ]]
- setDepthPlane:[[ void  ]]
- resolveTexture[[ POINTER  (nullable) ]] -> [[ ID<MTLTexture>]]
- setResolveTexture:[[ void  ]]
- resolveLevel[[ ulong  ]]
- setResolveLevel:[[ void  ]]
- resolveSlice[[ ulong  ]]
- setResolveSlice:[[ void  ]]
- resolveDepthPlane[[ ulong  ]]
- setResolveDepthPlane:[[ void  ]]
- loadAction[[ ENUMERATION enum MTLLoadAction]]
- setLoadAction:[[ void  ]]
- storeAction[[ ENUMERATION enum MTLStoreAction]]
- setStoreAction:[[ void  ]]
- storeActionOptions[[ ENUMERATION enum MTLStoreActionOptions]]
- setStoreActionOptions:[[ void  ]]
   Interface: 'NSMutableDictionary'
       SUPER: NSDictionary
- removeObjectForKey:[[ void  ]]
- setObject:forKey:[[ void  ]]
- init[[ INSTANCETYPE ]]
- initWithCapacity:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- addEntriesFromDictionary:[[ void  ]]
- removeAllObjects[[ void  ]]
- removeObjectsForKeys:[[ void  ]]
- setDictionary:[[ void  ]]
- setObject:forKeyedSubscript:[[ void  ]]
+ dictionaryWithCapacity:[[ INSTANCETYPE ]]
+ dictionaryWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMutableDictionary]]
+ dictionaryWithContentsOfURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMutableDictionary]]
- initWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMutableDictionary]]
- initWithContentsOfURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMutableDictionary]]
+ dictionaryWithSharedKeySet:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableDictionary]]
- setValue:forKey:[[ void  ]]
   Interface: 'NSSet'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
       CONFORMING: NSFastEnumeration
- member:[[ ID ]]
- objectEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- init[[ INSTANCETYPE ]]
- initWithObjects:count:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- count[[ ulong  ]]
- anyObject[[ ID ]]
- containsObject:[[ int  ]]
- descriptionWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- intersectsSet:[[ int  ]]
- isEqualToSet:[[ int  ]]
- isSubsetOfSet:[[ int  ]]
- makeObjectsPerformSelector:[[ void  ]]
- makeObjectsPerformSelector:withObject:[[ void  ]]
- setByAddingObject:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- setByAddingObjectsFromSet:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- setByAddingObjectsFromArray:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- enumerateObjectsUsingBlock:[[ void  ]]
- enumerateObjectsWithOptions:usingBlock:[[ void  ]]
- objectsPassingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- objectsWithOptions:passingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- allObjects[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- description[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ set[[ INSTANCETYPE ]]
+ setWithObject:[[ INSTANCETYPE ]]
+ setWithObjects:count:[[ INSTANCETYPE ]]
+ setWithObjects:[[ INSTANCETYPE ]]
+ setWithSet:[[ INSTANCETYPE ]]
+ setWithArray:[[ INSTANCETYPE ]]
- initWithObjects:[[ INSTANCETYPE ]]
- initWithSet:[[ INSTANCETYPE ]]
- initWithSet:copyItems:[[ INSTANCETYPE ]]
- initWithArray:[[ INSTANCETYPE ]]
- valueForKey:[[ ID ]]
- setValue:forKey:[[ void  ]]
- addObserver:forKeyPath:options:context:[[ void  ]]
- removeObserver:forKeyPath:context:[[ void  ]]
- removeObserver:forKeyPath:[[ void  ]]
- sortedArrayUsingDescriptors:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- filteredSetUsingPredicate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
   Interface: 'NSISO8601DateFormatter'
       SUPER: NSFormatter
       CONFORMING: NSSecureCoding
- init[[ INSTANCETYPE ]]
- stringFromDate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- dateFromString:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
+ stringFromDate:timeZone:formatOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- timeZone[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimeZone]]
- setTimeZone:[[ void  ]]
- formatOptions[[ ENUMERATION enum NSISO8601DateFormatOptions]]
- setFormatOptions:[[ void  ]]
   Interface: 'MTLSharedEventListener'
       SUPER: NSObject
- init[[ INSTANCETYPE ]]
- initWithDispatchQueue:[[ INSTANCETYPE ]]
- dispatchQueue[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSObject]]
   Interface: 'MTLStitchedLibraryDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- functionGraphs[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setFunctionGraphs:[[ void  ]]
- functions[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setFunctions:[[ void  ]]
   Interface: 'NSURLProtocol'
       SUPER: NSObject
- initWithRequest:cachedResponse:client:[[ INSTANCETYPE ]]
+ canInitWithRequest:[[ int  ]]
+ canonicalRequestForRequest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]]
+ requestIsCacheEquivalent:toRequest:[[ int  ]]
- startLoading[[ void  ]]
- stopLoading[[ void  ]]
+ propertyForKey:inRequest:[[ ID ]]
+ setProperty:forKey:inRequest:[[ void  ]]
+ removePropertyForKey:inRequest:[[ void  ]]
+ registerClass:[[ int  ]]
+ unregisterClass:[[ void  ]]
- client[[ POINTER  (nullable) ]] -> [[ ID<NSURLProtocolClient>]]
- request[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]]
- cachedResponse[[ POINTER  (nullable) ]] -> [[ INTERFACE NSCachedURLResponse]]
+ canInitWithTask:[[ int  ]]
- initWithTask:cachedResponse:client:[[ INSTANCETYPE ]]
- task[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLSessionTask]]
   Interface: 'NSNotification'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSCoding
- initWithName:object:userInfo:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- object[[ ID ]]
- userInfo[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
+ notificationWithName:object:[[ INSTANCETYPE ]]
+ notificationWithName:object:userInfo:[[ INSTANCETYPE ]]
- init[[ INSTANCETYPE ]]
   Interface: 'MTLArrayType'
       SUPER: MTLType
- elementStructType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLStructType]]
- elementArrayType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLArrayType]]
- elementTextureReferenceType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLTextureReferenceType]]
- elementPointerType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLPointerType]]
- elementType[[ ENUMERATION enum MTLDataType]]
- arrayLength[[ ulong  ]]
- stride[[ ulong  ]]
- argumentIndexStride[[ ulong  ]]
   Interface: 'NSCachedURLResponse'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
- initWithResponse:data:[[ INSTANCETYPE ]]
- initWithResponse:data:userInfo:storagePolicy:[[ INSTANCETYPE ]]
- response[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLResponse]]
- data[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
- userInfo[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- storagePolicy[[ ENUMERATION enum NSURLCacheStoragePolicy]]
   Interface: 'NSURLResponse'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
- initWithURL:MIMEType:expectedContentLength:textEncodingName:[[ INSTANCETYPE ]]
- URL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- MIMEType[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- expectedContentLength[[ longlong  ]]
- textEncodingName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- suggestedFilename[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
   Interface: 'MTLArgumentDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ argumentDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLArgumentDescriptor]]
- dataType[[ ENUMERATION enum MTLDataType]]
- setDataType:[[ void  ]]
- index[[ ulong  ]]
- setIndex:[[ void  ]]
- arrayLength[[ ulong  ]]
- setArrayLength:[[ void  ]]
- access[[ ENUMERATION enum MTLBindingAccess]]
- setAccess:[[ void  ]]
- textureType[[ ENUMERATION enum MTLTextureType]]
- setTextureType:[[ void  ]]
- constantBlockAlignment[[ ulong  ]]
- setConstantBlockAlignment:[[ void  ]]
   Interface: 'NSNetServiceBrowser'
       SUPER: NSObject
- init[[ INSTANCETYPE ]]
- scheduleInRunLoop:forMode:[[ void  ]]
- removeFromRunLoop:forMode:[[ void  ]]
- searchForBrowsableDomains[[ void  ]]
- searchForRegistrationDomains[[ void  ]]
- searchForServicesOfType:inDomain:[[ void  ]]
- stop[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSNetServiceBrowserDelegate>]]
- setDelegate:[[ void  ]]
- includesPeerToPeer[[ int  ]]
- setIncludesPeerToPeer:[[ void  ]]
   Interface: 'MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor'
       SUPER: MTLAccelerationStructureGeometryDescriptor
+ descriptor[[ INSTANCETYPE ]]
- boundingBoxBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setBoundingBoxBuffers:[[ void  ]]
- boundingBoxStride[[ ulong  ]]
- setBoundingBoxStride:[[ void  ]]
- boundingBoxCount[[ ulong  ]]
- setBoundingBoxCount:[[ void  ]]
   Interface: 'NSXMLParser'
       SUPER: NSObject
- initWithContentsOfURL:[[ INSTANCETYPE ]]
- initWithData:[[ INSTANCETYPE ]]
- initWithStream:[[ INSTANCETYPE ]]
- parse[[ int  ]]
- abortParsing[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSXMLParserDelegate>]]
- setDelegate:[[ void  ]]
- shouldProcessNamespaces[[ int  ]]
- setShouldProcessNamespaces:[[ void  ]]
- shouldReportNamespacePrefixes[[ int  ]]
- setShouldReportNamespacePrefixes:[[ void  ]]
- externalEntityResolvingPolicy[[ ENUMERATION enum NSXMLParserExternalEntityResolvingPolicy]]
- setExternalEntityResolvingPolicy:[[ void  ]]
- allowedExternalEntityURLs[[ POINTER  (nullable) ]] -> [[ INTERFACE NSSet]]
- setAllowedExternalEntityURLs:[[ void  ]]
- parserError[[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]]
- shouldResolveExternalEntities[[ int  ]]
- setShouldResolveExternalEntities:[[ void  ]]
- publicID[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- systemID[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- lineNumber[[ long  ]]
- columnNumber[[ long  ]]
   Interface: 'NSFileHandle'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
- initWithFileDescriptor:closeOnDealloc:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- readDataToEndOfFileAndReturnError:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- readDataUpToLength:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- writeData:error:[[ int  ]]
- getOffset:error:[[ int  ]]
- seekToEndReturningOffset:error:[[ int  ]]
- seekToOffset:error:[[ int  ]]
- truncateAtOffset:error:[[ int  ]]
- synchronizeAndReturnError:[[ int  ]]
- closeAndReturnError:[[ int  ]]
- availableData[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
+ fileHandleForReadingAtPath:[[ INSTANCETYPE ]]
+ fileHandleForWritingAtPath:[[ INSTANCETYPE ]]
+ fileHandleForUpdatingAtPath:[[ INSTANCETYPE ]]
+ fileHandleForReadingFromURL:error:[[ INSTANCETYPE ]]
+ fileHandleForWritingToURL:error:[[ INSTANCETYPE ]]
+ fileHandleForUpdatingURL:error:[[ INSTANCETYPE ]]
+ fileHandleWithStandardInput[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileHandle]]
+ fileHandleWithStandardOutput[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileHandle]]
+ fileHandleWithStandardError[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileHandle]]
+ fileHandleWithNullDevice[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileHandle]]
- readInBackgroundAndNotifyForModes:[[ void  ]]
- readInBackgroundAndNotify[[ void  ]]
- readToEndOfFileInBackgroundAndNotifyForModes:[[ void  ]]
- readToEndOfFileInBackgroundAndNotify[[ void  ]]
- acceptConnectionInBackgroundAndNotifyForModes:[[ void  ]]
- acceptConnectionInBackgroundAndNotify[[ void  ]]
- waitForDataInBackgroundAndNotifyForModes:[[ void  ]]
- waitForDataInBackgroundAndNotify[[ void  ]]
- readabilityHandler[[ BLOCK_POINTER ]]
- setReadabilityHandler:[[ void  ]]
- writeabilityHandler[[ BLOCK_POINTER ]]
- setWriteabilityHandler:[[ void  ]]
- initWithFileDescriptor:[[ INSTANCETYPE ]]
- fileDescriptor[[ int  ]]
- readDataToEndOfFile[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
- readDataOfLength:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
- writeData:[[ void  ]]
- offsetInFile[[ ulonglong  ]]
- seekToEndOfFile[[ ulonglong  ]]
- seekToFileOffset:[[ void  ]]
- truncateFileAtOffset:[[ void  ]]
- synchronizeFile[[ void  ]]
- closeFile[[ void  ]]
   Interface: 'NSUnitElectricResistance'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ megaohms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricResistance]]
+ kiloohms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricResistance]]
+ ohms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricResistance]]
+ milliohms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricResistance]]
+ microohms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricResistance]]
   Interface: 'NSUnitMass'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ kilograms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ grams[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ decigrams[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ centigrams[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ milligrams[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ micrograms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ nanograms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ picograms[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ ounces[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ poundsMass[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ stones[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ metricTons[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ shortTons[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ carats[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ ouncesTroy[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
+ slugs[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitMass]]
   Interface: 'NSFileCoordinator'
       SUPER: NSObject
+ addFilePresenter:[[ void  ]]
+ removeFilePresenter:[[ void  ]]
- initWithFilePresenter:[[ INSTANCETYPE ]]
- coordinateAccessWithIntents:queue:byAccessor:[[ void  ]]
- coordinateReadingItemAtURL:options:error:byAccessor:[[ void  ]]
- coordinateWritingItemAtURL:options:error:byAccessor:[[ void  ]]
- coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:[[ void  ]]
- coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:[[ void  ]]
- prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:[[ void  ]]
- itemAtURL:willMoveToURL:[[ void  ]]
- itemAtURL:didMoveToURL:[[ void  ]]
- itemAtURL:didChangeUbiquityAttributes:[[ void  ]]
- cancel[[ void  ]]
+ filePresenters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- purposeIdentifier[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPurposeIdentifier:[[ void  ]]
   Interface: 'NSURLRequest'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
+ requestWithURL:[[ INSTANCETYPE ]]
+ requestWithURL:cachePolicy:timeoutInterval:[[ INSTANCETYPE ]]
- initWithURL:[[ INSTANCETYPE ]]
- initWithURL:cachePolicy:timeoutInterval:[[ INSTANCETYPE ]]
+ supportsSecureCoding[[ int  ]]
- URL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- cachePolicy[[ ENUMERATION enum NSURLRequestCachePolicy]]
- timeoutInterval[[ double  ]]
- mainDocumentURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- networkServiceType[[ ENUMERATION enum NSURLRequestNetworkServiceType]]
- allowsCellularAccess[[ int  ]]
- allowsExpensiveNetworkAccess[[ int  ]]
- allowsConstrainedNetworkAccess[[ int  ]]
- assumesHTTP3Capable[[ int  ]]
- attribution[[ ENUMERATION enum NSURLRequestAttribution]]
- requiresDNSSECValidation[[ int  ]]
- valueForHTTPHeaderField:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- HTTPMethod[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- allHTTPHeaderFields[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- HTTPBody[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- HTTPBodyStream[[ POINTER  (nullable) ]] -> [[ INTERFACE NSInputStream]]
- HTTPShouldHandleCookies[[ int  ]]
- HTTPShouldUsePipelining[[ int  ]]
   Interface: 'MTLStencilDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- stencilCompareFunction[[ ENUMERATION enum MTLCompareFunction]]
- setStencilCompareFunction:[[ void  ]]
- stencilFailureOperation[[ ENUMERATION enum MTLStencilOperation]]
- setStencilFailureOperation:[[ void  ]]
- depthFailureOperation[[ ENUMERATION enum MTLStencilOperation]]
- setDepthFailureOperation:[[ void  ]]
- depthStencilPassOperation[[ ENUMERATION enum MTLStencilOperation]]
- setDepthStencilPassOperation:[[ void  ]]
- readMask[[ uint  ]]
- setReadMask:[[ void  ]]
- writeMask[[ uint  ]]
- setWriteMask:[[ void  ]]
   Interface: 'NSPresentationIntent'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- init[[ INSTANCETYPE ]]
+ paragraphIntentWithIdentity:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ headerIntentWithIdentity:level:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ thematicBreakIntentWithIdentity:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ orderedListIntentWithIdentity:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ unorderedListIntentWithIdentity:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ listItemIntentWithIdentity:ordinal:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ blockQuoteIntentWithIdentity:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ tableHeaderRowIntentWithIdentity:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ tableRowIntentWithIdentity:row:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
+ tableCellIntentWithIdentity:column:nestedInsideIntent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPresentationIntent]]
- isEquivalentToPresentationIntent:[[ int  ]]
- intentKind[[ ENUMERATION enum NSPresentationIntentKind]]
- parentIntent[[ POINTER  (nullable) ]] -> [[ INTERFACE NSPresentationIntent]]
- identity[[ long  ]]
- ordinal[[ long  ]]
- columnAlignments[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- columnCount[[ long  ]]
- headerLevel[[ long  ]]
- languageHint[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- column[[ long  ]]
- row[[ long  ]]
- indentationLevel[[ long  ]]
   Interface: 'NSPersonNameComponents'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- namePrefix[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setNamePrefix:[[ void  ]]
- givenName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setGivenName:[[ void  ]]
- middleName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setMiddleName:[[ void  ]]
- familyName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setFamilyName:[[ void  ]]
- nameSuffix[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setNameSuffix:[[ void  ]]
- nickname[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setNickname:[[ void  ]]
- phoneticRepresentation[[ POINTER  (nullable) ]] -> [[ INTERFACE NSPersonNameComponents]]
- setPhoneticRepresentation:[[ void  ]]
   Interface: 'NSMutableAttributedString'
       SUPER: NSAttributedString
- replaceCharactersInRange:withString:[[ void  ]]
- setAttributes:range:[[ void  ]]
- addAttribute:value:range:[[ void  ]]
- addAttributes:range:[[ void  ]]
- removeAttribute:range:[[ void  ]]
- replaceCharactersInRange:withAttributedString:[[ void  ]]
- insertAttributedString:atIndex:[[ void  ]]
- appendAttributedString:[[ void  ]]
- deleteCharactersInRange:[[ void  ]]
- setAttributedString:[[ void  ]]
- beginEditing[[ void  ]]
- endEditing[[ void  ]]
- mutableString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableString]]
- appendLocalizedFormat:[[ void  ]]
   Interface: 'NSNotificationCenter'
       SUPER: NSObject
- addObserver:selector:name:object:[[ void  ]]
- postNotification:[[ void  ]]
- postNotificationName:object:[[ void  ]]
- postNotificationName:object:userInfo:[[ void  ]]
- removeObserver:[[ void  ]]
- removeObserver:name:object:[[ void  ]]
- addObserverForName:object:queue:usingBlock:[[ POINTER  (nonnull) ]] -> [[ ID<NSObject>]]
+ defaultCenter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNotificationCenter]]
   Interface: 'NSHashTable'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
       CONFORMING: NSFastEnumeration
- initWithOptions:capacity:[[ INSTANCETYPE ]]
- initWithPointerFunctions:capacity:[[ INSTANCETYPE ]]
+ hashTableWithOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSHashTable]]
+ hashTableWithWeakObjects[[ ID ]]
+ weakObjectsHashTable[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSHashTable]]
- member:[[ ID ]]
- objectEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- addObject:[[ void  ]]
- removeObject:[[ void  ]]
- removeAllObjects[[ void  ]]
- containsObject:[[ int  ]]
- intersectsHashTable:[[ int  ]]
- isEqualToHashTable:[[ int  ]]
- isSubsetOfHashTable:[[ int  ]]
- intersectHashTable:[[ void  ]]
- unionHashTable:[[ void  ]]
- minusHashTable:[[ void  ]]
- pointerFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPointerFunctions]]
- count[[ ulong  ]]
- allObjects[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- anyObject[[ ID ]]
- setRepresentation[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
   Interface: 'NSLock'
       SUPER: NSObject
       CONFORMING: NSLocking
- tryLock[[ int  ]]
- lockBeforeDate:[[ int  ]]
- name[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
   Interface: 'NSMethodSignature'
       SUPER: NSObject
+ signatureWithObjCTypes:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMethodSignature]]
- getArgumentTypeAtIndex:[[ POINTER  (nonnull) ]] -> [[ schar (const) ]]
- isOneway[[ int  ]]
- numberOfArguments[[ ulong  ]]
- frameLength[[ ulong  ]]
- methodReturnType[[ POINTER ]] -> [[ schar (const) ]]
- methodReturnLength[[ ulong  ]]
   Interface: 'MTLFunctionStitchingInputNode'
       SUPER: NSObject
       CONFORMING: MTLFunctionStitchingNode
- initWithArgumentIndex:[[ INSTANCETYPE ]]
- argumentIndex[[ ulong  ]]
- setArgumentIndex:[[ void  ]]
   Interface: 'MTLStageInputOutputDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ stageInputOutputDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLStageInputOutputDescriptor]]
- reset[[ void  ]]
- layouts[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLBufferLayoutDescriptorArray]]
- attributes[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAttributeDescriptorArray]]
- indexType[[ ENUMERATION enum MTLIndexType]]
- setIndexType:[[ void  ]]
- indexBufferIndex[[ ulong  ]]
- setIndexBufferIndex:[[ void  ]]
   Interface: 'MTLSharedEventHandle'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
   Interface: 'MTLVertexAttributeDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLVertexAttributeDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'NSProxy'
       CONFORMING: NSObject
+ alloc[[ ID ]]
+ allocWithZone:[[ ID ]]
+ class[[ CLASS Class]]
- forwardInvocation:[[ void  ]]
- methodSignatureForSelector:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMethodSignature]]
- dealloc[[ void  ]]
- finalize[[ void  ]]
+ respondsToSelector:[[ int  ]]
- allowsWeakReference[[ int  ]]
- retainWeakReference[[ int  ]]
- description[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- debugDescription[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'MTLCounterSampleBufferDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- counterSet[[ POINTER  (nullable) ]] -> [[ ID<MTLCounterSet>]]
- setCounterSet:[[ void  ]]
- label[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]]
- storageMode[[ ENUMERATION enum MTLStorageMode]]
- setStorageMode:[[ void  ]]
- sampleCount[[ ulong  ]]
- setSampleCount:[[ void  ]]
   Interface: 'MTLRenderPassDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ renderPassDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPassDescriptor]]
- setSamplePositions:count:[[ void  ]]
- getSamplePositions:count:[[ ulong  ]]
- colorAttachments[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPassColorAttachmentDescriptorArray]]
- depthAttachment[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPassDepthAttachmentDescriptor]]
- setDepthAttachment:[[ void  ]]
- stencilAttachment[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPassStencilAttachmentDescriptor]]
- setStencilAttachment:[[ void  ]]
- visibilityResultBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setVisibilityResultBuffer:[[ void  ]]
- renderTargetArrayLength[[ ulong  ]]
- setRenderTargetArrayLength:[[ void  ]]
- imageblockSampleLength[[ ulong  ]]
- setImageblockSampleLength:[[ void  ]]
- threadgroupMemoryLength[[ ulong  ]]
- setThreadgroupMemoryLength:[[ void  ]]
- tileWidth[[ ulong  ]]
- setTileWidth:[[ void  ]]
- tileHeight[[ ulong  ]]
- setTileHeight:[[ void  ]]
- defaultRasterSampleCount[[ ulong  ]]
- setDefaultRasterSampleCount:[[ void  ]]
- renderTargetWidth[[ ulong  ]]
- setRenderTargetWidth:[[ void  ]]
- renderTargetHeight[[ ulong  ]]
- setRenderTargetHeight:[[ void  ]]
- rasterizationRateMap[[ POINTER  (nullable) ]] -> [[ ID<MTLRasterizationRateMap>]]
- setRasterizationRateMap:[[ void  ]]
- sampleBufferAttachments[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPassSampleBufferAttachmentDescriptorArray]]
   Interface: 'MTLInstanceAccelerationStructureDescriptor'
       SUPER: MTLAccelerationStructureDescriptor
+ descriptor[[ INSTANCETYPE ]]
- instanceDescriptorBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setInstanceDescriptorBuffer:[[ void  ]]
- instanceDescriptorBufferOffset[[ ulong  ]]
- setInstanceDescriptorBufferOffset:[[ void  ]]
- instanceDescriptorStride[[ ulong  ]]
- setInstanceDescriptorStride:[[ void  ]]
- instanceCount[[ ulong  ]]
- setInstanceCount:[[ void  ]]
- instancedAccelerationStructures[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setInstancedAccelerationStructures:[[ void  ]]
- instanceDescriptorType[[ ENUMERATION enum MTLAccelerationStructureInstanceDescriptorType]]
- setInstanceDescriptorType:[[ void  ]]
- motionTransformBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setMotionTransformBuffer:[[ void  ]]
- motionTransformBufferOffset[[ ulong  ]]
- setMotionTransformBufferOffset:[[ void  ]]
- motionTransformCount[[ ulong  ]]
- setMotionTransformCount:[[ void  ]]
   Interface: 'NSUnit'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
- initWithSymbol:[[ INSTANCETYPE ]]
- symbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSPipe'
       SUPER: NSObject
+ pipe[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPipe]]
- fileHandleForReading[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileHandle]]
- fileHandleForWriting[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSFileHandle]]
   Interface: 'MTLPointerType'
       SUPER: MTLType
- elementStructType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLStructType]]
- elementArrayType[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLArrayType]]
- elementType[[ ENUMERATION enum MTLDataType]]
- access[[ ENUMERATION enum MTLBindingAccess]]
- alignment[[ ulong  ]]
- dataSize[[ ulong  ]]
- elementIsArgumentBuffer[[ int  ]]
   Interface: 'NSExpression'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
+ expressionWithFormat:argumentArray:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionWithFormat:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionWithFormat:arguments:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForConstantValue:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForEvaluatedObject[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForVariable:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForKeyPath:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForFunction:arguments:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForAggregate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForUnionSet:with:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForIntersectSet:with:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForMinusSet:with:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForSubquery:usingIteratorVariable:predicate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForFunction:selectorName:arguments:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForAnyKey[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForBlock:arguments:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
+ expressionForConditional:trueExpression:falseExpression:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
- initWithExpressionType:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- expressionValueWithObject:context:[[ ID ]]
- allowEvaluation[[ void  ]]
- expressionType[[ ENUMERATION enum NSExpressionType]]
- constantValue[[ ID ]]
- keyPath[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- function[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- variable[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- operand[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
- arguments[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- collection[[ ID ]]
- predicate[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPredicate]]
- leftExpression[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
- rightExpression[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
- trueExpression[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
- falseExpression[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
- expressionBlock[[ BLOCK_POINTER ]]
   Interface: 'NSUnitConcentrationMass'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ millimolesPerLiterWithGramsPerMole:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitConcentrationMass]]
+ gramsPerLiter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitConcentrationMass]]
+ milligramsPerDeciliter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitConcentrationMass]]
   Interface: 'NSMetadataQueryResultGroup'
       SUPER: NSObject
- resultAtIndex:[[ ID ]]
- attribute[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- value[[ ID ]]
- subgroups[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- resultCount[[ ulong  ]]
- results[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'MTLTileRenderPipelineColorAttachmentDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLTileRenderPipelineColorAttachmentDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'MTLAccelerationStructureBoundingBoxGeometryDescriptor'
       SUPER: MTLAccelerationStructureGeometryDescriptor
+ descriptor[[ INSTANCETYPE ]]
- boundingBoxBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setBoundingBoxBuffer:[[ void  ]]
- boundingBoxBufferOffset[[ ulong  ]]
- setBoundingBoxBufferOffset:[[ void  ]]
- boundingBoxStride[[ ulong  ]]
- setBoundingBoxStride:[[ void  ]]
- boundingBoxCount[[ ulong  ]]
- setBoundingBoxCount:[[ void  ]]
   Interface: 'MTLRenderPipelineDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- reset[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]]
- vertexFunction[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]]
- setVertexFunction:[[ void  ]]
- fragmentFunction[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]]
- setFragmentFunction:[[ void  ]]
- vertexDescriptor[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLVertexDescriptor]]
- setVertexDescriptor:[[ void  ]]
- sampleCount[[ ulong  ]]
- setSampleCount:[[ void  ]]
- rasterSampleCount[[ ulong  ]]
- setRasterSampleCount:[[ void  ]]
- isAlphaToCoverageEnabled[[ int  ]]
- setAlphaToCoverageEnabled:[[ void  ]]
- isAlphaToOneEnabled[[ int  ]]
- setAlphaToOneEnabled:[[ void  ]]
- isRasterizationEnabled[[ int  ]]
- setRasterizationEnabled:[[ void  ]]
- maxVertexAmplificationCount[[ ulong  ]]
- setMaxVertexAmplificationCount:[[ void  ]]
- colorAttachments[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPipelineColorAttachmentDescriptorArray]]
- depthAttachmentPixelFormat[[ ENUMERATION enum MTLPixelFormat]]
- setDepthAttachmentPixelFormat:[[ void  ]]
- stencilAttachmentPixelFormat[[ ENUMERATION enum MTLPixelFormat]]
- setStencilAttachmentPixelFormat:[[ void  ]]
- inputPrimitiveTopology[[ ENUMERATION enum MTLPrimitiveTopologyClass]]
- setInputPrimitiveTopology:[[ void  ]]
- tessellationPartitionMode[[ ENUMERATION enum MTLTessellationPartitionMode]]
- setTessellationPartitionMode:[[ void  ]]
- maxTessellationFactor[[ ulong  ]]
- setMaxTessellationFactor:[[ void  ]]
- isTessellationFactorScaleEnabled[[ int  ]]
- setTessellationFactorScaleEnabled:[[ void  ]]
- tessellationFactorFormat[[ ENUMERATION enum MTLTessellationFactorFormat]]
- setTessellationFactorFormat:[[ void  ]]
- tessellationControlPointIndexType[[ ENUMERATION enum MTLTessellationControlPointIndexType]]
- setTessellationControlPointIndexType:[[ void  ]]
- tessellationFactorStepFunction[[ ENUMERATION enum MTLTessellationFactorStepFunction]]
- setTessellationFactorStepFunction:[[ void  ]]
- tessellationOutputWindingOrder[[ ENUMERATION enum MTLWinding]]
- setTessellationOutputWindingOrder:[[ void  ]]
- vertexBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLPipelineBufferDescriptorArray]]
- fragmentBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLPipelineBufferDescriptorArray]]
- supportIndirectCommandBuffers[[ int  ]]
- setSupportIndirectCommandBuffers:[[ void  ]]
- binaryArchives[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setBinaryArchives:[[ void  ]]
- vertexPreloadedLibraries[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setVertexPreloadedLibraries:[[ void  ]]
- fragmentPreloadedLibraries[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setFragmentPreloadedLibraries:[[ void  ]]
- vertexLinkedFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLLinkedFunctions]]
- setVertexLinkedFunctions:[[ void  ]]
- fragmentLinkedFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLLinkedFunctions]]
- setFragmentLinkedFunctions:[[ void  ]]
- supportAddingVertexBinaryFunctions[[ int  ]]
- setSupportAddingVertexBinaryFunctions:[[ void  ]]
- supportAddingFragmentBinaryFunctions[[ int  ]]
- setSupportAddingFragmentBinaryFunctions:[[ void  ]]
- maxVertexCallStackDepth[[ ulong  ]]
- setMaxVertexCallStackDepth:[[ void  ]]
- maxFragmentCallStackDepth[[ ulong  ]]
- setMaxFragmentCallStackDepth:[[ void  ]]
   Interface: 'NSMassFormatter'
       SUPER: NSFormatter
- stringFromValue:unit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringFromKilograms:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- unitStringFromValue:unit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- unitStringFromKilograms:usedUnit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- getObjectValue:forString:errorDescription:[[ int  ]]
- numberFormatter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumberFormatter]]
- setNumberFormatter:[[ void  ]]
- unitStyle[[ ENUMERATION enum NSFormattingUnitStyle]]
- setUnitStyle:[[ void  ]]
- isForPersonMassUse[[ int  ]]
- setForPersonMassUse:[[ void  ]]
   Interface: 'NSDictionary'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
       CONFORMING: NSFastEnumeration
- objectForKey:[[ ID ]]
- keyEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- init[[ INSTANCETYPE ]]
- initWithObjects:forKeys:count:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- count[[ ulong  ]]
- allKeysForObject:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- descriptionWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- descriptionWithLocale:indent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- isEqualToDictionary:[[ int  ]]
- objectEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- objectsForKeys:notFoundMarker:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- writeToURL:error:[[ int  ]]
- keysSortedByValueUsingSelector:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- getObjects:andKeys:count:[[ void  ]]
- objectForKeyedSubscript:[[ ID ]]
- enumerateKeysAndObjectsUsingBlock:[[ void  ]]
- enumerateKeysAndObjectsWithOptions:usingBlock:[[ void  ]]
- keysSortedByValueUsingComparator:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- keysSortedByValueWithOptions:usingComparator:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- keysOfEntriesPassingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- keysOfEntriesWithOptions:passingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- allKeys[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- allValues[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- description[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- descriptionInStringsFileFormat[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- getObjects:andKeys:[[ void  ]]
+ dictionaryWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
+ dictionaryWithContentsOfURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- initWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- initWithContentsOfURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- writeToFile:atomically:[[ int  ]]
- writeToURL:atomically:[[ int  ]]
+ dictionary[[ INSTANCETYPE ]]
+ dictionaryWithObject:forKey:[[ INSTANCETYPE ]]
+ dictionaryWithObjects:forKeys:count:[[ INSTANCETYPE ]]
+ dictionaryWithObjectsAndKeys:[[ INSTANCETYPE ]]
+ dictionaryWithDictionary:[[ INSTANCETYPE ]]
+ dictionaryWithObjects:forKeys:[[ INSTANCETYPE ]]
- initWithObjectsAndKeys:[[ INSTANCETYPE ]]
- initWithDictionary:[[ INSTANCETYPE ]]
- initWithDictionary:copyItems:[[ INSTANCETYPE ]]
- initWithObjects:forKeys:[[ INSTANCETYPE ]]
- initWithContentsOfURL:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
+ dictionaryWithContentsOfURL:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
+ sharedKeySetForKeys:[[ ID ]]
- countByEnumeratingWithState:objects:count:[[ ulong  ]]
- fileSize[[ ulonglong  ]]
- fileModificationDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- fileType[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- filePosixPermissions[[ ulong  ]]
- fileOwnerAccountName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- fileGroupOwnerAccountName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- fileSystemNumber[[ long  ]]
- fileSystemFileNumber[[ ulong  ]]
- fileExtensionHidden[[ int  ]]
- fileHFSCreatorCode[[ uint  ]]
- fileHFSTypeCode[[ uint  ]]
- fileIsImmutable[[ int  ]]
- fileIsAppendOnly[[ int  ]]
- fileCreationDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- fileOwnerAccountID[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- fileGroupOwnerAccountID[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- valueForKey:[[ ID ]]
   Interface: 'NSAutoreleasePool'
       SUPER: NSObject
+ addObject:[[ void  ]]
- drain[[ void  ]]
   Interface: 'NSNetService'
       SUPER: NSObject
- initWithDomain:type:name:port:[[ INSTANCETYPE ]]
- initWithDomain:type:name:[[ INSTANCETYPE ]]
- scheduleInRunLoop:forMode:[[ void  ]]
- removeFromRunLoop:forMode:[[ void  ]]
- publish[[ void  ]]
- publishWithOptions:[[ void  ]]
- resolve[[ void  ]]
- stop[[ void  ]]
+ dictionaryFromTXTRecordData:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
+ dataFromTXTRecordDictionary:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
- resolveWithTimeout:[[ void  ]]
- getInputStream:outputStream:[[ int  ]]
- setTXTRecordData:[[ int  ]]
- TXTRecordData[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- startMonitoring[[ void  ]]
- stopMonitoring[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSNetServiceDelegate>]]
- setDelegate:[[ void  ]]
- includesPeerToPeer[[ int  ]]
- setIncludesPeerToPeer:[[ void  ]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- type[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- domain[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- hostName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- addresses[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- port[[ long  ]]
   Interface: 'MTLAccelerationStructureMotionCurveGeometryDescriptor'
       SUPER: MTLAccelerationStructureGeometryDescriptor
+ descriptor[[ INSTANCETYPE ]]
- controlPointBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setControlPointBuffers:[[ void  ]]
- controlPointCount[[ ulong  ]]
- setControlPointCount:[[ void  ]]
- controlPointStride[[ ulong  ]]
- setControlPointStride:[[ void  ]]
- controlPointFormat[[ ENUMERATION enum MTLAttributeFormat]]
- setControlPointFormat:[[ void  ]]
- radiusBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setRadiusBuffers:[[ void  ]]
- radiusFormat[[ ENUMERATION enum MTLAttributeFormat]]
- setRadiusFormat:[[ void  ]]
- radiusStride[[ ulong  ]]
- setRadiusStride:[[ void  ]]
- indexBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setIndexBuffer:[[ void  ]]
- indexBufferOffset[[ ulong  ]]
- setIndexBufferOffset:[[ void  ]]
- indexType[[ ENUMERATION enum MTLIndexType]]
- setIndexType:[[ void  ]]
- segmentCount[[ ulong  ]]
- setSegmentCount:[[ void  ]]
- segmentControlPointCount[[ ulong  ]]
- setSegmentControlPointCount:[[ void  ]]
- curveType[[ ENUMERATION enum MTLCurveType]]
- setCurveType:[[ void  ]]
- curveBasis[[ ENUMERATION enum MTLCurveBasis]]
- setCurveBasis:[[ void  ]]
- curveEndCaps[[ ENUMERATION enum MTLCurveEndCaps]]
- setCurveEndCaps:[[ void  ]]
   Interface: 'NSAttributedStringMarkdownSourcePosition'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- initWithStartLine:startColumn:endLine:endColumn:[[ INSTANCETYPE ]]
- rangeInString:[[ RECORD _NSRange]]
- startLine[[ long  ]]
- startColumn[[ long  ]]
- endLine[[ long  ]]
- endColumn[[ long  ]]
   Interface: 'NSJSONSerialization'
       SUPER: NSObject
+ isValidJSONObject:[[ int  ]]
+ dataWithJSONObject:options:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
+ JSONObjectWithData:options:error:[[ ID ]]
+ writeJSONObject:toStream:options:error:[[ long  ]]
+ JSONObjectWithStream:options:error:[[ ID ]]
   Interface: 'MTLRenderPassStencilAttachmentDescriptor'
       SUPER: MTLRenderPassAttachmentDescriptor
- clearStencil[[ uint  ]]
- setClearStencil:[[ void  ]]
- stencilResolveFilter[[ ENUMERATION enum MTLMultisampleStencilResolveFilter]]
- setStencilResolveFilter:[[ void  ]]
   Interface: 'MTLComputePassDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ computePassDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLComputePassDescriptor]]
- dispatchType[[ ENUMERATION enum MTLDispatchType]]
- setDispatchType:[[ void  ]]
- sampleBufferAttachments[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLComputePassSampleBufferAttachmentDescriptorArray]]
   Interface: 'NSMutableSet'
       SUPER: NSSet
- addObject:[[ void  ]]
- removeObject:[[ void  ]]
- initWithCoder:[[ INSTANCETYPE ]]
- init[[ INSTANCETYPE ]]
- initWithCapacity:[[ INSTANCETYPE ]]
- addObjectsFromArray:[[ void  ]]
- intersectSet:[[ void  ]]
- minusSet:[[ void  ]]
- removeAllObjects[[ void  ]]
- unionSet:[[ void  ]]
- setSet:[[ void  ]]
+ setWithCapacity:[[ INSTANCETYPE ]]
- filterUsingPredicate:[[ void  ]]
   Interface: 'NSItemProvider'
       SUPER: NSObject
       CONFORMING: NSCopying
- init[[ INSTANCETYPE ]]
- registerDataRepresentationForTypeIdentifier:visibility:loadHandler:[[ void  ]]
- registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:[[ void  ]]
- registeredTypeIdentifiersWithFileOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- hasItemConformingToTypeIdentifier:[[ int  ]]
- hasRepresentationConformingToTypeIdentifier:fileOptions:[[ int  ]]
- loadDataRepresentationForTypeIdentifier:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
- loadFileRepresentationForTypeIdentifier:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
- loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
- initWithObject:[[ INSTANCETYPE ]]
- registerObject:visibility:[[ void  ]]
- registerObjectOfClass:visibility:loadHandler:[[ void  ]]
- canLoadObjectOfClass:[[ int  ]]
- loadObjectOfClass:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
- initWithItem:typeIdentifier:[[ INSTANCETYPE ]]
- initWithContentsOfURL:[[ INSTANCETYPE ]]
- registerItemForTypeIdentifier:loadHandler:[[ void  ]]
- loadItemForTypeIdentifier:options:completionHandler:[[ void  ]]
- registeredTypeIdentifiers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- suggestedName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setSuggestedName:[[ void  ]]
- loadPreviewImageWithOptions:completionHandler:[[ void  ]]
- previewImageHandler[[ BLOCK_POINTER ]]
- setPreviewImageHandler:[[ void  ]]
   Interface: 'NSMorphologyPronoun'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
+ new[[ INSTANCETYPE ]]
- init[[ INSTANCETYPE ]]
- initWithPronoun:morphology:dependentMorphology:[[ INSTANCETYPE ]]
- pronoun[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- morphology[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMorphology]]
- dependentMorphology[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMorphology]]
   Interface: 'NSTimer'
       SUPER: NSObject
+ timerWithTimeInterval:invocation:repeats:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimer]]
+ scheduledTimerWithTimeInterval:invocation:repeats:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimer]]
+ timerWithTimeInterval:target:selector:userInfo:repeats:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimer]]
+ scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimer]]
+ timerWithTimeInterval:repeats:block:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimer]]
+ scheduledTimerWithTimeInterval:repeats:block:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimer]]
- initWithFireDate:interval:repeats:block:[[ INSTANCETYPE ]]
- initWithFireDate:interval:target:selector:userInfo:repeats:[[ INSTANCETYPE ]]
- fire[[ void  ]]
- invalidate[[ void  ]]
- fireDate[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDate]]
- setFireDate:[[ void  ]]
- timeInterval[[ double  ]]
- tolerance[[ double  ]]
- setTolerance:[[ void  ]]
- isValid[[ int  ]]
- userInfo[[ ID ]]
   Interface: 'NSCoder'
       SUPER: NSObject
- encodeValueOfObjCType:at:[[ void  ]]
- encodeDataObject:[[ void  ]]
- decodeDataObject[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- decodeValueOfObjCType:at:size:[[ void  ]]
- versionForClassName:[[ long  ]]
- encodeObject:[[ void  ]]
- encodeRootObject:[[ void  ]]
- encodeBycopyObject:[[ void  ]]
- encodeByrefObject:[[ void  ]]
- encodeConditionalObject:[[ void  ]]
- encodeValuesOfObjCTypes:[[ void  ]]
- encodeArrayOfObjCType:count:at:[[ void  ]]
- encodeBytes:length:[[ void  ]]
- decodeObject[[ ID ]]
- decodeTopLevelObjectAndReturnError:[[ ID ]]
- decodeValuesOfObjCTypes:[[ void  ]]
- decodeArrayOfObjCType:count:at:[[ void  ]]
- decodeBytesWithReturnedLength:[[ POINTER  (nullable) ]] -> [[ void  ]]
- setObjectZone:[[ void  ]]
- objectZone[[ POINTER  (nullable) ]] -> [[ RECORD _NSZone]]
- encodeObject:forKey:[[ void  ]]
- encodeConditionalObject:forKey:[[ void  ]]
- encodeBool:forKey:[[ void  ]]
- encodeInt:forKey:[[ void  ]]
- encodeInt32:forKey:[[ void  ]]
- encodeInt64:forKey:[[ void  ]]
- encodeFloat:forKey:[[ void  ]]
- encodeDouble:forKey:[[ void  ]]
- encodeBytes:length:forKey:[[ void  ]]
- containsValueForKey:[[ int  ]]
- decodeObjectForKey:[[ ID ]]
- decodeTopLevelObjectForKey:error:[[ ID ]]
- decodeBoolForKey:[[ int  ]]
- decodeIntForKey:[[ int  ]]
- decodeInt32ForKey:[[ int  ]]
- decodeInt64ForKey:[[ longlong  ]]
- decodeFloatForKey:[[ float  ]]
- decodeDoubleForKey:[[ double  ]]
- decodeBytesForKey:returnedLength:[[ POINTER  (nullable) ]] -> [[ uchar  ]]
- encodeInteger:forKey:[[ void  ]]
- decodeIntegerForKey:[[ long  ]]
- decodeObjectOfClass:forKey:[[ ID ]]
- decodeTopLevelObjectOfClass:forKey:error:[[ ID ]]
- decodeArrayOfObjectsOfClass:forKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- decodeObjectOfClasses:forKey:[[ ID ]]
- decodeTopLevelObjectOfClasses:forKey:error:[[ ID ]]
- decodeArrayOfObjectsOfClasses:forKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- decodePropertyListForKey:[[ ID ]]
- failWithError:[[ void  ]]
- systemVersion[[ uint  ]]
- allowsKeyedCoding[[ int  ]]
- requiresSecureCoding[[ int  ]]
- allowedClasses[[ POINTER  (nullable) ]] -> [[ INTERFACE NSSet]]
- decodingFailurePolicy[[ ENUMERATION enum NSDecodingFailurePolicy]]
- error[[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]]
- decodeValueOfObjCType:at:[[ void  ]]
   Interface: 'MTLRenderPipelineReflection'
       SUPER: NSObject
- vertexBindings[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- fragmentBindings[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- tileBindings[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- objectBindings[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- meshBindings[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- vertexArguments[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- fragmentArguments[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- tileArguments[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
   Interface: 'MTLVertexAttribute'
       SUPER: NSObject
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- attributeIndex[[ ulong  ]]
- attributeType[[ ENUMERATION enum MTLDataType]]
- isActive[[ int  ]]
- isPatchData[[ int  ]]
- isPatchControlPointData[[ int  ]]
   Interface: 'NSUnitIlluminance'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ lux[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitIlluminance]]
   Interface: 'NSMapTable'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
       CONFORMING: NSFastEnumeration
- initWithKeyOptions:valueOptions:capacity:[[ INSTANCETYPE ]]
- initWithKeyPointerFunctions:valuePointerFunctions:capacity:[[ INSTANCETYPE ]]
+ mapTableWithKeyOptions:valueOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMapTable]]
+ mapTableWithStrongToStrongObjects[[ ID ]]
+ mapTableWithWeakToStrongObjects[[ ID ]]
+ mapTableWithStrongToWeakObjects[[ ID ]]
+ mapTableWithWeakToWeakObjects[[ ID ]]
+ strongToStrongObjectsMapTable[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMapTable]]
+ weakToStrongObjectsMapTable[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMapTable]]
+ strongToWeakObjectsMapTable[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMapTable]]
+ weakToWeakObjectsMapTable[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMapTable]]
- objectForKey:[[ ID ]]
- removeObjectForKey:[[ void  ]]
- setObject:forKey:[[ void  ]]
- keyEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- objectEnumerator[[ POINTER  (nullable) ]] -> [[ INTERFACE NSEnumerator]]
- removeAllObjects[[ void  ]]
- dictionaryRepresentation[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- keyPointerFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPointerFunctions]]
- valuePointerFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPointerFunctions]]
- count[[ ulong  ]]
   Interface: 'MTLHeapDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- size[[ ulong  ]]
- setSize:[[ void  ]]
- storageMode[[ ENUMERATION enum MTLStorageMode]]
- setStorageMode:[[ void  ]]
- cpuCacheMode[[ ENUMERATION enum MTLCPUCacheMode]]
- setCpuCacheMode:[[ void  ]]
- sparsePageSize[[ ENUMERATION enum MTLSparsePageSize]]
- setSparsePageSize:[[ void  ]]
- hazardTrackingMode[[ ENUMERATION enum MTLHazardTrackingMode]]
- setHazardTrackingMode:[[ void  ]]
- resourceOptions[[ ENUMERATION enum MTLResourceOptions]]
- setResourceOptions:[[ void  ]]
- type[[ ENUMERATION enum MTLHeapType]]
- setType:[[ void  ]]
   Interface: 'NSURLCredentialStorage'
       SUPER: NSObject
- credentialsForProtectionSpace:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setCredential:forProtectionSpace:[[ void  ]]
- removeCredential:forProtectionSpace:[[ void  ]]
- removeCredential:forProtectionSpace:options:[[ void  ]]
- defaultCredentialForProtectionSpace:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLCredential]]
- setDefaultCredential:forProtectionSpace:[[ void  ]]
+ sharedCredentialStorage[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLCredentialStorage]]
- allCredentials[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- getCredentialsForProtectionSpace:task:completionHandler:[[ void  ]]
- setCredential:forProtectionSpace:task:[[ void  ]]
- removeCredential:forProtectionSpace:options:task:[[ void  ]]
- getDefaultCredentialForProtectionSpace:task:completionHandler:[[ void  ]]
- setDefaultCredential:forProtectionSpace:task:[[ void  ]]
   Interface: 'NSURLProtectionSpace'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
- initWithHost:port:protocol:realm:authenticationMethod:[[ INSTANCETYPE ]]
- initWithProxyHost:port:type:realm:authenticationMethod:[[ INSTANCETYPE ]]
- realm[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- receivesCredentialSecurely[[ int  ]]
- isProxy[[ int  ]]
- host[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- port[[ long  ]]
- proxyType[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- protocol[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- authenticationMethod[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- distinguishedNames[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- serverTrust[[ POINTER  (nullable) ]] -> [[ RECORD __SecTrust]]
   Interface: 'NSLocale'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- objectForKey:[[ ID ]]
- displayNameForKey:value:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- initWithLocaleIdentifier:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- localizedStringForLocaleIdentifier:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- localizedStringForLanguageCode:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedStringForCountryCode:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedStringForScriptCode:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedStringForVariantCode:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedStringForCalendarIdentifier:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedStringForCollationIdentifier:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedStringForCurrencyCode:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedStringForCollatorIdentifier:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localeIdentifier[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- languageCode[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- languageIdentifier[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- countryCode[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- regionCode[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- scriptCode[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- variantCode[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- exemplarCharacterSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCharacterSet]]
- calendarIdentifier[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- collationIdentifier[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- usesMetricSystem[[ int  ]]
- decimalSeparator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- groupingSeparator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- currencySymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- currencyCode[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- collatorIdentifier[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- quotationBeginDelimiter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- quotationEndDelimiter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- alternateQuotationBeginDelimiter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- alternateQuotationEndDelimiter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ localeWithLocaleIdentifier:[[ INSTANCETYPE ]]
- init[[ INSTANCETYPE ]]
+ autoupdatingCurrentLocale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
+ currentLocale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
+ systemLocale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
+ componentsFromLocaleIdentifier:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
+ localeIdentifierFromComponents:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ canonicalLocaleIdentifierFromString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ canonicalLanguageIdentifierFromString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ localeIdentifierFromWindowsLocaleCode:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
+ windowsLocaleCodeFromLocaleIdentifier:[[ uint  ]]
+ characterDirectionForLanguage:[[ ENUMERATION enum NSLocaleLanguageDirection]]
+ lineDirectionForLanguage:[[ ENUMERATION enum NSLocaleLanguageDirection]]
+ availableLocaleIdentifiers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ ISOLanguageCodes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ ISOCountryCodes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ ISOCurrencyCodes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ commonISOCurrencyCodes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ preferredLanguages[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSNumber'
       SUPER: NSValue
- initWithCoder:[[ INSTANCETYPE ]]
- initWithChar:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithUnsignedChar:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithShort:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithUnsignedShort:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithInt:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithUnsignedInt:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithLong:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithUnsignedLong:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithLongLong:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithUnsignedLongLong:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithFloat:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithDouble:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithBool:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithInteger:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- initWithUnsignedInteger:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- compare:[[ ENUMERATION enum NSComparisonResult]]
- isEqualToNumber:[[ int  ]]
- descriptionWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- charValue[[ schar  ]]
- unsignedCharValue[[ uchar  ]]
- shortValue[[ short  ]]
- unsignedShortValue[[ ushort  ]]
- intValue[[ int  ]]
- unsignedIntValue[[ uint  ]]
- longValue[[ long  ]]
- unsignedLongValue[[ ulong  ]]
- longLongValue[[ longlong  ]]
- unsignedLongLongValue[[ ulonglong  ]]
- floatValue[[ float  ]]
- doubleValue[[ double  ]]
- boolValue[[ int  ]]
- integerValue[[ long  ]]
- unsignedIntegerValue[[ ulong  ]]
- stringValue[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ numberWithChar:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithUnsignedChar:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithShort:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithUnsignedShort:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithInt:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithUnsignedInt:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithLong:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithUnsignedLong:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithLongLong:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithUnsignedLongLong:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithFloat:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithDouble:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithBool:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithInteger:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
+ numberWithUnsignedInteger:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- decimalValue[[ RECORD NSDecimal]]
   Interface: 'MTLVertexAttributeDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- format[[ ENUMERATION enum MTLVertexFormat]]
- setFormat:[[ void  ]]
- offset[[ ulong  ]]
- setOffset:[[ void  ]]
- bufferIndex[[ ulong  ]]
- setBufferIndex:[[ void  ]]
   Interface: 'MTLRasterizationRateMapDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ rasterizationRateMapDescriptorWithScreenSize:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRasterizationRateMapDescriptor]]
+ rasterizationRateMapDescriptorWithScreenSize:layer:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRasterizationRateMapDescriptor]]
+ rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRasterizationRateMapDescriptor]]
- layerAtIndex:[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLRasterizationRateLayerDescriptor]]
- setLayer:atIndex:[[ void  ]]
- layers[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRasterizationRateLayerArray]]
- screenSize[[ RECORD MTLSize]]
- setScreenSize:[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]]
- layerCount[[ ulong  ]]
   Interface: 'NSXPCInterface'
       SUPER: NSObject
+ interfaceWithProtocol:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXPCInterface]]
- setClasses:forSelector:argumentIndex:ofReply:[[ void  ]]
- classesForSelector:argumentIndex:ofReply:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- setInterface:forSelector:argumentIndex:ofReply:[[ void  ]]
- interfaceForSelector:argumentIndex:ofReply:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSXPCInterface]]
- protocol[[ POINTER  (nonnull) ]] -> [[ INTERFACE Protocol]]
- setProtocol:[[ void  ]]
   Interface: 'NSUserActivity'
       SUPER: NSObject
- initWithActivityType:[[ INSTANCETYPE ]]
- init[[ INSTANCETYPE ]]
- addUserInfoEntriesFromDictionary:[[ void  ]]
- becomeCurrent[[ void  ]]
- resignCurrent[[ void  ]]
- invalidate[[ void  ]]
- getContinuationStreamsWithCompletionHandler:[[ void  ]]
+ deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:[[ void  ]]
+ deleteAllSavedUserActivitiesWithCompletionHandler:[[ void  ]]
- activityType[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- title[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setTitle:[[ void  ]]
- userInfo[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setUserInfo:[[ void  ]]
- requiredUserInfoKeys[[ POINTER  (nullable) ]] -> [[ INTERFACE NSSet]]
- setRequiredUserInfoKeys:[[ void  ]]
- needsSave[[ int  ]]
- setNeedsSave:[[ void  ]]
- webpageURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- setWebpageURL:[[ void  ]]
- referrerURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- setReferrerURL:[[ void  ]]
- expirationDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- setExpirationDate:[[ void  ]]
- keywords[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- setKeywords:[[ void  ]]
- supportsContinuationStreams[[ int  ]]
- setSupportsContinuationStreams:[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSUserActivityDelegate>]]
- setDelegate:[[ void  ]]
- targetContentIdentifier[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setTargetContentIdentifier:[[ void  ]]
- isEligibleForHandoff[[ int  ]]
- setEligibleForHandoff:[[ void  ]]
- isEligibleForSearch[[ int  ]]
- setEligibleForSearch:[[ void  ]]
- isEligibleForPublicIndexing[[ int  ]]
- setEligibleForPublicIndexing:[[ void  ]]
- isEligibleForPrediction[[ int  ]]
- setEligibleForPrediction:[[ void  ]]
- persistentIdentifier[[ POINTER ]] -> [[ INTERFACE NSString]]
- setPersistentIdentifier:[[ void  ]]
   Interface: 'MTLTextureReferenceType'
       SUPER: MTLType
- textureDataType[[ ENUMERATION enum MTLDataType]]
- textureType[[ ENUMERATION enum MTLTextureType]]
- access[[ ENUMERATION enum MTLBindingAccess]]
- isDepthTexture[[ int  ]]
   Interface: 'NSMeasurement'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- init[[ INSTANCETYPE ]]
- initWithDoubleValue:unit:[[ INSTANCETYPE ]]
- canBeConvertedToUnit:[[ int  ]]
- measurementByConvertingToUnit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMeasurement]]
- measurementByAddingMeasurement:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMeasurement]]
- measurementBySubtractingMeasurement:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMeasurement]]
- unit[[ ID ]]
- doubleValue[[ double  ]]
   Interface: 'NSPointerArray'
       SUPER: NSObject
       CONFORMING: NSFastEnumeration
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- initWithOptions:[[ INSTANCETYPE ]]
- initWithPointerFunctions:[[ INSTANCETYPE ]]
+ pointerArrayWithOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPointerArray]]
+ pointerArrayWithPointerFunctions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPointerArray]]
- pointerAtIndex:[[ POINTER  (nullable) ]] -> [[ void  ]]
- addPointer:[[ void  ]]
- removePointerAtIndex:[[ void  ]]
- insertPointer:atIndex:[[ void  ]]
- replacePointerAtIndex:withPointer:[[ void  ]]
- compact[[ void  ]]
- pointerFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPointerFunctions]]
- count[[ ulong  ]]
- setCount:[[ void  ]]
+ strongObjectsPointerArray[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPointerArray]]
+ weakObjectsPointerArray[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPointerArray]]
- allObjects[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'MTLBlitPassSampleBufferAttachmentDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- sampleBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLCounterSampleBuffer>]]
- setSampleBuffer:[[ void  ]]
- startOfEncoderSampleIndex[[ ulong  ]]
- setStartOfEncoderSampleIndex:[[ void  ]]
- endOfEncoderSampleIndex[[ ulong  ]]
- setEndOfEncoderSampleIndex:[[ void  ]]
   Interface: 'MTLMotionKeyframeData'
       SUPER: NSObject
+ data[[ INSTANCETYPE ]]
- buffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setBuffer:[[ void  ]]
- offset[[ ulong  ]]
- setOffset:[[ void  ]]
   Interface: 'MTLIOCommandQueueDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- maxCommandBufferCount[[ ulong  ]]
- setMaxCommandBufferCount:[[ void  ]]
- priority[[ ENUMERATION enum MTLIOPriority]]
- setPriority:[[ void  ]]
- type[[ ENUMERATION enum MTLIOCommandQueueType]]
- setType:[[ void  ]]
- maxCommandsInFlight[[ ulong  ]]
- setMaxCommandsInFlight:[[ void  ]]
- scratchBufferAllocator[[ POINTER  (nullable) ]] -> [[ ID<MTLIOScratchBufferAllocator>]]
- setScratchBufferAllocator:[[ void  ]]
   Interface: 'NSURLSessionConfiguration'
       SUPER: NSObject
       CONFORMING: NSCopying
+ backgroundSessionConfigurationWithIdentifier:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionConfiguration]]
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
+ defaultSessionConfiguration[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionConfiguration]]
+ ephemeralSessionConfiguration[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionConfiguration]]
- identifier[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- requestCachePolicy[[ ENUMERATION enum NSURLRequestCachePolicy]]
- setRequestCachePolicy:[[ void  ]]
- timeoutIntervalForRequest[[ double  ]]
- setTimeoutIntervalForRequest:[[ void  ]]
- timeoutIntervalForResource[[ double  ]]
- setTimeoutIntervalForResource:[[ void  ]]
- networkServiceType[[ ENUMERATION enum NSURLRequestNetworkServiceType]]
- setNetworkServiceType:[[ void  ]]
- allowsCellularAccess[[ int  ]]
- setAllowsCellularAccess:[[ void  ]]
- allowsExpensiveNetworkAccess[[ int  ]]
- setAllowsExpensiveNetworkAccess:[[ void  ]]
- allowsConstrainedNetworkAccess[[ int  ]]
- setAllowsConstrainedNetworkAccess:[[ void  ]]
- requiresDNSSECValidation[[ int  ]]
- setRequiresDNSSECValidation:[[ void  ]]
- waitsForConnectivity[[ int  ]]
- setWaitsForConnectivity:[[ void  ]]
- isDiscretionary[[ int  ]]
- setDiscretionary:[[ void  ]]
- sharedContainerIdentifier[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setSharedContainerIdentifier:[[ void  ]]
- sessionSendsLaunchEvents[[ int  ]]
- setSessionSendsLaunchEvents:[[ void  ]]
- connectionProxyDictionary[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setConnectionProxyDictionary:[[ void  ]]
- TLSMinimumSupportedProtocol[[ ENUMERATION enum SSLProtocol]]
- setTLSMinimumSupportedProtocol:[[ void  ]]
- TLSMaximumSupportedProtocol[[ ENUMERATION enum SSLProtocol]]
- setTLSMaximumSupportedProtocol:[[ void  ]]
- TLSMinimumSupportedProtocolVersion[[ ENUMERATION enum tls_protocol_version_t]]
- setTLSMinimumSupportedProtocolVersion:[[ void  ]]
- TLSMaximumSupportedProtocolVersion[[ ENUMERATION enum tls_protocol_version_t]]
- setTLSMaximumSupportedProtocolVersion:[[ void  ]]
- HTTPShouldUsePipelining[[ int  ]]
- setHTTPShouldUsePipelining:[[ void  ]]
- HTTPShouldSetCookies[[ int  ]]
- setHTTPShouldSetCookies:[[ void  ]]
- HTTPCookieAcceptPolicy[[ ENUMERATION enum NSHTTPCookieAcceptPolicy]]
- setHTTPCookieAcceptPolicy:[[ void  ]]
- HTTPAdditionalHeaders[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setHTTPAdditionalHeaders:[[ void  ]]
- HTTPMaximumConnectionsPerHost[[ long  ]]
- setHTTPMaximumConnectionsPerHost:[[ void  ]]
- HTTPCookieStorage[[ POINTER  (nullable) ]] -> [[ INTERFACE NSHTTPCookieStorage]]
- setHTTPCookieStorage:[[ void  ]]
- URLCredentialStorage[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLCredentialStorage]]
- setURLCredentialStorage:[[ void  ]]
- URLCache[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLCache]]
- setURLCache:[[ void  ]]
- shouldUseExtendedBackgroundIdleMode[[ int  ]]
- setShouldUseExtendedBackgroundIdleMode:[[ void  ]]
- protocolClasses[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setProtocolClasses:[[ void  ]]
- multipathServiceType[[ ENUMERATION enum NSURLSessionMultipathServiceType]]
- setMultipathServiceType:[[ void  ]]
+ backgroundSessionConfiguration:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionConfiguration]]
   Interface: 'NSRecursiveLock'
       SUPER: NSObject
       CONFORMING: NSLocking
- tryLock[[ int  ]]
- lockBeforeDate:[[ int  ]]
- name[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
   Interface: 'MTLBlitPassDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ blitPassDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLBlitPassDescriptor]]
- sampleBufferAttachments[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLBlitPassSampleBufferAttachmentDescriptorArray]]
   Interface: 'NSPurgeableData'
       SUPER: NSMutableData
       CONFORMING: NSDiscardableContent
   Interface: 'NSURLComponents'
       SUPER: NSObject
       CONFORMING: NSCopying
- init[[ INSTANCETYPE ]]
- initWithURL:resolvingAgainstBaseURL:[[ INSTANCETYPE ]]
+ componentsWithURL:resolvingAgainstBaseURL:[[ INSTANCETYPE ]]
- initWithString:[[ INSTANCETYPE ]]
+ componentsWithString:[[ INSTANCETYPE ]]
- initWithString:encodingInvalidCharacters:[[ INSTANCETYPE ]]
+ componentsWithString:encodingInvalidCharacters:[[ INSTANCETYPE ]]
- URLRelativeToURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- string[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- scheme[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setScheme:[[ void  ]]
- user[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setUser:[[ void  ]]
- password[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPassword:[[ void  ]]
- host[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setHost:[[ void  ]]
- port[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- setPort:[[ void  ]]
- path[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPath:[[ void  ]]
- query[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setQuery:[[ void  ]]
- fragment[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setFragment:[[ void  ]]
- percentEncodedUser[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPercentEncodedUser:[[ void  ]]
- percentEncodedPassword[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPercentEncodedPassword:[[ void  ]]
- percentEncodedHost[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPercentEncodedHost:[[ void  ]]
- percentEncodedPath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPercentEncodedPath:[[ void  ]]
- percentEncodedQuery[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPercentEncodedQuery:[[ void  ]]
- percentEncodedFragment[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPercentEncodedFragment:[[ void  ]]
- encodedHost[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setEncodedHost:[[ void  ]]
- rangeOfScheme[[ RECORD _NSRange]]
- rangeOfUser[[ RECORD _NSRange]]
- rangeOfPassword[[ RECORD _NSRange]]
- rangeOfHost[[ RECORD _NSRange]]
- rangeOfPort[[ RECORD _NSRange]]
- rangeOfPath[[ RECORD _NSRange]]
- rangeOfQuery[[ RECORD _NSRange]]
- rangeOfFragment[[ RECORD _NSRange]]
- queryItems[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setQueryItems:[[ void  ]]
- percentEncodedQueryItems[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setPercentEncodedQueryItems:[[ void  ]]
   Interface: 'MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructurePassSampleBufferAttachmentDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'NSUnitPower'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ terawatts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ gigawatts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ megawatts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ kilowatts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ watts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ milliwatts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ microwatts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ nanowatts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ picowatts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ femtowatts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
+ horsepower[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPower]]
   Interface: 'NSUnitElectricCharge'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ coulombs[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCharge]]
+ megaampereHours[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCharge]]
+ kiloampereHours[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCharge]]
+ ampereHours[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCharge]]
+ milliampereHours[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCharge]]
+ microampereHours[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCharge]]
   Interface: 'NSSortDescriptor'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
+ sortDescriptorWithKey:ascending:[[ INSTANCETYPE ]]
+ sortDescriptorWithKey:ascending:selector:[[ INSTANCETYPE ]]
- initWithKey:ascending:[[ INSTANCETYPE ]]
- initWithKey:ascending:selector:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- allowEvaluation[[ void  ]]
+ sortDescriptorWithKey:ascending:comparator:[[ INSTANCETYPE ]]
- initWithKey:ascending:comparator:[[ INSTANCETYPE ]]
- compareObject:toObject:[[ ENUMERATION enum NSComparisonResult]]
- key[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- ascending[[ int  ]]
- selector[[ SEL  ]]
- comparator[[ BLOCK_POINTER ]]
- reversedSortDescriptor[[ ID ]]
   Interface: 'NSURLAuthenticationChallenge'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
- initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:[[ INSTANCETYPE ]]
- initWithAuthenticationChallenge:sender:[[ INSTANCETYPE ]]
- protectionSpace[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLProtectionSpace]]
- proposedCredential[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLCredential]]
- previousFailureCount[[ long  ]]
- failureResponse[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLResponse]]
- error[[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]]
- sender[[ POINTER  (nullable) ]] -> [[ ID<NSURLAuthenticationChallengeSender>]]
   Interface: 'NSSecureUnarchiveFromDataTransformer'
       SUPER: NSValueTransformer
+ allowedTopLevelClasses[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSURLSessionStreamTask'
       SUPER: NSURLSessionTask
- readDataOfMinLength:maxLength:timeout:completionHandler:[[ void  ]]
- writeData:timeout:completionHandler:[[ void  ]]
- captureStreams[[ void  ]]
- closeWrite[[ void  ]]
- closeRead[[ void  ]]
- startSecureConnection[[ void  ]]
- stopSecureConnection[[ void  ]]
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
   Interface: 'NSDecimalNumber'
       SUPER: NSNumber
- initWithMantissa:exponent:isNegative:[[ INSTANCETYPE ]]
- initWithDecimal:[[ INSTANCETYPE ]]
- initWithString:[[ INSTANCETYPE ]]
- initWithString:locale:[[ INSTANCETYPE ]]
- descriptionWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ decimalNumberWithMantissa:exponent:isNegative:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
+ decimalNumberWithDecimal:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
+ decimalNumberWithString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
+ decimalNumberWithString:locale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByAdding:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByAdding:withBehavior:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberBySubtracting:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberBySubtracting:withBehavior:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByMultiplyingBy:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByMultiplyingBy:withBehavior:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByDividingBy:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByDividingBy:withBehavior:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByRaisingToPower:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByRaisingToPower:withBehavior:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByMultiplyingByPowerOf10:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByMultiplyingByPowerOf10:withBehavior:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- decimalNumberByRoundingAccordingToBehavior:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
- compare:[[ ENUMERATION enum NSComparisonResult]]
- decimalValue[[ RECORD NSDecimal]]
+ zero[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
+ one[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
+ minimumDecimalNumber[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
+ maximumDecimalNumber[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
+ notANumber[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDecimalNumber]]
+ defaultBehavior[[ POINTER  (nonnull) ]] -> [[ ID<NSDecimalNumberBehaviors>]]
+ setDefaultBehavior:[[ void  ]]
- objCType[[ POINTER ]] -> [[ schar (const) ]]
- doubleValue[[ double  ]]
   Interface: 'NSInflectionRuleExplicit'
       SUPER: NSInflectionRule
- initWithMorphology:[[ INSTANCETYPE ]]
- morphology[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMorphology]]
   Interface: 'NSMutableURLRequest'
       SUPER: NSURLRequest
- URL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- setURL:[[ void  ]]
- cachePolicy[[ ENUMERATION enum NSURLRequestCachePolicy]]
- setCachePolicy:[[ void  ]]
- timeoutInterval[[ double  ]]
- setTimeoutInterval:[[ void  ]]
- mainDocumentURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- setMainDocumentURL:[[ void  ]]
- networkServiceType[[ ENUMERATION enum NSURLRequestNetworkServiceType]]
- setNetworkServiceType:[[ void  ]]
- allowsCellularAccess[[ int  ]]
- setAllowsCellularAccess:[[ void  ]]
- allowsExpensiveNetworkAccess[[ int  ]]
- setAllowsExpensiveNetworkAccess:[[ void  ]]
- allowsConstrainedNetworkAccess[[ int  ]]
- setAllowsConstrainedNetworkAccess:[[ void  ]]
- assumesHTTP3Capable[[ int  ]]
- setAssumesHTTP3Capable:[[ void  ]]
- attribution[[ ENUMERATION enum NSURLRequestAttribution]]
- setAttribution:[[ void  ]]
- requiresDNSSECValidation[[ int  ]]
- setRequiresDNSSECValidation:[[ void  ]]
- setValue:forHTTPHeaderField:[[ void  ]]
- addValue:forHTTPHeaderField:[[ void  ]]
- HTTPMethod[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setHTTPMethod:[[ void  ]]
- allHTTPHeaderFields[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setAllHTTPHeaderFields:[[ void  ]]
- HTTPBody[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- setHTTPBody:[[ void  ]]
- HTTPBodyStream[[ POINTER  (nullable) ]] -> [[ INTERFACE NSInputStream]]
- setHTTPBodyStream:[[ void  ]]
- HTTPShouldHandleCookies[[ int  ]]
- setHTTPShouldHandleCookies:[[ void  ]]
- HTTPShouldUsePipelining[[ int  ]]
- setHTTPShouldUsePipelining:[[ void  ]]
   Interface: 'NSDateInterval'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- init[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- initWithStartDate:duration:[[ INSTANCETYPE ]]
- initWithStartDate:endDate:[[ INSTANCETYPE ]]
- compare:[[ ENUMERATION enum NSComparisonResult]]
- isEqualToDateInterval:[[ int  ]]
- intersectsDateInterval:[[ int  ]]
- intersectionWithDateInterval:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDateInterval]]
- containsDate:[[ int  ]]
- startDate[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDate]]
- endDate[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDate]]
- duration[[ double  ]]
   Interface: 'NSCompoundPredicate'
       SUPER: NSPredicate
- initWithType:subpredicates:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
+ andPredicateWithSubpredicates:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCompoundPredicate]]
+ orPredicateWithSubpredicates:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCompoundPredicate]]
+ notPredicateWithSubpredicate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCompoundPredicate]]
- compoundPredicateType[[ ENUMERATION enum NSCompoundPredicateType]]
- subpredicates[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'MTLPipelineBufferDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLPipelineBufferDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'MTLAccelerationStructureMotionTriangleGeometryDescriptor'
       SUPER: MTLAccelerationStructureGeometryDescriptor
+ descriptor[[ INSTANCETYPE ]]
- vertexBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setVertexBuffers:[[ void  ]]
- vertexFormat[[ ENUMERATION enum MTLAttributeFormat]]
- setVertexFormat:[[ void  ]]
- vertexStride[[ ulong  ]]
- setVertexStride:[[ void  ]]
- indexBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setIndexBuffer:[[ void  ]]
- indexBufferOffset[[ ulong  ]]
- setIndexBufferOffset:[[ void  ]]
- indexType[[ ENUMERATION enum MTLIndexType]]
- setIndexType:[[ void  ]]
- triangleCount[[ ulong  ]]
- setTriangleCount:[[ void  ]]
- transformationMatrixBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setTransformationMatrixBuffer:[[ void  ]]
- transformationMatrixBufferOffset[[ ulong  ]]
- setTransformationMatrixBufferOffset:[[ void  ]]
   Interface: 'MTLFunctionStitchingAttributeAlwaysInline'
       SUPER: NSObject
       CONFORMING: MTLFunctionStitchingAttribute
   Interface: 'NSRegularExpression'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
+ regularExpressionWithPattern:options:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSRegularExpression]]
- initWithPattern:options:error:[[ INSTANCETYPE ]]
+ escapedPatternForString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- pattern[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- options[[ ENUMERATION enum NSRegularExpressionOptions]]
- numberOfCaptureGroups[[ ulong  ]]
- enumerateMatchesInString:options:range:usingBlock:[[ void  ]]
- matchesInString:options:range:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- numberOfMatchesInString:options:range:[[ ulong  ]]
- firstMatchInString:options:range:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSTextCheckingResult]]
- rangeOfFirstMatchInString:options:range:[[ RECORD _NSRange]]
- stringByReplacingMatchesInString:options:range:withTemplate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- replaceMatchesInString:options:range:withTemplate:[[ ulong  ]]
- replacementStringForResult:inString:offset:template:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ escapedTemplateForString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'MTLStructType'
       SUPER: MTLType
- memberByName:[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLStructMember]]
- members[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSMachPort'
       SUPER: NSPort
+ portWithMachPort:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPort]]
- initWithMachPort:[[ INSTANCETYPE ]]
- setDelegate:[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSMachPortDelegate>]]
+ portWithMachPort:options:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPort]]
- initWithMachPort:options:[[ INSTANCETYPE ]]
- scheduleInRunLoop:forMode:[[ void  ]]
- removeFromRunLoop:forMode:[[ void  ]]
- machPort[[ uint  ]]
   Interface: 'NSIndexSet'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
+ indexSet[[ INSTANCETYPE ]]
+ indexSetWithIndex:[[ INSTANCETYPE ]]
+ indexSetWithIndexesInRange:[[ INSTANCETYPE ]]
- initWithIndexesInRange:[[ INSTANCETYPE ]]
- initWithIndexSet:[[ INSTANCETYPE ]]
- initWithIndex:[[ INSTANCETYPE ]]
- isEqualToIndexSet:[[ int  ]]
- indexGreaterThanIndex:[[ ulong  ]]
- indexLessThanIndex:[[ ulong  ]]
- indexGreaterThanOrEqualToIndex:[[ ulong  ]]
- indexLessThanOrEqualToIndex:[[ ulong  ]]
- getIndexes:maxCount:inIndexRange:[[ ulong  ]]
- countOfIndexesInRange:[[ ulong  ]]
- containsIndex:[[ int  ]]
- containsIndexesInRange:[[ int  ]]
- containsIndexes:[[ int  ]]
- intersectsIndexesInRange:[[ int  ]]
- enumerateIndexesUsingBlock:[[ void  ]]
- enumerateIndexesWithOptions:usingBlock:[[ void  ]]
- enumerateIndexesInRange:options:usingBlock:[[ void  ]]
- indexPassingTest:[[ ulong  ]]
- indexWithOptions:passingTest:[[ ulong  ]]
- indexInRange:options:passingTest:[[ ulong  ]]
- indexesPassingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexSet]]
- indexesWithOptions:passingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexSet]]
- indexesInRange:options:passingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexSet]]
- enumerateRangesUsingBlock:[[ void  ]]
- enumerateRangesWithOptions:usingBlock:[[ void  ]]
- enumerateRangesInRange:options:usingBlock:[[ void  ]]
- count[[ ulong  ]]
- firstIndex[[ ulong  ]]
- lastIndex[[ ulong  ]]
   Interface: 'NSEnergyFormatter'
       SUPER: NSFormatter
- stringFromValue:unit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringFromJoules:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- unitStringFromValue:unit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- unitStringFromJoules:usedUnit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- getObjectValue:forString:errorDescription:[[ int  ]]
- numberFormatter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumberFormatter]]
- setNumberFormatter:[[ void  ]]
- unitStyle[[ ENUMERATION enum NSFormattingUnitStyle]]
- setUnitStyle:[[ void  ]]
- isForFoodEnergyUse[[ int  ]]
- setForFoodEnergyUse:[[ void  ]]
   Interface: 'NSUndoManager'
       SUPER: NSObject
- beginUndoGrouping[[ void  ]]
- endUndoGrouping[[ void  ]]
- disableUndoRegistration[[ void  ]]
- enableUndoRegistration[[ void  ]]
- undo[[ void  ]]
- redo[[ void  ]]
- undoNestedGroup[[ void  ]]
- removeAllActions[[ void  ]]
- removeAllActionsWithTarget:[[ void  ]]
- registerUndoWithTarget:selector:object:[[ void  ]]
- prepareWithInvocationTarget:[[ ID ]]
- registerUndoWithTarget:handler:[[ void  ]]
- setActionIsDiscardable:[[ void  ]]
- setActionName:[[ void  ]]
- undoMenuTitleForUndoActionName:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- redoMenuTitleForUndoActionName:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- groupingLevel[[ long  ]]
- isUndoRegistrationEnabled[[ int  ]]
- groupsByEvent[[ int  ]]
- setGroupsByEvent:[[ void  ]]
- levelsOfUndo[[ ulong  ]]
- setLevelsOfUndo:[[ void  ]]
- runLoopModes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setRunLoopModes:[[ void  ]]
- canUndo[[ int  ]]
- canRedo[[ int  ]]
- isUndoing[[ int  ]]
- isRedoing[[ int  ]]
- undoActionIsDiscardable[[ int  ]]
- redoActionIsDiscardable[[ int  ]]
- undoActionName[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- redoActionName[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- undoMenuItemTitle[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- redoMenuItemTitle[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSUnitTemperature'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ kelvin[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitTemperature]]
+ celsius[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitTemperature]]
+ fahrenheit[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitTemperature]]
   Interface: 'NSMutableArray'
       SUPER: NSArray
- addObject:[[ void  ]]
- insertObject:atIndex:[[ void  ]]
- removeLastObject[[ void  ]]
- removeObjectAtIndex:[[ void  ]]
- replaceObjectAtIndex:withObject:[[ void  ]]
- init[[ INSTANCETYPE ]]
- initWithCapacity:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- addObjectsFromArray:[[ void  ]]
- exchangeObjectAtIndex:withObjectAtIndex:[[ void  ]]
- removeAllObjects[[ void  ]]
- removeObject:inRange:[[ void  ]]
- removeObject:[[ void  ]]
- removeObjectIdenticalTo:inRange:[[ void  ]]
- removeObjectIdenticalTo:[[ void  ]]
- removeObjectsFromIndices:numIndices:[[ void  ]]
- removeObjectsInArray:[[ void  ]]
- removeObjectsInRange:[[ void  ]]
- replaceObjectsInRange:withObjectsFromArray:range:[[ void  ]]
- replaceObjectsInRange:withObjectsFromArray:[[ void  ]]
- setArray:[[ void  ]]
- sortUsingFunction:context:[[ void  ]]
- sortUsingSelector:[[ void  ]]
- insertObjects:atIndexes:[[ void  ]]
- removeObjectsAtIndexes:[[ void  ]]
- replaceObjectsAtIndexes:withObjects:[[ void  ]]
- setObject:atIndexedSubscript:[[ void  ]]
- sortUsingComparator:[[ void  ]]
- sortWithOptions:usingComparator:[[ void  ]]
+ arrayWithCapacity:[[ INSTANCETYPE ]]
+ arrayWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMutableArray]]
+ arrayWithContentsOfURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMutableArray]]
- initWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMutableArray]]
- initWithContentsOfURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMutableArray]]
- applyDifference:[[ void  ]]
- sortUsingDescriptors:[[ void  ]]
- filterUsingPredicate:[[ void  ]]
   Interface: 'NSOrthography'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- initWithDominantScript:languageMap:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- dominantScript[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- languageMap[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- languagesForScript:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- dominantLanguageForScript:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
+ defaultOrthographyForLanguage:[[ INSTANCETYPE ]]
- dominantLanguage[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- allScripts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- allLanguages[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ orthographyWithDominantScript:languageMap:[[ INSTANCETYPE ]]
   Interface: 'NSURL'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
       CONFORMING: NSItemProviderReading
       CONFORMING: NSItemProviderWriting
- initWithScheme:host:path:[[ INSTANCETYPE ]]
- initFileURLWithPath:isDirectory:relativeToURL:[[ INSTANCETYPE ]]
- initFileURLWithPath:relativeToURL:[[ INSTANCETYPE ]]
- initFileURLWithPath:isDirectory:[[ INSTANCETYPE ]]
- initFileURLWithPath:[[ INSTANCETYPE ]]
+ fileURLWithPath:isDirectory:relativeToURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
+ fileURLWithPath:relativeToURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
+ fileURLWithPath:isDirectory:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
+ fileURLWithPath:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
- initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:[[ INSTANCETYPE ]]
+ fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
- initWithString:[[ INSTANCETYPE ]]
- initWithString:relativeToURL:[[ INSTANCETYPE ]]
+ URLWithString:[[ INSTANCETYPE ]]
+ URLWithString:relativeToURL:[[ INSTANCETYPE ]]
- initWithString:encodingInvalidCharacters:[[ INSTANCETYPE ]]
+ URLWithString:encodingInvalidCharacters:[[ INSTANCETYPE ]]
- initWithDataRepresentation:relativeToURL:[[ INSTANCETYPE ]]
+ URLWithDataRepresentation:relativeToURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
- initAbsoluteURLWithDataRepresentation:relativeToURL:[[ INSTANCETYPE ]]
+ absoluteURLWithDataRepresentation:relativeToURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
- getFileSystemRepresentation:maxLength:[[ int  ]]
- checkResourceIsReachableAndReturnError:[[ int  ]]
- isFileReferenceURL[[ int  ]]
- fileReferenceURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- getResourceValue:forKey:error:[[ int  ]]
- resourceValuesForKeys:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setResourceValue:forKey:error:[[ int  ]]
- setResourceValues:error:[[ int  ]]
- removeCachedResourceValueForKey:[[ void  ]]
- removeAllCachedResourceValues[[ void  ]]
- setTemporaryResourceValue:forKey:[[ void  ]]
- bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:[[ INSTANCETYPE ]]
+ URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:[[ INSTANCETYPE ]]
+ resourceValuesForKeys:fromBookmarkData:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
+ writeBookmarkData:toURL:options:error:[[ int  ]]
+ bookmarkDataWithContentsOfURL:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
+ URLByResolvingAliasFileAtURL:options:error:[[ INSTANCETYPE ]]
- startAccessingSecurityScopedResource[[ int  ]]
- stopAccessingSecurityScopedResource[[ void  ]]
- dataRepresentation[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
- absoluteString[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- relativeString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- baseURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- absoluteURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- scheme[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- resourceSpecifier[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- host[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- port[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- user[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- password[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- path[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- fragment[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- parameterString[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- query[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- relativePath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- hasDirectoryPath[[ int  ]]
- fileSystemRepresentation[[ POINTER ]] -> [[ schar (const) ]]
- isFileURL[[ int  ]]
- standardizedURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- filePathURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- getPromisedItemResourceValue:forKey:error:[[ int  ]]
- promisedItemResourceValuesForKeys:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- checkPromisedItemIsReachableAndReturnError:[[ int  ]]
+ fileURLWithPathComponents:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLByAppendingPathComponent:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLByAppendingPathComponent:isDirectory:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLByAppendingPathExtension:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- pathComponents[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- lastPathComponent[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- pathExtension[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- URLByDeletingLastPathComponent[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLByDeletingPathExtension[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLByStandardizingPath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLByResolvingSymlinksInPath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
   Interface: 'MTLFunctionDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ functionDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLFunctionDescriptor]]
- name[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
- specializedName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setSpecializedName:[[ void  ]]
- constantValues[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLFunctionConstantValues]]
- setConstantValues:[[ void  ]]
- options[[ ENUMERATION enum MTLFunctionOptions]]
- setOptions:[[ void  ]]
- binaryArchives[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setBinaryArchives:[[ void  ]]
   Interface: 'MTLMeshRenderPipelineDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- reset[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]]
- objectFunction[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]]
- setObjectFunction:[[ void  ]]
- meshFunction[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]]
- setMeshFunction:[[ void  ]]
- fragmentFunction[[ POINTER  (nullable) ]] -> [[ ID<MTLFunction>]]
- setFragmentFunction:[[ void  ]]
- maxTotalThreadsPerObjectThreadgroup[[ ulong  ]]
- setMaxTotalThreadsPerObjectThreadgroup:[[ void  ]]
- maxTotalThreadsPerMeshThreadgroup[[ ulong  ]]
- setMaxTotalThreadsPerMeshThreadgroup:[[ void  ]]
- objectThreadgroupSizeIsMultipleOfThreadExecutionWidth[[ int  ]]
- setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:[[ void  ]]
- meshThreadgroupSizeIsMultipleOfThreadExecutionWidth[[ int  ]]
- setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:[[ void  ]]
- payloadMemoryLength[[ ulong  ]]
- setPayloadMemoryLength:[[ void  ]]
- maxTotalThreadgroupsPerMeshGrid[[ ulong  ]]
- setMaxTotalThreadgroupsPerMeshGrid:[[ void  ]]
- objectBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLPipelineBufferDescriptorArray]]
- meshBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLPipelineBufferDescriptorArray]]
- fragmentBuffers[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLPipelineBufferDescriptorArray]]
- rasterSampleCount[[ ulong  ]]
- setRasterSampleCount:[[ void  ]]
- isAlphaToCoverageEnabled[[ int  ]]
- setAlphaToCoverageEnabled:[[ void  ]]
- isAlphaToOneEnabled[[ int  ]]
- setAlphaToOneEnabled:[[ void  ]]
- isRasterizationEnabled[[ int  ]]
- setRasterizationEnabled:[[ void  ]]
- maxVertexAmplificationCount[[ ulong  ]]
- setMaxVertexAmplificationCount:[[ void  ]]
- colorAttachments[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPipelineColorAttachmentDescriptorArray]]
- depthAttachmentPixelFormat[[ ENUMERATION enum MTLPixelFormat]]
- setDepthAttachmentPixelFormat:[[ void  ]]
- stencilAttachmentPixelFormat[[ ENUMERATION enum MTLPixelFormat]]
- setStencilAttachmentPixelFormat:[[ void  ]]
- supportIndirectCommandBuffers[[ int  ]]
- setSupportIndirectCommandBuffers:[[ void  ]]
- objectLinkedFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLLinkedFunctions]]
- setObjectLinkedFunctions:[[ void  ]]
- meshLinkedFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLLinkedFunctions]]
- setMeshLinkedFunctions:[[ void  ]]
- fragmentLinkedFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLLinkedFunctions]]
- setFragmentLinkedFunctions:[[ void  ]]
   Interface: 'MTLComputePassSampleBufferAttachmentDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- sampleBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLCounterSampleBuffer>]]
- setSampleBuffer:[[ void  ]]
- startOfEncoderSampleIndex[[ ulong  ]]
- setStartOfEncoderSampleIndex:[[ void  ]]
- endOfEncoderSampleIndex[[ ulong  ]]
- setEndOfEncoderSampleIndex:[[ void  ]]
   Interface: 'MTLBufferLayoutDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- stride[[ ulong  ]]
- setStride:[[ void  ]]
- stepFunction[[ ENUMERATION enum MTLStepFunction]]
- setStepFunction:[[ void  ]]
- stepRate[[ ulong  ]]
- setStepRate:[[ void  ]]
   Interface: 'NSValueTransformer'
       SUPER: NSObject
+ setValueTransformer:forName:[[ void  ]]
+ valueTransformerForName:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSValueTransformer]]
+ valueTransformerNames[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ transformedValueClass[[ CLASS Class]]
+ allowsReverseTransformation[[ int  ]]
- transformedValue:[[ ID ]]
- reverseTransformedValue:[[ ID ]]
   Interface: 'NSObject'
       CONFORMING: NSObject
+ load[[ void  ]]
+ initialize[[ void  ]]
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
+ allocWithZone:[[ INSTANCETYPE ]]
+ alloc[[ INSTANCETYPE ]]
- dealloc[[ void  ]]
- finalize[[ void  ]]
- copy[[ ID ]]
- mutableCopy[[ ID ]]
+ copyWithZone:[[ ID ]]
+ mutableCopyWithZone:[[ ID ]]
+ instancesRespondToSelector:[[ int  ]]
+ conformsToProtocol:[[ int  ]]
- methodForSelector:[[ POINTER ]] -> [[ FUNCTION_POINTER ]]
+ instanceMethodForSelector:[[ POINTER ]] -> [[ FUNCTION_POINTER ]]
- doesNotRecognizeSelector:[[ void  ]]
- forwardingTargetForSelector:[[ ID ]]
- forwardInvocation:[[ void  ]]
- methodSignatureForSelector:[[ POINTER ]] -> [[ INTERFACE NSMethodSignature]]
+ instanceMethodSignatureForSelector:[[ POINTER ]] -> [[ INTERFACE NSMethodSignature]]
- allowsWeakReference[[ int  ]]
- retainWeakReference[[ int  ]]
+ isSubclassOfClass:[[ int  ]]
+ resolveClassMethod:[[ int  ]]
+ resolveInstanceMethod:[[ int  ]]
+ hash[[ ulong  ]]
+ superclass[[ CLASS Class]]
+ class[[ CLASS Class]]
+ description[[ POINTER ]] -> [[ INTERFACE NSString]]
+ debugDescription[[ POINTER ]] -> [[ INTERFACE NSString]]
+ version[[ long  ]]
+ setVersion:[[ void  ]]
- replacementObjectForCoder:[[ ID ]]
- awakeAfterUsingCoder:[[ ID ]]
- classForCoder[[ CLASS Class]]
- autoContentAccessingProxy[[ ID ]]
- attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:[[ void  ]]
- attemptRecoveryFromError:optionIndex:[[ int  ]]
- performSelector:withObject:afterDelay:inModes:[[ void  ]]
- performSelector:withObject:afterDelay:[[ void  ]]
+ cancelPreviousPerformRequestsWithTarget:selector:object:[[ void  ]]
+ cancelPreviousPerformRequestsWithTarget:[[ void  ]]
- fileManager:shouldProceedAfterError:[[ int  ]]
- fileManager:willProcessPath:[[ void  ]]
- valueForKey:[[ ID ]]
- setValue:forKey:[[ void  ]]
- validateValue:forKey:error:[[ int  ]]
- mutableArrayValueForKey:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableArray]]
- mutableOrderedSetValueForKey:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableOrderedSet]]
- mutableSetValueForKey:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableSet]]
- valueForKeyPath:[[ ID ]]
- setValue:forKeyPath:[[ void  ]]
- validateValue:forKeyPath:error:[[ int  ]]
- mutableArrayValueForKeyPath:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableArray]]
- mutableOrderedSetValueForKeyPath:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableOrderedSet]]
- mutableSetValueForKeyPath:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableSet]]
- valueForUndefinedKey:[[ ID ]]
- setValue:forUndefinedKey:[[ void  ]]
- setNilValueForKey:[[ void  ]]
- dictionaryWithValuesForKeys:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- setValuesForKeysWithDictionary:[[ void  ]]
+ accessInstanceVariablesDirectly[[ int  ]]
+ useStoredAccessor[[ int  ]]
- storedValueForKey:[[ ID ]]
- takeStoredValue:forKey:[[ void  ]]
- takeValue:forKey:[[ void  ]]
- takeValue:forKeyPath:[[ void  ]]
- handleQueryWithUnboundKey:[[ ID ]]
- handleTakeValue:forUnboundKey:[[ void  ]]
- unableToSetNilForKey:[[ void  ]]
- valuesForKeys:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- takeValuesFromDictionary:[[ void  ]]
- observeValueForKeyPath:ofObject:change:context:[[ void  ]]
- addObserver:forKeyPath:options:context:[[ void  ]]
- removeObserver:forKeyPath:context:[[ void  ]]
- removeObserver:forKeyPath:[[ void  ]]
- willChangeValueForKey:[[ void  ]]
- didChangeValueForKey:[[ void  ]]
- willChange:valuesAtIndexes:forKey:[[ void  ]]
- didChange:valuesAtIndexes:forKey:[[ void  ]]
- willChangeValueForKey:withSetMutation:usingObjects:[[ void  ]]
- didChangeValueForKey:withSetMutation:usingObjects:[[ void  ]]
+ keyPathsForValuesAffectingValueForKey:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
+ automaticallyNotifiesObserversForKey:[[ int  ]]
- observationInfo[[ POINTER ]] -> [[ void  ]]
- setObservationInfo:[[ void  ]]
- replacementObjectForKeyedArchiver:[[ ID ]]
+ classFallbacksForKeyedArchiver[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- classForKeyedArchiver[[ CLASS Class]]
+ classForKeyedUnarchiver[[ CLASS Class]]
- performSelectorOnMainThread:withObject:waitUntilDone:modes:[[ void  ]]
- performSelectorOnMainThread:withObject:waitUntilDone:[[ void  ]]
- performSelector:onThread:withObject:waitUntilDone:modes:[[ void  ]]
- performSelector:onThread:withObject:waitUntilDone:[[ void  ]]
- performSelectorInBackground:withObject:[[ void  ]]
   Interface: 'NSComparisonPredicate'
       SUPER: NSPredicate
+ predicateWithLeftExpression:rightExpression:modifier:type:options:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSComparisonPredicate]]
+ predicateWithLeftExpression:rightExpression:customSelector:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSComparisonPredicate]]
- initWithLeftExpression:rightExpression:modifier:type:options:[[ INSTANCETYPE ]]
- initWithLeftExpression:rightExpression:customSelector:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- predicateOperatorType[[ ENUMERATION enum NSPredicateOperatorType]]
- comparisonPredicateModifier[[ ENUMERATION enum NSComparisonPredicateModifier]]
- leftExpression[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
- rightExpression[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSExpression]]
- customSelector[[ SEL  ]]
- options[[ ENUMERATION enum NSComparisonPredicateOptions]]
   Interface: 'MTLSamplerDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- minFilter[[ ENUMERATION enum MTLSamplerMinMagFilter]]
- setMinFilter:[[ void  ]]
- magFilter[[ ENUMERATION enum MTLSamplerMinMagFilter]]
- setMagFilter:[[ void  ]]
- mipFilter[[ ENUMERATION enum MTLSamplerMipFilter]]
- setMipFilter:[[ void  ]]
- maxAnisotropy[[ ulong  ]]
- setMaxAnisotropy:[[ void  ]]
- sAddressMode[[ ENUMERATION enum MTLSamplerAddressMode]]
- setSAddressMode:[[ void  ]]
- tAddressMode[[ ENUMERATION enum MTLSamplerAddressMode]]
- setTAddressMode:[[ void  ]]
- rAddressMode[[ ENUMERATION enum MTLSamplerAddressMode]]
- setRAddressMode:[[ void  ]]
- borderColor[[ ENUMERATION enum MTLSamplerBorderColor]]
- setBorderColor:[[ void  ]]
- normalizedCoordinates[[ int  ]]
- setNormalizedCoordinates:[[ void  ]]
- lodMinClamp[[ float  ]]
- setLodMinClamp:[[ void  ]]
- lodMaxClamp[[ float  ]]
- setLodMaxClamp:[[ void  ]]
- lodAverage[[ int  ]]
- setLodAverage:[[ void  ]]
- compareFunction[[ ENUMERATION enum MTLCompareFunction]]
- setCompareFunction:[[ void  ]]
- supportArgumentBuffers[[ int  ]]
- setSupportArgumentBuffers:[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]]
   Interface: 'MTLCaptureDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- captureObject[[ ID ]]
- setCaptureObject:[[ void  ]]
- destination[[ ENUMERATION enum MTLCaptureDestination]]
- setDestination:[[ void  ]]
- outputURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- setOutputURL:[[ void  ]]
   Interface: 'NSUnitElectricCurrent'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ megaamperes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCurrent]]
+ kiloamperes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCurrent]]
+ amperes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCurrent]]
+ milliamperes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCurrent]]
+ microamperes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricCurrent]]
   Interface: 'NSAttributedString'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
- attributesAtIndex:effectiveRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- string[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- attribute:atIndex:effectiveRange:[[ ID ]]
- attributedSubstringFromRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSAttributedString]]
- attributesAtIndex:longestEffectiveRange:inRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- attribute:atIndex:longestEffectiveRange:inRange:[[ ID ]]
- isEqualToAttributedString:[[ int  ]]
- initWithString:[[ INSTANCETYPE ]]
- initWithString:attributes:[[ INSTANCETYPE ]]
- initWithAttributedString:[[ INSTANCETYPE ]]
- enumerateAttributesInRange:options:usingBlock:[[ void  ]]
- enumerateAttribute:inRange:options:usingBlock:[[ void  ]]
- length[[ ulong  ]]
- initWithContentsOfMarkdownFileAtURL:options:baseURL:error:[[ INSTANCETYPE ]]
- initWithMarkdown:options:baseURL:error:[[ INSTANCETYPE ]]
- initWithMarkdownString:options:baseURL:error:[[ INSTANCETYPE ]]
- initWithFormat:options:locale:[[ INSTANCETYPE ]]
- initWithFormat:options:locale:arguments:[[ INSTANCETYPE ]]
+ localizedAttributedStringWithFormat:[[ INSTANCETYPE ]]
+ localizedAttributedStringWithFormat:options:[[ INSTANCETYPE ]]
- initWithFormat:options:locale:context:[[ INSTANCETYPE ]]
- initWithFormat:options:locale:context:arguments:[[ INSTANCETYPE ]]
+ localizedAttributedStringWithFormat:context:[[ INSTANCETYPE ]]
+ localizedAttributedStringWithFormat:options:context:[[ INSTANCETYPE ]]
- attributedStringByInflectingString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSAttributedString]]
   Interface: 'MTLResourceStatePassSampleBufferAttachmentDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- sampleBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLCounterSampleBuffer>]]
- setSampleBuffer:[[ void  ]]
- startOfEncoderSampleIndex[[ ulong  ]]
- setStartOfEncoderSampleIndex:[[ void  ]]
- endOfEncoderSampleIndex[[ ulong  ]]
- setEndOfEncoderSampleIndex:[[ void  ]]
   Interface: 'NSURLCredential'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
- persistence[[ ENUMERATION enum NSURLCredentialPersistence]]
- initWithUser:password:persistence:[[ INSTANCETYPE ]]
+ credentialWithUser:password:persistence:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLCredential]]
- user[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- password[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- hasPassword[[ int  ]]
- initWithIdentity:certificates:persistence:[[ INSTANCETYPE ]]
+ credentialWithIdentity:certificates:persistence:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLCredential]]
- identity[[ POINTER  (nullable) ]] -> [[ RECORD __SecIdentity]]
- certificates[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- initWithTrust:[[ INSTANCETYPE ]]
+ credentialForTrust:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLCredential]]
   Interface: 'NSXPCListenerEndpoint'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
   Interface: 'NSBundle'
       SUPER: NSObject
+ bundleWithPath:[[ INSTANCETYPE ]]
- initWithPath:[[ INSTANCETYPE ]]
+ bundleWithURL:[[ INSTANCETYPE ]]
- initWithURL:[[ INSTANCETYPE ]]
+ bundleForClass:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSBundle]]
+ bundleWithIdentifier:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSBundle]]
- load[[ int  ]]
- unload[[ int  ]]
- preflightAndReturnError:[[ int  ]]
- loadAndReturnError:[[ int  ]]
- URLForAuxiliaryExecutable:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- pathForAuxiliaryExecutable:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
+ URLForResource:withExtension:subdirectory:inBundleWithURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
+ URLsForResourcesWithExtension:subdirectory:inBundleWithURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- URLForResource:withExtension:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLForResource:withExtension:subdirectory:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLForResource:withExtension:subdirectory:localization:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- URLsForResourcesWithExtension:subdirectory:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- URLsForResourcesWithExtension:subdirectory:localization:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
+ pathForResource:ofType:inDirectory:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
+ pathsForResourcesOfType:inDirectory:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- pathForResource:ofType:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- pathForResource:ofType:inDirectory:forLocalization:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- pathsForResourcesOfType:inDirectory:forLocalization:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- localizedStringForKey:value:table:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- localizedAttributedStringForKey:value:table:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSAttributedString]]
- objectForInfoDictionaryKey:[[ ID ]]
- classNamed:[[ CLASS Class]]
+ preferredLocalizationsFromArray:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ preferredLocalizationsFromArray:forPreferences:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ mainBundle[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSBundle]]
+ allBundles[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ allFrameworks[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- isLoaded[[ int  ]]
- bundleURL[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
- resourceURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- executableURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- privateFrameworksURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- sharedFrameworksURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- sharedSupportURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- builtInPlugInsURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- appStoreReceiptURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- bundlePath[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- resourcePath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- executablePath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- privateFrameworksPath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- sharedFrameworksPath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- sharedSupportPath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- builtInPlugInsPath[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- bundleIdentifier[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- infoDictionary[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- localizedInfoDictionary[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- principalClass[[ CLASS Class]]
- preferredLocalizations[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- localizations[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- developmentLocalization[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- executableArchitectures[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setPreservationPriority:forTags:[[ void  ]]
- preservationPriorityForTag:[[ double  ]]
   Interface: 'MTLRenderPassColorAttachmentDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPassColorAttachmentDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'MTLLinkedFunctions'
       SUPER: NSObject
       CONFORMING: NSCopying
+ linkedFunctions[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLLinkedFunctions]]
- functions[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setFunctions:[[ void  ]]
- binaryFunctions[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setBinaryFunctions:[[ void  ]]
- groups[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setGroups:[[ void  ]]
- privateFunctions[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setPrivateFunctions:[[ void  ]]
   Interface: 'NSListFormatter'
       SUPER: NSFormatter
+ localizedStringByJoiningStrings:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringFromItems:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- stringForObjectValue:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- locale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
- setLocale:[[ void  ]]
- itemFormatter[[ POINTER  (nullable) ]] -> [[ INTERFACE NSFormatter]]
- setItemFormatter:[[ void  ]]
   Interface: 'NSInvocationOperation'
       SUPER: NSOperation
- initWithTarget:selector:object:[[ INSTANCETYPE ]]
- initWithInvocation:[[ INSTANCETYPE ]]
- invocation[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSInvocation]]
- result[[ ID ]]
   Interface: 'NSPropertyListSerialization'
       SUPER: NSObject
+ propertyList:isValidForFormat:[[ int  ]]
+ dataWithPropertyList:format:options:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
+ writePropertyList:toStream:format:options:error:[[ long  ]]
+ propertyListWithData:options:format:error:[[ ID ]]
+ propertyListWithStream:options:format:error:[[ ID ]]
+ dataFromPropertyList:format:errorDescription:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
+ propertyListFromData:mutabilityOption:format:errorDescription:[[ ID ]]
   Interface: 'MTLPrimitiveAccelerationStructureDescriptor'
       SUPER: MTLAccelerationStructureDescriptor
+ descriptor[[ INSTANCETYPE ]]
- geometryDescriptors[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setGeometryDescriptors:[[ void  ]]
- motionStartBorderMode[[ ENUMERATION enum MTLMotionBorderMode]]
- setMotionStartBorderMode:[[ void  ]]
- motionEndBorderMode[[ ENUMERATION enum MTLMotionBorderMode]]
- setMotionEndBorderMode:[[ void  ]]
- motionStartTime[[ float  ]]
- setMotionStartTime:[[ void  ]]
- motionEndTime[[ float  ]]
- setMotionEndTime:[[ void  ]]
- motionKeyframeCount[[ ulong  ]]
- setMotionKeyframeCount:[[ void  ]]
   Interface: 'NSDateFormatter'
       SUPER: NSFormatter
- getObjectValue:forString:range:error:[[ int  ]]
- stringFromDate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- dateFromString:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
+ localizedStringFromDate:dateStyle:timeStyle:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ dateFormatFromTemplate:options:locale:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLocalizedDateFormatFromTemplate:[[ void  ]]
- formattingContext[[ ENUMERATION enum NSFormattingContext]]
- setFormattingContext:[[ void  ]]
+ defaultFormatterBehavior[[ ENUMERATION enum NSDateFormatterBehavior]]
+ setDefaultFormatterBehavior:[[ void  ]]
- dateFormat[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setDateFormat:[[ void  ]]
- dateStyle[[ ENUMERATION enum NSDateFormatterStyle]]
- setDateStyle:[[ void  ]]
- timeStyle[[ ENUMERATION enum NSDateFormatterStyle]]
- setTimeStyle:[[ void  ]]
- locale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
- setLocale:[[ void  ]]
- generatesCalendarDates[[ int  ]]
- setGeneratesCalendarDates:[[ void  ]]
- formatterBehavior[[ ENUMERATION enum NSDateFormatterBehavior]]
- setFormatterBehavior:[[ void  ]]
- timeZone[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimeZone]]
- setTimeZone:[[ void  ]]
- calendar[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCalendar]]
- setCalendar:[[ void  ]]
- isLenient[[ int  ]]
- setLenient:[[ void  ]]
- twoDigitStartDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- setTwoDigitStartDate:[[ void  ]]
- defaultDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- setDefaultDate:[[ void  ]]
- eraSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setEraSymbols:[[ void  ]]
- monthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setMonthSymbols:[[ void  ]]
- shortMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setShortMonthSymbols:[[ void  ]]
- weekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setWeekdaySymbols:[[ void  ]]
- shortWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setShortWeekdaySymbols:[[ void  ]]
- AMSymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setAMSymbol:[[ void  ]]
- PMSymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPMSymbol:[[ void  ]]
- longEraSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setLongEraSymbols:[[ void  ]]
- veryShortMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setVeryShortMonthSymbols:[[ void  ]]
- standaloneMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setStandaloneMonthSymbols:[[ void  ]]
- shortStandaloneMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setShortStandaloneMonthSymbols:[[ void  ]]
- veryShortStandaloneMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setVeryShortStandaloneMonthSymbols:[[ void  ]]
- veryShortWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setVeryShortWeekdaySymbols:[[ void  ]]
- standaloneWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setStandaloneWeekdaySymbols:[[ void  ]]
- shortStandaloneWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setShortStandaloneWeekdaySymbols:[[ void  ]]
- veryShortStandaloneWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setVeryShortStandaloneWeekdaySymbols:[[ void  ]]
- quarterSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setQuarterSymbols:[[ void  ]]
- shortQuarterSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setShortQuarterSymbols:[[ void  ]]
- standaloneQuarterSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setStandaloneQuarterSymbols:[[ void  ]]
- shortStandaloneQuarterSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setShortStandaloneQuarterSymbols:[[ void  ]]
- gregorianStartDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- setGregorianStartDate:[[ void  ]]
- doesRelativeDateFormatting[[ int  ]]
- setDoesRelativeDateFormatting:[[ void  ]]
   Interface: 'NSLengthFormatter'
       SUPER: NSFormatter
- stringFromValue:unit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringFromMeters:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- unitStringFromValue:unit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- unitStringFromMeters:usedUnit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- getObjectValue:forString:errorDescription:[[ int  ]]
- numberFormatter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumberFormatter]]
- setNumberFormatter:[[ void  ]]
- unitStyle[[ ENUMERATION enum NSFormattingUnitStyle]]
- setUnitStyle:[[ void  ]]
- isForPersonHeightUse[[ int  ]]
- setForPersonHeightUse:[[ void  ]]
   Interface: 'NSFileVersion'
       SUPER: NSObject
+ currentVersionOfItemAtURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSFileVersion]]
+ otherVersionsOfItemAtURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
+ unresolvedConflictVersionsOfItemAtURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
+ getNonlocalVersionsOfItemAtURL:completionHandler:[[ void  ]]
+ versionOfItemAtURL:forPersistentIdentifier:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSFileVersion]]
+ addVersionOfItemAtURL:withContentsOfURL:options:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSFileVersion]]
+ temporaryDirectoryURLForNewVersionOfItemAtURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
- replaceItemAtURL:options:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- removeAndReturnError:[[ int  ]]
+ removeOtherVersionsOfItemAtURL:error:[[ int  ]]
- URL[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
- localizedName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedNameOfSavingComputer[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- originatorNameComponents[[ POINTER  (nullable) ]] -> [[ INTERFACE NSPersonNameComponents]]
- modificationDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- persistentIdentifier[[ POINTER  (nonnull) ]] -> [[ ID<NSCoding>]]
- isConflict[[ int  ]]
- isResolved[[ int  ]]
- setResolved:[[ void  ]]
- isDiscardable[[ int  ]]
- setDiscardable:[[ void  ]]
- hasLocalContents[[ int  ]]
- hasThumbnail[[ int  ]]
   Interface: 'NSUserDefaults'
       SUPER: NSObject
+ resetStandardUserDefaults[[ void  ]]
- init[[ INSTANCETYPE ]]
- initWithSuiteName:[[ INSTANCETYPE ]]
- initWithUser:[[ ID ]]
- objectForKey:[[ ID ]]
- setObject:forKey:[[ void  ]]
- removeObjectForKey:[[ void  ]]
- stringForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- arrayForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- dictionaryForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- dataForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- stringArrayForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- integerForKey:[[ long  ]]
- floatForKey:[[ float  ]]
- doubleForKey:[[ double  ]]
- boolForKey:[[ int  ]]
- URLForKey:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- setInteger:forKey:[[ void  ]]
- setFloat:forKey:[[ void  ]]
- setDouble:forKey:[[ void  ]]
- setBool:forKey:[[ void  ]]
- setURL:forKey:[[ void  ]]
- registerDefaults:[[ void  ]]
- addSuiteNamed:[[ void  ]]
- removeSuiteNamed:[[ void  ]]
- dictionaryRepresentation[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- volatileDomainForName:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- setVolatileDomain:forName:[[ void  ]]
- removeVolatileDomainForName:[[ void  ]]
- persistentDomainNames[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- persistentDomainForName:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setPersistentDomain:forName:[[ void  ]]
- removePersistentDomainForName:[[ void  ]]
- synchronize[[ int  ]]
- objectIsForcedForKey:[[ int  ]]
- objectIsForcedForKey:inDomain:[[ int  ]]
+ standardUserDefaults[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUserDefaults]]
- volatileDomainNames[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSOrderedCollectionDifference'
       SUPER: NSObject
       CONFORMING: NSFastEnumeration
- initWithChanges:[[ INSTANCETYPE ]]
- initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:[[ INSTANCETYPE ]]
- initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:[[ INSTANCETYPE ]]
- differenceByTransformingChangesWithBlock:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedCollectionDifference]]
- inverseDifference[[ INSTANCETYPE ]]
- insertions[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- removals[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- hasChanges[[ int  ]]
   Interface: 'NSDate'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- init[[ INSTANCETYPE ]]
- initWithTimeIntervalSinceReferenceDate:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- timeIntervalSinceReferenceDate[[ double  ]]
- timeIntervalSinceDate:[[ double  ]]
- addTimeInterval:[[ ID ]]
- dateByAddingTimeInterval:[[ INSTANCETYPE ]]
- earlierDate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDate]]
- laterDate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDate]]
- compare:[[ ENUMERATION enum NSComparisonResult]]
- isEqualToDate:[[ int  ]]
- descriptionWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- timeIntervalSinceNow[[ double  ]]
- timeIntervalSince1970[[ double  ]]
- description[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ date[[ INSTANCETYPE ]]
+ dateWithTimeIntervalSinceNow:[[ INSTANCETYPE ]]
+ dateWithTimeIntervalSinceReferenceDate:[[ INSTANCETYPE ]]
+ dateWithTimeIntervalSince1970:[[ INSTANCETYPE ]]
+ dateWithTimeInterval:sinceDate:[[ INSTANCETYPE ]]
- initWithTimeIntervalSinceNow:[[ INSTANCETYPE ]]
- initWithTimeIntervalSince1970:[[ INSTANCETYPE ]]
- initWithTimeInterval:sinceDate:[[ INSTANCETYPE ]]
+ distantFuture[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDate]]
+ distantPast[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDate]]
+ now[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDate]]
   Interface: 'MTLAccelerationStructureGeometryDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- intersectionFunctionTableOffset[[ ulong  ]]
- setIntersectionFunctionTableOffset:[[ void  ]]
- opaque[[ int  ]]
- setOpaque:[[ void  ]]
- allowDuplicateIntersectionFunctionInvocation[[ int  ]]
- setAllowDuplicateIntersectionFunctionInvocation:[[ void  ]]
- label[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setLabel:[[ void  ]]
- primitiveDataBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setPrimitiveDataBuffer:[[ void  ]]
- primitiveDataBufferOffset[[ ulong  ]]
- setPrimitiveDataBufferOffset:[[ void  ]]
- primitiveDataStride[[ ulong  ]]
- setPrimitiveDataStride:[[ void  ]]
- primitiveDataElementSize[[ ulong  ]]
- setPrimitiveDataElementSize:[[ void  ]]
   Interface: 'NSRelativeDateTimeFormatter'
       SUPER: NSFormatter
- localizedStringFromDateComponents:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- localizedStringFromTimeInterval:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- localizedStringForDate:relativeToDate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringForObjectValue:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- dateTimeStyle[[ ENUMERATION enum NSRelativeDateTimeFormatterStyle]]
- setDateTimeStyle:[[ void  ]]
- unitsStyle[[ ENUMERATION enum NSRelativeDateTimeFormatterUnitsStyle]]
- setUnitsStyle:[[ void  ]]
- formattingContext[[ ENUMERATION enum NSFormattingContext]]
- setFormattingContext:[[ void  ]]
- calendar[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCalendar]]
- setCalendar:[[ void  ]]
- locale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
- setLocale:[[ void  ]]
   Interface: 'NSURLSession'
       SUPER: NSObject
+ sessionWithConfiguration:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]]
+ sessionWithConfiguration:delegate:delegateQueue:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]]
- finishTasksAndInvalidate[[ void  ]]
- invalidateAndCancel[[ void  ]]
- resetWithCompletionHandler:[[ void  ]]
- flushWithCompletionHandler:[[ void  ]]
- getTasksWithCompletionHandler:[[ void  ]]
- getAllTasksWithCompletionHandler:[[ void  ]]
- dataTaskWithRequest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDataTask]]
- dataTaskWithURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDataTask]]
- uploadTaskWithRequest:fromFile:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionUploadTask]]
- uploadTaskWithRequest:fromData:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionUploadTask]]
- uploadTaskWithResumeData:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionUploadTask]]
- uploadTaskWithStreamedRequest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionUploadTask]]
- downloadTaskWithRequest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]]
- downloadTaskWithURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]]
- downloadTaskWithResumeData:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]]
- streamTaskWithHostName:port:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionStreamTask]]
- streamTaskWithNetService:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionStreamTask]]
- webSocketTaskWithURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionWebSocketTask]]
- webSocketTaskWithURL:protocols:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionWebSocketTask]]
- webSocketTaskWithRequest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionWebSocketTask]]
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
+ sharedSession[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSession]]
- delegateQueue[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOperationQueue]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSURLSessionDelegate>]]
- configuration[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionConfiguration]]
- sessionDescription[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setSessionDescription:[[ void  ]]
- dataTaskWithRequest:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDataTask]]
- dataTaskWithURL:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDataTask]]
- uploadTaskWithRequest:fromFile:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionUploadTask]]
- uploadTaskWithRequest:fromData:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionUploadTask]]
- uploadTaskWithResumeData:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionUploadTask]]
- downloadTaskWithRequest:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]]
- downloadTaskWithURL:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]]
- downloadTaskWithResumeData:completionHandler:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLSessionDownloadTask]]
   Interface: 'NSMorphologyCustomPronoun'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
+ isSupportedForLanguage:[[ int  ]]
+ requiredKeysForLanguage:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- subjectForm[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setSubjectForm:[[ void  ]]
- objectForm[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setObjectForm:[[ void  ]]
- possessiveForm[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPossessiveForm:[[ void  ]]
- possessiveAdjectiveForm[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPossessiveAdjectiveForm:[[ void  ]]
- reflexiveForm[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setReflexiveForm:[[ void  ]]
   Interface: 'MTLResourceStatePassSampleBufferAttachmentDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLResourceStatePassSampleBufferAttachmentDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'NSInvocation'
       SUPER: NSObject
+ invocationWithMethodSignature:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSInvocation]]
- retainArguments[[ void  ]]
- getReturnValue:[[ void  ]]
- setReturnValue:[[ void  ]]
- getArgument:atIndex:[[ void  ]]
- setArgument:atIndex:[[ void  ]]
- invoke[[ void  ]]
- invokeWithTarget:[[ void  ]]
- invokeUsingIMP:[[ void  ]]
- methodSignature[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMethodSignature]]
- argumentsRetained[[ int  ]]
- target[[ ID ]]
- setTarget:[[ void  ]]
- selector[[ SEL  ]]
- setSelector:[[ void  ]]
   Interface: 'NSMessagePort'
       SUPER: NSPort
   Interface: 'MTLBinaryArchiveDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- url[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- setUrl:[[ void  ]]
   Interface: 'MTLRenderPassSampleBufferAttachmentDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- sampleBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLCounterSampleBuffer>]]
- setSampleBuffer:[[ void  ]]
- startOfVertexSampleIndex[[ ulong  ]]
- setStartOfVertexSampleIndex:[[ void  ]]
- endOfVertexSampleIndex[[ ulong  ]]
- setEndOfVertexSampleIndex:[[ void  ]]
- startOfFragmentSampleIndex[[ ulong  ]]
- setStartOfFragmentSampleIndex:[[ void  ]]
- endOfFragmentSampleIndex[[ ulong  ]]
- setEndOfFragmentSampleIndex:[[ void  ]]
   Interface: 'NSUnitInformationStorage'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ bytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ bits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ nibbles[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ yottabytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ zettabytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ exabytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ petabytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ terabytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ gigabytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ megabytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ kilobytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ yottabits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ zettabits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ exabits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ petabits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ terabits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ gigabits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ megabits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ kilobits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ yobibytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ zebibytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ exbibytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ pebibytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ tebibytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ gibibytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ mebibytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ kibibytes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ yobibits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ zebibits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ exbibits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ pebibits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ tebibits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ gibibits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ mebibits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
+ kibibits[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitInformationStorage]]
   Interface: 'NSOutputStream'
       SUPER: NSStream
- write:maxLength:[[ long  ]]
- initToMemory[[ INSTANCETYPE ]]
- initToBuffer:capacity:[[ INSTANCETYPE ]]
- initWithURL:append:[[ INSTANCETYPE ]]
- hasSpaceAvailable[[ int  ]]
- initToFileAtPath:append:[[ INSTANCETYPE ]]
+ outputStreamToMemory[[ INSTANCETYPE ]]
+ outputStreamToBuffer:capacity:[[ INSTANCETYPE ]]
+ outputStreamToFileAtPath:append:[[ INSTANCETYPE ]]
+ outputStreamWithURL:append:[[ INSTANCETYPE ]]
   Interface: 'NSOperationQueue'
       SUPER: NSObject
       CONFORMING: NSProgressReporting
- addOperation:[[ void  ]]
- addOperations:waitUntilFinished:[[ void  ]]
- addOperationWithBlock:[[ void  ]]
- addBarrierBlock:[[ void  ]]
- cancelAllOperations[[ void  ]]
- waitUntilAllOperationsAreFinished[[ void  ]]
- progress[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
- maxConcurrentOperationCount[[ long  ]]
- setMaxConcurrentOperationCount:[[ void  ]]
- isSuspended[[ int  ]]
- setSuspended:[[ void  ]]
- name[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
- qualityOfService[[ ENUMERATION enum NSQualityOfService]]
- setQualityOfService:[[ void  ]]
- underlyingQueue[[ POINTER  (nullable) ]] -> [[ INTERFACE NSObject]]
- setUnderlyingQueue:[[ void  ]]
+ currentQueue[[ POINTER  (nullable) ]] -> [[ INTERFACE NSOperationQueue]]
+ mainQueue[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOperationQueue]]
- operations[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- operationCount[[ ulong  ]]
   Interface: 'NSMetadataItem'
       SUPER: NSObject
- initWithURL:[[ INSTANCETYPE ]]
- valueForAttribute:[[ ID ]]
- valuesForAttributes:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- attributes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSMorphology'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- grammaticalGender[[ ENUMERATION enum NSGrammaticalGender]]
- setGrammaticalGender:[[ void  ]]
- partOfSpeech[[ ENUMERATION enum NSGrammaticalPartOfSpeech]]
- setPartOfSpeech:[[ void  ]]
- number[[ ENUMERATION enum NSGrammaticalNumber]]
- setNumber:[[ void  ]]
- grammaticalCase[[ ENUMERATION enum NSGrammaticalCase]]
- setGrammaticalCase:[[ void  ]]
- determination[[ ENUMERATION enum NSGrammaticalDetermination]]
- setDetermination:[[ void  ]]
- grammaticalPerson[[ ENUMERATION enum NSGrammaticalPerson]]
- setGrammaticalPerson:[[ void  ]]
- pronounType[[ ENUMERATION enum NSGrammaticalPronounType]]
- setPronounType:[[ void  ]]
- definiteness[[ ENUMERATION enum NSGrammaticalDefiniteness]]
- setDefiniteness:[[ void  ]]
- customPronounForLanguage:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSMorphologyCustomPronoun]]
- setCustomPronoun:forLanguage:error:[[ int  ]]
- isUnspecified[[ int  ]]
+ userMorphology[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMorphology]]
   Interface: 'MTLFunctionConstant'
       SUPER: NSObject
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- type[[ ENUMERATION enum MTLDataType]]
- index[[ ulong  ]]
- required[[ int  ]]
   Interface: 'NSXPCConnection'
       SUPER: NSObject
       CONFORMING: NSXPCProxyCreating
- initWithServiceName:[[ INSTANCETYPE ]]
- initWithMachServiceName:options:[[ INSTANCETYPE ]]
- initWithListenerEndpoint:[[ INSTANCETYPE ]]
- remoteObjectProxyWithErrorHandler:[[ ID ]]
- synchronousRemoteObjectProxyWithErrorHandler:[[ ID ]]
- resume[[ void  ]]
- suspend[[ void  ]]
- activate[[ void  ]]
- invalidate[[ void  ]]
+ currentConnection[[ POINTER  (nullable) ]] -> [[ INTERFACE NSXPCConnection]]
- scheduleSendBarrierBlock:[[ void  ]]
- setCodeSigningRequirement:[[ void  ]]
- serviceName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- endpoint[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXPCListenerEndpoint]]
- exportedInterface[[ POINTER  (nullable) ]] -> [[ INTERFACE NSXPCInterface]]
- setExportedInterface:[[ void  ]]
- exportedObject[[ ID ]]
- setExportedObject:[[ void  ]]
- remoteObjectInterface[[ POINTER  (nullable) ]] -> [[ INTERFACE NSXPCInterface]]
- setRemoteObjectInterface:[[ void  ]]
- remoteObjectProxy[[ ID ]]
- interruptionHandler[[ BLOCK_POINTER ]]
- setInterruptionHandler:[[ void  ]]
- invalidationHandler[[ BLOCK_POINTER ]]
- setInvalidationHandler:[[ void  ]]
- auditSessionIdentifier[[ int  ]]
- processIdentifier[[ int  ]]
- effectiveUserIdentifier[[ uint  ]]
- effectiveGroupIdentifier[[ uint  ]]
   Interface: 'MTLIntersectionFunctionDescriptor'
       SUPER: MTLFunctionDescriptor
       CONFORMING: NSCopying
   Interface: 'MTLAttributeDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- format[[ ENUMERATION enum MTLAttributeFormat]]
- setFormat:[[ void  ]]
- offset[[ ulong  ]]
- setOffset:[[ void  ]]
- bufferIndex[[ ulong  ]]
- setBufferIndex:[[ void  ]]
   Interface: 'NSUnitEnergy'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ kilojoules[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitEnergy]]
+ joules[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitEnergy]]
+ kilocalories[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitEnergy]]
+ calories[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitEnergy]]
+ kilowattHours[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitEnergy]]
   Interface: 'NSNumberFormatter'
       SUPER: NSFormatter
- getObjectValue:forString:range:error:[[ int  ]]
- stringFromNumber:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- numberFromString:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
+ localizedStringFromNumber:numberStyle:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ defaultFormatterBehavior[[ ENUMERATION enum NSNumberFormatterBehavior]]
+ setDefaultFormatterBehavior:[[ void  ]]
- formattingContext[[ ENUMERATION enum NSFormattingContext]]
- setFormattingContext:[[ void  ]]
- numberStyle[[ ENUMERATION enum NSNumberFormatterStyle]]
- setNumberStyle:[[ void  ]]
- locale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
- setLocale:[[ void  ]]
- generatesDecimalNumbers[[ int  ]]
- setGeneratesDecimalNumbers:[[ void  ]]
- formatterBehavior[[ ENUMERATION enum NSNumberFormatterBehavior]]
- setFormatterBehavior:[[ void  ]]
- negativeFormat[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setNegativeFormat:[[ void  ]]
- textAttributesForNegativeValues[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setTextAttributesForNegativeValues:[[ void  ]]
- positiveFormat[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPositiveFormat:[[ void  ]]
- textAttributesForPositiveValues[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setTextAttributesForPositiveValues:[[ void  ]]
- allowsFloats[[ int  ]]
- setAllowsFloats:[[ void  ]]
- decimalSeparator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setDecimalSeparator:[[ void  ]]
- alwaysShowsDecimalSeparator[[ int  ]]
- setAlwaysShowsDecimalSeparator:[[ void  ]]
- currencyDecimalSeparator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setCurrencyDecimalSeparator:[[ void  ]]
- usesGroupingSeparator[[ int  ]]
- setUsesGroupingSeparator:[[ void  ]]
- groupingSeparator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setGroupingSeparator:[[ void  ]]
- zeroSymbol[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setZeroSymbol:[[ void  ]]
- textAttributesForZero[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setTextAttributesForZero:[[ void  ]]
- nilSymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setNilSymbol:[[ void  ]]
- textAttributesForNil[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setTextAttributesForNil:[[ void  ]]
- notANumberSymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setNotANumberSymbol:[[ void  ]]
- textAttributesForNotANumber[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setTextAttributesForNotANumber:[[ void  ]]
- positiveInfinitySymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPositiveInfinitySymbol:[[ void  ]]
- textAttributesForPositiveInfinity[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setTextAttributesForPositiveInfinity:[[ void  ]]
- negativeInfinitySymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setNegativeInfinitySymbol:[[ void  ]]
- textAttributesForNegativeInfinity[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setTextAttributesForNegativeInfinity:[[ void  ]]
- positivePrefix[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPositivePrefix:[[ void  ]]
- positiveSuffix[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPositiveSuffix:[[ void  ]]
- negativePrefix[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setNegativePrefix:[[ void  ]]
- negativeSuffix[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setNegativeSuffix:[[ void  ]]
- currencyCode[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setCurrencyCode:[[ void  ]]
- currencySymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setCurrencySymbol:[[ void  ]]
- internationalCurrencySymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setInternationalCurrencySymbol:[[ void  ]]
- percentSymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPercentSymbol:[[ void  ]]
- perMillSymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPerMillSymbol:[[ void  ]]
- minusSign[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setMinusSign:[[ void  ]]
- plusSign[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPlusSign:[[ void  ]]
- exponentSymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setExponentSymbol:[[ void  ]]
- groupingSize[[ ulong  ]]
- setGroupingSize:[[ void  ]]
- secondaryGroupingSize[[ ulong  ]]
- setSecondaryGroupingSize:[[ void  ]]
- multiplier[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- setMultiplier:[[ void  ]]
- formatWidth[[ ulong  ]]
- setFormatWidth:[[ void  ]]
- paddingCharacter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setPaddingCharacter:[[ void  ]]
- paddingPosition[[ ENUMERATION enum NSNumberFormatterPadPosition]]
- setPaddingPosition:[[ void  ]]
- roundingMode[[ ENUMERATION enum NSNumberFormatterRoundingMode]]
- setRoundingMode:[[ void  ]]
- roundingIncrement[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumber]]
- setRoundingIncrement:[[ void  ]]
- minimumIntegerDigits[[ ulong  ]]
- setMinimumIntegerDigits:[[ void  ]]
- maximumIntegerDigits[[ ulong  ]]
- setMaximumIntegerDigits:[[ void  ]]
- minimumFractionDigits[[ ulong  ]]
- setMinimumFractionDigits:[[ void  ]]
- maximumFractionDigits[[ ulong  ]]
- setMaximumFractionDigits:[[ void  ]]
- minimum[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- setMinimum:[[ void  ]]
- maximum[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- setMaximum:[[ void  ]]
- currencyGroupingSeparator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setCurrencyGroupingSeparator:[[ void  ]]
- isLenient[[ int  ]]
- setLenient:[[ void  ]]
- usesSignificantDigits[[ int  ]]
- setUsesSignificantDigits:[[ void  ]]
- minimumSignificantDigits[[ ulong  ]]
- setMinimumSignificantDigits:[[ void  ]]
- maximumSignificantDigits[[ ulong  ]]
- setMaximumSignificantDigits:[[ void  ]]
- isPartialStringValidationEnabled[[ int  ]]
- setPartialStringValidationEnabled:[[ void  ]]
   Interface: 'MTLRenderPassSampleBufferAttachmentDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPassSampleBufferAttachmentDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'MTLRasterizationRateLayerArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLRasterizationRateLayerDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'MTLCommandBufferDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- retainedReferences[[ int  ]]
- setRetainedReferences:[[ void  ]]
- errorOptions[[ ENUMERATION enum MTLCommandBufferErrorOption]]
- setErrorOptions:[[ void  ]]
   Interface: 'MTLRenderPassDepthAttachmentDescriptor'
       SUPER: MTLRenderPassAttachmentDescriptor
- clearDepth[[ double  ]]
- setClearDepth:[[ void  ]]
- depthResolveFilter[[ ENUMERATION enum MTLMultisampleDepthResolveFilter]]
- setDepthResolveFilter:[[ void  ]]
   Interface: 'NSLinguisticTagger'
       SUPER: NSObject
- initWithTagSchemes:options:[[ INSTANCETYPE ]]
+ availableTagSchemesForUnit:language:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ availableTagSchemesForLanguage:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setOrthography:range:[[ void  ]]
- orthographyAtIndex:effectiveRange:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSOrthography]]
- stringEditedInRange:changeInLength:[[ void  ]]
- tokenRangeAtIndex:unit:[[ RECORD _NSRange]]
- sentenceRangeForRange:[[ RECORD _NSRange]]
- enumerateTagsInRange:unit:scheme:options:usingBlock:[[ void  ]]
- tagAtIndex:unit:scheme:tokenRange:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- tagsInRange:unit:scheme:options:tokenRanges:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- enumerateTagsInRange:scheme:options:usingBlock:[[ void  ]]
- tagAtIndex:scheme:tokenRange:sentenceRange:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- tagsInRange:scheme:options:tokenRanges:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ dominantLanguageForString:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
+ tagForString:atIndex:unit:scheme:orthography:tokenRange:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
+ tagsForString:range:unit:scheme:options:orthography:tokenRanges:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:[[ void  ]]
- possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- tagSchemes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- string[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setString:[[ void  ]]
- dominantLanguage[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSError'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- initWithDomain:code:userInfo:[[ INSTANCETYPE ]]
+ errorWithDomain:code:userInfo:[[ INSTANCETYPE ]]
+ setUserInfoValueProviderForDomain:provider:[[ void  ]]
+ userInfoValueProviderForDomain:[[ BLOCK_POINTER ]]
- domain[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- code[[ long  ]]
- userInfo[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- localizedDescription[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- localizedFailureReason[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedRecoverySuggestion[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localizedRecoveryOptions[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- recoveryAttempter[[ ID ]]
- helpAnchor[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- underlyingErrors[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSMutableOrderedSet'
       SUPER: NSOrderedSet
- insertObject:atIndex:[[ void  ]]
- removeObjectAtIndex:[[ void  ]]
- replaceObjectAtIndex:withObject:[[ void  ]]
- initWithCoder:[[ INSTANCETYPE ]]
- init[[ INSTANCETYPE ]]
- initWithCapacity:[[ INSTANCETYPE ]]
- addObject:[[ void  ]]
- addObjects:count:[[ void  ]]
- addObjectsFromArray:[[ void  ]]
- exchangeObjectAtIndex:withObjectAtIndex:[[ void  ]]
- moveObjectsAtIndexes:toIndex:[[ void  ]]
- insertObjects:atIndexes:[[ void  ]]
- setObject:atIndex:[[ void  ]]
- setObject:atIndexedSubscript:[[ void  ]]
- replaceObjectsInRange:withObjects:count:[[ void  ]]
- replaceObjectsAtIndexes:withObjects:[[ void  ]]
- removeObjectsInRange:[[ void  ]]
- removeObjectsAtIndexes:[[ void  ]]
- removeAllObjects[[ void  ]]
- removeObject:[[ void  ]]
- removeObjectsInArray:[[ void  ]]
- intersectOrderedSet:[[ void  ]]
- minusOrderedSet:[[ void  ]]
- unionOrderedSet:[[ void  ]]
- intersectSet:[[ void  ]]
- minusSet:[[ void  ]]
- unionSet:[[ void  ]]
- sortUsingComparator:[[ void  ]]
- sortWithOptions:usingComparator:[[ void  ]]
- sortRange:options:usingComparator:[[ void  ]]
+ orderedSetWithCapacity:[[ INSTANCETYPE ]]
- applyDifference:[[ void  ]]
- sortUsingDescriptors:[[ void  ]]
- filterUsingPredicate:[[ void  ]]
   Interface: 'NSFileAccessIntent'
       SUPER: NSObject
+ readingIntentWithURL:options:[[ INSTANCETYPE ]]
+ writingIntentWithURL:options:[[ INSTANCETYPE ]]
- URL[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURL]]
   Interface: 'NSInflectionRule'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- init[[ ID ]]
+ automaticRule[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSInflectionRule]]
+ canInflectLanguage:[[ int  ]]
+ canInflectPreferredLocalization[[ int  ]]
   Interface: 'NSConditionLock'
       SUPER: NSObject
       CONFORMING: NSLocking
- initWithCondition:[[ INSTANCETYPE ]]
- lockWhenCondition:[[ void  ]]
- tryLock[[ int  ]]
- tryLockWhenCondition:[[ int  ]]
- unlockWithCondition:[[ void  ]]
- lockBeforeDate:[[ int  ]]
- lockWhenCondition:beforeDate:[[ int  ]]
- condition[[ long  ]]
- name[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
   Interface: 'NSPointerFunctions'
       SUPER: NSObject
       CONFORMING: NSCopying
- initWithOptions:[[ INSTANCETYPE ]]
+ pointerFunctionsWithOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPointerFunctions]]
- hashFunction[[ POINTER  (nullable) ]] -> [[ FUNCTION_POINTER ]]
- setHashFunction:[[ void  ]]
- isEqualFunction[[ POINTER  (nullable) ]] -> [[ FUNCTION_POINTER ]]
- setIsEqualFunction:[[ void  ]]
- sizeFunction[[ POINTER  (nullable) ]] -> [[ FUNCTION_POINTER ]]
- setSizeFunction:[[ void  ]]
- descriptionFunction[[ POINTER  (nullable) ]] -> [[ FUNCTION_POINTER ]]
- setDescriptionFunction:[[ void  ]]
- relinquishFunction[[ POINTER  (nullable) ]] -> [[ FUNCTION_POINTER ]]
- setRelinquishFunction:[[ void  ]]
- acquireFunction[[ POINTER  (nullable) ]] -> [[ FUNCTION_POINTER ]]
- setAcquireFunction:[[ void  ]]
- usesStrongWriteBarrier[[ int  ]]
- setUsesStrongWriteBarrier:[[ void  ]]
- usesWeakReadAndWriteBarriers[[ int  ]]
- setUsesWeakReadAndWriteBarriers:[[ void  ]]
   Interface: 'MTLRenderPassColorAttachmentDescriptor'
       SUPER: MTLRenderPassAttachmentDescriptor
- clearColor[[ RECORD MTLClearColor]]
- setClearColor:[[ void  ]]
   Interface: 'MTLVertexDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ vertexDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLVertexDescriptor]]
- reset[[ void  ]]
- layouts[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLVertexBufferLayoutDescriptorArray]]
- attributes[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLVertexAttributeDescriptorArray]]
   Interface: 'MTLAccelerationStructureCurveGeometryDescriptor'
       SUPER: MTLAccelerationStructureGeometryDescriptor
+ descriptor[[ INSTANCETYPE ]]
- controlPointBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setControlPointBuffer:[[ void  ]]
- controlPointBufferOffset[[ ulong  ]]
- setControlPointBufferOffset:[[ void  ]]
- controlPointCount[[ ulong  ]]
- setControlPointCount:[[ void  ]]
- controlPointStride[[ ulong  ]]
- setControlPointStride:[[ void  ]]
- controlPointFormat[[ ENUMERATION enum MTLAttributeFormat]]
- setControlPointFormat:[[ void  ]]
- radiusBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setRadiusBuffer:[[ void  ]]
- radiusBufferOffset[[ ulong  ]]
- setRadiusBufferOffset:[[ void  ]]
- radiusFormat[[ ENUMERATION enum MTLAttributeFormat]]
- setRadiusFormat:[[ void  ]]
- radiusStride[[ ulong  ]]
- setRadiusStride:[[ void  ]]
- indexBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setIndexBuffer:[[ void  ]]
- indexBufferOffset[[ ulong  ]]
- setIndexBufferOffset:[[ void  ]]
- indexType[[ ENUMERATION enum MTLIndexType]]
- setIndexType:[[ void  ]]
- segmentCount[[ ulong  ]]
- setSegmentCount:[[ void  ]]
- segmentControlPointCount[[ ulong  ]]
- setSegmentControlPointCount:[[ void  ]]
- curveType[[ ENUMERATION enum MTLCurveType]]
- setCurveType:[[ void  ]]
- curveBasis[[ ENUMERATION enum MTLCurveBasis]]
- setCurveBasis:[[ void  ]]
- curveEndCaps[[ ENUMERATION enum MTLCurveEndCaps]]
- setCurveEndCaps:[[ void  ]]
   Interface: 'MTLCaptureManager'
       SUPER: NSObject
+ sharedCaptureManager[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLCaptureManager]]
- init[[ INSTANCETYPE ]]
- newCaptureScopeWithDevice:[[ POINTER  (nonnull) ]] -> [[ ID<MTLCaptureScope>]]
- newCaptureScopeWithCommandQueue:[[ POINTER  (nonnull) ]] -> [[ ID<MTLCaptureScope>]]
- supportsDestination:[[ int  ]]
- startCaptureWithDescriptor:error:[[ int  ]]
- startCaptureWithDevice:[[ void  ]]
- startCaptureWithCommandQueue:[[ void  ]]
- startCaptureWithScope:[[ void  ]]
- stopCapture[[ void  ]]
- defaultCaptureScope[[ POINTER  (nullable) ]] -> [[ ID<MTLCaptureScope>]]
- setDefaultCaptureScope:[[ void  ]]
- isCapturing[[ int  ]]
   Interface: 'NSOperation'
       SUPER: NSObject
- start[[ void  ]]
- main[[ void  ]]
- cancel[[ void  ]]
- addDependency:[[ void  ]]
- removeDependency:[[ void  ]]
- waitUntilFinished[[ void  ]]
- isCancelled[[ int  ]]
- isExecuting[[ int  ]]
- isFinished[[ int  ]]
- isConcurrent[[ int  ]]
- isAsynchronous[[ int  ]]
- isReady[[ int  ]]
- dependencies[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- queuePriority[[ ENUMERATION enum NSOperationQueuePriority]]
- setQueuePriority:[[ void  ]]
- completionBlock[[ BLOCK_POINTER ]]
- setCompletionBlock:[[ void  ]]
- threadPriority[[ double  ]]
- setThreadPriority:[[ void  ]]
- qualityOfService[[ ENUMERATION enum NSQualityOfService]]
- setQualityOfService:[[ void  ]]
- name[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
   Interface: 'MTLBufferLayoutDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLBufferLayoutDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'NSURLCache'
       SUPER: NSObject
- initWithMemoryCapacity:diskCapacity:diskPath:[[ INSTANCETYPE ]]
- initWithMemoryCapacity:diskCapacity:directoryURL:[[ INSTANCETYPE ]]
- cachedResponseForRequest:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSCachedURLResponse]]
- storeCachedResponse:forRequest:[[ void  ]]
- removeCachedResponseForRequest:[[ void  ]]
- removeAllCachedResponses[[ void  ]]
- removeCachedResponsesSinceDate:[[ void  ]]
+ sharedURLCache[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLCache]]
+ setSharedURLCache:[[ void  ]]
- memoryCapacity[[ ulong  ]]
- setMemoryCapacity:[[ void  ]]
- diskCapacity[[ ulong  ]]
- setDiskCapacity:[[ void  ]]
- currentMemoryUsage[[ ulong  ]]
- currentDiskUsage[[ ulong  ]]
- storeCachedResponse:forDataTask:[[ void  ]]
- getCachedResponseForDataTask:completionHandler:[[ void  ]]
- removeCachedResponseForDataTask:[[ void  ]]
   Interface: 'NSBundleResourceRequest'
       SUPER: NSObject
       CONFORMING: NSProgressReporting
- init[[ INSTANCETYPE ]]
- initWithTags:[[ INSTANCETYPE ]]
- initWithTags:bundle:[[ INSTANCETYPE ]]
- beginAccessingResourcesWithCompletionHandler:[[ void  ]]
- conditionallyBeginAccessingResourcesWithCompletionHandler:[[ void  ]]
- endAccessingResources[[ void  ]]
- loadingPriority[[ double  ]]
- setLoadingPriority:[[ void  ]]
- tags[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- bundle[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSBundle]]
- progress[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
   Interface: 'NSDateIntervalFormatter'
       SUPER: NSFormatter
- stringFromDate:toDate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringFromDateInterval:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- locale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
- setLocale:[[ void  ]]
- calendar[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCalendar]]
- setCalendar:[[ void  ]]
- timeZone[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimeZone]]
- setTimeZone:[[ void  ]]
- dateTemplate[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setDateTemplate:[[ void  ]]
- dateStyle[[ ENUMERATION enum NSDateIntervalFormatterStyle]]
- setDateStyle:[[ void  ]]
- timeStyle[[ ENUMERATION enum NSDateIntervalFormatterStyle]]
- setTimeStyle:[[ void  ]]
   Interface: 'NSUnitConverter'
       SUPER: NSObject
- baseUnitValueFromValue:[[ double  ]]
- valueFromBaseUnitValue:[[ double  ]]
   Interface: 'NSMutableIndexSet'
       SUPER: NSIndexSet
- addIndexes:[[ void  ]]
- removeIndexes:[[ void  ]]
- removeAllIndexes[[ void  ]]
- addIndex:[[ void  ]]
- removeIndex:[[ void  ]]
- addIndexesInRange:[[ void  ]]
- removeIndexesInRange:[[ void  ]]
- shiftIndexesStartingAtIndex:by:[[ void  ]]
   Interface: 'NSKeyedArchiver'
       SUPER: NSCoder
- initRequiringSecureCoding:[[ INSTANCETYPE ]]
+ archivedDataWithRootObject:requiringSecureCoding:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- init[[ INSTANCETYPE ]]
- initForWritingWithMutableData:[[ INSTANCETYPE ]]
+ archivedDataWithRootObject:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
+ archiveRootObject:toFile:[[ int  ]]
- finishEncoding[[ void  ]]
+ setClassName:forClass:[[ void  ]]
+ classNameForClass:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- encodeObject:forKey:[[ void  ]]
- encodeConditionalObject:forKey:[[ void  ]]
- encodeBool:forKey:[[ void  ]]
- encodeInt:forKey:[[ void  ]]
- encodeInt32:forKey:[[ void  ]]
- encodeInt64:forKey:[[ void  ]]
- encodeFloat:forKey:[[ void  ]]
- encodeDouble:forKey:[[ void  ]]
- encodeBytes:length:forKey:[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSKeyedArchiverDelegate>]]
- setDelegate:[[ void  ]]
- outputFormat[[ ENUMERATION enum NSPropertyListFormat]]
- setOutputFormat:[[ void  ]]
- encodedData[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
- requiresSecureCoding[[ int  ]]
- setRequiresSecureCoding:[[ void  ]]
   Interface: 'MTLType'
       SUPER: NSObject
- dataType[[ ENUMERATION enum MTLDataType]]
   Interface: 'NSDimension'
       SUPER: NSUnit
       CONFORMING: NSSecureCoding
- initWithSymbol:converter:[[ INSTANCETYPE ]]
+ baseUnit[[ INSTANCETYPE ]]
- converter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitConverter]]
   Interface: 'NSKeyedUnarchiver'
       SUPER: NSCoder
- initForReadingFromData:error:[[ INSTANCETYPE ]]
+ unarchivedObjectOfClass:fromData:error:[[ ID ]]
+ unarchivedArrayOfObjectsOfClass:fromData:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
+ unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
+ unarchivedObjectOfClasses:fromData:error:[[ ID ]]
+ unarchivedArrayOfObjectsOfClasses:fromData:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
+ unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- init[[ INSTANCETYPE ]]
- initForReadingWithData:[[ INSTANCETYPE ]]
+ unarchiveObjectWithData:[[ ID ]]
+ unarchiveTopLevelObjectWithData:error:[[ ID ]]
+ unarchiveObjectWithFile:[[ ID ]]
- finishDecoding[[ void  ]]
+ setClass:forClassName:[[ void  ]]
+ classForClassName:[[ CLASS Class]]
- containsValueForKey:[[ int  ]]
- decodeObjectForKey:[[ ID ]]
- decodeBoolForKey:[[ int  ]]
- decodeIntForKey:[[ int  ]]
- decodeInt32ForKey:[[ int  ]]
- decodeInt64ForKey:[[ longlong  ]]
- decodeFloatForKey:[[ float  ]]
- decodeDoubleForKey:[[ double  ]]
- decodeBytesForKey:returnedLength:[[ POINTER  (nullable) ]] -> [[ uchar  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSKeyedUnarchiverDelegate>]]
- setDelegate:[[ void  ]]
- requiresSecureCoding[[ int  ]]
- setRequiresSecureCoding:[[ void  ]]
- decodingFailurePolicy[[ ENUMERATION enum NSDecodingFailurePolicy]]
- setDecodingFailurePolicy:[[ void  ]]
   Interface: 'MTLTileRenderPipelineColorAttachmentDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- pixelFormat[[ ENUMERATION enum MTLPixelFormat]]
- setPixelFormat:[[ void  ]]
   Interface: 'MTLFunctionStitchingGraph'
       SUPER: NSObject
       CONFORMING: NSCopying
- initWithFunctionName:nodes:outputNode:attributes:[[ INSTANCETYPE ]]
- functionName[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setFunctionName:[[ void  ]]
- nodes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setNodes:[[ void  ]]
- outputNode[[ POINTER  (nullable) ]] -> [[ INTERFACE MTLFunctionStitchingFunctionNode]]
- setOutputNode:[[ void  ]]
- attributes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setAttributes:[[ void  ]]
   Interface: 'NSArray'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
       CONFORMING: NSFastEnumeration
- objectAtIndex:[[ ID ]]
- init[[ INSTANCETYPE ]]
- initWithObjects:count:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- count[[ ulong  ]]
- arrayByAddingObject:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- arrayByAddingObjectsFromArray:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- componentsJoinedByString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- containsObject:[[ int  ]]
- descriptionWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- descriptionWithLocale:indent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- firstObjectCommonWithArray:[[ ID ]]
- getObjects:range:[[ void  ]]
- indexOfObject:[[ ulong  ]]
- indexOfObject:inRange:[[ ulong  ]]
- indexOfObjectIdenticalTo:[[ ulong  ]]
- indexOfObjectIdenticalTo:inRange:[[ ulong  ]]
- isEqualToArray:[[ int  ]]
- objectEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- reverseObjectEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- sortedArrayUsingFunction:context:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- sortedArrayUsingFunction:context:hint:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- sortedArrayUsingSelector:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- subarrayWithRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- writeToURL:error:[[ int  ]]
- makeObjectsPerformSelector:[[ void  ]]
- makeObjectsPerformSelector:withObject:[[ void  ]]
- objectsAtIndexes:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- objectAtIndexedSubscript:[[ ID ]]
- enumerateObjectsUsingBlock:[[ void  ]]
- enumerateObjectsWithOptions:usingBlock:[[ void  ]]
- enumerateObjectsAtIndexes:options:usingBlock:[[ void  ]]
- indexOfObjectPassingTest:[[ ulong  ]]
- indexOfObjectWithOptions:passingTest:[[ ulong  ]]
- indexOfObjectAtIndexes:options:passingTest:[[ ulong  ]]
- indexesOfObjectsPassingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexSet]]
- indexesOfObjectsWithOptions:passingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexSet]]
- indexesOfObjectsAtIndexes:options:passingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexSet]]
- sortedArrayUsingComparator:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- sortedArrayWithOptions:usingComparator:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- indexOfObject:inSortedRange:options:usingComparator:[[ ulong  ]]
- description[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- firstObject[[ ID ]]
- lastObject[[ ID ]]
- sortedArrayHint[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSData]]
+ array[[ INSTANCETYPE ]]
+ arrayWithObject:[[ INSTANCETYPE ]]
+ arrayWithObjects:count:[[ INSTANCETYPE ]]
+ arrayWithObjects:[[ INSTANCETYPE ]]
+ arrayWithArray:[[ INSTANCETYPE ]]
- initWithObjects:[[ INSTANCETYPE ]]
- initWithArray:[[ INSTANCETYPE ]]
- initWithArray:copyItems:[[ INSTANCETYPE ]]
- initWithContentsOfURL:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
+ arrayWithContentsOfURL:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- differenceFromArray:withOptions:usingEquivalenceTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedCollectionDifference]]
- differenceFromArray:withOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedCollectionDifference]]
- differenceFromArray:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedCollectionDifference]]
- arrayByApplyingDifference:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- getObjects:[[ void  ]]
+ arrayWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
+ arrayWithContentsOfURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- initWithContentsOfFile:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- initWithContentsOfURL:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- writeToFile:atomically:[[ int  ]]
- writeToURL:atomically:[[ int  ]]
- pathsMatchingExtensions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- valueForKey:[[ ID ]]
- setValue:forKey:[[ void  ]]
- addObserver:toObjectsAtIndexes:forKeyPath:options:context:[[ void  ]]
- removeObserver:fromObjectsAtIndexes:forKeyPath:context:[[ void  ]]
- removeObserver:fromObjectsAtIndexes:forKeyPath:[[ void  ]]
- addObserver:forKeyPath:options:context:[[ void  ]]
- removeObserver:forKeyPath:context:[[ void  ]]
- removeObserver:forKeyPath:[[ void  ]]
- sortedArrayUsingDescriptors:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- filteredArrayUsingPredicate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSOrderedSet'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSMutableCopying
       CONFORMING: NSSecureCoding
       CONFORMING: NSFastEnumeration
- objectAtIndex:[[ ID ]]
- indexOfObject:[[ ulong  ]]
- init[[ INSTANCETYPE ]]
- initWithObjects:count:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- count[[ ulong  ]]
- getObjects:range:[[ void  ]]
- objectsAtIndexes:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- isEqualToOrderedSet:[[ int  ]]
- containsObject:[[ int  ]]
- intersectsOrderedSet:[[ int  ]]
- intersectsSet:[[ int  ]]
- isSubsetOfOrderedSet:[[ int  ]]
- isSubsetOfSet:[[ int  ]]
- objectAtIndexedSubscript:[[ ID ]]
- objectEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- reverseObjectEnumerator[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSEnumerator]]
- enumerateObjectsUsingBlock:[[ void  ]]
- enumerateObjectsWithOptions:usingBlock:[[ void  ]]
- enumerateObjectsAtIndexes:options:usingBlock:[[ void  ]]
- indexOfObjectPassingTest:[[ ulong  ]]
- indexOfObjectWithOptions:passingTest:[[ ulong  ]]
- indexOfObjectAtIndexes:options:passingTest:[[ ulong  ]]
- indexesOfObjectsPassingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexSet]]
- indexesOfObjectsWithOptions:passingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexSet]]
- indexesOfObjectsAtIndexes:options:passingTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSIndexSet]]
- indexOfObject:inSortedRange:options:usingComparator:[[ ulong  ]]
- sortedArrayUsingComparator:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- sortedArrayWithOptions:usingComparator:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- descriptionWithLocale:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- descriptionWithLocale:indent:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- firstObject[[ ID ]]
- lastObject[[ ID ]]
- reversedOrderedSet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedSet]]
- array[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- set[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSSet]]
- description[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
+ orderedSet[[ INSTANCETYPE ]]
+ orderedSetWithObject:[[ INSTANCETYPE ]]
+ orderedSetWithObjects:count:[[ INSTANCETYPE ]]
+ orderedSetWithObjects:[[ INSTANCETYPE ]]
+ orderedSetWithOrderedSet:[[ INSTANCETYPE ]]
+ orderedSetWithOrderedSet:range:copyItems:[[ INSTANCETYPE ]]
+ orderedSetWithArray:[[ INSTANCETYPE ]]
+ orderedSetWithArray:range:copyItems:[[ INSTANCETYPE ]]
+ orderedSetWithSet:[[ INSTANCETYPE ]]
+ orderedSetWithSet:copyItems:[[ INSTANCETYPE ]]
- initWithObject:[[ INSTANCETYPE ]]
- initWithObjects:[[ INSTANCETYPE ]]
- initWithOrderedSet:[[ INSTANCETYPE ]]
- initWithOrderedSet:copyItems:[[ INSTANCETYPE ]]
- initWithOrderedSet:range:copyItems:[[ INSTANCETYPE ]]
- initWithArray:[[ INSTANCETYPE ]]
- initWithArray:copyItems:[[ INSTANCETYPE ]]
- initWithArray:range:copyItems:[[ INSTANCETYPE ]]
- initWithSet:[[ INSTANCETYPE ]]
- initWithSet:copyItems:[[ INSTANCETYPE ]]
- differenceFromOrderedSet:withOptions:usingEquivalenceTest:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedCollectionDifference]]
- differenceFromOrderedSet:withOptions:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedCollectionDifference]]
- differenceFromOrderedSet:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedCollectionDifference]]
- orderedSetByApplyingDifference:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSOrderedSet]]
- valueForKey:[[ ID ]]
- setValue:forKey:[[ void  ]]
- addObserver:forKeyPath:options:context:[[ void  ]]
- removeObserver:forKeyPath:context:[[ void  ]]
- removeObserver:forKeyPath:[[ void  ]]
- sortedArrayUsingDescriptors:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- filteredOrderedSetUsingPredicate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedSet]]
   Interface: 'MTLFunctionStitchingFunctionNode'
       SUPER: NSObject
       CONFORMING: MTLFunctionStitchingNode
- initWithName:arguments:controlDependencies:[[ INSTANCETYPE ]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
- arguments[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setArguments:[[ void  ]]
- controlDependencies[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- setControlDependencies:[[ void  ]]
   Interface: 'NSFileWrapper'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
- initWithURL:options:error:[[ INSTANCETYPE ]]
- initDirectoryWithFileWrappers:[[ INSTANCETYPE ]]
- initRegularFileWithContents:[[ INSTANCETYPE ]]
- initSymbolicLinkWithDestinationURL:[[ INSTANCETYPE ]]
- initWithSerializedRepresentation:[[ INSTANCETYPE ]]
- initWithCoder:[[ INSTANCETYPE ]]
- matchesContentsOfURL:[[ int  ]]
- readFromURL:options:error:[[ int  ]]
- writeToURL:options:originalContentsURL:error:[[ int  ]]
- addFileWrapper:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- addRegularFileWithContents:preferredFilename:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- removeFileWrapper:[[ void  ]]
- keyForFileWrapper:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- isDirectory[[ int  ]]
- isRegularFile[[ int  ]]
- isSymbolicLink[[ int  ]]
- preferredFilename[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setPreferredFilename:[[ void  ]]
- filename[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setFilename:[[ void  ]]
- fileAttributes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
- setFileAttributes:[[ void  ]]
- serializedRepresentation[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- fileWrappers[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- regularFileContents[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- symbolicLinkDestinationURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
   Interface: 'NSURLSessionTask'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSProgressReporting
- cancel[[ void  ]]
- suspend[[ void  ]]
- resume[[ void  ]]
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
- taskIdentifier[[ ulong  ]]
- originalRequest[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLRequest]]
- currentRequest[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLRequest]]
- response[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLResponse]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSURLSessionTaskDelegate>]]
- setDelegate:[[ void  ]]
- progress[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSProgress]]
- earliestBeginDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- setEarliestBeginDate:[[ void  ]]
- countOfBytesClientExpectsToSend[[ longlong  ]]
- setCountOfBytesClientExpectsToSend:[[ void  ]]
- countOfBytesClientExpectsToReceive[[ longlong  ]]
- setCountOfBytesClientExpectsToReceive:[[ void  ]]
- countOfBytesSent[[ longlong  ]]
- countOfBytesReceived[[ longlong  ]]
- countOfBytesExpectedToSend[[ longlong  ]]
- countOfBytesExpectedToReceive[[ longlong  ]]
- taskDescription[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- setTaskDescription:[[ void  ]]
- state[[ ENUMERATION enum NSURLSessionTaskState]]
- error[[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]]
- priority[[ float  ]]
- setPriority:[[ void  ]]
- prefersIncrementalDelivery[[ int  ]]
- setPrefersIncrementalDelivery:[[ void  ]]
   Interface: 'NSPort'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSCoding
+ port[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSPort]]
- invalidate[[ void  ]]
- setDelegate:[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSPortDelegate>]]
- scheduleInRunLoop:forMode:[[ void  ]]
- removeFromRunLoop:forMode:[[ void  ]]
- sendBeforeDate:components:from:reserved:[[ int  ]]
- sendBeforeDate:msgid:components:from:reserved:[[ int  ]]
- isValid[[ int  ]]
- reservedSpaceLength[[ ulong  ]]
   Interface: 'NSURLSessionUploadTask'
       SUPER: NSURLSessionDataTask
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
- cancelByProducingResumeData:[[ void  ]]
   Interface: 'NSHTTPCookie'
       SUPER: NSObject
- initWithProperties:[[ INSTANCETYPE ]]
+ cookieWithProperties:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSHTTPCookie]]
+ requestHeaderFieldsWithCookies:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
+ cookiesWithResponseHeaderFields:forURL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- properties[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- version[[ ulong  ]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- value[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- expiresDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- isSessionOnly[[ int  ]]
- domain[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- path[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- isSecure[[ int  ]]
- isHTTPOnly[[ int  ]]
- comment[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- commentURL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- portList[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- sameSitePolicy[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSOrderedCollectionChange'
       SUPER: NSObject
+ changeWithObject:type:index:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedCollectionChange]]
+ changeWithObject:type:index:associatedIndex:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSOrderedCollectionChange]]
- init[[ ID ]]
- initWithObject:type:index:[[ INSTANCETYPE ]]
- initWithObject:type:index:associatedIndex:[[ INSTANCETYPE ]]
- object[[ ID ]]
- changeType[[ ENUMERATION enum NSCollectionChangeType]]
- index[[ ulong  ]]
- associatedIndex[[ ulong  ]]
   Interface: 'NSCalendar'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
+ calendarWithIdentifier:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSCalendar]]
- init[[ INSTANCETYPE ]]
- initWithCalendarIdentifier:[[ ID ]]
- minimumRangeOfUnit:[[ RECORD _NSRange]]
- maximumRangeOfUnit:[[ RECORD _NSRange]]
- rangeOfUnit:inUnit:forDate:[[ RECORD _NSRange]]
- ordinalityOfUnit:inUnit:forDate:[[ ulong  ]]
- rangeOfUnit:startDate:interval:forDate:[[ int  ]]
- dateFromComponents:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- components:fromDate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDateComponents]]
- dateByAddingComponents:toDate:options:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- components:fromDate:toDate:options:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDateComponents]]
- getEra:year:month:day:fromDate:[[ void  ]]
- getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:[[ void  ]]
- getHour:minute:second:nanosecond:fromDate:[[ void  ]]
- component:fromDate:[[ long  ]]
- dateWithEra:year:month:day:hour:minute:second:nanosecond:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- startOfDayForDate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDate]]
- componentsInTimeZone:fromDate:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDateComponents]]
- compareDate:toDate:toUnitGranularity:[[ ENUMERATION enum NSComparisonResult]]
- isDate:equalToDate:toUnitGranularity:[[ int  ]]
- isDate:inSameDayAsDate:[[ int  ]]
- isDateInToday:[[ int  ]]
- isDateInYesterday:[[ int  ]]
- isDateInTomorrow:[[ int  ]]
- isDateInWeekend:[[ int  ]]
- rangeOfWeekendStartDate:interval:containingDate:[[ int  ]]
- nextWeekendStartDate:interval:options:afterDate:[[ int  ]]
- components:fromDateComponents:toDateComponents:options:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDateComponents]]
- dateByAddingUnit:value:toDate:options:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:[[ void  ]]
- nextDateAfterDate:matchingComponents:options:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- nextDateAfterDate:matchingUnit:value:options:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- nextDateAfterDate:matchingHour:minute:second:options:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- dateBySettingUnit:value:ofDate:options:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- dateBySettingHour:minute:second:ofDate:options:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- date:matchesComponents:[[ int  ]]
+ currentCalendar[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCalendar]]
+ autoupdatingCurrentCalendar[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSCalendar]]
- calendarIdentifier[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- locale[[ POINTER  (nullable) ]] -> [[ INTERFACE NSLocale]]
- setLocale:[[ void  ]]
- timeZone[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTimeZone]]
- setTimeZone:[[ void  ]]
- firstWeekday[[ ulong  ]]
- setFirstWeekday:[[ void  ]]
- minimumDaysInFirstWeek[[ ulong  ]]
- setMinimumDaysInFirstWeek:[[ void  ]]
- eraSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- longEraSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- monthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- shortMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- veryShortMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- standaloneMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- shortStandaloneMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- veryShortStandaloneMonthSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- weekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- shortWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- veryShortWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- standaloneWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- shortStandaloneWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- veryShortStandaloneWeekdaySymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- quarterSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- shortQuarterSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- standaloneQuarterSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- shortStandaloneQuarterSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- AMSymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- PMSymbol[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSURLSessionTaskMetrics'
       SUPER: NSObject
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
- transactionMetrics[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- taskInterval[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDateInterval]]
- redirectCount[[ ulong  ]]
   Interface: 'NSHTTPURLResponse'
       SUPER: NSURLResponse
- initWithURL:statusCode:HTTPVersion:headerFields:[[ INSTANCETYPE ]]
- valueForHTTPHeaderField:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
+ localizedStringForStatusCode:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- statusCode[[ long  ]]
- allHeaderFields[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSDictionary]]
   Interface: 'NSUnitAcceleration'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ metersPerSecondSquared[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitAcceleration]]
+ gravity[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitAcceleration]]
   Interface: 'NSUnitArea'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ squareMegameters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareKilometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareMeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareCentimeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareMillimeters[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareMicrometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareNanometers[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareInches[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareFeet[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareYards[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ squareMiles[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ acres[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ ares[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
+ hectares[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitArea]]
   Interface: 'NSURLQueryItem'
       SUPER: NSObject
       CONFORMING: NSSecureCoding
       CONFORMING: NSCopying
- initWithName:value:[[ INSTANCETYPE ]]
+ queryItemWithName:value:[[ INSTANCETYPE ]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- value[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSTextCheckingResult'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- resultType[[ ENUMERATION enum NSTextCheckingType]]
- range[[ RECORD _NSRange]]
- rangeAtIndex:[[ RECORD _NSRange]]
- rangeWithName:[[ RECORD _NSRange]]
- resultByAdjustingRangesWithOffset:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
- orthography[[ POINTER  (nullable) ]] -> [[ INTERFACE NSOrthography]]
- grammarDetails[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- date[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- timeZone[[ POINTER  (nullable) ]] -> [[ INTERFACE NSTimeZone]]
- duration[[ double  ]]
- components[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- URL[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURL]]
- replacementString[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- alternativeStrings[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- regularExpression[[ POINTER  (nullable) ]] -> [[ INTERFACE NSRegularExpression]]
- phoneNumber[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- numberOfRanges[[ ulong  ]]
- addressComponents[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
+ orthographyCheckingResultWithRange:orthography:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ spellCheckingResultWithRange:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ grammarCheckingResultWithRange:details:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ dateCheckingResultWithRange:date:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ dateCheckingResultWithRange:date:timeZone:duration:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ addressCheckingResultWithRange:components:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ linkCheckingResultWithRange:URL:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ quoteCheckingResultWithRange:replacementString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ dashCheckingResultWithRange:replacementString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ replacementCheckingResultWithRange:replacementString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ correctionCheckingResultWithRange:replacementString:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ correctionCheckingResultWithRange:replacementString:alternativeStrings:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ regularExpressionCheckingResultWithRanges:count:regularExpression:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ phoneNumberCheckingResultWithRange:phoneNumber:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
+ transitInformationCheckingResultWithRange:components:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSTextCheckingResult]]
   Interface: 'NSMutableString'
       SUPER: NSString
- replaceCharactersInRange:withString:[[ void  ]]
- insertString:atIndex:[[ void  ]]
- deleteCharactersInRange:[[ void  ]]
- appendString:[[ void  ]]
- appendFormat:[[ void  ]]
- setString:[[ void  ]]
- replaceOccurrencesOfString:withString:options:range:[[ ulong  ]]
- applyTransform:reverse:range:updatedRange:[[ int  ]]
- initWithCapacity:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableString]]
+ stringWithCapacity:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSMutableString]]
   Interface: 'MTLComputePassSampleBufferAttachmentDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLComputePassSampleBufferAttachmentDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'NSURLSessionWebSocketMessage'
       SUPER: NSObject
- initWithData:[[ INSTANCETYPE ]]
- initWithString:[[ INSTANCETYPE ]]
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
- type[[ ENUMERATION enum NSURLSessionWebSocketMessageType]]
- data[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
- string[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSURLConnection'
       SUPER: NSObject
- initWithRequest:delegate:startImmediately:[[ INSTANCETYPE ]]
- initWithRequest:delegate:[[ INSTANCETYPE ]]
+ connectionWithRequest:delegate:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLConnection]]
- start[[ void  ]]
- cancel[[ void  ]]
- scheduleInRunLoop:forMode:[[ void  ]]
- unscheduleFromRunLoop:forMode:[[ void  ]]
- setDelegateQueue:[[ void  ]]
+ canHandleRequest:[[ int  ]]
- originalRequest[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]]
- currentRequest[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]]
+ sendSynchronousRequest:returningResponse:error:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSData]]
+ sendAsynchronousRequest:queue:completionHandler:[[ void  ]]
   Interface: 'MTLAttribute'
       SUPER: NSObject
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- attributeIndex[[ ulong  ]]
- attributeType[[ ENUMERATION enum MTLDataType]]
- isActive[[ int  ]]
- isPatchData[[ int  ]]
- isPatchControlPointData[[ int  ]]
   Interface: 'MTLVertexBufferLayoutDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLVertexBufferLayoutDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'NSPersonNameComponentsFormatter'
       SUPER: NSFormatter
+ localizedStringFromPersonNameComponents:style:options:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringFromPersonNameComponents:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- annotatedStringFromPersonNameComponents:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSAttributedString]]
- personNameComponentsFromString:[[ POINTER  (nullable) ]] -> [[ INTERFACE NSPersonNameComponents]]
- getObjectValue:forString:errorDescription:[[ int  ]]
- style[[ ENUMERATION enum NSPersonNameComponentsFormatterStyle]]
- setStyle:[[ void  ]]
- isPhonetic[[ int  ]]
- setPhonetic:[[ void  ]]
- locale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
- setLocale:[[ void  ]]
   Interface: 'NSUUID'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
+ UUID[[ INSTANCETYPE ]]
- init[[ INSTANCETYPE ]]
- initWithUUIDString:[[ INSTANCETYPE ]]
- initWithUUIDBytes:[[ INSTANCETYPE ]]
- getUUIDBytes:[[ void  ]]
- compare:[[ ENUMERATION enum NSComparisonResult]]
- UUIDString[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'MTLIndirectInstanceAccelerationStructureDescriptor'
       SUPER: MTLAccelerationStructureDescriptor
+ descriptor[[ INSTANCETYPE ]]
- instanceDescriptorBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setInstanceDescriptorBuffer:[[ void  ]]
- instanceDescriptorBufferOffset[[ ulong  ]]
- setInstanceDescriptorBufferOffset:[[ void  ]]
- instanceDescriptorStride[[ ulong  ]]
- setInstanceDescriptorStride:[[ void  ]]
- maxInstanceCount[[ ulong  ]]
- setMaxInstanceCount:[[ void  ]]
- instanceCountBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setInstanceCountBuffer:[[ void  ]]
- instanceCountBufferOffset[[ ulong  ]]
- setInstanceCountBufferOffset:[[ void  ]]
- instanceDescriptorType[[ ENUMERATION enum MTLAccelerationStructureInstanceDescriptorType]]
- setInstanceDescriptorType:[[ void  ]]
- motionTransformBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setMotionTransformBuffer:[[ void  ]]
- motionTransformBufferOffset[[ ulong  ]]
- setMotionTransformBufferOffset:[[ void  ]]
- maxMotionTransformCount[[ ulong  ]]
- setMaxMotionTransformCount:[[ void  ]]
- motionTransformCountBuffer[[ POINTER  (nullable) ]] -> [[ ID<MTLBuffer>]]
- setMotionTransformCountBuffer:[[ void  ]]
- motionTransformCountBufferOffset[[ ulong  ]]
- setMotionTransformCountBufferOffset:[[ void  ]]
   Interface: 'NSUnitDispersion'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ partsPerMillion[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitDispersion]]
   Interface: 'MTLFunctionConstantValues'
       SUPER: NSObject
       CONFORMING: NSCopying
- setConstantValue:type:atIndex:[[ void  ]]
- setConstantValues:type:withRange:[[ void  ]]
- setConstantValue:type:withName:[[ void  ]]
- reset[[ void  ]]
   Interface: 'NSUnitAngle'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ degrees[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitAngle]]
+ arcMinutes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitAngle]]
+ arcSeconds[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitAngle]]
+ radians[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitAngle]]
+ gradians[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitAngle]]
+ revolutions[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitAngle]]
   Interface: 'NSCache'
       SUPER: NSObject
- objectForKey:[[ ID ]]
- setObject:forKey:[[ void  ]]
- setObject:forKey:cost:[[ void  ]]
- removeObjectForKey:[[ void  ]]
- removeAllObjects[[ void  ]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- setName:[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSCacheDelegate>]]
- setDelegate:[[ void  ]]
- totalCostLimit[[ ulong  ]]
- setTotalCostLimit:[[ void  ]]
- countLimit[[ ulong  ]]
- setCountLimit:[[ void  ]]
- evictsObjectsWithDiscardedContent[[ int  ]]
- setEvictsObjectsWithDiscardedContent:[[ void  ]]
   Interface: 'NSUnitDuration'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ hours[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitDuration]]
+ minutes[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitDuration]]
+ seconds[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitDuration]]
+ milliseconds[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitDuration]]
+ microseconds[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitDuration]]
+ nanoseconds[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitDuration]]
+ picoseconds[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitDuration]]
   Interface: 'NSException'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
+ exceptionWithName:reason:userInfo:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSException]]
- initWithName:reason:userInfo:[[ INSTANCETYPE ]]
- raise[[ void  ]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- reason[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- userInfo[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- callStackReturnAddresses[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- callStackSymbols[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
+ raise:format:[[ void  ]]
+ raise:format:arguments:[[ void  ]]
   Interface: 'NSFileProviderService'
       SUPER: NSObject
- getFileProviderConnectionWithCompletionHandler:[[ void  ]]
- name[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
   Interface: 'NSURLSessionTaskTransactionMetrics'
       SUPER: NSObject
- init[[ INSTANCETYPE ]]
+ new[[ INSTANCETYPE ]]
- request[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSURLRequest]]
- response[[ POINTER  (nullable) ]] -> [[ INTERFACE NSURLResponse]]
- fetchStartDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- domainLookupStartDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- domainLookupEndDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- connectStartDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- secureConnectionStartDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- secureConnectionEndDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- connectEndDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- requestStartDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- requestEndDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- responseStartDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- responseEndDate[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- networkProtocolName[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- isProxyConnection[[ int  ]]
- isReusedConnection[[ int  ]]
- resourceFetchType[[ ENUMERATION enum NSURLSessionTaskMetricsResourceFetchType]]
- countOfRequestHeaderBytesSent[[ longlong  ]]
- countOfRequestBodyBytesSent[[ longlong  ]]
- countOfRequestBodyBytesBeforeEncoding[[ longlong  ]]
- countOfResponseHeaderBytesReceived[[ longlong  ]]
- countOfResponseBodyBytesReceived[[ longlong  ]]
- countOfResponseBodyBytesAfterDecoding[[ longlong  ]]
- localAddress[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- localPort[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- remoteAddress[[ POINTER  (nullable) ]] -> [[ INTERFACE NSString]]
- remotePort[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- negotiatedTLSProtocolVersion[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- negotiatedTLSCipherSuite[[ POINTER  (nullable) ]] -> [[ INTERFACE NSNumber]]
- isCellular[[ int  ]]
- isExpensive[[ int  ]]
- isConstrained[[ int  ]]
- isMultipath[[ int  ]]
- domainResolutionProtocol[[ ENUMERATION enum NSURLSessionTaskMetricsDomainResolutionProtocol]]
   Interface: 'NSXPCListener'
       SUPER: NSObject
+ serviceListener[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXPCListener]]
+ anonymousListener[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXPCListener]]
- initWithMachServiceName:[[ INSTANCETYPE ]]
- resume[[ void  ]]
- suspend[[ void  ]]
- activate[[ void  ]]
- invalidate[[ void  ]]
- setConnectionCodeSigningRequirement:[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSXPCListenerDelegate>]]
- setDelegate:[[ void  ]]
- endpoint[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSXPCListenerEndpoint]]
   Interface: 'NSUnitElectricPotentialDifference'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ megavolts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricPotentialDifference]]
+ kilovolts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricPotentialDifference]]
+ volts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricPotentialDifference]]
+ millivolts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricPotentialDifference]]
+ microvolts[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitElectricPotentialDifference]]
   Interface: 'NSMeasurementFormatter'
       SUPER: NSFormatter
       CONFORMING: NSSecureCoding
- stringFromMeasurement:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- stringFromUnit:[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSString]]
- unitOptions[[ ENUMERATION enum NSMeasurementFormatterUnitOptions]]
- setUnitOptions:[[ void  ]]
- unitStyle[[ ENUMERATION enum NSFormattingUnitStyle]]
- setUnitStyle:[[ void  ]]
- locale[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSLocale]]
- setLocale:[[ void  ]]
- numberFormatter[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSNumberFormatter]]
- setNumberFormatter:[[ void  ]]
   Interface: 'MTLAccelerationStructurePassDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
+ accelerationStructurePassDescriptor[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructurePassDescriptor]]
- sampleBufferAttachments[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray]]
   Interface: 'NSStream'
       SUPER: NSObject
- open[[ void  ]]
- close[[ void  ]]
- propertyForKey:[[ ID ]]
- setProperty:forKey:[[ int  ]]
- scheduleInRunLoop:forMode:[[ void  ]]
- removeFromRunLoop:forMode:[[ void  ]]
- delegate[[ POINTER  (nullable) ]] -> [[ ID<NSStreamDelegate>]]
- setDelegate:[[ void  ]]
- streamStatus[[ ENUMERATION enum NSStreamStatus]]
- streamError[[ POINTER  (nullable) ]] -> [[ INTERFACE NSError]]
+ getStreamsToHostWithName:port:inputStream:outputStream:[[ void  ]]
+ getBoundStreamsWithBufferSize:inputStream:outputStream:[[ void  ]]
   Interface: 'MTLRenderPipelineFunctionsDescriptor'
       SUPER: NSObject
       CONFORMING: NSCopying
- vertexAdditionalBinaryFunctions[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setVertexAdditionalBinaryFunctions:[[ void  ]]
- fragmentAdditionalBinaryFunctions[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setFragmentAdditionalBinaryFunctions:[[ void  ]]
- tileAdditionalBinaryFunctions[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setTileAdditionalBinaryFunctions:[[ void  ]]
   Interface: 'MTLRenderPipelineColorAttachmentDescriptorArray'
       SUPER: NSObject
- objectAtIndexedSubscript:[[ POINTER  (nonnull) ]] -> [[ INTERFACE MTLRenderPipelineColorAttachmentDescriptor]]
- setObject:atIndexedSubscript:[[ void  ]]
   Interface: 'NSDateComponents'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- week[[ long  ]]
- setWeek:[[ void  ]]
- setValue:forComponent:[[ void  ]]
- valueForComponent:[[ long  ]]
- isValidDateInCalendar:[[ int  ]]
- calendar[[ POINTER  (nullable) ]] -> [[ INTERFACE NSCalendar]]
- setCalendar:[[ void  ]]
- timeZone[[ POINTER  (nullable) ]] -> [[ INTERFACE NSTimeZone]]
- setTimeZone:[[ void  ]]
- era[[ long  ]]
- setEra:[[ void  ]]
- year[[ long  ]]
- setYear:[[ void  ]]
- month[[ long  ]]
- setMonth:[[ void  ]]
- day[[ long  ]]
- setDay:[[ void  ]]
- hour[[ long  ]]
- setHour:[[ void  ]]
- minute[[ long  ]]
- setMinute:[[ void  ]]
- second[[ long  ]]
- setSecond:[[ void  ]]
- nanosecond[[ long  ]]
- setNanosecond:[[ void  ]]
- weekday[[ long  ]]
- setWeekday:[[ void  ]]
- weekdayOrdinal[[ long  ]]
- setWeekdayOrdinal:[[ void  ]]
- quarter[[ long  ]]
- setQuarter:[[ void  ]]
- weekOfMonth[[ long  ]]
- setWeekOfMonth:[[ void  ]]
- weekOfYear[[ long  ]]
- setWeekOfYear:[[ void  ]]
- yearForWeekOfYear[[ long  ]]
- setYearForWeekOfYear:[[ void  ]]
- isLeapMonth[[ int  ]]
- setLeapMonth:[[ void  ]]
- date[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDate]]
- isValidDate[[ int  ]]
   Interface: 'NSUnitPressure'
       SUPER: NSDimension
       CONFORMING: NSSecureCoding
+ newtonsPerMetersSquared[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
+ gigapascals[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
+ megapascals[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
+ kilopascals[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
+ hectopascals[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
+ inchesOfMercury[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
+ bars[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
+ millibars[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
+ millimetersOfMercury[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
+ poundsForcePerSquareInch[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSUnitPressure]]
   Interface: 'MTLComputePipelineReflection'
       SUPER: NSObject
- bindings[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
- arguments[[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Interface: 'NSExtensionItem'
       SUPER: NSObject
       CONFORMING: NSCopying
       CONFORMING: NSSecureCoding
- attributedTitle[[ POINTER  (nullable) ]] -> [[ INTERFACE NSAttributedString]]
- setAttributedTitle:[[ void  ]]
- attributedContentText[[ POINTER  (nullable) ]] -> [[ INTERFACE NSAttributedString]]
- setAttributedContentText:[[ void  ]]
- attachments[[ POINTER  (nullable) ]] -> [[ INTERFACE NSArray]]
- setAttachments:[[ void  ]]
- userInfo[[ POINTER  (nullable) ]] -> [[ INTERFACE NSDictionary]]
- setUserInfo:[[ void  ]]
ENUMS:
   Enum: 'enum NSLocaleLanguageDirection'[[ ulong  ]]
       NSLocaleLanguageDirectionUnknown = 0 (0)
       NSLocaleLanguageDirectionLeftToRight = 1 (1)
       NSLocaleLanguageDirectionRightToLeft = 2 (2)
       NSLocaleLanguageDirectionTopToBottom = 3 (3)
       NSLocaleLanguageDirectionBottomToTop = 4 (4)
   Enum: 'enum MTLIOPriority'[[ long  ]]
       MTLIOPriorityHigh = 0 (0)
       MTLIOPriorityNormal = 1 (1)
       MTLIOPriorityLow = 2 (2)
   Enum: 'enum NSPersonNameComponentsFormatterStyle'[[ long  ]]
       NSPersonNameComponentsFormatterStyleDefault = 0 (0)
       NSPersonNameComponentsFormatterStyleShort = 1 (1)
       NSPersonNameComponentsFormatterStyleMedium = 2 (2)
       NSPersonNameComponentsFormatterStyleLong = 3 (3)
       NSPersonNameComponentsFormatterStyleAbbreviated = 4 (4)
   Enum: 'enum NSTextCheckingType'[[ ulonglong  ]]
       NSTextCheckingTypeOrthography = 1 (1)
       NSTextCheckingTypeSpelling = 2 (2)
       NSTextCheckingTypeGrammar = 4 (4)
       NSTextCheckingTypeDate = 8 (8)
       NSTextCheckingTypeAddress = 16 (16)
       NSTextCheckingTypeLink = 32 (32)
       NSTextCheckingTypeQuote = 64 (64)
       NSTextCheckingTypeDash = 128 (128)
       NSTextCheckingTypeReplacement = 256 (256)
       NSTextCheckingTypeCorrection = 512 (512)
       NSTextCheckingTypeRegularExpression = 1024 (1024)
       NSTextCheckingTypePhoneNumber = 2048 (2048)
       NSTextCheckingTypeTransitInformation = 4096 (4096)
   Enum: 'enum NSURLBookmarkCreationOptions'[[ ulong  ]]
       NSURLBookmarkCreationPreferFileIDResolution = 256 (256)
       NSURLBookmarkCreationMinimalBookmark = 512 (512)
       NSURLBookmarkCreationSuitableForBookmarkFile = 1024 (1024)
       NSURLBookmarkCreationWithSecurityScope = 2048 (2048)
       NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096 (4096)
       NSURLBookmarkCreationWithoutImplicitSecurityScope = 536870912 (536870912)
   Enum: 'enum MTLResourceUsage'[[ ulong  ]]
       MTLResourceUsageRead = 1 (1)
       MTLResourceUsageWrite = 2 (2)
       MTLResourceUsageSample = 4 (4)
   Enum: 'enum NSDateFormatterBehavior'[[ ulong  ]]
       NSDateFormatterBehaviorDefault = 0 (0)
       NSDateFormatterBehavior10_4 = 1040 (1040)
   Enum: 'enum NSByteCountFormatterUnits'[[ ulong  ]]
       NSByteCountFormatterUseDefault = 0 (0)
       NSByteCountFormatterUseBytes = 1 (1)
       NSByteCountFormatterUseKB = 2 (2)
       NSByteCountFormatterUseMB = 4 (4)
       NSByteCountFormatterUseGB = 8 (8)
       NSByteCountFormatterUseTB = 16 (16)
       NSByteCountFormatterUsePB = 32 (32)
       NSByteCountFormatterUseEB = 64 (64)
       NSByteCountFormatterUseZB = 128 (128)
       NSByteCountFormatterUseYBOrHigher = 65280 (65280)
       NSByteCountFormatterUseAll = 65535 (65535)
   Enum: 'enum NSStringEnumerationOptions'[[ ulong  ]]
       NSStringEnumerationByLines = 0 (0)
       NSStringEnumerationByParagraphs = 1 (1)
       NSStringEnumerationByComposedCharacterSequences = 2 (2)
       NSStringEnumerationByWords = 3 (3)
       NSStringEnumerationBySentences = 4 (4)
       NSStringEnumerationByCaretPositions = 5 (5)
       NSStringEnumerationByDeletionClusters = 6 (6)
       NSStringEnumerationReverse = 256 (256)
       NSStringEnumerationSubstringNotRequired = 512 (512)
       NSStringEnumerationLocalized = 1024 (1024)
   Enum: 'enum MTLIOCompressionStatus'[[ long  ]]
       MTLIOCompressionStatusComplete = 0 (0)
       MTLIOCompressionStatusError = 1 (1)
   Enum: 'enum NSURLRelationship'[[ long  ]]
       NSURLRelationshipContains = 0 (0)
       NSURLRelationshipSame = 1 (1)
       NSURLRelationshipOther = 2 (2)
   Enum: 'enum MTLColorWriteMask'[[ ulong  ]]
       MTLColorWriteMaskNone = 0 (0)
       MTLColorWriteMaskRed = 8 (8)
       MTLColorWriteMaskGreen = 4 (4)
       MTLColorWriteMaskBlue = 2 (2)
       MTLColorWriteMaskAlpha = 1 (1)
       MTLColorWriteMaskAll = 15 (15)
   Enum: 'enum NSActivityOptions'[[ ulonglong  ]]
       NSActivityIdleDisplaySleepDisabled = 1099511627776 (1099511627776)
       NSActivityIdleSystemSleepDisabled = 1048576 (1048576)
       NSActivitySuddenTerminationDisabled = 16384 (16384)
       NSActivityAutomaticTerminationDisabled = 32768 (32768)
       NSActivityAnimationTrackingEnabled = 35184372088832 (35184372088832)
       NSActivityTrackingEnabled = 70368744177664 (70368744177664)
       NSActivityUserInitiated = 16777215 (16777215)
       NSActivityUserInitiatedAllowingIdleSystemSleep = 15728639 (15728639)
       NSActivityBackground = 255 (255)
       NSActivityLatencyCritical = 1095216660480 (1095216660480)
       NSActivityUserInteractive = 1095233437695 (1095233437695)
   Enum: 'enum MTLTessellationFactorFormat'[[ ulong  ]]
       MTLTessellationFactorFormatHalf = 0 (0)
   Enum: 'enum NSMatchingOptions'[[ ulong  ]]
       NSMatchingReportProgress = 1 (1)
       NSMatchingReportCompletion = 2 (2)
       NSMatchingAnchored = 4 (4)
       NSMatchingWithTransparentBounds = 8 (8)
       NSMatchingWithoutAnchoringBounds = 16 (16)
   Enum: 'enum MTLTextureUsage'[[ ulong  ]]
       MTLTextureUsageUnknown = 0 (0)
       MTLTextureUsageShaderRead = 1 (1)
       MTLTextureUsageShaderWrite = 2 (2)
       MTLTextureUsageRenderTarget = 4 (4)
       MTLTextureUsagePixelFormatView = 16 (16)
       MTLTextureUsageShaderAtomic = 32 (32)
   Enum: 'enum NSDecodingFailurePolicy'[[ long  ]]
       NSDecodingFailurePolicyRaiseException = 0 (0)
       NSDecodingFailurePolicySetErrorAndReturn = 1 (1)
   Enum: 'enum NSPresentationIntentKind'[[ long  ]]
       NSPresentationIntentKindParagraph = 0 (0)
       NSPresentationIntentKindHeader = 1 (1)
       NSPresentationIntentKindOrderedList = 2 (2)
       NSPresentationIntentKindUnorderedList = 3 (3)
       NSPresentationIntentKindListItem = 4 (4)
       NSPresentationIntentKindCodeBlock = 5 (5)
       NSPresentationIntentKindBlockQuote = 6 (6)
       NSPresentationIntentKindThematicBreak = 7 (7)
       NSPresentationIntentKindTable = 8 (8)
       NSPresentationIntentKindTableHeaderRow = 9 (9)
       NSPresentationIntentKindTableRow = 10 (10)
       NSPresentationIntentKindTableCell = 11 (11)
   Enum: 'enum MTLVertexFormat'[[ ulong  ]]
       MTLVertexFormatInvalid = 0 (0)
       MTLVertexFormatUChar2 = 1 (1)
       MTLVertexFormatUChar3 = 2 (2)
       MTLVertexFormatUChar4 = 3 (3)
       MTLVertexFormatChar2 = 4 (4)
       MTLVertexFormatChar3 = 5 (5)
       MTLVertexFormatChar4 = 6 (6)
       MTLVertexFormatUChar2Normalized = 7 (7)
       MTLVertexFormatUChar3Normalized = 8 (8)
       MTLVertexFormatUChar4Normalized = 9 (9)
       MTLVertexFormatChar2Normalized = 10 (10)
       MTLVertexFormatChar3Normalized = 11 (11)
       MTLVertexFormatChar4Normalized = 12 (12)
       MTLVertexFormatUShort2 = 13 (13)
       MTLVertexFormatUShort3 = 14 (14)
       MTLVertexFormatUShort4 = 15 (15)
       MTLVertexFormatShort2 = 16 (16)
       MTLVertexFormatShort3 = 17 (17)
       MTLVertexFormatShort4 = 18 (18)
       MTLVertexFormatUShort2Normalized = 19 (19)
       MTLVertexFormatUShort3Normalized = 20 (20)
       MTLVertexFormatUShort4Normalized = 21 (21)
       MTLVertexFormatShort2Normalized = 22 (22)
       MTLVertexFormatShort3Normalized = 23 (23)
       MTLVertexFormatShort4Normalized = 24 (24)
       MTLVertexFormatHalf2 = 25 (25)
       MTLVertexFormatHalf3 = 26 (26)
       MTLVertexFormatHalf4 = 27 (27)
       MTLVertexFormatFloat = 28 (28)
       MTLVertexFormatFloat2 = 29 (29)
       MTLVertexFormatFloat3 = 30 (30)
       MTLVertexFormatFloat4 = 31 (31)
       MTLVertexFormatInt = 32 (32)
       MTLVertexFormatInt2 = 33 (33)
       MTLVertexFormatInt3 = 34 (34)
       MTLVertexFormatInt4 = 35 (35)
       MTLVertexFormatUInt = 36 (36)
       MTLVertexFormatUInt2 = 37 (37)
       MTLVertexFormatUInt3 = 38 (38)
       MTLVertexFormatUInt4 = 39 (39)
       MTLVertexFormatInt1010102Normalized = 40 (40)
       MTLVertexFormatUInt1010102Normalized = 41 (41)
       MTLVertexFormatUChar4Normalized_BGRA = 42 (42)
       MTLVertexFormatUChar = 45 (45)
       MTLVertexFormatChar = 46 (46)
       MTLVertexFormatUCharNormalized = 47 (47)
       MTLVertexFormatCharNormalized = 48 (48)
       MTLVertexFormatUShort = 49 (49)
       MTLVertexFormatShort = 50 (50)
       MTLVertexFormatUShortNormalized = 51 (51)
       MTLVertexFormatShortNormalized = 52 (52)
       MTLVertexFormatHalf = 53 (53)
       MTLVertexFormatFloatRG11B10 = 54 (54)
       MTLVertexFormatFloatRGB9E5 = 55 (55)
   Enum: 'enum MTLSamplerAddressMode'[[ ulong  ]]
       MTLSamplerAddressModeClampToEdge = 0 (0)
       MTLSamplerAddressModeMirrorClampToEdge = 1 (1)
       MTLSamplerAddressModeRepeat = 2 (2)
       MTLSamplerAddressModeMirrorRepeat = 3 (3)
       MTLSamplerAddressModeClampToZero = 4 (4)
       MTLSamplerAddressModeClampToBorderColor = 5 (5)
   Enum: 'enum NSGrammaticalPronounType'[[ long  ]]
       NSGrammaticalPronounTypeNotSet = 0 (0)
       NSGrammaticalPronounTypePersonal = 1 (1)
       NSGrammaticalPronounTypeReflexive = 2 (2)
       NSGrammaticalPronounTypePossessive = 3 (3)
   Enum: 'enum NSSortOptions'[[ ulong  ]]
       NSSortConcurrent = 1 (1)
       NSSortStable = 16 (16)
   Enum: 'enum NSDataBase64EncodingOptions'[[ ulong  ]]
       NSDataBase64Encoding64CharacterLineLength = 1 (1)
       NSDataBase64Encoding76CharacterLineLength = 2 (2)
       NSDataBase64EncodingEndLineWithCarriageReturn = 16 (16)
       NSDataBase64EncodingEndLineWithLineFeed = 32 (32)
   Enum: 'enum NSURLRequestCachePolicy'[[ ulong  ]]
       NSURLRequestUseProtocolCachePolicy = 0 (0)
       NSURLRequestReloadIgnoringLocalCacheData = 1 (1)
       NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4 (4)
       NSURLRequestReloadIgnoringCacheData = 1 (1)
       NSURLRequestReturnCacheDataElseLoad = 2 (2)
       NSURLRequestReturnCacheDataDontLoad = 3 (3)
       NSURLRequestReloadRevalidatingCacheData = 5 (5)
   Enum: 'enum NSURLSessionDelayedRequestDisposition'[[ long  ]]
       NSURLSessionDelayedRequestContinueLoading = 0 (0)
       NSURLSessionDelayedRequestUseNewRequest = 1 (1)
       NSURLSessionDelayedRequestCancel = 2 (2)
   Enum: 'enum NSFileCoordinatorReadingOptions'[[ ulong  ]]
       NSFileCoordinatorReadingWithoutChanges = 1 (1)
       NSFileCoordinatorReadingResolvesSymbolicLink = 2 (2)
       NSFileCoordinatorReadingImmediatelyAvailableMetadataOnly = 4 (4)
       NSFileCoordinatorReadingForUploading = 8 (8)
   Enum: 'enum MTLDepthClipMode'[[ ulong  ]]
       MTLDepthClipModeClip = 0 (0)
       MTLDepthClipModeClamp = 1 (1)
   Enum: 'enum MTLPixelFormat'[[ ulong  ]]
       MTLPixelFormatInvalid = 0 (0)
       MTLPixelFormatA8Unorm = 1 (1)
       MTLPixelFormatR8Unorm = 10 (10)
       MTLPixelFormatR8Unorm_sRGB = 11 (11)
       MTLPixelFormatR8Snorm = 12 (12)
       MTLPixelFormatR8Uint = 13 (13)
       MTLPixelFormatR8Sint = 14 (14)
       MTLPixelFormatR16Unorm = 20 (20)
       MTLPixelFormatR16Snorm = 22 (22)
       MTLPixelFormatR16Uint = 23 (23)
       MTLPixelFormatR16Sint = 24 (24)
       MTLPixelFormatR16Float = 25 (25)
       MTLPixelFormatRG8Unorm = 30 (30)
       MTLPixelFormatRG8Unorm_sRGB = 31 (31)
       MTLPixelFormatRG8Snorm = 32 (32)
       MTLPixelFormatRG8Uint = 33 (33)
       MTLPixelFormatRG8Sint = 34 (34)
       MTLPixelFormatB5G6R5Unorm = 40 (40)
       MTLPixelFormatA1BGR5Unorm = 41 (41)
       MTLPixelFormatABGR4Unorm = 42 (42)
       MTLPixelFormatBGR5A1Unorm = 43 (43)
       MTLPixelFormatR32Uint = 53 (53)
       MTLPixelFormatR32Sint = 54 (54)
       MTLPixelFormatR32Float = 55 (55)
       MTLPixelFormatRG16Unorm = 60 (60)
       MTLPixelFormatRG16Snorm = 62 (62)
       MTLPixelFormatRG16Uint = 63 (63)
       MTLPixelFormatRG16Sint = 64 (64)
       MTLPixelFormatRG16Float = 65 (65)
       MTLPixelFormatRGBA8Unorm = 70 (70)
       MTLPixelFormatRGBA8Unorm_sRGB = 71 (71)
       MTLPixelFormatRGBA8Snorm = 72 (72)
       MTLPixelFormatRGBA8Uint = 73 (73)
       MTLPixelFormatRGBA8Sint = 74 (74)
       MTLPixelFormatBGRA8Unorm = 80 (80)
       MTLPixelFormatBGRA8Unorm_sRGB = 81 (81)
       MTLPixelFormatRGB10A2Unorm = 90 (90)
       MTLPixelFormatRGB10A2Uint = 91 (91)
       MTLPixelFormatRG11B10Float = 92 (92)
       MTLPixelFormatRGB9E5Float = 93 (93)
       MTLPixelFormatBGR10A2Unorm = 94 (94)
       MTLPixelFormatBGR10_XR = 554 (554)
       MTLPixelFormatBGR10_XR_sRGB = 555 (555)
       MTLPixelFormatRG32Uint = 103 (103)
       MTLPixelFormatRG32Sint = 104 (104)
       MTLPixelFormatRG32Float = 105 (105)
       MTLPixelFormatRGBA16Unorm = 110 (110)
       MTLPixelFormatRGBA16Snorm = 112 (112)
       MTLPixelFormatRGBA16Uint = 113 (113)
       MTLPixelFormatRGBA16Sint = 114 (114)
       MTLPixelFormatRGBA16Float = 115 (115)
       MTLPixelFormatBGRA10_XR = 552 (552)
       MTLPixelFormatBGRA10_XR_sRGB = 553 (553)
       MTLPixelFormatRGBA32Uint = 123 (123)
       MTLPixelFormatRGBA32Sint = 124 (124)
       MTLPixelFormatRGBA32Float = 125 (125)
       MTLPixelFormatBC1_RGBA = 130 (130)
       MTLPixelFormatBC1_RGBA_sRGB = 131 (131)
       MTLPixelFormatBC2_RGBA = 132 (132)
       MTLPixelFormatBC2_RGBA_sRGB = 133 (133)
       MTLPixelFormatBC3_RGBA = 134 (134)
       MTLPixelFormatBC3_RGBA_sRGB = 135 (135)
       MTLPixelFormatBC4_RUnorm = 140 (140)
       MTLPixelFormatBC4_RSnorm = 141 (141)
       MTLPixelFormatBC5_RGUnorm = 142 (142)
       MTLPixelFormatBC5_RGSnorm = 143 (143)
       MTLPixelFormatBC6H_RGBFloat = 150 (150)
       MTLPixelFormatBC6H_RGBUfloat = 151 (151)
       MTLPixelFormatBC7_RGBAUnorm = 152 (152)
       MTLPixelFormatBC7_RGBAUnorm_sRGB = 153 (153)
       MTLPixelFormatPVRTC_RGB_2BPP = 160 (160)
       MTLPixelFormatPVRTC_RGB_2BPP_sRGB = 161 (161)
       MTLPixelFormatPVRTC_RGB_4BPP = 162 (162)
       MTLPixelFormatPVRTC_RGB_4BPP_sRGB = 163 (163)
       MTLPixelFormatPVRTC_RGBA_2BPP = 164 (164)
       MTLPixelFormatPVRTC_RGBA_2BPP_sRGB = 165 (165)
       MTLPixelFormatPVRTC_RGBA_4BPP = 166 (166)
       MTLPixelFormatPVRTC_RGBA_4BPP_sRGB = 167 (167)
       MTLPixelFormatEAC_R11Unorm = 170 (170)
       MTLPixelFormatEAC_R11Snorm = 172 (172)
       MTLPixelFormatEAC_RG11Unorm = 174 (174)
       MTLPixelFormatEAC_RG11Snorm = 176 (176)
       MTLPixelFormatEAC_RGBA8 = 178 (178)
       MTLPixelFormatEAC_RGBA8_sRGB = 179 (179)
       MTLPixelFormatETC2_RGB8 = 180 (180)
       MTLPixelFormatETC2_RGB8_sRGB = 181 (181)
       MTLPixelFormatETC2_RGB8A1 = 182 (182)
       MTLPixelFormatETC2_RGB8A1_sRGB = 183 (183)
       MTLPixelFormatASTC_4x4_sRGB = 186 (186)
       MTLPixelFormatASTC_5x4_sRGB = 187 (187)
       MTLPixelFormatASTC_5x5_sRGB = 188 (188)
       MTLPixelFormatASTC_6x5_sRGB = 189 (189)
       MTLPixelFormatASTC_6x6_sRGB = 190 (190)
       MTLPixelFormatASTC_8x5_sRGB = 192 (192)
       MTLPixelFormatASTC_8x6_sRGB = 193 (193)
       MTLPixelFormatASTC_8x8_sRGB = 194 (194)
       MTLPixelFormatASTC_10x5_sRGB = 195 (195)
       MTLPixelFormatASTC_10x6_sRGB = 196 (196)
       MTLPixelFormatASTC_10x8_sRGB = 197 (197)
       MTLPixelFormatASTC_10x10_sRGB = 198 (198)
       MTLPixelFormatASTC_12x10_sRGB = 199 (199)
       MTLPixelFormatASTC_12x12_sRGB = 200 (200)
       MTLPixelFormatASTC_4x4_LDR = 204 (204)
       MTLPixelFormatASTC_5x4_LDR = 205 (205)
       MTLPixelFormatASTC_5x5_LDR = 206 (206)
       MTLPixelFormatASTC_6x5_LDR = 207 (207)
       MTLPixelFormatASTC_6x6_LDR = 208 (208)
       MTLPixelFormatASTC_8x5_LDR = 210 (210)
       MTLPixelFormatASTC_8x6_LDR = 211 (211)
       MTLPixelFormatASTC_8x8_LDR = 212 (212)
       MTLPixelFormatASTC_10x5_LDR = 213 (213)
       MTLPixelFormatASTC_10x6_LDR = 214 (214)
       MTLPixelFormatASTC_10x8_LDR = 215 (215)
       MTLPixelFormatASTC_10x10_LDR = 216 (216)
       MTLPixelFormatASTC_12x10_LDR = 217 (217)
       MTLPixelFormatASTC_12x12_LDR = 218 (218)
       MTLPixelFormatASTC_4x4_HDR = 222 (222)
       MTLPixelFormatASTC_5x4_HDR = 223 (223)
       MTLPixelFormatASTC_5x5_HDR = 224 (224)
       MTLPixelFormatASTC_6x5_HDR = 225 (225)
       MTLPixelFormatASTC_6x6_HDR = 226 (226)
       MTLPixelFormatASTC_8x5_HDR = 228 (228)
       MTLPixelFormatASTC_8x6_HDR = 229 (229)
       MTLPixelFormatASTC_8x8_HDR = 230 (230)
       MTLPixelFormatASTC_10x5_HDR = 231 (231)
       MTLPixelFormatASTC_10x6_HDR = 232 (232)
       MTLPixelFormatASTC_10x8_HDR = 233 (233)
       MTLPixelFormatASTC_10x10_HDR = 234 (234)
       MTLPixelFormatASTC_12x10_HDR = 235 (235)
       MTLPixelFormatASTC_12x12_HDR = 236 (236)
       MTLPixelFormatGBGR422 = 240 (240)
       MTLPixelFormatBGRG422 = 241 (241)
       MTLPixelFormatDepth16Unorm = 250 (250)
       MTLPixelFormatDepth32Float = 252 (252)
       MTLPixelFormatStencil8 = 253 (253)
       MTLPixelFormatDepth24Unorm_Stencil8 = 255 (255)
       MTLPixelFormatDepth32Float_Stencil8 = 260 (260)
       MTLPixelFormatX32_Stencil8 = 261 (261)
       MTLPixelFormatX24_Stencil8 = 262 (262)
   Enum: 'enum MTLBindingType'[[ long  ]]
       MTLBindingTypeBuffer = 0 (0)
       MTLBindingTypeThreadgroupMemory = 1 (1)
       MTLBindingTypeTexture = 2 (2)
       MTLBindingTypeSampler = 3 (3)
       MTLBindingTypeImageblockData = 16 (16)
       MTLBindingTypeImageblock = 17 (17)
       MTLBindingTypeVisibleFunctionTable = 24 (24)
       MTLBindingTypePrimitiveAccelerationStructure = 25 (25)
       MTLBindingTypeInstanceAccelerationStructure = 26 (26)
       MTLBindingTypeIntersectionFunctionTable = 27 (27)
       MTLBindingTypeObjectPayload = 34 (34)
   Enum: 'enum MTLBindingAccess'[[ ulong  ]]
       MTLBindingAccessReadOnly = 0 (0)
       MTLBindingAccessReadWrite = 1 (1)
       MTLBindingAccessWriteOnly = 2 (2)
       MTLArgumentAccessReadOnly = 0 (0)
       MTLArgumentAccessReadWrite = 1 (1)
       MTLArgumentAccessWriteOnly = 2 (2)
   Enum: 'enum NSCalendarUnit'[[ ulong  ]]
       NSCalendarUnitEra = 2 (2)
       NSCalendarUnitYear = 4 (4)
       NSCalendarUnitMonth = 8 (8)
       NSCalendarUnitDay = 16 (16)
       NSCalendarUnitHour = 32 (32)
       NSCalendarUnitMinute = 64 (64)
       NSCalendarUnitSecond = 128 (128)
       NSCalendarUnitWeekday = 512 (512)
       NSCalendarUnitWeekdayOrdinal = 1024 (1024)
       NSCalendarUnitQuarter = 2048 (2048)
       NSCalendarUnitWeekOfMonth = 4096 (4096)
       NSCalendarUnitWeekOfYear = 8192 (8192)
       NSCalendarUnitYearForWeekOfYear = 16384 (16384)
       NSCalendarUnitNanosecond = 32768 (32768)
       NSCalendarUnitCalendar = 1048576 (1048576)
       NSCalendarUnitTimeZone = 2097152 (2097152)
       NSEraCalendarUnit = 2 (2)
       NSYearCalendarUnit = 4 (4)
       NSMonthCalendarUnit = 8 (8)
       NSDayCalendarUnit = 16 (16)
       NSHourCalendarUnit = 32 (32)
       NSMinuteCalendarUnit = 64 (64)
       NSSecondCalendarUnit = 128 (128)
       NSWeekCalendarUnit = 256 (256)
       NSWeekdayCalendarUnit = 512 (512)
       NSWeekdayOrdinalCalendarUnit = 1024 (1024)
       NSQuarterCalendarUnit = 2048 (2048)
       NSWeekOfMonthCalendarUnit = 4096 (4096)
       NSWeekOfYearCalendarUnit = 8192 (8192)
       NSYearForWeekOfYearCalendarUnit = 16384 (16384)
       NSCalendarCalendarUnit = 1048576 (1048576)
       NSTimeZoneCalendarUnit = 2097152 (2097152)
   Enum: 'enum NSEnumerationOptions'[[ ulong  ]]
       NSEnumerationConcurrent = 1 (1)
       NSEnumerationReverse = 2 (2)
   Enum: 'enum NSNumberFormatterBehavior'[[ ulong  ]]
       NSNumberFormatterBehaviorDefault = 0 (0)
       NSNumberFormatterBehavior10_4 = 1040 (1040)
   Enum: 'enum MTLLanguageVersion'[[ ulong  ]]
       MTLLanguageVersion1_0 = 65536 (65536)
       MTLLanguageVersion1_1 = 65537 (65537)
       MTLLanguageVersion1_2 = 65538 (65538)
       MTLLanguageVersion2_0 = 131072 (131072)
       MTLLanguageVersion2_1 = 131073 (131073)
       MTLLanguageVersion2_2 = 131074 (131074)
       MTLLanguageVersion2_3 = 131075 (131075)
       MTLLanguageVersion2_4 = 131076 (131076)
       MTLLanguageVersion3_0 = 196608 (196608)
       MTLLanguageVersion3_1 = 196609 (196609)
   Enum: 'enum MTLDispatchType'[[ ulong  ]]
       MTLDispatchTypeSerial = 0 (0)
       MTLDispatchTypeConcurrent = 1 (1)
   Enum: 'enum NSMatchingFlags'[[ ulong  ]]
       NSMatchingProgress = 1 (1)
       NSMatchingCompleted = 2 (2)
       NSMatchingHitEnd = 4 (4)
       NSMatchingRequiredEnd = 8 (8)
       NSMatchingInternalError = 16 (16)
   Enum: 'enum NSAttributedStringMarkdownParsingFailurePolicy'[[ long  ]]
       NSAttributedStringMarkdownParsingFailureReturnError = 0 (0)
       NSAttributedStringMarkdownParsingFailureReturnPartiallyParsedIfPossible = 1 (1)
   Enum: 'enum MTLHazardTrackingMode'[[ ulong  ]]
       MTLHazardTrackingModeDefault = 0 (0)
       MTLHazardTrackingModeUntracked = 1 (1)
       MTLHazardTrackingModeTracked = 2 (2)
   Enum: 'enum MTLVertexStepFunction'[[ ulong  ]]
       MTLVertexStepFunctionConstant = 0 (0)
       MTLVertexStepFunctionPerVertex = 1 (1)
       MTLVertexStepFunctionPerInstance = 2 (2)
       MTLVertexStepFunctionPerPatch = 3 (3)
       MTLVertexStepFunctionPerPatchControlPoint = 4 (4)
   Enum: 'enum NSStreamEvent'[[ ulong  ]]
       NSStreamEventNone = 0 (0)
       NSStreamEventOpenCompleted = 1 (1)
       NSStreamEventHasBytesAvailable = 2 (2)
       NSStreamEventHasSpaceAvailable = 4 (4)
       NSStreamEventErrorOccurred = 8 (8)
       NSStreamEventEndEncountered = 16 (16)
   Enum: 'enum MTLStencilOperation'[[ ulong  ]]
       MTLStencilOperationKeep = 0 (0)
       MTLStencilOperationZero = 1 (1)
       MTLStencilOperationReplace = 2 (2)
       MTLStencilOperationIncrementClamp = 3 (3)
       MTLStencilOperationDecrementClamp = 4 (4)
       MTLStencilOperationInvert = 5 (5)
       MTLStencilOperationIncrementWrap = 6 (6)
       MTLStencilOperationDecrementWrap = 7 (7)
   Enum: 'enum NSComparisonPredicateOptions'[[ ulong  ]]
       NSCaseInsensitivePredicateOption = 1 (1)
       NSDiacriticInsensitivePredicateOption = 2 (2)
       NSNormalizedPredicateOption = 4 (4)
   Enum: 'enum NSSearchPathDirectory'[[ ulong  ]]
       NSApplicationDirectory = 1 (1)
       NSDemoApplicationDirectory = 2 (2)
       NSDeveloperApplicationDirectory = 3 (3)
       NSAdminApplicationDirectory = 4 (4)
       NSLibraryDirectory = 5 (5)
       NSDeveloperDirectory = 6 (6)
       NSUserDirectory = 7 (7)
       NSDocumentationDirectory = 8 (8)
       NSDocumentDirectory = 9 (9)
       NSCoreServiceDirectory = 10 (10)
       NSAutosavedInformationDirectory = 11 (11)
       NSDesktopDirectory = 12 (12)
       NSCachesDirectory = 13 (13)
       NSApplicationSupportDirectory = 14 (14)
       NSDownloadsDirectory = 15 (15)
       NSInputMethodsDirectory = 16 (16)
       NSMoviesDirectory = 17 (17)
       NSMusicDirectory = 18 (18)
       NSPicturesDirectory = 19 (19)
       NSPrinterDescriptionDirectory = 20 (20)
       NSSharedPublicDirectory = 21 (21)
       NSPreferencePanesDirectory = 22 (22)
       NSApplicationScriptsDirectory = 23 (23)
       NSItemReplacementDirectory = 99 (99)
       NSAllApplicationsDirectory = 100 (100)
       NSAllLibrariesDirectory = 101 (101)
       NSTrashDirectory = 102 (102)
   Enum: 'enum NSPersonNameComponentsFormatterOptions'[[ ulong  ]]
       NSPersonNameComponentsFormatterPhonetic = 2 (2)
   Enum: 'enum NSItemProviderFileOptions'[[ long  ]]
       NSItemProviderFileOptionOpenInPlace = 1 (1)
   Enum: 'enum MTLLoadAction'[[ ulong  ]]
       MTLLoadActionDontCare = 0 (0)
       MTLLoadActionLoad = 1 (1)
       MTLLoadActionClear = 2 (2)
   Enum: 'enum MTLBarrierScope'[[ ulong  ]]
       MTLBarrierScopeBuffers = 1 (1)
       MTLBarrierScopeTextures = 2 (2)
       MTLBarrierScopeRenderTargets = 4 (4)
   Enum: 'enum NSNetServiceOptions'[[ ulong  ]]
       NSNetServiceNoAutoRename = 1 (1)
       NSNetServiceListenForConnections = 2 (2)
   Enum: 'enum MTLTessellationPartitionMode'[[ ulong  ]]
       MTLTessellationPartitionModePow2 = 0 (0)
       MTLTessellationPartitionModeInteger = 1 (1)
       MTLTessellationPartitionModeFractionalOdd = 2 (2)
       MTLTessellationPartitionModeFractionalEven = 3 (3)
   Enum: 'enum MTLLibraryOptimizationLevel'[[ long  ]]
       MTLLibraryOptimizationLevelDefault = 0 (0)
       MTLLibraryOptimizationLevelSize = 1 (1)
   Enum: 'enum NSDateComponentsFormatterUnitsStyle'[[ long  ]]
       NSDateComponentsFormatterUnitsStylePositional = 0 (0)
       NSDateComponentsFormatterUnitsStyleAbbreviated = 1 (1)
       NSDateComponentsFormatterUnitsStyleShort = 2 (2)
       NSDateComponentsFormatterUnitsStyleFull = 3 (3)
       NSDateComponentsFormatterUnitsStyleSpellOut = 4 (4)
       NSDateComponentsFormatterUnitsStyleBrief = 5 (5)
   Enum: 'enum NSKeyValueObservingOptions'[[ ulong  ]]
       NSKeyValueObservingOptionNew = 1 (1)
       NSKeyValueObservingOptionOld = 2 (2)
       NSKeyValueObservingOptionInitial = 4 (4)
       NSKeyValueObservingOptionPrior = 8 (8)
   Enum: 'enum MTLLibraryType'[[ long  ]]
       MTLLibraryTypeExecutable = 0 (0)
       MTLLibraryTypeDynamic = 1 (1)
   Enum: 'enum NSURLSessionMultipathServiceType'[[ long  ]]
       NSURLSessionMultipathServiceTypeNone = 0 (0)
       NSURLSessionMultipathServiceTypeHandover = 1 (1)
       NSURLSessionMultipathServiceTypeInteractive = 2 (2)
       NSURLSessionMultipathServiceTypeAggregate = 3 (3)
   Enum: 'enum NSPredicateOperatorType'[[ ulong  ]]
       NSLessThanPredicateOperatorType = 0 (0)
       NSLessThanOrEqualToPredicateOperatorType = 1 (1)
       NSGreaterThanPredicateOperatorType = 2 (2)
       NSGreaterThanOrEqualToPredicateOperatorType = 3 (3)
       NSEqualToPredicateOperatorType = 4 (4)
       NSNotEqualToPredicateOperatorType = 5 (5)
       NSMatchesPredicateOperatorType = 6 (6)
       NSLikePredicateOperatorType = 7 (7)
       NSBeginsWithPredicateOperatorType = 8 (8)
       NSEndsWithPredicateOperatorType = 9 (9)
       NSInPredicateOperatorType = 10 (10)
       NSCustomSelectorPredicateOperatorType = 11 (11)
       NSContainsPredicateOperatorType = 99 (99)
       NSBetweenPredicateOperatorType = 100 (100)
   Enum: 'enum MTLAttributeFormat'[[ ulong  ]]
       MTLAttributeFormatInvalid = 0 (0)
       MTLAttributeFormatUChar2 = 1 (1)
       MTLAttributeFormatUChar3 = 2 (2)
       MTLAttributeFormatUChar4 = 3 (3)
       MTLAttributeFormatChar2 = 4 (4)
       MTLAttributeFormatChar3 = 5 (5)
       MTLAttributeFormatChar4 = 6 (6)
       MTLAttributeFormatUChar2Normalized = 7 (7)
       MTLAttributeFormatUChar3Normalized = 8 (8)
       MTLAttributeFormatUChar4Normalized = 9 (9)
       MTLAttributeFormatChar2Normalized = 10 (10)
       MTLAttributeFormatChar3Normalized = 11 (11)
       MTLAttributeFormatChar4Normalized = 12 (12)
       MTLAttributeFormatUShort2 = 13 (13)
       MTLAttributeFormatUShort3 = 14 (14)
       MTLAttributeFormatUShort4 = 15 (15)
       MTLAttributeFormatShort2 = 16 (16)
       MTLAttributeFormatShort3 = 17 (17)
       MTLAttributeFormatShort4 = 18 (18)
       MTLAttributeFormatUShort2Normalized = 19 (19)
       MTLAttributeFormatUShort3Normalized = 20 (20)
       MTLAttributeFormatUShort4Normalized = 21 (21)
       MTLAttributeFormatShort2Normalized = 22 (22)
       MTLAttributeFormatShort3Normalized = 23 (23)
       MTLAttributeFormatShort4Normalized = 24 (24)
       MTLAttributeFormatHalf2 = 25 (25)
       MTLAttributeFormatHalf3 = 26 (26)
       MTLAttributeFormatHalf4 = 27 (27)
       MTLAttributeFormatFloat = 28 (28)
       MTLAttributeFormatFloat2 = 29 (29)
       MTLAttributeFormatFloat3 = 30 (30)
       MTLAttributeFormatFloat4 = 31 (31)
       MTLAttributeFormatInt = 32 (32)
       MTLAttributeFormatInt2 = 33 (33)
       MTLAttributeFormatInt3 = 34 (34)
       MTLAttributeFormatInt4 = 35 (35)
       MTLAttributeFormatUInt = 36 (36)
       MTLAttributeFormatUInt2 = 37 (37)
       MTLAttributeFormatUInt3 = 38 (38)
       MTLAttributeFormatUInt4 = 39 (39)
       MTLAttributeFormatInt1010102Normalized = 40 (40)
       MTLAttributeFormatUInt1010102Normalized = 41 (41)
       MTLAttributeFormatUChar4Normalized_BGRA = 42 (42)
       MTLAttributeFormatUChar = 45 (45)
       MTLAttributeFormatChar = 46 (46)
       MTLAttributeFormatUCharNormalized = 47 (47)
       MTLAttributeFormatCharNormalized = 48 (48)
       MTLAttributeFormatUShort = 49 (49)
       MTLAttributeFormatShort = 50 (50)
       MTLAttributeFormatUShortNormalized = 51 (51)
       MTLAttributeFormatShortNormalized = 52 (52)
       MTLAttributeFormatHalf = 53 (53)
       MTLAttributeFormatFloatRG11B10 = 54 (54)
       MTLAttributeFormatFloatRGB9E5 = 55 (55)
   Enum: 'enum NSURLSessionTaskState'[[ long  ]]
       NSURLSessionTaskStateRunning = 0 (0)
       NSURLSessionTaskStateSuspended = 1 (1)
       NSURLSessionTaskStateCanceling = 2 (2)
       NSURLSessionTaskStateCompleted = 3 (3)
   Enum: 'enum NSFileWrapperReadingOptions'[[ ulong  ]]
       NSFileWrapperReadingImmediate = 1 (1)
       NSFileWrapperReadingWithoutMapping = 2 (2)
   Enum: 'enum NSISO8601DateFormatOptions'[[ ulong  ]]
       NSISO8601DateFormatWithYear = 1 (1)
       NSISO8601DateFormatWithMonth = 2 (2)
       NSISO8601DateFormatWithWeekOfYear = 4 (4)
       NSISO8601DateFormatWithDay = 16 (16)
       NSISO8601DateFormatWithTime = 32 (32)
       NSISO8601DateFormatWithTimeZone = 64 (64)
       NSISO8601DateFormatWithSpaceBetweenDateAndTime = 128 (128)
       NSISO8601DateFormatWithDashSeparatorInDate = 256 (256)
       NSISO8601DateFormatWithColonSeparatorInTime = 512 (512)
       NSISO8601DateFormatWithColonSeparatorInTimeZone = 1024 (1024)
       NSISO8601DateFormatWithFractionalSeconds = 2048 (2048)
       NSISO8601DateFormatWithFullDate = 275 (275)
       NSISO8601DateFormatWithFullTime = 1632 (1632)
       NSISO8601DateFormatWithInternetDateTime = 1907 (1907)
   Enum: 'enum MTLPipelineOption'[[ ulong  ]]
       MTLPipelineOptionNone = 0 (0)
       MTLPipelineOptionArgumentInfo = 1 (1)
       MTLPipelineOptionBufferTypeInfo = 2 (2)
       MTLPipelineOptionFailOnBinaryArchiveMiss = 4 (4)
   Enum: 'enum NSGrammaticalCase'[[ long  ]]
       NSGrammaticalCaseNotSet = 0 (0)
       NSGrammaticalCaseNominative = 1 (1)
       NSGrammaticalCaseAccusative = 2 (2)
       NSGrammaticalCaseDative = 3 (3)
       NSGrammaticalCaseGenitive = 4 (4)
       NSGrammaticalCasePrepositional = 5 (5)
       NSGrammaticalCaseAblative = 6 (6)
       NSGrammaticalCaseAdessive = 7 (7)
       NSGrammaticalCaseAllative = 8 (8)
       NSGrammaticalCaseElative = 9 (9)
       NSGrammaticalCaseIllative = 10 (10)
       NSGrammaticalCaseEssive = 11 (11)
       NSGrammaticalCaseInessive = 12 (12)
       NSGrammaticalCaseLocative = 13 (13)
       NSGrammaticalCaseTranslative = 14 (14)
   Enum: 'enum MTLStoreActionOptions'[[ ulong  ]]
       MTLStoreActionOptionNone = 0 (0)
       MTLStoreActionOptionCustomSamplePositions = 1 (1)
   Enum: 'enum NSRelativeDateTimeFormatterStyle'[[ long  ]]
       NSRelativeDateTimeFormatterStyleNumeric = 0 (0)
       NSRelativeDateTimeFormatterStyleNamed = 1 (1)
   Enum: 'enum NSMachPortOptions'[[ ulong  ]]
       NSMachPortDeallocateNone = 0 (0)
       NSMachPortDeallocateSendRight = 1 (1)
       NSMachPortDeallocateReceiveRight = 2 (2)
   Enum: 'enum NSURLSessionWebSocketMessageType'[[ long  ]]
       NSURLSessionWebSocketMessageTypeData = 0 (0)
       NSURLSessionWebSocketMessageTypeString = 1 (1)
   Enum: 'enum NSStreamStatus'[[ ulong  ]]
       NSStreamStatusNotOpen = 0 (0)
       NSStreamStatusOpening = 1 (1)
       NSStreamStatusOpen = 2 (2)
       NSStreamStatusReading = 3 (3)
       NSStreamStatusWriting = 4 (4)
       NSStreamStatusAtEnd = 5 (5)
       NSStreamStatusClosed = 6 (6)
       NSStreamStatusError = 7 (7)
   Enum: 'enum MTLTextureType'[[ ulong  ]]
       MTLTextureType1D = 0 (0)
       MTLTextureType1DArray = 1 (1)
       MTLTextureType2D = 2 (2)
       MTLTextureType2DArray = 3 (3)
       MTLTextureType2DMultisample = 4 (4)
       MTLTextureTypeCube = 5 (5)
       MTLTextureTypeCubeArray = 6 (6)
       MTLTextureType3D = 7 (7)
       MTLTextureType2DMultisampleArray = 8 (8)
       MTLTextureTypeTextureBuffer = 9 (9)
   Enum: 'enum NSGrammaticalGender'[[ long  ]]
       NSGrammaticalGenderNotSet = 0 (0)
       NSGrammaticalGenderFeminine = 1 (1)
       NSGrammaticalGenderMasculine = 2 (2)
       NSGrammaticalGenderNeuter = 3 (3)
   Enum: 'enum NSURLSessionResponseDisposition'[[ long  ]]
       NSURLSessionResponseCancel = 0 (0)
       NSURLSessionResponseAllow = 1 (1)
       NSURLSessionResponseBecomeDownload = 2 (2)
       NSURLSessionResponseBecomeStream = 3 (3)
   Enum: 'enum NSJSONWritingOptions'[[ ulong  ]]
       NSJSONWritingPrettyPrinted = 1 (1)
       NSJSONWritingSortedKeys = 2 (2)
       NSJSONWritingFragmentsAllowed = 4 (4)
       NSJSONWritingWithoutEscapingSlashes = 8 (8)
   Enum: 'enum NSCompoundPredicateType'[[ ulong  ]]
       NSNotPredicateType = 0 (0)
       NSAndPredicateType = 1 (1)
       NSOrPredicateType = 2 (2)
   Enum: 'enum NSFileVersionAddingOptions'[[ ulong  ]]
       NSFileVersionAddingByMoving = 1 (1)
   Enum: 'enum MTLRenderStages'[[ ulong  ]]
       MTLRenderStageVertex = 1 (1)
       MTLRenderStageFragment = 2 (2)
       MTLRenderStageTile = 4 (4)
       MTLRenderStageObject = 8 (8)
       MTLRenderStageMesh = 16 (16)
   Enum: 'enum NSDataSearchOptions'[[ ulong  ]]
       NSDataSearchBackwards = 1 (1)
       NSDataSearchAnchored = 2 (2)
   Enum: 'enum MTLIOStatus'[[ long  ]]
       MTLIOStatusPending = 0 (0)
       MTLIOStatusCancelled = 1 (1)
       MTLIOStatusError = 2 (2)
       MTLIOStatusComplete = 3 (3)
   Enum: 'enum NSDataWritingOptions'[[ ulong  ]]
       NSDataWritingAtomic = 1 (1)
       NSDataWritingWithoutOverwriting = 2 (2)
       NSDataWritingFileProtectionNone = 268435456 (268435456)
       NSDataWritingFileProtectionComplete = 536870912 (536870912)
       NSDataWritingFileProtectionCompleteUnlessOpen = 805306368 (805306368)
       NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication = 1073741824 (1073741824)
       NSDataWritingFileProtectionCompleteWhenUserInactive = 1342177280 (1342177280)
       NSDataWritingFileProtectionMask = 4026531840 (4026531840)
       NSAtomicWrite = 1 (1)
   Enum: 'enum MTLMultisampleDepthResolveFilter'[[ ulong  ]]
       MTLMultisampleDepthResolveFilterSample0 = 0 (0)
       MTLMultisampleDepthResolveFilterMin = 1 (1)
       MTLMultisampleDepthResolveFilterMax = 2 (2)
   Enum: 'enum MTLTriangleFillMode'[[ ulong  ]]
       MTLTriangleFillModeFill = 0 (0)
       MTLTriangleFillModeLines = 1 (1)
   Enum: 'enum MTLFeatureSet'[[ ulong  ]]
       MTLFeatureSet_iOS_GPUFamily1_v1 = 0 (0)
       MTLFeatureSet_iOS_GPUFamily2_v1 = 1 (1)
       MTLFeatureSet_iOS_GPUFamily1_v2 = 2 (2)
       MTLFeatureSet_iOS_GPUFamily2_v2 = 3 (3)
       MTLFeatureSet_iOS_GPUFamily3_v1 = 4 (4)
       MTLFeatureSet_iOS_GPUFamily1_v3 = 5 (5)
       MTLFeatureSet_iOS_GPUFamily2_v3 = 6 (6)
       MTLFeatureSet_iOS_GPUFamily3_v2 = 7 (7)
       MTLFeatureSet_iOS_GPUFamily1_v4 = 8 (8)
       MTLFeatureSet_iOS_GPUFamily2_v4 = 9 (9)
       MTLFeatureSet_iOS_GPUFamily3_v3 = 10 (10)
       MTLFeatureSet_iOS_GPUFamily4_v1 = 11 (11)
       MTLFeatureSet_iOS_GPUFamily1_v5 = 12 (12)
       MTLFeatureSet_iOS_GPUFamily2_v5 = 13 (13)
       MTLFeatureSet_iOS_GPUFamily3_v4 = 14 (14)
       MTLFeatureSet_iOS_GPUFamily4_v2 = 15 (15)
       MTLFeatureSet_iOS_GPUFamily5_v1 = 16 (16)
       MTLFeatureSet_macOS_GPUFamily1_v1 = 10000 (10000)
       MTLFeatureSet_OSX_GPUFamily1_v1 = 10000 (10000)
       MTLFeatureSet_macOS_GPUFamily1_v2 = 10001 (10001)
       MTLFeatureSet_OSX_GPUFamily1_v2 = 10001 (10001)
       MTLFeatureSet_macOS_ReadWriteTextureTier2 = 10002 (10002)
       MTLFeatureSet_OSX_ReadWriteTextureTier2 = 10002 (10002)
       MTLFeatureSet_macOS_GPUFamily1_v3 = 10003 (10003)
       MTLFeatureSet_macOS_GPUFamily1_v4 = 10004 (10004)
       MTLFeatureSet_macOS_GPUFamily2_v1 = 10005 (10005)
       MTLFeatureSet_tvOS_GPUFamily1_v1 = 30000 (30000)
       MTLFeatureSet_TVOS_GPUFamily1_v1 = 30000 (30000)
       MTLFeatureSet_tvOS_GPUFamily1_v2 = 30001 (30001)
       MTLFeatureSet_tvOS_GPUFamily1_v3 = 30002 (30002)
       MTLFeatureSet_tvOS_GPUFamily1_v4 = 30004 (30004)
   Enum: 'enum NSDataCompressionAlgorithm'[[ long  ]]
       NSDataCompressionAlgorithmLZFSE = 0 (0)
       NSDataCompressionAlgorithmLZ4 = 1 (1)
       NSDataCompressionAlgorithmLZMA = 2 (2)
       NSDataCompressionAlgorithmZlib = 3 (3)
   Enum: 'enum MTLCommandBufferErrorOption'[[ ulong  ]]
       MTLCommandBufferErrorOptionNone = 0 (0)
       MTLCommandBufferErrorOptionEncoderExecutionStatus = 1 (1)
   Enum: 'enum MTLHeapType'[[ long  ]]
       MTLHeapTypeAutomatic = 0 (0)
       MTLHeapTypePlacement = 1 (1)
       MTLHeapTypeSparse = 2 (2)
   Enum: 'enum NSMassFormatterUnit'[[ long  ]]
       NSMassFormatterUnitGram = 11 (11)
       NSMassFormatterUnitKilogram = 14 (14)
       NSMassFormatterUnitOunce = 1537 (1537)
       NSMassFormatterUnitPound = 1538 (1538)
       NSMassFormatterUnitStone = 1539 (1539)
   Enum: 'enum NSFileWrapperWritingOptions'[[ ulong  ]]
       NSFileWrapperWritingAtomic = 1 (1)
       NSFileWrapperWritingWithNameUpdating = 2 (2)
   Enum: 'enum NSFileManagerItemReplacementOptions'[[ ulong  ]]
       NSFileManagerItemReplacementUsingNewMetadataOnly = 1 (1)
       NSFileManagerItemReplacementWithoutDeletingBackupItem = 2 (2)
   Enum: 'enum NSGrammaticalNumber'[[ long  ]]
       NSGrammaticalNumberNotSet = 0 (0)
       NSGrammaticalNumberSingular = 1 (1)
       NSGrammaticalNumberZero = 2 (2)
       NSGrammaticalNumberPlural = 3 (3)
       NSGrammaticalNumberPluralTwo = 4 (4)
       NSGrammaticalNumberPluralFew = 5 (5)
       NSGrammaticalNumberPluralMany = 6 (6)
   Enum: 'enum NSURLRequestAttribution'[[ ulong  ]]
       NSURLRequestAttributionDeveloper = 0 (0)
       NSURLRequestAttributionUser = 1 (1)
   Enum: 'enum NSDataBase64DecodingOptions'[[ ulong  ]]
       NSDataBase64DecodingIgnoreUnknownCharacters = 1 (1)
   Enum: 'enum NSLinguisticTaggerOptions'[[ ulong  ]]
       NSLinguisticTaggerOmitWords = 1 (1)
       NSLinguisticTaggerOmitPunctuation = 2 (2)
       NSLinguisticTaggerOmitWhitespace = 4 (4)
       NSLinguisticTaggerOmitOther = 8 (8)
       NSLinguisticTaggerJoinNames = 16 (16)
   Enum: 'enum NSComparisonPredicateModifier'[[ ulong  ]]
       NSDirectPredicateModifier = 0 (0)
       NSAllPredicateModifier = 1 (1)
       NSAnyPredicateModifier = 2 (2)
   Enum: 'enum NSURLRequestNetworkServiceType'[[ ulong  ]]
       NSURLNetworkServiceTypeDefault = 0 (0)
       NSURLNetworkServiceTypeVoIP = 1 (1)
       NSURLNetworkServiceTypeVideo = 2 (2)
       NSURLNetworkServiceTypeBackground = 3 (3)
       NSURLNetworkServiceTypeVoice = 4 (4)
       NSURLNetworkServiceTypeResponsiveData = 6 (6)
       NSURLNetworkServiceTypeAVStreaming = 8 (8)
       NSURLNetworkServiceTypeResponsiveAV = 9 (9)
       NSURLNetworkServiceTypeCallSignaling = 11 (11)
   Enum: 'enum NSPostingStyle'[[ ulong  ]]
       NSPostWhenIdle = 1 (1)
       NSPostASAP = 2 (2)
       NSPostNow = 3 (3)
   Enum: 'enum NSQualityOfService'[[ long  ]]
       NSQualityOfServiceUserInteractive = 33 (33)
       NSQualityOfServiceUserInitiated = 25 (25)
       NSQualityOfServiceUtility = 17 (17)
       NSQualityOfServiceBackground = 9 (9)
       NSQualityOfServiceDefault = 18446744073709551615 (-1)
   Enum: 'enum NSRoundingMode'[[ ulong  ]]
       NSRoundPlain = 0 (0)
       NSRoundDown = 1 (1)
       NSRoundUp = 2 (2)
       NSRoundBankers = 3 (3)
   Enum: 'enum NSCalculationError'[[ ulong  ]]
       NSCalculationNoError = 0 (0)
       NSCalculationLossOfPrecision = 1 (1)
       NSCalculationUnderflow = 2 (2)
       NSCalculationOverflow = 3 (3)
       NSCalculationDivideByZero = 4 (4)
   Enum: 'enum NSJSONReadingOptions'[[ ulong  ]]
       NSJSONReadingMutableContainers = 1 (1)
       NSJSONReadingMutableLeaves = 2 (2)
       NSJSONReadingFragmentsAllowed = 4 (4)
       NSJSONReadingJSON5Allowed = 8 (8)
       NSJSONReadingTopLevelDictionaryAssumed = 16 (16)
       NSJSONReadingAllowFragments = 4 (4)
   Enum: 'enum MTLSamplerMipFilter'[[ ulong  ]]
       MTLSamplerMipFilterNotMipmapped = 0 (0)
       MTLSamplerMipFilterNearest = 1 (1)
       MTLSamplerMipFilterLinear = 2 (2)
   Enum: 'enum NSCollectionChangeType'[[ long  ]]
       NSCollectionChangeInsert = 0 (0)
       NSCollectionChangeRemove = 1 (1)
   Enum: 'enum NSPropertyListMutabilityOptions'[[ ulong  ]]
       NSPropertyListImmutable = 0 (0)
       NSPropertyListMutableContainers = 1 (1)
       NSPropertyListMutableContainersAndLeaves = 2 (2)
   Enum: 'enum NSURLSessionTaskMetricsResourceFetchType'[[ long  ]]
       NSURLSessionTaskMetricsResourceFetchTypeUnknown = 0 (0)
       NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad = 1 (1)
       NSURLSessionTaskMetricsResourceFetchTypeServerPush = 2 (2)
       NSURLSessionTaskMetricsResourceFetchTypeLocalCache = 3 (3)
   Enum: 'enum MTLBlendOperation'[[ ulong  ]]
       MTLBlendOperationAdd = 0 (0)
       MTLBlendOperationSubtract = 1 (1)
       MTLBlendOperationReverseSubtract = 2 (2)
       MTLBlendOperationMin = 3 (3)
       MTLBlendOperationMax = 4 (4)
   Enum: 'enum tls_protocol_version_t'[[ ushort  ]]
       tls_protocol_version_TLSv10 = 769 (769)
       tls_protocol_version_TLSv11 = 770 (770)
       tls_protocol_version_TLSv12 = 771 (771)
       tls_protocol_version_TLSv13 = 772 (772)
       tls_protocol_version_DTLSv10 = 65279 (-257)
       tls_protocol_version_DTLSv12 = 65277 (-259)
   Enum: 'enum MTLAccelerationStructureRefitOptions'[[ ulong  ]]
       MTLAccelerationStructureRefitOptionVertexData = 1 (1)
       MTLAccelerationStructureRefitOptionPerPrimitiveData = 2 (2)
   Enum: 'enum NSDataReadingOptions'[[ ulong  ]]
       NSDataReadingMappedIfSafe = 1 (1)
       NSDataReadingUncached = 2 (2)
       NSDataReadingMappedAlways = 8 (8)
       NSDataReadingMapped = 1 (1)
       NSMappedRead = 1 (1)
       NSUncachedRead = 2 (2)
   Enum: 'enum MTLCounterSamplingPoint'[[ ulong  ]]
       MTLCounterSamplingPointAtStageBoundary = 0 (0)
       MTLCounterSamplingPointAtDrawBoundary = 1 (1)
       MTLCounterSamplingPointAtDispatchBoundary = 2 (2)
       MTLCounterSamplingPointAtTileDispatchBoundary = 3 (3)
       MTLCounterSamplingPointAtBlitBoundary = 4 (4)
   Enum: 'enum NSComparisonResult'[[ long  ]]
       NSOrderedAscending = 18446744073709551615 (-1)
       NSOrderedSame = 0 (0)
       NSOrderedDescending = 1 (1)
   Enum: 'enum NSGrammaticalPerson'[[ long  ]]
       NSGrammaticalPersonNotSet = 0 (0)
       NSGrammaticalPersonFirst = 1 (1)
       NSGrammaticalPersonSecond = 2 (2)
       NSGrammaticalPersonThird = 3 (3)
   Enum: 'enum NSTimeZoneNameStyle'[[ long  ]]
       NSTimeZoneNameStyleStandard = 0 (0)
       NSTimeZoneNameStyleShortStandard = 1 (1)
       NSTimeZoneNameStyleDaylightSaving = 2 (2)
       NSTimeZoneNameStyleShortDaylightSaving = 3 (3)
       NSTimeZoneNameStyleGeneric = 4 (4)
       NSTimeZoneNameStyleShortGeneric = 5 (5)
   Enum: 'enum MTLFunctionLogType'[[ ulong  ]]
       MTLFunctionLogTypeValidation = 0 (0)
   Enum: 'enum MTLArgumentBuffersTier'[[ ulong  ]]
       MTLArgumentBuffersTier1 = 0 (0)
       MTLArgumentBuffersTier2 = 1 (1)
   Enum: 'enum NSHTTPCookieAcceptPolicy'[[ ulong  ]]
       NSHTTPCookieAcceptPolicyAlways = 0 (0)
       NSHTTPCookieAcceptPolicyNever = 1 (1)
       NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2 (2)
   Enum: 'enum NSLengthFormatterUnit'[[ long  ]]
       NSLengthFormatterUnitMillimeter = 8 (8)
       NSLengthFormatterUnitCentimeter = 9 (9)
       NSLengthFormatterUnitMeter = 11 (11)
       NSLengthFormatterUnitKilometer = 14 (14)
       NSLengthFormatterUnitInch = 1281 (1281)
       NSLengthFormatterUnitFoot = 1282 (1282)
       NSLengthFormatterUnitYard = 1283 (1283)
       NSLengthFormatterUnitMile = 1284 (1284)
   Enum: 'enum MTLTessellationControlPointIndexType'[[ ulong  ]]
       MTLTessellationControlPointIndexTypeNone = 0 (0)
       MTLTessellationControlPointIndexTypeUInt16 = 1 (1)
       MTLTessellationControlPointIndexTypeUInt32 = 2 (2)
   Enum: 'enum MTLCurveEndCaps'[[ long  ]]
       MTLCurveEndCapsNone = 0 (0)
       MTLCurveEndCapsDisk = 1 (1)
       MTLCurveEndCapsSphere = 2 (2)
   Enum: 'enum NSAttributedStringMarkdownInterpretedSyntax'[[ long  ]]
       NSAttributedStringMarkdownInterpretedSyntaxFull = 0 (0)
       NSAttributedStringMarkdownInterpretedSyntaxInlineOnly = 1 (1)
       NSAttributedStringMarkdownInterpretedSyntaxInlineOnlyPreservingWhitespace = 2 (2)
   Enum: 'enum MTLSparsePageSize'[[ long  ]]
       MTLSparsePageSize16 = 101 (101)
       MTLSparsePageSize64 = 102 (102)
       MTLSparsePageSize256 = 103 (103)
   Enum: 'enum NSKeyValueSetMutationKind'[[ ulong  ]]
       NSKeyValueUnionSetMutation = 1 (1)
       NSKeyValueMinusSetMutation = 2 (2)
       NSKeyValueIntersectSetMutation = 3 (3)
       NSKeyValueSetSetMutation = 4 (4)
   Enum: 'enum NSItemProviderRepresentationVisibility'[[ long  ]]
       NSItemProviderRepresentationVisibilityAll = 0 (0)
       NSItemProviderRepresentationVisibilityTeam = 1 (1)
       NSItemProviderRepresentationVisibilityGroup = 2 (2)
       NSItemProviderRepresentationVisibilityOwnProcess = 3 (3)
   Enum: 'enum NSRegularExpressionOptions'[[ ulong  ]]
       NSRegularExpressionCaseInsensitive = 1 (1)
       NSRegularExpressionAllowCommentsAndWhitespace = 2 (2)
       NSRegularExpressionIgnoreMetacharacters = 4 (4)
       NSRegularExpressionDotMatchesLineSeparators = 8 (8)
       NSRegularExpressionAnchorsMatchLines = 16 (16)
       NSRegularExpressionUseUnixLineSeparators = 32 (32)
       NSRegularExpressionUseUnicodeWordBoundaries = 64 (64)
   Enum: 'enum NSNotificationCoalescing'[[ ulong  ]]
       NSNotificationNoCoalescing = 0 (0)
       NSNotificationCoalescingOnName = 1 (1)
       NSNotificationCoalescingOnSender = 2 (2)
   Enum: 'enum MTLTextureCompressionType'[[ long  ]]
       MTLTextureCompressionTypeLossless = 0 (0)
       MTLTextureCompressionTypeLossy = 1 (1)
   Enum: 'enum MTLGPUFamily'[[ long  ]]
       MTLGPUFamilyApple1 = 1001 (1001)
       MTLGPUFamilyApple2 = 1002 (1002)
       MTLGPUFamilyApple3 = 1003 (1003)
       MTLGPUFamilyApple4 = 1004 (1004)
       MTLGPUFamilyApple5 = 1005 (1005)
       MTLGPUFamilyApple6 = 1006 (1006)
       MTLGPUFamilyApple7 = 1007 (1007)
       MTLGPUFamilyApple8 = 1008 (1008)
       MTLGPUFamilyApple9 = 1009 (1009)
       MTLGPUFamilyMac1 = 2001 (2001)
       MTLGPUFamilyMac2 = 2002 (2002)
       MTLGPUFamilyCommon1 = 3001 (3001)
       MTLGPUFamilyCommon2 = 3002 (3002)
       MTLGPUFamilyCommon3 = 3003 (3003)
       MTLGPUFamilyMacCatalyst1 = 4001 (4001)
       MTLGPUFamilyMacCatalyst2 = 4002 (4002)
       MTLGPUFamilyMetal3 = 5001 (5001)
   Enum: 'enum MTLIntersectionFunctionSignature'[[ ulong  ]]
       MTLIntersectionFunctionSignatureNone = 0 (0)
       MTLIntersectionFunctionSignatureInstancing = 1 (1)
       MTLIntersectionFunctionSignatureTriangleData = 2 (2)
       MTLIntersectionFunctionSignatureWorldSpaceData = 4 (4)
       MTLIntersectionFunctionSignatureInstanceMotion = 8 (8)
       MTLIntersectionFunctionSignaturePrimitiveMotion = 16 (16)
       MTLIntersectionFunctionSignatureExtendedLimits = 32 (32)
       MTLIntersectionFunctionSignatureMaxLevels = 64 (64)
       MTLIntersectionFunctionSignatureCurveData = 128 (128)
   Enum: 'enum NSGrammaticalDetermination'[[ long  ]]
       NSGrammaticalDeterminationNotSet = 0 (0)
       NSGrammaticalDeterminationIndependent = 1 (1)
       NSGrammaticalDeterminationDependent = 2 (2)
   Enum: 'enum MTLSamplerBorderColor'[[ ulong  ]]
       MTLSamplerBorderColorTransparentBlack = 0 (0)
       MTLSamplerBorderColorOpaqueBlack = 1 (1)
       MTLSamplerBorderColorOpaqueWhite = 2 (2)
   Enum: 'enum MTLDataType'[[ ulong  ]]
       MTLDataTypeNone = 0 (0)
       MTLDataTypeStruct = 1 (1)
       MTLDataTypeArray = 2 (2)
       MTLDataTypeFloat = 3 (3)
       MTLDataTypeFloat2 = 4 (4)
       MTLDataTypeFloat3 = 5 (5)
       MTLDataTypeFloat4 = 6 (6)
       MTLDataTypeFloat2x2 = 7 (7)
       MTLDataTypeFloat2x3 = 8 (8)
       MTLDataTypeFloat2x4 = 9 (9)
       MTLDataTypeFloat3x2 = 10 (10)
       MTLDataTypeFloat3x3 = 11 (11)
       MTLDataTypeFloat3x4 = 12 (12)
       MTLDataTypeFloat4x2 = 13 (13)
       MTLDataTypeFloat4x3 = 14 (14)
       MTLDataTypeFloat4x4 = 15 (15)
       MTLDataTypeHalf = 16 (16)
       MTLDataTypeHalf2 = 17 (17)
       MTLDataTypeHalf3 = 18 (18)
       MTLDataTypeHalf4 = 19 (19)
       MTLDataTypeHalf2x2 = 20 (20)
       MTLDataTypeHalf2x3 = 21 (21)
       MTLDataTypeHalf2x4 = 22 (22)
       MTLDataTypeHalf3x2 = 23 (23)
       MTLDataTypeHalf3x3 = 24 (24)
       MTLDataTypeHalf3x4 = 25 (25)
       MTLDataTypeHalf4x2 = 26 (26)
       MTLDataTypeHalf4x3 = 27 (27)
       MTLDataTypeHalf4x4 = 28 (28)
       MTLDataTypeInt = 29 (29)
       MTLDataTypeInt2 = 30 (30)
       MTLDataTypeInt3 = 31 (31)
       MTLDataTypeInt4 = 32 (32)
       MTLDataTypeUInt = 33 (33)
       MTLDataTypeUInt2 = 34 (34)
       MTLDataTypeUInt3 = 35 (35)
       MTLDataTypeUInt4 = 36 (36)
       MTLDataTypeShort = 37 (37)
       MTLDataTypeShort2 = 38 (38)
       MTLDataTypeShort3 = 39 (39)
       MTLDataTypeShort4 = 40 (40)
       MTLDataTypeUShort = 41 (41)
       MTLDataTypeUShort2 = 42 (42)
       MTLDataTypeUShort3 = 43 (43)
       MTLDataTypeUShort4 = 44 (44)
       MTLDataTypeChar = 45 (45)
       MTLDataTypeChar2 = 46 (46)
       MTLDataTypeChar3 = 47 (47)
       MTLDataTypeChar4 = 48 (48)
       MTLDataTypeUChar = 49 (49)
       MTLDataTypeUChar2 = 50 (50)
       MTLDataTypeUChar3 = 51 (51)
       MTLDataTypeUChar4 = 52 (52)
       MTLDataTypeBool = 53 (53)
       MTLDataTypeBool2 = 54 (54)
       MTLDataTypeBool3 = 55 (55)
       MTLDataTypeBool4 = 56 (56)
       MTLDataTypeTexture = 58 (58)
       MTLDataTypeSampler = 59 (59)
       MTLDataTypePointer = 60 (60)
       MTLDataTypeR8Unorm = 62 (62)
       MTLDataTypeR8Snorm = 63 (63)
       MTLDataTypeR16Unorm = 64 (64)
       MTLDataTypeR16Snorm = 65 (65)
       MTLDataTypeRG8Unorm = 66 (66)
       MTLDataTypeRG8Snorm = 67 (67)
       MTLDataTypeRG16Unorm = 68 (68)
       MTLDataTypeRG16Snorm = 69 (69)
       MTLDataTypeRGBA8Unorm = 70 (70)
       MTLDataTypeRGBA8Unorm_sRGB = 71 (71)
       MTLDataTypeRGBA8Snorm = 72 (72)
       MTLDataTypeRGBA16Unorm = 73 (73)
       MTLDataTypeRGBA16Snorm = 74 (74)
       MTLDataTypeRGB10A2Unorm = 75 (75)
       MTLDataTypeRG11B10Float = 76 (76)
       MTLDataTypeRGB9E5Float = 77 (77)
       MTLDataTypeRenderPipeline = 78 (78)
       MTLDataTypeComputePipeline = 79 (79)
       MTLDataTypeIndirectCommandBuffer = 80 (80)
       MTLDataTypeLong = 81 (81)
       MTLDataTypeLong2 = 82 (82)
       MTLDataTypeLong3 = 83 (83)
       MTLDataTypeLong4 = 84 (84)
       MTLDataTypeULong = 85 (85)
       MTLDataTypeULong2 = 86 (86)
       MTLDataTypeULong3 = 87 (87)
       MTLDataTypeULong4 = 88 (88)
       MTLDataTypeVisibleFunctionTable = 115 (115)
       MTLDataTypeIntersectionFunctionTable = 116 (116)
       MTLDataTypePrimitiveAccelerationStructure = 117 (117)
       MTLDataTypeInstanceAccelerationStructure = 118 (118)
       MTLDataTypeBFloat = 121 (121)
       MTLDataTypeBFloat2 = 122 (122)
       MTLDataTypeBFloat3 = 123 (123)
       MTLDataTypeBFloat4 = 124 (124)
   Enum: 'enum NSAttributedStringEnumerationOptions'[[ ulong  ]]
       NSAttributedStringEnumerationReverse = 2 (2)
       NSAttributedStringEnumerationLongestEffectiveRangeNotRequired = 1048576 (1048576)
   Enum: 'enum SSLProtocol'[[ int  ]]
       kSSLProtocolUnknown = 0 (0)
       kTLSProtocol1 = 4 (4)
       kTLSProtocol11 = 7 (7)
       kTLSProtocol12 = 8 (8)
       kDTLSProtocol1 = 9 (9)
       kTLSProtocol13 = 10 (10)
       kDTLSProtocol12 = 11 (11)
       kTLSProtocolMaxSupported = 999 (999)
       kSSLProtocol2 = 1 (1)
       kSSLProtocol3 = 2 (2)
       kSSLProtocol3Only = 3 (3)
       kTLSProtocol1Only = 5 (5)
       kSSLProtocolAll = 6 (6)
   Enum: 'enum MTLReadWriteTextureTier'[[ ulong  ]]
       MTLReadWriteTextureTierNone = 0 (0)
       MTLReadWriteTextureTier1 = 1 (1)
       MTLReadWriteTextureTier2 = 2 (2)
   Enum: 'enum MTLCompareFunction'[[ ulong  ]]
       MTLCompareFunctionNever = 0 (0)
       MTLCompareFunctionLess = 1 (1)
       MTLCompareFunctionEqual = 2 (2)
       MTLCompareFunctionLessEqual = 3 (3)
       MTLCompareFunctionGreater = 4 (4)
       MTLCompareFunctionNotEqual = 5 (5)
       MTLCompareFunctionGreaterEqual = 6 (6)
       MTLCompareFunctionAlways = 7 (7)
   Enum: 'enum MTLStepFunction'[[ ulong  ]]
       MTLStepFunctionConstant = 0 (0)
       MTLStepFunctionPerVertex = 1 (1)
       MTLStepFunctionPerInstance = 2 (2)
       MTLStepFunctionPerPatch = 3 (3)
       MTLStepFunctionPerPatchControlPoint = 4 (4)
       MTLStepFunctionThreadPositionInGridX = 5 (5)
       MTLStepFunctionThreadPositionInGridY = 6 (6)
       MTLStepFunctionThreadPositionInGridXIndexed = 7 (7)
       MTLStepFunctionThreadPositionInGridYIndexed = 8 (8)
   Enum: 'enum NSURLCredentialPersistence'[[ ulong  ]]
       NSURLCredentialPersistenceNone = 0 (0)
       NSURLCredentialPersistenceForSession = 1 (1)
       NSURLCredentialPersistencePermanent = 2 (2)
       NSURLCredentialPersistenceSynchronizable = 3 (3)
   Enum: 'enum NSKeyValueChange'[[ ulong  ]]
       NSKeyValueChangeSetting = 1 (1)
       NSKeyValueChangeInsertion = 2 (2)
       NSKeyValueChangeRemoval = 3 (3)
       NSKeyValueChangeReplacement = 4 (4)
   Enum: 'enum NSURLSessionWebSocketCloseCode'[[ long  ]]
       NSURLSessionWebSocketCloseCodeInvalid = 0 (0)
       NSURLSessionWebSocketCloseCodeNormalClosure = 1000 (1000)
       NSURLSessionWebSocketCloseCodeGoingAway = 1001 (1001)
       NSURLSessionWebSocketCloseCodeProtocolError = 1002 (1002)
       NSURLSessionWebSocketCloseCodeUnsupportedData = 1003 (1003)
       NSURLSessionWebSocketCloseCodeNoStatusReceived = 1005 (1005)
       NSURLSessionWebSocketCloseCodeAbnormalClosure = 1006 (1006)
       NSURLSessionWebSocketCloseCodeInvalidFramePayloadData = 1007 (1007)
       NSURLSessionWebSocketCloseCodePolicyViolation = 1008 (1008)
       NSURLSessionWebSocketCloseCodeMessageTooBig = 1009 (1009)
       NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing = 1010 (1010)
       NSURLSessionWebSocketCloseCodeInternalServerError = 1011 (1011)
       NSURLSessionWebSocketCloseCodeTLSHandshakeFailure = 1015 (1015)
   Enum: 'enum MTLPurgeableState'[[ ulong  ]]
       MTLPurgeableStateKeepCurrent = 1 (1)
       MTLPurgeableStateNonVolatile = 2 (2)
       MTLPurgeableStateVolatile = 3 (3)
       MTLPurgeableStateEmpty = 4 (4)
   Enum: 'enum MTLTextureSwizzle'[[ uchar  ]]
       MTLTextureSwizzleZero = 0 (0)
       MTLTextureSwizzleOne = 1 (1)
       MTLTextureSwizzleRed = 2 (2)
       MTLTextureSwizzleGreen = 3 (3)
       MTLTextureSwizzleBlue = 4 (4)
       MTLTextureSwizzleAlpha = 5 (5)
   Enum: 'enum MTLArgumentType'[[ ulong  ]]
       MTLArgumentTypeBuffer = 0 (0)
       MTLArgumentTypeThreadgroupMemory = 1 (1)
       MTLArgumentTypeTexture = 2 (2)
       MTLArgumentTypeSampler = 3 (3)
       MTLArgumentTypeImageblockData = 16 (16)
       MTLArgumentTypeImageblock = 17 (17)
       MTLArgumentTypeVisibleFunctionTable = 24 (24)
       MTLArgumentTypePrimitiveAccelerationStructure = 25 (25)
       MTLArgumentTypeInstanceAccelerationStructure = 26 (26)
       MTLArgumentTypeIntersectionFunctionTable = 27 (27)
   Enum: 'enum NSCalendarOptions'[[ ulong  ]]
       NSCalendarWrapComponents = 1 (1)
       NSCalendarMatchStrictly = 2 (2)
       NSCalendarSearchBackwards = 4 (4)
       NSCalendarMatchPreviousTimePreservingSmallerUnits = 256 (256)
       NSCalendarMatchNextTimePreservingSmallerUnits = 512 (512)
       NSCalendarMatchNextTime = 1024 (1024)
       NSCalendarMatchFirst = 4096 (4096)
       NSCalendarMatchLast = 8192 (8192)
   Enum: 'enum NSPropertyListFormat'[[ ulong  ]]
       NSPropertyListOpenStepFormat = 1 (1)
       NSPropertyListXMLFormat_v1_0 = 100 (100)
       NSPropertyListBinaryFormat_v1_0 = 200 (200)
   Enum: 'enum NSNumberFormatterStyle'[[ ulong  ]]
       NSNumberFormatterNoStyle = 0 (0)
       NSNumberFormatterDecimalStyle = 1 (1)
       NSNumberFormatterCurrencyStyle = 2 (2)
       NSNumberFormatterPercentStyle = 3 (3)
       NSNumberFormatterScientificStyle = 4 (4)
       NSNumberFormatterSpellOutStyle = 5 (5)
       NSNumberFormatterOrdinalStyle = 6 (6)
       NSNumberFormatterCurrencyISOCodeStyle = 8 (8)
       NSNumberFormatterCurrencyPluralStyle = 9 (9)
       NSNumberFormatterCurrencyAccountingStyle = 10 (10)
   Enum: 'enum NSFileVersionReplacingOptions'[[ ulong  ]]
       NSFileVersionReplacingByMoving = 1 (1)
   Enum: 'enum MTLIOCompressionMethod'[[ long  ]]
       MTLIOCompressionMethodZlib = 0 (0)
       MTLIOCompressionMethodLZFSE = 1 (1)
       MTLIOCompressionMethodLZ4 = 2 (2)
       MTLIOCompressionMethodLZMA = 3 (3)
       MTLIOCompressionMethodLZBitmap = 4 (4)
   Enum: 'enum MTLMutability'[[ ulong  ]]
       MTLMutabilityDefault = 0 (0)
       MTLMutabilityMutable = 1 (1)
       MTLMutabilityImmutable = 2 (2)
   Enum: 'enum MTLCurveType'[[ long  ]]
       MTLCurveTypeRound = 0 (0)
       MTLCurveTypeFlat = 1 (1)
   Enum: 'enum MTLTessellationFactorStepFunction'[[ ulong  ]]
       MTLTessellationFactorStepFunctionConstant = 0 (0)
       MTLTessellationFactorStepFunctionPerPatch = 1 (1)
       MTLTessellationFactorStepFunctionPerInstance = 2 (2)
       MTLTessellationFactorStepFunctionPerPatchAndPerInstance = 3 (3)
   Enum: 'enum NSOrderedCollectionDifferenceCalculationOptions'[[ ulong  ]]
       NSOrderedCollectionDifferenceCalculationOmitInsertedObjects = 1 (1)
       NSOrderedCollectionDifferenceCalculationOmitRemovedObjects = 2 (2)
       NSOrderedCollectionDifferenceCalculationInferMoves = 4 (4)
   Enum: 'enum NSXPCConnectionOptions'[[ ulong  ]]
       NSXPCConnectionPrivileged = 4096 (4096)
   Enum: 'enum MTLCurveBasis'[[ long  ]]
       MTLCurveBasisBSpline = 0 (0)
       MTLCurveBasisCatmullRom = 1 (1)
       MTLCurveBasisLinear = 2 (2)
       MTLCurveBasisBezier = 3 (3)
   Enum: 'enum NSDateIntervalFormatterStyle'[[ ulong  ]]
       NSDateIntervalFormatterNoStyle = 0 (0)
       NSDateIntervalFormatterShortStyle = 1 (1)
       NSDateIntervalFormatterMediumStyle = 2 (2)
       NSDateIntervalFormatterLongStyle = 3 (3)
       NSDateIntervalFormatterFullStyle = 4 (4)
   Enum: 'enum NSSearchPathDomainMask'[[ ulong  ]]
       NSUserDomainMask = 1 (1)
       NSLocalDomainMask = 2 (2)
       NSNetworkDomainMask = 4 (4)
       NSSystemDomainMask = 8 (8)
       NSAllDomainsMask = 65535 (65535)
   Enum: 'enum NSAttributedStringFormattingOptions'[[ ulong  ]]
       NSAttributedStringFormattingInsertArgumentAttributesWithoutMerging = 1 (1)
       NSAttributedStringFormattingApplyReplacementIndexAttribute = 2 (2)
   Enum: 'enum MTLPrimitiveTopologyClass'[[ ulong  ]]
       MTLPrimitiveTopologyClassUnspecified = 0 (0)
       MTLPrimitiveTopologyClassPoint = 1 (1)
       MTLPrimitiveTopologyClassLine = 2 (2)
       MTLPrimitiveTopologyClassTriangle = 3 (3)
   Enum: 'enum NSGrammaticalDefiniteness'[[ long  ]]
       NSGrammaticalDefinitenessNotSet = 0 (0)
       NSGrammaticalDefinitenessIndefinite = 1 (1)
       NSGrammaticalDefinitenessDefinite = 2 (2)
   Enum: 'enum MTLAccelerationStructureInstanceDescriptorType'[[ ulong  ]]
       MTLAccelerationStructureInstanceDescriptorTypeDefault = 0 (0)
       MTLAccelerationStructureInstanceDescriptorTypeUserID = 1 (1)
       MTLAccelerationStructureInstanceDescriptorTypeMotion = 2 (2)
       MTLAccelerationStructureInstanceDescriptorTypeIndirect = 3 (3)
       MTLAccelerationStructureInstanceDescriptorTypeIndirectMotion = 4 (4)
   Enum: 'enum MTLIOCommandQueueType'[[ long  ]]
       MTLIOCommandQueueTypeConcurrent = 0 (0)
       MTLIOCommandQueueTypeSerial = 1 (1)
   Enum: 'enum NSURLBookmarkResolutionOptions'[[ ulong  ]]
       NSURLBookmarkResolutionWithoutUI = 256 (256)
       NSURLBookmarkResolutionWithoutMounting = 512 (512)
       NSURLBookmarkResolutionWithSecurityScope = 1024 (1024)
       NSURLBookmarkResolutionWithoutImplicitStartAccessing = 32768 (32768)
   Enum: 'enum NSNumberFormatterRoundingMode'[[ ulong  ]]
       NSNumberFormatterRoundCeiling = 0 (0)
       NSNumberFormatterRoundFloor = 1 (1)
       NSNumberFormatterRoundDown = 2 (2)
       NSNumberFormatterRoundUp = 3 (3)
       NSNumberFormatterRoundHalfEven = 4 (4)
       NSNumberFormatterRoundHalfDown = 5 (5)
       NSNumberFormatterRoundHalfUp = 6 (6)
   Enum: 'enum MTLPrimitiveType'[[ ulong  ]]
       MTLPrimitiveTypePoint = 0 (0)
       MTLPrimitiveTypeLine = 1 (1)
       MTLPrimitiveTypeLineStrip = 2 (2)
       MTLPrimitiveTypeTriangle = 3 (3)
       MTLPrimitiveTypeTriangleStrip = 4 (4)
   Enum: 'enum NSDateFormatterStyle'[[ ulong  ]]
       NSDateFormatterNoStyle = 0 (0)
       NSDateFormatterShortStyle = 1 (1)
       NSDateFormatterMediumStyle = 2 (2)
       NSDateFormatterLongStyle = 3 (3)
       NSDateFormatterFullStyle = 4 (4)
   Enum: 'enum NSVolumeEnumerationOptions'[[ ulong  ]]
       NSVolumeEnumerationSkipHiddenVolumes = 2 (2)
       NSVolumeEnumerationProduceFileReferenceURLs = 4 (4)
   Enum: 'enum MTLCaptureDestination'[[ long  ]]
       MTLCaptureDestinationDeveloperTools = 1 (1)
       MTLCaptureDestinationGPUTraceDocument = 2 (2)
   Enum: 'enum NSBinarySearchingOptions'[[ ulong  ]]
       NSBinarySearchingFirstEqual = 256 (256)
       NSBinarySearchingLastEqual = 512 (512)
       NSBinarySearchingInsertionIndex = 1024 (1024)
   Enum: 'enum MTLCompileSymbolVisibility'[[ long  ]]
       MTLCompileSymbolVisibilityDefault = 0 (0)
       MTLCompileSymbolVisibilityHidden = 1 (1)
   Enum: 'enum NSURLSessionAuthChallengeDisposition'[[ long  ]]
       NSURLSessionAuthChallengeUseCredential = 0 (0)
       NSURLSessionAuthChallengePerformDefaultHandling = 1 (1)
       NSURLSessionAuthChallengeCancelAuthenticationChallenge = 2 (2)
       NSURLSessionAuthChallengeRejectProtectionSpace = 3 (3)
   Enum: 'enum MTLSparseTextureRegionAlignmentMode'[[ ulong  ]]
       MTLSparseTextureRegionAlignmentModeOutward = 0 (0)
       MTLSparseTextureRegionAlignmentModeInward = 1 (1)
   Enum: 'enum MTLFunctionOptions'[[ ulong  ]]
       MTLFunctionOptionNone = 0 (0)
       MTLFunctionOptionCompileToBinary = 1 (1)
       MTLFunctionOptionStoreFunctionInMetalScript = 2 (2)
   Enum: 'enum NSOperationQueuePriority'[[ long  ]]
       NSOperationQueuePriorityVeryLow = 18446744073709551608 (-8)
       NSOperationQueuePriorityLow = 18446744073709551612 (-4)
       NSOperationQueuePriorityNormal = 0 (0)
       NSOperationQueuePriorityHigh = 4 (4)
       NSOperationQueuePriorityVeryHigh = 8 (8)
   Enum: 'enum MTLSparseTextureMappingMode'[[ ulong  ]]
       MTLSparseTextureMappingModeMap = 0 (0)
       MTLSparseTextureMappingModeUnmap = 1 (1)
   Enum: 'enum MTLStorageMode'[[ ulong  ]]
       MTLStorageModeShared = 0 (0)
       MTLStorageModeManaged = 1 (1)
       MTLStorageModePrivate = 2 (2)
       MTLStorageModeMemoryless = 3 (3)
   Enum: 'enum NSURLSessionTaskMetricsDomainResolutionProtocol'[[ long  ]]
       NSURLSessionTaskMetricsDomainResolutionProtocolUnknown = 0 (0)
       NSURLSessionTaskMetricsDomainResolutionProtocolUDP = 1 (1)
       NSURLSessionTaskMetricsDomainResolutionProtocolTCP = 2 (2)
       NSURLSessionTaskMetricsDomainResolutionProtocolTLS = 3 (3)
       NSURLSessionTaskMetricsDomainResolutionProtocolHTTPS = 4 (4)
   Enum: 'enum MTLAccelerationStructureUsage'[[ ulong  ]]
       MTLAccelerationStructureUsageNone = 0 (0)
       MTLAccelerationStructureUsageRefit = 1 (1)
       MTLAccelerationStructureUsagePreferFastBuild = 2 (2)
       MTLAccelerationStructureUsageExtendedLimits = 4 (4)
   Enum: 'enum NSFormattingContext'[[ long  ]]
       NSFormattingContextUnknown = 0 (0)
       NSFormattingContextDynamic = 1 (1)
       NSFormattingContextStandalone = 2 (2)
       NSFormattingContextListItem = 3 (3)
       NSFormattingContextBeginningOfSentence = 4 (4)
       NSFormattingContextMiddleOfSentence = 5 (5)
   Enum: 'enum MTLIndexType'[[ ulong  ]]
       MTLIndexTypeUInt16 = 0 (0)
       MTLIndexTypeUInt32 = 1 (1)
   Enum: 'enum MTLCPUCacheMode'[[ ulong  ]]
       MTLCPUCacheModeDefaultCache = 0 (0)
       MTLCPUCacheModeWriteCombined = 1 (1)
   Enum: 'enum MTLVisibilityResultMode'[[ ulong  ]]
       MTLVisibilityResultModeDisabled = 0 (0)
       MTLVisibilityResultModeBoolean = 1 (1)
       MTLVisibilityResultModeCounting = 2 (2)
   Enum: 'enum MTLPatchType'[[ ulong  ]]
       MTLPatchTypeNone = 0 (0)
       MTLPatchTypeTriangle = 1 (1)
       MTLPatchTypeQuad = 2 (2)
   Enum: 'enum MTLStoreAction'[[ ulong  ]]
       MTLStoreActionDontCare = 0 (0)
       MTLStoreActionStore = 1 (1)
       MTLStoreActionMultisampleResolve = 2 (2)
       MTLStoreActionStoreAndMultisampleResolve = 3 (3)
       MTLStoreActionUnknown = 4 (4)
       MTLStoreActionCustomSampleDepthStore = 5 (5)
   Enum: 'enum NSRelativeDateTimeFormatterUnitsStyle'[[ long  ]]
       NSRelativeDateTimeFormatterUnitsStyleFull = 0 (0)
       NSRelativeDateTimeFormatterUnitsStyleSpellOut = 1 (1)
       NSRelativeDateTimeFormatterUnitsStyleShort = 2 (2)
       NSRelativeDateTimeFormatterUnitsStyleAbbreviated = 3 (3)
   Enum: 'enum NSProcessInfoThermalState'[[ long  ]]
       NSProcessInfoThermalStateNominal = 0 (0)
       NSProcessInfoThermalStateFair = 1 (1)
       NSProcessInfoThermalStateSerious = 2 (2)
       NSProcessInfoThermalStateCritical = 3 (3)
   Enum: 'enum NSFormattingUnitStyle'[[ long  ]]
       NSFormattingUnitStyleShort = 1 (1)
       NSFormattingUnitStyleMedium = 2 (2)
       NSFormattingUnitStyleLong = 3 (3)
   Enum: 'enum MTLIndirectCommandType'[[ ulong  ]]
       MTLIndirectCommandTypeDraw = 1 (1)
       MTLIndirectCommandTypeDrawIndexed = 2 (2)
       MTLIndirectCommandTypeDrawPatches = 4 (4)
       MTLIndirectCommandTypeDrawIndexedPatches = 8 (8)
       MTLIndirectCommandTypeConcurrentDispatch = 32 (32)
       MTLIndirectCommandTypeConcurrentDispatchThreads = 64 (64)
       MTLIndirectCommandTypeDrawMeshThreadgroups = 128 (128)
       MTLIndirectCommandTypeDrawMeshThreads = 256 (256)
   Enum: 'enum NSStringCompareOptions'[[ ulong  ]]
       NSCaseInsensitiveSearch = 1 (1)
       NSLiteralSearch = 2 (2)
       NSBackwardsSearch = 4 (4)
       NSAnchoredSearch = 8 (8)
       NSNumericSearch = 64 (64)
       NSDiacriticInsensitiveSearch = 128 (128)
       NSWidthInsensitiveSearch = 256 (256)
       NSForcedOrderingSearch = 512 (512)
       NSRegularExpressionSearch = 1024 (1024)
   Enum: 'enum NSEnergyFormatterUnit'[[ long  ]]
       NSEnergyFormatterUnitJoule = 11 (11)
       NSEnergyFormatterUnitKilojoule = 14 (14)
       NSEnergyFormatterUnitCalorie = 1793 (1793)
       NSEnergyFormatterUnitKilocalorie = 1794 (1794)
   Enum: 'enum NSStringEncodingConversionOptions'[[ ulong  ]]
       NSStringEncodingConversionAllowLossy = 1 (1)
       NSStringEncodingConversionExternalRepresentation = 2 (2)
   Enum: 'enum NSByteCountFormatterCountStyle'[[ long  ]]
       NSByteCountFormatterCountStyleFile = 0 (0)
       NSByteCountFormatterCountStyleMemory = 1 (1)
       NSByteCountFormatterCountStyleDecimal = 2 (2)
       NSByteCountFormatterCountStyleBinary = 3 (3)
   Enum: 'enum NSNumberFormatterPadPosition'[[ ulong  ]]
       NSNumberFormatterPadBeforePrefix = 0 (0)
       NSNumberFormatterPadAfterPrefix = 1 (1)
       NSNumberFormatterPadBeforeSuffix = 2 (2)
       NSNumberFormatterPadAfterSuffix = 3 (3)
   Enum: 'enum NSExpressionType'[[ ulong  ]]
       NSConstantValueExpressionType = 0 (0)
       NSEvaluatedObjectExpressionType = 1 (1)
       NSVariableExpressionType = 2 (2)
       NSKeyPathExpressionType = 3 (3)
       NSFunctionExpressionType = 4 (4)
       NSUnionSetExpressionType = 5 (5)
       NSIntersectSetExpressionType = 6 (6)
       NSMinusSetExpressionType = 7 (7)
       NSSubqueryExpressionType = 13 (13)
       NSAggregateExpressionType = 14 (14)
       NSAnyKeyExpressionType = 15 (15)
       NSBlockExpressionType = 19 (19)
       NSConditionalExpressionType = 20 (20)
   Enum: 'enum NSXMLParserExternalEntityResolvingPolicy'[[ ulong  ]]
       NSXMLParserResolveExternalEntitiesNever = 0 (0)
       NSXMLParserResolveExternalEntitiesNoNetwork = 1 (1)
       NSXMLParserResolveExternalEntitiesSameOriginOnly = 2 (2)
       NSXMLParserResolveExternalEntitiesAlways = 3 (3)
   Enum: 'enum NSPointerFunctionsOptions'[[ ulong  ]]
       NSPointerFunctionsStrongMemory = 0 (0)
       NSPointerFunctionsZeroingWeakMemory = 1 (1)
       NSPointerFunctionsOpaqueMemory = 2 (2)
       NSPointerFunctionsMallocMemory = 3 (3)
       NSPointerFunctionsMachVirtualMemory = 4 (4)
       NSPointerFunctionsWeakMemory = 5 (5)
       NSPointerFunctionsObjectPersonality = 0 (0)
       NSPointerFunctionsOpaquePersonality = 256 (256)
       NSPointerFunctionsObjectPointerPersonality = 512 (512)
       NSPointerFunctionsCStringPersonality = 768 (768)
       NSPointerFunctionsStructPersonality = 1024 (1024)
       NSPointerFunctionsIntegerPersonality = 1280 (1280)
       NSPointerFunctionsCopyIn = 65536 (65536)
   Enum: 'enum NSDateComponentsFormatterZeroFormattingBehavior'[[ ulong  ]]
       NSDateComponentsFormatterZeroFormattingBehaviorNone = 0 (0)
       NSDateComponentsFormatterZeroFormattingBehaviorDefault = 1 (1)
       NSDateComponentsFormatterZeroFormattingBehaviorDropLeading = 2 (2)
       NSDateComponentsFormatterZeroFormattingBehaviorDropMiddle = 4 (4)
       NSDateComponentsFormatterZeroFormattingBehaviorDropTrailing = 8 (8)
       NSDateComponentsFormatterZeroFormattingBehaviorDropAll = 14 (14)
       NSDateComponentsFormatterZeroFormattingBehaviorPad = 65536 (65536)
   Enum: 'enum NSFileCoordinatorWritingOptions'[[ ulong  ]]
       NSFileCoordinatorWritingForDeleting = 1 (1)
       NSFileCoordinatorWritingForMoving = 2 (2)
       NSFileCoordinatorWritingForMerging = 4 (4)
       NSFileCoordinatorWritingForReplacing = 8 (8)
       NSFileCoordinatorWritingContentIndependentMetadataOnly = 16 (16)
   Enum: 'enum MTLCommandEncoderErrorState'[[ long  ]]
       MTLCommandEncoderErrorStateUnknown = 0 (0)
       MTLCommandEncoderErrorStateCompleted = 1 (1)
       MTLCommandEncoderErrorStateAffected = 2 (2)
       MTLCommandEncoderErrorStatePending = 3 (3)
       MTLCommandEncoderErrorStateFaulted = 4 (4)
   Enum: 'enum MTLCommandBufferStatus'[[ ulong  ]]
       MTLCommandBufferStatusNotEnqueued = 0 (0)
       MTLCommandBufferStatusEnqueued = 1 (1)
       MTLCommandBufferStatusCommitted = 2 (2)
       MTLCommandBufferStatusScheduled = 3 (3)
       MTLCommandBufferStatusCompleted = 4 (4)
       MTLCommandBufferStatusError = 5 (5)
   Enum: 'enum MTLBlendFactor'[[ ulong  ]]
       MTLBlendFactorZero = 0 (0)
       MTLBlendFactorOne = 1 (1)
       MTLBlendFactorSourceColor = 2 (2)
       MTLBlendFactorOneMinusSourceColor = 3 (3)
       MTLBlendFactorSourceAlpha = 4 (4)
       MTLBlendFactorOneMinusSourceAlpha = 5 (5)
       MTLBlendFactorDestinationColor = 6 (6)
       MTLBlendFactorOneMinusDestinationColor = 7 (7)
       MTLBlendFactorDestinationAlpha = 8 (8)
       MTLBlendFactorOneMinusDestinationAlpha = 9 (9)
       MTLBlendFactorSourceAlphaSaturated = 10 (10)
       MTLBlendFactorBlendColor = 11 (11)
       MTLBlendFactorOneMinusBlendColor = 12 (12)
       MTLBlendFactorBlendAlpha = 13 (13)
       MTLBlendFactorOneMinusBlendAlpha = 14 (14)
       MTLBlendFactorSource1Color = 15 (15)
       MTLBlendFactorOneMinusSource1Color = 16 (16)
       MTLBlendFactorSource1Alpha = 17 (17)
       MTLBlendFactorOneMinusSource1Alpha = 18 (18)
   Enum: 'enum MTLMotionBorderMode'[[ uint  ]]
       MTLMotionBorderModeClamp = 0 (0)
       MTLMotionBorderModeVanish = 1 (1)
   Enum: 'enum NSGrammaticalPartOfSpeech'[[ long  ]]
       NSGrammaticalPartOfSpeechNotSet = 0 (0)
       NSGrammaticalPartOfSpeechDeterminer = 1 (1)
       NSGrammaticalPartOfSpeechPronoun = 2 (2)
       NSGrammaticalPartOfSpeechLetter = 3 (3)
       NSGrammaticalPartOfSpeechAdverb = 4 (4)
       NSGrammaticalPartOfSpeechParticle = 5 (5)
       NSGrammaticalPartOfSpeechAdjective = 6 (6)
       NSGrammaticalPartOfSpeechAdposition = 7 (7)
       NSGrammaticalPartOfSpeechVerb = 8 (8)
       NSGrammaticalPartOfSpeechNoun = 9 (9)
       NSGrammaticalPartOfSpeechConjunction = 10 (10)
       NSGrammaticalPartOfSpeechNumeral = 11 (11)
       NSGrammaticalPartOfSpeechInterjection = 12 (12)
       NSGrammaticalPartOfSpeechPreposition = 13 (13)
       NSGrammaticalPartOfSpeechAbbreviation = 14 (14)
   Enum: 'enum NSDirectoryEnumerationOptions'[[ ulong  ]]
       NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1 (1)
       NSDirectoryEnumerationSkipsPackageDescendants = 2 (2)
       NSDirectoryEnumerationSkipsHiddenFiles = 4 (4)
       NSDirectoryEnumerationIncludesDirectoriesPostOrder = 8 (8)
       NSDirectoryEnumerationProducesRelativePathURLs = 16 (16)
   Enum: 'enum NSMeasurementFormatterUnitOptions'[[ ulong  ]]
       NSMeasurementFormatterUnitOptionsProvidedUnit = 1 (1)
       NSMeasurementFormatterUnitOptionsNaturalScale = 2 (2)
       NSMeasurementFormatterUnitOptionsTemperatureWithoutUnit = 4 (4)
   Enum: 'enum MTLBlitOption'[[ ulong  ]]
       MTLBlitOptionNone = 0 (0)
       MTLBlitOptionDepthFromDepthStencil = 1 (1)
       MTLBlitOptionStencilFromDepthStencil = 2 (2)
       MTLBlitOptionRowLinearPVRTC = 4 (4)
   Enum: 'enum NSLinguisticTaggerUnit'[[ long  ]]
       NSLinguisticTaggerUnitWord = 0 (0)
       NSLinguisticTaggerUnitSentence = 1 (1)
       NSLinguisticTaggerUnitParagraph = 2 (2)
       NSLinguisticTaggerUnitDocument = 3 (3)
   Enum: 'enum MTLWinding'[[ ulong  ]]
       MTLWindingClockwise = 0 (0)
       MTLWindingCounterClockwise = 1 (1)
   Enum: 'enum MTLCullMode'[[ ulong  ]]
       MTLCullModeNone = 0 (0)
       MTLCullModeFront = 1 (1)
       MTLCullModeBack = 2 (2)
   Enum: 'enum MTLFunctionType'[[ ulong  ]]
       MTLFunctionTypeVertex = 1 (1)
       MTLFunctionTypeFragment = 2 (2)
       MTLFunctionTypeKernel = 3 (3)
       MTLFunctionTypeVisible = 5 (5)
       MTLFunctionTypeIntersection = 6 (6)
       MTLFunctionTypeMesh = 7 (7)
       MTLFunctionTypeObject = 8 (8)
   Enum: 'enum NSFileManagerUnmountOptions'[[ ulong  ]]
       NSFileManagerUnmountAllPartitionsAndEjectDisk = 1 (1)
       NSFileManagerUnmountWithoutUI = 2 (2)
   Enum: 'enum MTLSamplerMinMagFilter'[[ ulong  ]]
       MTLSamplerMinMagFilterNearest = 0 (0)
       MTLSamplerMinMagFilterLinear = 1 (1)
   Enum: 'enum MTLResourceOptions'[[ ulong  ]]
       MTLResourceCPUCacheModeDefaultCache = 0 (0)
       MTLResourceCPUCacheModeWriteCombined = 1 (1)
       MTLResourceStorageModeShared = 0 (0)
       MTLResourceStorageModeManaged = 16 (16)
       MTLResourceStorageModePrivate = 32 (32)
       MTLResourceStorageModeMemoryless = 48 (48)
       MTLResourceHazardTrackingModeDefault = 0 (0)
       MTLResourceHazardTrackingModeUntracked = 256 (256)
       MTLResourceHazardTrackingModeTracked = 512 (512)
       MTLResourceOptionCPUCacheModeDefault = 0 (0)
       MTLResourceOptionCPUCacheModeWriteCombined = 1 (1)
   Enum: 'enum NSURLCacheStoragePolicy'[[ ulong  ]]
       NSURLCacheStorageAllowed = 0 (0)
       NSURLCacheStorageAllowedInMemoryOnly = 1 (1)
       NSURLCacheStorageNotAllowed = 2 (2)
   Enum: 'enum MTLMultisampleStencilResolveFilter'[[ ulong  ]]
       MTLMultisampleStencilResolveFilterSample0 = 0 (0)
       MTLMultisampleStencilResolveFilterDepthResolvedSample = 1 (1)
RECORDS:
   Record: '__CFRunLoop'
   Record: '_NSZone'
   Record: '__IOSurface'
   Record: 'MTLResourceID'
       Field: _impl -- [[ ulonglong  ]]
   Record: 'MTLViewport'
       Field: originX -- [[ double  ]]
       Field: originY -- [[ double  ]]
       Field: width -- [[ double  ]]
       Field: height -- [[ double  ]]
       Field: znear -- [[ double  ]]
       Field: zfar -- [[ double  ]]
   Record: '_MTLPackedFloat3'
   Record: 'MTLIndirectCommandBufferExecutionRange'
       Field: location -- [[ uint  ]]
       Field: length -- [[ uint  ]]
   Record: 'MTLClearColor'
       Field: red -- [[ double  ]]
       Field: green -- [[ double  ]]
       Field: blue -- [[ double  ]]
       Field: alpha -- [[ double  ]]
   Record: '__SecTrust'
   Record: 'MTLVertexAmplificationViewMapping'
       Field: viewportArrayIndexOffset -- [[ uint  ]]
       Field: renderTargetArrayIndexOffset -- [[ uint  ]]
   Record: 'MTLSizeAndAlign'
       Field: size -- [[ ulong  ]]
       Field: align -- [[ ulong  ]]
   Record: 'MTLScissorRect'
       Field: x -- [[ ulong  ]]
       Field: y -- [[ ulong  ]]
       Field: width -- [[ ulong  ]]
       Field: height -- [[ ulong  ]]
   Record: 'MTLTextureSwizzleChannels'
       Field: red -- [[ ENUMERATION enum MTLTextureSwizzle]]
       Field: green -- [[ ENUMERATION enum MTLTextureSwizzle]]
       Field: blue -- [[ ENUMERATION enum MTLTextureSwizzle]]
       Field: alpha -- [[ ENUMERATION enum MTLTextureSwizzle]]
   Record: 'NSOperatingSystemVersion'
       Field: majorVersion -- [[ long  ]]
       Field: minorVersion -- [[ long  ]]
       Field: patchVersion -- [[ long  ]]
   Record: 'MTLSamplePosition'
       Field: x -- [[ float  ]]
       Field: y -- [[ float  ]]
   Record: 'MTLAccelerationStructureSizes'
       Field: accelerationStructureSize -- [[ ulong  ]]
       Field: buildScratchBufferSize -- [[ ulong  ]]
       Field: refitScratchBufferSize -- [[ ulong  ]]
   Record: '__SecIdentity'
   Record: '_NSRange'
       Field: location -- [[ ulong  ]]
       Field: length -- [[ ulong  ]]
   Record: 'MTLOrigin'
       Field: x -- [[ ulong  ]]
       Field: y -- [[ ulong  ]]
       Field: z -- [[ ulong  ]]
   Record: 'MTLSize'
       Field: width -- [[ ulong  ]]
       Field: height -- [[ ulong  ]]
       Field: depth -- [[ ulong  ]]
   Record: 'MTLRegion'
       Field: origin -- [[ RECORD MTLOrigin]]
       Field: size -- [[ RECORD MTLSize]]
   Record: 'NSDecimal'
       Field: _exponent -- [[ int  ]]
       Field: _length -- [[ uint  ]]
       Field: _isNegative -- [[ uint  ]]
       Field: _isCompact -- [[ uint  ]]
       Field: _reserved -- [[ uint  ]]
       Field: _mantissa -- [[ ARRAY ]] -> [[ ushort  ]]
   Record: 'NSFastEnumerationState'
       Field: state -- [[ ulong  ]]
       Field: itemsPtr -- [[ POINTER  (nullable) ]] -> [[ ID ]]
       Field: mutationsPtr -- [[ POINTER  (nullable) ]] -> [[ ulong  ]]
       Field: extra -- [[ ARRAY ]] -> [[ ulong  ]]
FUNCTIONS:
   Function: MTLCoordinate2DMake(float, float)
       RT: [[ RECORD MTLSamplePosition]]
       PARAM: x: [[ float  ]]
       PARAM: y: [[ float  ]]
   Function: MTLTextureSwizzleChannelsMake(MTLTextureSwizzle, MTLTextureSwizzle, MTLTextureSwizzle, MTLTextureSwizzle)
       RT: [[ RECORD MTLTextureSwizzleChannels]]
       PARAM: r: [[ ENUMERATION enum MTLTextureSwizzle]]
       PARAM: g: [[ ENUMERATION enum MTLTextureSwizzle]]
       PARAM: b: [[ ENUMERATION enum MTLTextureSwizzle]]
       PARAM: a: [[ ENUMERATION enum MTLTextureSwizzle]]
   Function: MTLRegionMake1D(NSUInteger, NSUInteger)
       RT: [[ RECORD MTLRegion]]
       PARAM: x: [[ ulong  ]]
       PARAM: width: [[ ulong  ]]
   Function: MTLClearColorMake(double, double, double, double)
       RT: [[ RECORD MTLClearColor]]
       PARAM: red: [[ double  ]]
       PARAM: green: [[ double  ]]
       PARAM: blue: [[ double  ]]
       PARAM: alpha: [[ double  ]]
   Function: MTLIndirectCommandBufferExecutionRangeMake(uint32_t, uint32_t)
       RT: [[ RECORD MTLIndirectCommandBufferExecutionRange]]
       PARAM: location: [[ uint  ]]
       PARAM: length: [[ uint  ]]
   Function: MTLSizeMake(NSUInteger, NSUInteger, NSUInteger)
       RT: [[ RECORD MTLSize]]
       PARAM: width: [[ ulong  ]]
       PARAM: height: [[ ulong  ]]
       PARAM: depth: [[ ulong  ]]
   Function: MTLRegionMake3D(NSUInteger, NSUInteger, NSUInteger, NSUInteger, NSUInteger, NSUInteger)
       RT: [[ RECORD MTLRegion]]
       PARAM: x: [[ ulong  ]]
       PARAM: y: [[ ulong  ]]
       PARAM: z: [[ ulong  ]]
       PARAM: width: [[ ulong  ]]
       PARAM: height: [[ ulong  ]]
       PARAM: depth: [[ ulong  ]]
   Function: MTLSamplePositionMake(float, float)
       RT: [[ RECORD MTLSamplePosition]]
       PARAM: x: [[ float  ]]
       PARAM: y: [[ float  ]]
   Function: MTLIOFlushAndDestroyCompressionContext(MTLIOCompressionContext _Nonnull)
       RT: [[ ENUMERATION enum MTLIOCompressionStatus]]
       PARAM: context: [[ POINTER  (nonnull) ]] -> [[ void  ]]
   Function: MTLOriginMake(NSUInteger, NSUInteger, NSUInteger)
       RT: [[ RECORD MTLOrigin]]
       PARAM: x: [[ ulong  ]]
       PARAM: y: [[ ulong  ]]
       PARAM: z: [[ ulong  ]]
   Function: MTLPackedFloat3Make(float, float, float)
       RT: [[ RECORD _MTLPackedFloat3]]
       PARAM: x: [[ float  ]]
       PARAM: y: [[ float  ]]
       PARAM: z: [[ float  ]]
   Function: MTLCreateSystemDefaultDevice()
       RT: [[ POINTER  (nullable) ]] -> [[ ID<MTLDevice>]]
   Function: MTLCopyAllDevices()
       RT: [[ POINTER  (nonnull) ]] -> [[ INTERFACE NSArray]]
   Function: MTLRegionMake2D(NSUInteger, NSUInteger, NSUInteger, NSUInteger)
       RT: [[ RECORD MTLRegion]]
       PARAM: x: [[ ulong  ]]
       PARAM: y: [[ ulong  ]]
       PARAM: width: [[ ulong  ]]
       PARAM: height: [[ ulong  ]]
   Function: MTLIOCompressionContextDefaultChunkSize()
       RT: [[ ulong  ]]
   Function: MTLIOCompressionContextAppendData(MTLIOCompressionContext _Nonnull, const void * _Nonnull, size_t)
       RT: [[ void  ]]
       PARAM: context: [[ POINTER  (nonnull) ]] -> [[ void  ]]
       PARAM: data: [[ POINTER  (nonnull) ]] -> [[ void (const) ]]
       PARAM: size: [[ ulong  ]]
   Function: MTLIOCreateCompressionContext(const char * _Nonnull, MTLIOCompressionMethod, size_t)
       RT: [[ POINTER  (nullable) ]] -> [[ void  ]]
       PARAM: path: [[ POINTER  (nonnull) ]] -> [[ schar (const) ]]
       PARAM: type: [[ ENUMERATION enum MTLIOCompressionMethod]]
       PARAM: chunkSize: [[ ulong  ]]
